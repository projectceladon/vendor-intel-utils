From a5645b1e30e7878c2cfa8c1bab36844c08e29d3d Mon Sep 17 00:00:00 2001
From: sgnanase <sundar.gnanasekaran@intel.com>
Date: Thu, 19 Jul 2018 15:21:46 +0530
Subject: [PATCH 3/3] [CELADON] createcraffimage.py: No such file or directory
 Tracked-On:

Change-Id: I812d36a66cab1c3d9107fd0b3a285ecb3dc958f4
---
 4.patch                            | 1233 ++++++++++++++++++++++++++++++++++++
 createcraffimage.py                |  122 ++++
 simics-tools/.package-list         |    3 +
 simics-tools/bin/craff             |    5 +
 simics-tools/linux64/bin/craff     |  Bin 0 -> 364528 bytes
 simics-tools/scripts/find-paths.sh |   40 ++
 simics-tools/scripts/host-type.sh  |   69 ++
 simics-tools/scripts/host_type.py  |   40 ++
 8 files changed, 1512 insertions(+)
 create mode 100644 4.patch
 create mode 100755 createcraffimage.py
 create mode 100644 simics-tools/.package-list
 create mode 100755 simics-tools/bin/craff
 create mode 100755 simics-tools/linux64/bin/craff
 create mode 100755 simics-tools/scripts/find-paths.sh
 create mode 100755 simics-tools/scripts/host-type.sh
 create mode 100755 simics-tools/scripts/host_type.py

diff --git a/4.patch b/4.patch
new file mode 100644
index 0000000..f4e8871
--- /dev/null
+++ b/4.patch
@@ -0,0 +1,1233 @@
+From b90a5edb49658a199c0f60e7c8bb86882a66a35b Mon Sep 17 00:00:00 2001
+From: Ming Tan <ming.tan@intel.com>
+Date: Fri, 15 Jun 2018 09:32:34 +0800
+Subject: [PATCH] Add the create_gpy_image.py. It is used to create a full disk
+ image.
+
+The full disk image can be used as a USB live boot image, or Simulate
+disk image.
+
+Jira: https://01.org/jira/browse/CEL-13
+Test: Test it in KBL NUC.
+
+The original author is Perrot, ThomasX <thomasx.perrot@intel.com>.
+
+Signed-off-by: Perrot, ThomasX <thomasx.perrot@intel.com>
+Signed-off-by: Claude Brouat <claude.brouat@intel.com>
+Signed-off-by: Leo Sartre <leox.sartre@intel.com>
+Signed-off-by: Charles Johnson <charles.f.johnson@intel.com>
+Signed-off-by: Jeremy Compostella <jeremy.compostella@intel.com>
+Signed-off-by: roger feng <roger.feng@intel.com>
+Signed-off-by: Benoit Fradin <benoit.fradin@intel.com>
+Signed-off-by: geoffroy.weisenhorn <weisenhorn.geoffroy@intel.com>
+Signed-off-by: gaohuadx <huadongx.gao@intel.com>
+Signed-off-by: gli41 <genshen.li@intel.com>
+Signed-off-by: kwen <kui.wen@intel.com>
+Signed-off-by: Chen, Xihua <xihua.chen@intel.com>
+Signed-off-by: Fu Yonghua <yonghuax.fu@intel.com>
+Signed-off-by: Regnier, Philippe <philippe.regnier@intel.com>
+Signed-off-by: yonghuax.fu@intel.com
+Signed-off-by: Chen, ZhiminX <zhiminx.chen@intel.com>
+Signed-off-by: biyilix <biyix.li@intel.com>
+Signed-off-by: zhouji3x <jianfengx.zhou@intel.com>
+Signed-off-by: Ming Tan <ming.tan@intel.com>
+---
+ create_gpt_image.py | 1189 +++++++++++++++++++++++++++++++++++++++++++++++++++
+ 1 file changed, 1189 insertions(+)
+ create mode 100755 create_gpt_image.py
+
+diff --git a/create_gpt_image.py b/create_gpt_image.py
+new file mode 100755
+index 0000000..c7ee6b0
+--- /dev/null
++++ b/create_gpt_image.py
+@@ -0,0 +1,1189 @@
++#!/usr/bin/env python
++# -*- coding: utf-8; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
++
++# Copyright (c) 2014, Intel Corporation.
++# Author: Perrot, ThomasX <thomasx.perrot@intel.com>
++#
++# This program is free software; you can redistribute it and/or modify it
++# under the terms and conditions of the GNU General Public License,
++# version 2, as published by the Free Software Foundation.
++#
++# This program is distributed in the hope it will be useful, but WITHOUT
++# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
++# more details.
++
++"""
++Script to create a GPT/UEFI image or to show information it contains.
++"""
++
++from sys import version_info
++
++if version_info < (2, 7, 3):
++    exit('Python version must be 2.7.3 or higher')
++
++from logging import (debug, info, error, DEBUG, INFO, getLogger,
++                     basicConfig)
++from argparse import ArgumentParser
++from os import remove, stat
++from os.path import isfile, normcase, normpath, realpath
++from struct import unpack, pack
++from uuid import UUID, uuid4
++from binascii import crc32
++from re import compile as re_compile
++from collections import namedtuple
++from ConfigParser import SafeConfigParser, ParsingError, NoOptionError
++from math import floor, log
++
++
++class MBRInfos(object):
++    """
++    Named tuple of MBR information.
++
++    Raw MBR is a little-endian struct with:
++    +--------------------------------------------+
++    | name         | type    | size     | format |
++    +==============+=========+==========+========+
++    | boot         | int     | 4        | I      |
++    +--------------+---------+----------+--------+
++    | OS type      | int     | 4        | I      |
++    +--------------+---------+----------+--------+
++    | starting LBA | uint    | 4        | I      |
++    +--------------+---------+----------+--------+
++    | size in LBA  | uint    | 4        | I      |
++    +--------------+---------+----------+--------+
++    | dummy 1      | char[]  | 430 char | 430s   |
++    +--------------+---------+----------+--------+
++    | dummy 2      | char[]  | 16 char  | 16s    |
++    +--------------+---------+----------+--------+
++    | dummy 3      | char[]  | 48 char  | 48s    |
++    +--------------+---------+----------+--------+
++    | sign         | char[]  | 2 char   | 2s     |
++    +--------------+---------+----------+--------+
++    """
++    __slots__ = ('block_size', 'raw', 'boot', 'os_type', 'lba_start',
++                 'lba_size', 'dummy_1', 'dummy_2', 'dummy_3', 'sign')
++
++    _FMT = '<IIII430s16s48s2s'
++
++    _PART_ENTRY = ('\x00\x00\x00\x00\xee\x00\x00\x00\x01\x00\x00\x00\x00\x00'
++                   '\xee\x00')
++
++    def __init__(self, block_size=512):
++        self.block_size = block_size
++        self.raw = ''
++
++        # TODO use decorators and properties to subtitute by r/w access in the
++        # raw attribute with pack and unpack function all these attributes
++        self.boot = 0
++        self.os_type = 0
++        self.os_type = 0
++        self.lba_start = 0
++        self.lba_size = 0
++        self.dummy_1 = ''
++        self.dummy_2 = ''
++        self.dummy_3 = ''
++        self.sign = '\x55\xaa'
++
++    def __repr__(self):
++        # converts the size
++        if self.lba_size > 0:
++            units = ('KBytes', 'MBytes', 'GBytes')
++            index = int(floor(log(self.lba_size, 1024)))
++            computed_size = round(self.lba_size / (1024**index), 2)
++            human_size = '{0} {1}'.format(computed_size, units[index])
++        else:
++            human_size = '0 Bytes'
++
++        chs_starting = self.boot & 0x00FFFFFF
++        chs_ending = self.os_type & 0x00FFFFFF
++
++        result = 'MBR:\n'
++        result = '{0}\tboot: 0x{1:02x}\n'.format(result, self.boot)
++        result = '{0}\tOS type: 0x{1:02x}\n'.format(result, self.os_type)
++        result = '{0}\tCHS : starting {1:d}, ending {2:d}\n' \
++            .format(result, chs_starting, chs_ending)
++        result = '{0}\tLBA: start {1:d}, size {2:d}\n' \
++            .format(result, self.lba_start, self.lba_size)
++        result = '{0}\tsize: {1}\n'.format(result, human_size)
++
++        return result
++
++    def read(self, img_file, offset=0):
++        """
++        Used to extract information of GPT raw obtains after reading an image.
++        """
++        # reads the image file
++        img_file.seek(offset)
++        # MBR size is 512 Bytes, so that img_file.read is a fixed size 512 Bytes
++        # fix the issue when block_size is seted 4096 by using UFS
++        if self.block_size > 512:
++            self.raw = img_file.read(512)
++        else:
++            self.raw = img_file.read(self.block_size)
++
++        # unpacks the raw MBR to a named tuple
++        self.boot, self.os_type, self.lba_start, self.lba_size, self.dummy_1, \
++            self.dummy_2, self.dummy_3, self.sign \
++            = unpack(MBRInfos._FMT, self.raw)
++
++    def write(self, img_file, offset=0):
++        """
++        Used to write MBR in an image file
++        """
++        self.raw = pack(MBRInfos._FMT, self.boot, self.os_type,
++                        self.lba_start, self.lba_size, '',
++                        MBRInfos._PART_ENTRY, '', self.sign)
++        img_file.seek(offset)
++        img_file.write(self.raw)
++
++
++class GPTHeaderInfos(object):
++    """
++    Named tuple of GPT/UEFI header information
++
++    GPT/UEFI header format:
++    +-----------+----------+--------------------------------------------------+
++    | offset    | Length   | Contents                                         |
++    +===========+==========+==================================================+
++    | 0 (0x00)  | 8 bytes  | Signature ('EFI PART',                           |
++    |           |          | 45h 46h 49h 20h 50h 41h 52h 54h)                 |
++    +-----------+----------+--------------------------------------------------+
++    | 8 (0x08)  | 4 bytes  | Revision (for GPT version 1.0 (through at least  |
++    |           |          | UEFI version 2.3.1), the value is                |
++    |           |          | 00h 00h 01h 00h)                                 |
++    +-----------+----------+--------------------------------------------------+
++    | 12 (0x0C) | 4 bytes  | Header size in little endian (in bytes,          |
++    |           |          | usually 5Ch 00h 00h 00h meaning 92 bytes)        |
++    +-----------+----------+--------------------------------------------------+
++    | 16 (0x10) | 4 bytes  | CRC32 of header (offset +0 up to header size),   |
++    |           |          | with this field zeroed during calculation        |
++    +-----------+----------+--------------------------------------------------+
++    | 20 (0x14) | 4 bytes  | Reserved; must be zero                           |
++    +-----------+----------+--------------------------------------------------+
++    | 24 (0x18) | 8 bytes  | Current LBA (location of this header copy)       |
++    +-----------+----------+--------------------------------------------------+
++    | 32 (0x20) | 8 bytes  | Backup LBA (location of the other header copy)   |
++    +-----------+----------+--------------------------------------------------+
++    | 40 (0x28) | 8 bytes  | First usable LBA for partitions (primary         |
++    |           |          | partition table last LBA + 1)                    |
++    +-----------+----------+--------------------------------------------------+
++    | 48 (0x30) | 8 bytes  | Last usable LBA (secondary partition table first |
++    |           |          | LBA - 1)                                         |
++    +-----------+----------+--------------------------------------------------+
++    | 56 (0x38) | 16 bytes | Disk GUID (also referred as UUID on UNIXes)      |
++    +-----------+----------+--------------------------------------------------+
++    | 72 (0x48) | 8 bytes  | Starting LBA of array of partition entries       |
++    |           |          | (always 2 in primary copy)                       |
++    +-----------+----------+--------------------------------------------------+
++    | 80 (0x50) | 4 bytes  | Number of partition entries in array             |
++    +-----------+----------+--------------------------------------------------+
++    | 84 (0x54) | 4 bytes  | Size of a single partition entry (usually 128)   |
++    +-----------+----------+--------------------------------------------------+
++    | 88 (0x58) | 4 bytes  | CRC32 of partition array                         |
++    +-----------+----------+--------------------------------------------------+
++    | 92 (0x5C) | *        | Reserved; must be zeroes for the rest of the     |
++    |           |          | block (420 bytes for a sector size of 512 bytes  |
++    |           |          | but can be more with larger sector sizes)        |
++    +===========+==========+==================================================+
++    | LBA size  | Total    |                                                  |
++    +-----------+----------+--------------------------------------------------+
++    """
++    __slots__ = ('raw', 'sign', 'rev', 'size', 'crc', 'lba_current',
++                 'lba_backup', 'lba_first', 'lba_last', 'uuid', 'lba_start',
++                 'table_length', 'entry_size', 'table_crc')
++
++    _FMT = '<8s4sII4xQQQQ16sQIII'
++
++    def __init__(self, img_size=2147483648, block_size=512, size=92):
++        self.raw = ''
++
++        # TODO use decorators and properties to subtitute by r/w access in the
++        # raw attribute with pack and unpack function all these attributes
++        self.sign = 'EFI PART'
++        self.rev = '\x00\x00\x01\x00'
++        self.size = size
++
++        # sets the length and the entry size of the GPT partition table with
++        # their default values
++        self.table_length = 128
++        self.entry_size = 128
++
++        # calculates the size of image in block
++        size_in_block = img_size / block_size
++
++        # sets the lba backup at the value of first lba used by GPT backup
++        self.lba_backup = size_in_block - 1
++
++        # calculates the size of the partition table in block
++        table_size = (self.table_length * self.entry_size) / block_size
++
++        # sets the lba first at the first usable lba for a partition
++        self.lba_first = table_size + 2
++
++        # sets last lba at last usable lba for a partition
++        self.lba_last = size_in_block - 2 - table_size
++
++        # generates an unique disk GUID
++        self.uuid = uuid4().bytes_le
++
++        # sets lba start at the value of first lba used by GPT header
++        self.lba_start = size_in_block - 1 - table_size
++
++        self.crc = 0
++        self.lba_current = 0
++        self.table_crc = 0
++
++    def __repr__(self):
++        result = 'GPT Header:\n'
++        result = '{0}\tsignature: {1}\n'.format(result, self.sign)
++        result = '{0}\trevision: {1}\n'.format(result, self.rev)
++        result = '{0}\tsize: {1} bytes\n'.format(result, self.size)
++        result = '{0}\tCRC32: {1}\n'.format(result, self.crc)
++
++        result = '{0}\tLBAs:\n'.format(result)
++        result = '{0}\t\t current: {1}\n'.format(result, self.lba_current)
++        result = '{0}\t\t backup: {1}\n'.format(result, self.lba_backup)
++        result = '{0}\t\t first usable: {1}\n'.format(result, self.lba_first)
++        result = ('{0}\t\t last usable: {1} - {2}\n'
++                  .format(result, self.lba_last, self.lba_start))
++
++        result = ('{0}Disk UUID: {1}\n'
++                  .format(result, UUID(bytes_le=self.uuid)))
++
++        result = '{0}partition entries:\n'.format(result)
++        result = '{0}\tstarting LBA: {1}\n'.format(result, self.lba_start)
++        result = ('{0}\tnumber of partition entries: {1}\n'
++                  .format(result, self.table_length))
++        result = ('{0}\tsize of a single partition: {1}\n'
++                  .format(result, self.entry_size))
++        result = ('{0}\tCRC32 of partition array: {1}\n'
++                  .format(result, self.table_crc))
++
++        return result
++
++    def read(self, img_file, offset):
++        """
++        Used to extract information of raw gpt obtains after reading an image
++        """
++
++        # reads the image file
++        img_file.seek(offset)
++        self.raw = img_file.read(self.size)
++
++        # unpacks the raw GPT header of the image file to a named tuple
++        self.sign, self.rev, self.size, self.crc, self.lba_current, \
++            self.lba_backup, self.lba_first, self.lba_last, self.uuid, \
++            self.lba_start, self.table_length, self.entry_size, \
++            self.table_crc = unpack(GPTHeaderInfos._FMT, self.raw)
++
++    def write(self, img_file, offset, block_size):
++        """
++        Used to write GPT header and backup in an image file
++        """
++        self.raw = pack(GPTHeaderInfos._FMT, self.sign, self.rev,
++                        self.size, 0, 1, self.lba_backup,
++                        self.lba_first, self.lba_last, self.uuid,
++                        2, self.table_length, self.entry_size, 0)
++
++        backup_raw = pack(GPTHeaderInfos._FMT, self.sign, self.rev,
++                          self.size, 0, self.lba_backup, 1,
++                          self.lba_first, self.lba_last, self.uuid,
++                          self.lba_start, self.table_length,
++                          self.entry_size, 0)
++
++        # writes a new GPT header
++        img_file.seek(offset)
++        img_file.write(self.raw)
++
++        # writes zero on unused blocks of GPT header
++        raw_stuffing = '\x00' * (block_size - len(self.raw))
++        img_file.write(raw_stuffing)
++
++        # saves the end of the GPT header
++        gpt_header_end = img_file.tell()
++
++        # writes a new GPT backup
++        backup_position = self.lba_backup * block_size
++        img_file.seek(backup_position)
++        img_file.write(backup_raw)
++
++        # writes zero on unused blocks of GPT backup
++        img_file.write(raw_stuffing)
++
++        # sets the read pointer at the end of GPT header wrote
++        img_file.seek(gpt_header_end)
++
++
++class PartTableInfos(list):
++    """
++    The list of partition table entries
++    """
++    __slots__ = ('raw')
++
++    def __init__(self):
++        super(PartTableInfos, self).__init__()
++        self.raw = ''
++
++    def __repr__(self):
++        result = 'Partitions table:\n'
++        for entry in self:
++            if UUID(bytes_le=entry.type) == \
++                    UUID('00000000-0000-0000-0000-000000000000'):
++                continue
++            result = '{0}{1}'.format(result, entry)
++
++        return result
++
++    def read(self, img_file, offset, length, entry_size):
++        """
++        Read the partition table from a GPT/UEFI image
++        """
++        img_file.seek(offset)
++        self.raw = img_file.read(length * entry_size)
++
++        # reads each entry of partition table
++        for i in xrange(length):
++            entry = TableEntryInfos(i, entry_size)
++            entry.read(self.raw)
++            self.append(entry)
++
++    def write(self, img_file, offset, entry_size, tlb_infos, last_usable):
++        """
++        Used to write GPT partitions tables in an image file
++        """
++        # erases the partition table entries
++        self = []
++
++        # writes all new partition entries in GPT header
++        current_offset = offset
++        for pos, part_info in enumerate(tlb_infos):
++            entry = TableEntryInfos(pos, entry_size)
++            entry.write(img_file, current_offset, part_info)
++            current_offset += entry_size
++            self.append(entry)
++
++        # copies all partition entries wrote from GPT header to
++        # the GPT backup
++        img_file.seek(offset)
++        raw_entries_size = current_offset - offset
++        raw_entries = img_file.read(raw_entries_size)
++        img_file.seek(last_usable + 1)
++        img_file.write(raw_entries)
++
++        img_file.seek(current_offset)
++
++
++class TableEntryInfos(object):
++    """
++    An entry of the partition table
++
++    UUID partition entry format:
++
++    +-----------+-----------+-------------------------------------------------+
++    | Offset    | Length    | Content                                         |
++    +===========+===========+=================================================+
++    | 0  (0x00) | 16 bytes  | Partition type GUID                             |
++    +-----------+-----------+-------------------------------------------------+
++    | 16 (0x10) | 16 bytes  | Unique partition GUID                           |
++    +-----------+-----------+-------------------------------------------------+
++    | 32 (0x20) | 8 bytes   | First LBA (little endian)                       |
++    +-----------+-----------+-------------------------------------------------+
++    | 40 (0x28) | 8 bytes   | Last LBA (inclusive, usually odd)               |
++    +-----------+-----------+-------------------------------------------------+
++    | 48 (0x30) | 8 bytes   | Attribute flags (e.g. bit 60 denotes read-only) |
++    +-----------+-----------+-------------------------------------------------+
++    | 56 (0x38) | 72 bytes  | Partition name (36 UTF-16LE code units)         |
++    +===========+===========+=================================================+
++    | Total     | 128 bytes |                                                 |
++    +-----------+-----------+-------------------------------------------------+
++    """
++    __slots__ = ('pos', 'size', 'raw', 'type', 'uuid', 'lba_first',
++                 'lba_last', 'attr', 'name')
++
++    _FMT = '<16s16sQQQ72s'
++
++    def __init__(self, pos, size):
++        self.pos = pos
++        self.size = size
++        self.raw = ''
++
++        self.type = ''
++        self.uuid = ''
++        self.lba_first = 0
++        self.lba_last = 0
++        self.attr = 0
++        self.name = ''
++
++    def __repr__(self):
++        result = 'UUID partition entry {0}\n'.format(self.pos)
++        result = '\t{0}type: {1}\n'.format(result, UUID(bytes_le=self.type))
++        result = '\t{0}UUID: {1}\n'.format(result, UUID(bytes_le=self.uuid))
++        result = '\t{0}lfirst LBA: {1}\n'.format(result, self.lba_first)
++        result = '\t{0}last LBA: {1}\n'.format(result, self.lba_last)
++        result = '\t{0}attribute flags: 0x{1:08x}\n'.format(result, self.attr)
++        result = '\t{0}name: {1}\n'.format(result,
++                                           self.name.decode('utf-16le'))
++        result = '\t{0}size: {1}\n'.format(result,
++                                           self.lba_last + 1 - self.lba_first)
++
++        return result
++
++    def read(self, raw_table):
++        """
++        Read a partition table entry from a GPT/UEFI image
++        """
++        # computes the start and the end of the entry in the partition table
++        raw_entry_start = self.pos * self.size
++        raw_entry_end = (self.pos + 1) * self.size
++        self.raw = raw_table[raw_entry_start:raw_entry_end]
++
++        # unpacks the raw partition table entry read to a named tuple
++        self.type, self.uuid, self.lba_first, self.lba_last, self.attr, \
++            self.name = unpack(TableEntryInfos._FMT, self.raw)
++
++    def write(self, img_file, offset, entry_info):
++        """
++        Use to write a partition table entries in an image file
++        """
++        types = {
++            'Unused': '00000000-0000-0000-0000-000000000000',
++            'esp': 'C12A7328-F81F-11D2-BA4B-00A0C93EC93B',
++            'fat': '024DEE41-33E7-11D3-9D69-0008C781F39F',
++            'bootloader': '2568845D-2332-4675-BC39-8FA5A4748D15',
++            'boot': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++            'boot_a': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++            'boot_b': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++            'recovery': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++            'misc': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++            'metadata': '5808C8AA-7E8F-42E0-85D2-E1E90434CFB3',
++            'linux': {
++                      'xen_dom0' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'xen_misc' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'xen_guest' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'xen_rootfs' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'sos_boot' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'uos_boot' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'android_guest' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'sos_rootfs' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'uos_rootfs' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'vbmeta': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'vbmeta_a': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'vbmeta_b': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'multiboot' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'multiboot_a' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'multiboot_b' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'tos' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'tos_a' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'tos_b' : '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'system': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'system_a': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'system_b': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'bootloader': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'bootloader_a': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'bootloader_b': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'bootloader2': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'bldr_utils': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'vendor': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'vendor_a': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'vendor_b': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'cache': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'data': '0fc63daf-8483-4772-8e79-3d69d8477de4',
++                      'persistent': ('ebc597d0-2053-4b15-8b64-'
++                                             'e0aac75f4db1'),
++                      'factory': ('0fc63daf-8483-4772-8e79-'
++                                          '3d69d8477de4'),
++                      'config': ('0fc63daf-8483-4772-8e79-'
++                                         '3d69d8477de4'),
++                      'teedata': '0fc63daf-8483-4772-8e79-3d69d8477de4'
++                      }
++            }
++
++        # checks if the partition type used is available
++        if entry_info.type in types:
++            if isinstance(types[entry_info.type], dict):
++                tuuid = UUID(types[entry_info.type][entry_info.label]).bytes_le
++            else:
++                tuuid = UUID(types[entry_info.type]).bytes_le
++        else:
++            error('Unknown partition type: {0} {1}'
++                  .format(entry_info.label, entry_info.type))
++            exit(-1)
++
++        # sets the partition uuid
++        puuid = UUID(entry_info.uuid).bytes_le
++        last = int(entry_info.size) + int(entry_info.begin) - 1
++
++        self.raw = pack(TableEntryInfos._FMT, tuuid, puuid,
++                        int(entry_info.begin), last, 0,
++                        entry_info.label.encode('utf-16le'))
++
++        img_file.seek(offset)
++        img_file.write(self.raw)
++
++
++TLB_INFO = namedtuple('TLB_INFO', ('begin', 'size', 'type', 'uuid', 'label'))
++
++
++class TLBInfos(list):
++    """
++    TLB information extracted from the TLB partition file
++    """
++    __slots__ = ('path', 'format', 'slotab')
++
++    def __init__(self, path):
++        super(TLBInfos, self).__init__()
++        self.path = path
++        self._set_format()
++        self.slotab = 0
++
++    def __repr__(self):
++        result = ''
++
++        for item in self:
++            line = ('add -b {0} -s {1} -t {2} -u {3} -l {4}'
++                    '\n').format(item.begin, item.size, item.type, item.uuid,
++                                 item.label)
++            result = '{0}{1}'.format(result, line)
++
++        return result
++
++    def _set_format(self):
++        """
++        Identify the format of the TLB partition file
++        """
++        self.format = 'ini'
++
++        with open(self.path, 'r') as tlb_file:
++            for line in tlb_file:
++                # determines the type of partition table file
++                # If file contains "partition_table=gpt" pattern then
++                # it's a JSON TLB partition file,
++                # else it's probably an INI TLB partition file.
++                # Parser will then check if the file is correct.
++                tlb_file_type_found = line.find("partition_table=gpt")
++
++                if tlb_file_type_found != -1:
++                    self.format = 'tbl'
++                    break
++
++        debug('Partition table format: {0}'.format(self.format))
++
++    def _read_json(self, block_size):
++        """
++        Used to read a JSON TLB partition file
++        """
++        with open(self.path, 'r') as tlb_file:
++            re_parser = re_compile(r'^add\s-b\s(?P<begin>\w+)\s-s\s'
++                                   '(?P<size>[\w$()-]+)\s-t\s'
++                                   '(?P<type>\w+)\s-u\s'
++                                   '(?P<uuid>[\w-]+)\s'
++                                   '-l\s(?P<label>\w+)'
++                                   )
++            # reads the JSON TLB file to instantiate a the TLBInfos
++            for line in tlb_file:
++                debug('TLB reading line: {0}'.format(line))
++                parsed_line = re_parser.match(line)
++
++                if parsed_line:
++                    debug('TLB parsed line: {0}'.format(line))
++                    debug('\t begin: {0}'
++                          .format(parsed_line.group('begin')))
++                    debug('\t size: {0}'.format(parsed_line.group('size')))
++                    debug('\t type: {0}'.format(parsed_line.group('type')))
++                    debug('\t uuid: {0}'.format(parsed_line.group('uuid')))
++                    debug('\t label: {0}'
++                          .format(parsed_line.group('label')))
++
++                    self.append(TLB_INFO(*parsed_line.groups()))
++
++                else:
++                    debug('TLB not parsed line: {0}'.format(line))
++
++    def _preparse_partitions(self, cfg):
++        """
++        Taken from gpt_ini2bin.py
++        """
++        with open(self.path, 'r') as f:
++            data = f.read()
++
++            try:
++                self.slotab = cfg.getint('base', 'nb_slot')
++            except NoOptionError:
++                self.slotab = 0
++
++            partitions = cfg.get('base', 'partitions').split()
++
++            for l in data.split('\n'):
++                words = l.split()
++                if len(words) > 2:
++                    if words[0] == 'partitions' and words[1] == '+=':
++                        partitions += words[2:]
++        return partitions
++
++    def _read_ini(self, block_size):
++        """
++        Used to read a INI TLB partition file
++        """
++        # sets a parser to read the INI TLB partition file
++        cfg = SafeConfigParser()
++        try:
++            cfg.read(self.path)
++
++        except ParsingError:
++            error('Invalid TLB partition file: {0}'.format(self.path))
++            exit(-1)
++
++        # gpt.ini is not a "standard" ini file because keys are not uniques
++        partitionList = self._preparse_partitions(cfg)
++
++        # sets the start lba value which the read value or uses the default
++        # value
++        try:
++            start_lba_prev = cfg.getint('base', 'start_lba')
++            debug('The start_lab value read in the TLB partition file')
++
++        except NoOptionError:
++            # set start lba to offset 1M bytes, align with kernelflinger
++            start_lba_prev = 1024 * 1024 / block_size
++            info('The start_lab value is undefined in the TLB partition file,'
++                 ' the default value is used: {0}'.format(start_lba_prev))
++
++        # contructs the TLB info
++        for part in partitionList:
++            begin = start_lba_prev
++            partname = 'partition.{0}'.format(part)
++            readlen = cfg.getint(partname, 'len')
++            nb_slots = 0
++
++            if readlen > 0:
++                size = (readlen * 1024 * 1024) / block_size
++                start_lba_prev = begin + size
++            else:
++                size = readlen
++
++            ptype = cfg.get(partname, 'type')
++            uuid = str(uuid4())
++            label = cfg.get(partname, 'label')
++
++            if self.slotab == 2:
++                try:
++                    if cfg.get(partname, 'has_slot') == 'true' :
++                        nb_slots = 2
++                except NoOptionError:
++                    nb_slots = 0
++
++            if nb_slots == 0:
++                self.append(TLB_INFO(begin, size, ptype, uuid, label))
++            else:
++                self.append(TLB_INFO(begin, size, ptype, uuid, label+'_a'))
++                uuid_b = str(uuid4())
++                self.append(TLB_INFO(begin+size, size, ptype, uuid_b, label+'_b'))
++
++
++    def read(self, block_size):
++        """
++        Read a TLB file
++        """
++        # reads the JSON TLB partition file
++        if self.format == 'tbl':
++            self._read_json(block_size)
++
++        # reads the INI TLB partition file
++        else:
++            self._read_ini(block_size)
++
++    def _recompute_partition_begin(self):
++        """
++        Ensure that partitions do not overlap
++        """
++        new_begin = -1
++        for pos, entry in enumerate(self):
++            if new_begin == -1:
++                new_begin = self[pos].begin + self[pos].size
++                continue
++            self[pos] = self[pos]._replace(begin=new_begin)
++            new_begin += self[pos].size
++
++    def compute_last_size_entry(self, img_size, block_size, entry_size,
++                                table_length):
++        """
++        Compute the size of the last TLB entry
++        """
++        last = -1
++        # reserve the size for primary and secondary gpt
++        MB = 1024 * 1024
++        remaining_size = (img_size - MB) / block_size - 2048
++        for pos, entry in enumerate(self):
++            debug('Entry size: {0}'.format(entry.size))
++            if entry.size < 0:
++                if (last == -1):
++                    last = pos
++                    continue
++                else:
++                    error('Only one partition of size -1 allowed')
++                    exit(-1)
++            remaining_size -= entry.size
++
++        # if all entries size are already defined
++        if last == -1:
++            debug('All entry sizes are already defined.')
++            return
++
++        if remaining_size < 0:
++            error('The image size is too small regarding partition mapping.')
++            missing = -remaining_size * block_size
++            error('Missing at least: {0} Bytes.'.format(missing))
++            exit(-1)
++
++        # Update the size of the partition with -1 size and recompute
++        # the start of each partitions after it
++        self[last] = self[last]._replace(size=remaining_size)
++        self._recompute_partition_begin()
++
++
++class GPTImage(object):
++    """
++    GPT/UEFI image.
++    """
++    __slots__ = ('path', 'size', 'block_size', 'mbr',
++                 'gpt_header', 'table')
++
++    ANDROID_PARTITIONS = [
++        'xen_dom0',
++        'xen_misc',
++        'xen_guest',
++        'xen_rootfs',
++        'sos_boot',
++        'uos_boot',
++        'android_guest',
++        'sos_rootfs',
++        'uos_rootfs',
++        'vbmeta',
++        'multiboot',
++        'bootloader',
++        'bootloader2',
++        'bldr_utils',
++        'boot',
++        'recovery',
++        'misc',
++        'metadata',
++        'system',
++        'vendor',
++        'cache',
++        'data',
++        'persistent',
++        'factory',
++        'config',
++        'tos',
++        'teedata'
++        ]
++
++    def __init__(self, path, size='5G', block_size=512, gpt_header_size=92):
++
++        self.path = path
++        self.size = GPTImage.convert_size_to_bytes(size)
++        self.block_size = block_size
++
++        self.mbr = MBRInfos(self.block_size)
++        self.gpt_header = GPTHeaderInfos(self.size, block_size,
++                                         gpt_header_size)
++        self.table = PartTableInfos()
++
++    def __repr__(self):
++
++        result = 'Read EFI information from {0}.\n'.format(self.path)
++        result = '{0}{1}'.format(result, self.mbr)
++        result = '{0}{1}'.format(result, self.gpt_header)
++        result = '{0}{1}'.format(result, self.table)
++
++        return result
++
++    @classmethod
++    def convert_size_to_bytes(cls, str_size):
++        """
++        Checks and converts the image size to Bytes.
++        """
++        units = ('B', 'K', 'M', 'G')
++
++        unit = str_size[-1:].upper()
++
++        # the image size is invalid
++        if unit not in units:
++            error('The size of GPT/UEFI image use an invalid unit: {0}'
++                  .format(str_size))
++            exit(-1)
++
++        try:
++            # convert string size to an integer
++            value = int(str_size[:-1])
++        except ValueError:
++            error('The size of GPT/UEFI image is invalid: {0}'
++                  .format(str_size))
++            exit(-1)
++
++        # the value is negative
++        if value < 0:
++            error('The size of GPT/UEFI image is a negative value: {0}'
++                  .format(str_size))
++            exit(-1)
++
++        # the value is a Bytes
++        if unit == units[0]:
++            return int(str_size[:-1])
++
++        index = units.index(unit)
++        return value * 1024**index
++
++    def read(self):
++        """
++        Read information from a GPT/UEFI image
++        """
++        # opens and reads the image file
++        with open(self.path, 'rb') as img_file:
++
++            # reads the MBR of the image file
++            debug('Reading MBR from {0}'.format(self.path))
++            self.mbr.read(img_file)
++
++            # reads the GPT header of the image file
++            debug('Reading GPT header from {0}'.format(self.path))
++            offset = self.block_size
++            self.gpt_header.read(img_file, offset)
++
++            # reads the partition table of the image file
++            debug('Reading partition table from {0}'.format(self.path))
++            offset = self.block_size * self.gpt_header.lba_start
++            self.table.read(img_file, offset, self.gpt_header.table_length,
++                            self.gpt_header.entry_size)
++
++    def _write_crc(self, img_file):
++        """
++        Calculate and write CRC32 of GPT partition table, header and backup
++        """
++        # reads partition tables
++        img_file.seek(2 * self.block_size)
++        raw_table = img_file.read(self.gpt_header.table_length *
++                                  self.gpt_header.entry_size)
++        img_file.seek((self.gpt_header.lba_backup - 32) * self.block_size)
++        raw_backup_table = img_file.read(self.gpt_header.table_length *
++                                         self.gpt_header.entry_size)
++
++        # computes CRC 32 partition tables
++        table_crc = crc32(raw_table) & 0xffffffff
++        backup_table_crc = crc32(raw_backup_table) & 0xffffffff
++
++        # creates raw with the calculated CRC32 of partition tables
++        raw_table_crc = pack('<I', table_crc)
++        raw_backup_table_crc = pack('<I', backup_table_crc)
++
++        # writes the calculated CRC 32 of partition table in GPT header
++        img_file.seek(self.block_size + 88)
++        img_file.write(raw_table_crc)
++
++        # writes the calculated CRC 32 of partition table in GPT backup
++        img_file.seek(self.size - self.block_size + 88)
++        img_file.write(raw_backup_table_crc)
++
++        # reads the GPT header
++        img_file.seek(self.block_size)
++        raw_header = img_file.read(self.gpt_header.size)
++
++        # calcultates the CRC 32 of GPT header
++        header_crc = crc32(raw_header) & 0xffffffff
++
++        # creates a raw with the calculated CRC32 of GPT header
++        raw_header_crc = pack('<I', header_crc)
++
++        # writes calculated CRC 32 of GPT header
++        img_file.seek(self.block_size + 16)
++        img_file.write(raw_header_crc)
++
++        # reads the GPT backup
++        img_file.seek(self.size - self.block_size)
++        raw_backup = img_file.read(self.gpt_header.size)
++
++        # calcultates CRC 32 of GPT backup
++        backup_crc = crc32(raw_backup) & 0xffffffff
++
++        # creates a raw with the calculated CRC32 of GPT backup
++        raw_backup_crc = pack('<I', backup_crc)
++
++        # writes the calculated CRC 32 of GPT backup
++        img_file.seek(self.size - self.block_size + 16)
++        img_file.write(raw_backup_crc)
++
++    def _write_partitions(self, img_file, tlb_infos, binaries_path):
++        """
++        Used to write partitions of image with binary files given. Call by
++        write method
++        """
++        for tlb_part in tlb_infos:
++            # removes the prefix "android_"
++            truncated_label = tlb_part.label[0:]
++            # removes the postfix "_a" or "_b" for slotab cases
++            if (truncated_label[len(truncated_label)-2:] == '_a' or
++            truncated_label[len(truncated_label)-2:] == '_b') :
++                truncated_label = truncated_label[:-2]
++
++            # gives the path of binary used to write the partition
++            bin_path = binaries_path[truncated_label]
++
++            # computes the partition offset
++            offset = int(tlb_part.begin) * self.block_size
++
++            # no binary file used to build the partition
++            if bin_path == 'none':
++                line = '\0'
++                img_file.seek(offset)
++                img_file.write(line)
++                bin_size = 0
++                continue
++
++            # checks if partition size is greather or equal to the binary file
++            bin_size_in_bytes = stat(bin_path).st_size
++            part_size_in_bytes = tlb_part.size * self.block_size
++            bin_size = bin_size_in_bytes / self.block_size
++            if tlb_part.size < bin_size:
++                error('Size of binary file {0} ({1} Bytes) is greather than '
++                      '{2} partition size ({3} Bytes)'.format(bin_path,
++                                                              bin_size_in_bytes,
++                                                              tlb_part.label,
++                                                              part_size_in_bytes))
++                exit(-1)
++
++            # opens and reads the binary file to write the partition
++            with open(bin_path, 'rb') as bin_file:
++                img_file.seek(offset)
++                # Doesn't work if image size exceed the largest integer on that
++                # machine, image size is intepreted as a negative size by
++                # Python interpeter
++                # for line in bin_file:
++                #     img_file.write(line)
++                while True:
++                    data = bin_file.read(8192)
++                    if not data:
++                        break
++                    img_file.write(data)
++
++    def write(self, tlb_infos, binaries_path):
++        """
++        Used to write a new GPT/UEFI image with values read in TLB file and the
++        binaries
++        """
++        with open(self.path, 'wb+') as img_file:
++            info('Launch the write of GPT/UEFI image: {0}'.format(self.path))
++
++            # fill output image header with 0x00: MBR size + GPT header size +
++            # (partition table length * entry size)
++            zero = '\x00' * (2 * self.block_size +
++                             self.gpt_header.table_length *
++                             self.gpt_header.entry_size)
++            img_file.seek(0)
++            img_file.write(zero)
++
++            info('Writing the MBR of the GPT/UEFI image: {0}'
++                 .format(self.path))
++            offset = 0
++            self.mbr.write(img_file, offset)
++
++            info('Writing the GPT Header of the GPT/UEFI image: {0}'
++                 .format(self.path))
++            offset = self.block_size
++            self.gpt_header.write(img_file, offset, self.block_size)
++
++            info('Writing the primary partition table of the GPT/UEFI'
++                 ' image: {0}'
++                 .format(self.path))
++            offset = 2 * self.block_size
++            self.table.write(img_file, offset, self.gpt_header.entry_size,
++                             tlb_infos, self.gpt_header.lba_last)
++
++            info('Writing the secondary partition table of the'
++                 ' GPT/UEFI image: {0}'
++                 .format(self.path))
++            offset = (self.gpt_header.lba_backup - 32) * self.block_size
++            self.table.write(img_file, offset, self.gpt_header.entry_size,
++                             tlb_infos, self.gpt_header.lba_last)
++
++            info('Writing partitions of the GPT/UEFI image {0}'
++                 .format(self.path))
++            self._write_partitions(img_file, tlb_infos, binaries_path)
++
++            info('Calculating the GPT/UEFI image CRCs and write them')
++            self._write_crc(img_file)
++
++            info('GPT/UEFI Image {0} created successfully !!!'
++                 .format(self.path))
++
++
++def usage():
++    """
++    Used to make main args parser and helper
++    """
++
++    # definition of parameters parser
++    cmdparser = ArgumentParser(description=__doc__)
++
++    # command line option used to specify the GPT/UEFI image filename
++    cmdparser.add_argument('FILE', type=str, help=('The path of GPT/UEFI '
++                                                   'image.'))
++
++    cmds_group = cmdparser.add_mutually_exclusive_group()
++
++    # command line option used to show information read in a GPT/UEFI image
++    cmds_group.add_argument('--show', action='store_true',
++                            help='Command to show GPT/UEFI image information.')
++
++    # command line option used to create a GPT/UEFI image
++    cmds_group.add_argument('--create', action='store_true',
++                            help='Command to create a new GPT/UEFI image.')
++    create_group = cmdparser.add_argument_group('create')
++
++    # command line option to print debug information
++    cmdparser.add_argument('-g', '--debug', action='store_true',
++                           help='Verbose debug information.')
++
++    # commande line option used to specify the path of TBL file
++    create_group.add_argument('--table', action='store',
++                              help='The path of the partition table file.')
++
++    # command line option used to specify a new block size value
++    create_group.add_argument('--block', action='store', type=int,
++                              default=512, help=('The size of a block in Bytes'
++                                                 ' [default=512].'))
++
++    # command line option used to specify the size of image wrote
++    create_group.add_argument('--size', action='store', type=str, default='5G',
++                              help=('the size of the GPT/UEFI image in Bytes '
++                                    '[default: 5G]'))
++
++    # command line option used to specify binary filename used to wrote
++    # partitions of new image file
++    for item in GPTImage.ANDROID_PARTITIONS:
++        create_group.add_argument('--{0}'.format(item), action='store',
++                                  type=str, default='none',
++                                  help=('the path of the binary file used to '
++                                        'create the partition {0} or none'
++                                        .format(item)))
++
++    return cmdparser
++
++
++def main():
++    """
++    main function used to create or to show GPT/UEFI image information
++    """
++    # catches the command line parameters
++    cmdargs = usage().parse_args()
++
++    # sets the logger
++    logger = getLogger()
++    basicConfig(format=' %(levelname)s %(message)s')
++
++    # sets the level of logger
++    if cmdargs.debug:
++        logger.setLevel(DEBUG)
++    else:
++        logger.setLevel(INFO)
++
++    # inits the block size value, the default value used is 512 Bytes
++    block_size = cmdargs.block
++
++    # checks if the block size value is valid
++    if block_size <= 0:
++        error('Invalid block size value: {0} Octets'.format(block_size))
++        exit(-1)
++
++    # normalizes the path of GPT/UEFI image
++    img_path = realpath(normpath(normcase(cmdargs.FILE)))
++
++    # checks the image size value
++    img_size = cmdargs.size
++
++    # create an instance of GPTImage with the GPT/UEFI image path and the block
++    # size value
++    gpt_img = GPTImage(img_path, img_size, block_size)
++
++    # processes the command to create and to write GPT/UEFI image through a TBL
++    # partition file and binary filenames
++    if cmdargs.create:
++
++        info('The GPT/UEFI image size: {0}'.format(img_size))
++
++        # normalizes and check if the path of TBL partition file is valid
++        tlb_path = realpath(normpath(normcase(cmdargs.table)))
++        if not isfile(tlb_path):
++            error('The path of partition table is invalid: {0}'
++                  .format(tlb_path))
++            exit(-1)
++
++        # reads the TLB partition file
++        tlb_infos = TLBInfos(tlb_path)
++        info('Reading the partition file {0} of type {1}'
++             .format(tlb_infos.path, tlb_infos.format))
++        tlb_infos.read(gpt_img.block_size)
++
++        # computes the size of last entry, its size may be undefined
++        tlb_infos.compute_last_size_entry(gpt_img.size,
++                                          gpt_img.block_size,
++                                          gpt_img.gpt_header.entry_size,
++                                          gpt_img.gpt_header.table_length
++                                          )
++
++        # checks if the TLB partition file read contains valid information
++        if not tlb_infos:
++            error('The partition table contains invalid value(s): {0}'
++                  .format(tlb_path))
++            exit(-1)
++
++        # prints TLB information read
++        debug(tlb_infos)
++
++        # creates the list of necessary binaries used to wrote GPT/UEFI image
++        binaries_path = {}
++        for label in GPTImage.ANDROID_PARTITIONS:
++
++            # if the binary file is undefined
++            bin_path = getattr(cmdargs, label)
++            if bin_path == 'none':
++                debug('Partition {0} doesn\'t use a binary file'.format(label))
++                binaries_path[label] = bin_path
++                continue
++
++            # check if binary file exist
++            norm_bin_path = realpath(normpath(normcase(bin_path)))
++            if not isfile(norm_bin_path):
++                error('The binary used to create the partition "{0}" is '
++                      'invalid: {1}'.format(label, norm_bin_path))
++                exit(-1)
++
++            debug('Partition {0} uses this binary file: {1}'
++                  .format(label, norm_bin_path))
++            binaries_path[label] = norm_bin_path
++
++        # removes the GTP image, if it already exists
++        if isfile(img_path):
++            info('Deleting the GPT/UEFI image previous created: {0}'
++                 .format(img_path))
++            remove(img_path)
++
++        # calls function to write new GPT/UEFI image
++        gpt_img.write(tlb_infos, binaries_path)
++
++    # checks if the GPT/UEFI image exists
++    if not isfile(img_path):
++        error('GPT/UEFI image not found: {0}'.format(img_path))
++        exit(-1)
++
++    # reads the GPT/UEFI image to check it's valid, it uses CRC32
++    gpt_img.read()
++
++    # processes the command show, to print information of the GPT/UEFI image
++    if cmdargs.show:
++        print(gpt_img)
++
++    exit(0)
++
++if __name__ == '__main__':
++        main()
diff --git a/createcraffimage.py b/createcraffimage.py
new file mode 100755
index 0000000..b784f9a
--- /dev/null
+++ b/createcraffimage.py
@@ -0,0 +1,122 @@
+#!/usr/bin/env python
+
+# Copyright (c) 2014, Intel Corporation.
+# Author: Jackie, Fu <yonghuax.fu@intel.com>
+#
+# This program is free software; you can redistribute it and/or modify it
+# under the terms and conditions of the GNU General Public License,
+# version 2, as published by the Free Software Foundation.
+#
+# This program is distributed in the hope it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+# more details.
+
+import sys
+import os
+import md5
+import os.path
+import shutil
+
+"""
+Script to create a Craff image or to show information it contains.
+"""
+
+from sys import version_info
+
+if version_info < (2, 7, 3):
+    exit('Python version must be 2.7.3 or higher')
+
+from logging import (debug, info, error, DEBUG, INFO, getLogger, basicConfig)
+from argparse import ArgumentParser
+from os import remove, stat
+from os.path import isfile, normcase, normpath, realpath
+from struct import unpack, pack
+from uuid import UUID, uuid4
+from binascii import crc32
+from re import compile as re_compile
+from collections import namedtuple
+from ConfigParser import SafeConfigParser, ParsingError, NoOptionError
+from math import floor, log
+
+def usage():
+    """
+    Used to make main args parser and helper
+    """
+    cmdparser = ArgumentParser(description=__doc__)
+
+    cmdparser.add_argument('FILE', type=str,
+                           help=('The path of craff image.'))
+    cmds_group = cmdparser.add_mutually_exclusive_group()
+
+    cmds_group.add_argument('--image', action='store_true',
+                            help='Command to create a new craff image.')
+    create_group = cmdparser.add_argument_group('image')
+
+    return cmdparser
+
+def find_path_file(file_path):
+    """
+    find the path of the file
+    """
+    if os.path.isdir(file_path):
+        return file_path
+    elif os.path.isfile(file_path):
+        return os.path.dirname(file_path)
+
+def cur_file_dir():
+    """
+    Get the current path of the script
+    """
+    path = sys.path[0]
+    if os.path.isdir(path):
+        return path
+    elif os.path.isfile(path):
+        return os.path.dirname(path)
+
+def get_the_file_name(filenames):
+   """
+   Only get the file name
+   """
+   file_name=[]
+   if "." in filenames:
+      filename = filenames.split(".")
+      file_name.append(filename)
+   print file_name[0][0]
+   print file_name[0][1]
+   return file_name[0][0]
+
+def craffimg(img_path):
+    """
+    Create the craff image
+    """
+    scriptpath = cur_file_dir()
+    tool = scriptpath + '/simics-tools/bin/craff'
+    print img_path
+    name = os.path.basename(img_path)
+    onlyname = get_the_file_name(name)
+    print onlyname
+    toolpath = tool + ' -o ' + onlyname + '.craff ' + img_path
+    filepath = find_path_file(img_path)
+    os.popen(toolpath).read()
+    craffname = onlyname + '.craff'
+    crafffilepath = filepath + '/' + craffname
+    print crafffilepath
+    if os.path.isfile(crafffilepath):
+         os.remove(crafffilepath)
+    shutil.move(craffname,filepath)
+
+def main():
+    """
+    main function used to create craff image.
+    """
+    cmdargs = usage().parse_args()
+    logger = getLogger()
+    basicConfig(format=' %(levelname)s %(message)s')
+    img_path = realpath(normpath(normcase(cmdargs.FILE)))
+    craffimg(img_path)
+    exit(0)
+
+
+if __name__ == '__main__':
+        main()
diff --git a/simics-tools/.package-list b/simics-tools/.package-list
new file mode 100644
index 0000000..038441e
--- /dev/null
+++ b/simics-tools/.package-list
@@ -0,0 +1,3 @@
+../simics-cryptography-4.8.16
+../simics-eclipse-4.8.78
+../simics-goldsand-4.8.pre83
diff --git a/simics-tools/bin/craff b/simics-tools/bin/craff
new file mode 100755
index 0000000..441b0ee
--- /dev/null
+++ b/simics-tools/bin/craff
@@ -0,0 +1,5 @@
+#!/bin/sh
+
+. `dirname "$0"`/../scripts/find-paths.sh
+
+"$BINDIR/craff" "$@"
diff --git a/simics-tools/linux64/bin/craff b/simics-tools/linux64/bin/craff
new file mode 100755
index 0000000000000000000000000000000000000000..8e313e3d07a519b1ca22aca7a30b554ca7bf6bc0
GIT binary patch
literal 364528
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

literal 0
HcmV?d00001

diff --git a/simics-tools/scripts/find-paths.sh b/simics-tools/scripts/find-paths.sh
new file mode 100755
index 0000000..66fee85
--- /dev/null
+++ b/simics-tools/scripts/find-paths.sh
@@ -0,0 +1,40 @@
+#!/bin/sh
+
+if [ "x$SIMICS_BASE_PACKAGE" != "x" ]; then
+    DIR="$SIMICS_BASE_PACKAGE/bin/`basename "$0"`"
+else
+    DIR="$0"
+fi
+
+case `uname` in
+    CYGWIN*)
+	DIR="`cygpath "$0"`"
+	;;
+esac
+
+SCRIPTSDIR="`dirname "$DIR"`"
+SCRIPTSDIR="`cd "$SCRIPTSDIR"; pwd`" # allow convoluted start paths
+if [ "$SCRIPTSDIR" = "." ] ; then
+    HOSTSDIR="`cd .. ; pwd`"
+else
+    # find HOSTSDIR in a way that works when running from a user-install
+    HOSTSDIR="$(dirname "$SCRIPTSDIR")"
+    HOSTSDIR="$(cd "$HOSTSDIR" ; pwd)"
+fi
+
+USER_SET_HOST=$SIMICS_HOST
+SIMICS_HOST="$(sh "$HOSTSDIR"/scripts/host-type.sh 2> /dev/null)"
+
+if [ -z "$SIMICS_HOST" ] ; then
+    SIMICS_HOST=$USER_SET_HOST
+    echo "The Simics start-script failed to find a matching host for Simics."
+    if [ -z "$USER_SET_HOST" ] ; then
+	echo "Set the SIMICS_HOST environment variable to set the host" \
+	    "manually."
+    fi
+    echo "Error message:" `sh $HOSTSDIR/scripts/host-type.sh 2>&1`
+    echo ""
+    exit 1
+fi
+
+BINDIR="$HOSTSDIR/$SIMICS_HOST/bin"
diff --git a/simics-tools/scripts/host-type.sh b/simics-tools/scripts/host-type.sh
new file mode 100755
index 0000000..cf05d9b
--- /dev/null
+++ b/simics-tools/scripts/host-type.sh
@@ -0,0 +1,69 @@
+#!/bin/sh
+
+OS=`uname -s`
+HOST_ARCH=`uname -m`
+
+SCRIPTSDIR="`dirname "$0"`"
+SIMICS_ROOT="`cd "$SCRIPTSDIR"/.. ; pwd`"
+
+case $HOST_ARCH in
+    i*86)
+        BITS="32"
+	;;
+    x86_64|amd64)
+        BITS="64 32"
+	;;
+    *)
+        echo "Unsupported architecture: $HOST_ARCH" >&2
+	exit 1
+	;;
+esac
+
+case $OS in
+    Linux)
+        OS_PART=linux
+	;;
+    CYGWIN_NT*WOW64)
+        OS_PART=win
+        # Cygwin is only a 32 bit application, which causes the host arch
+        # detection to go wrong, so override it here
+        BITS="64 32"
+	;;
+    CYGWIN_NT*)
+        OS_PART=win
+	;;
+    *)
+        echo "Unsupported OS: $OS" >&2
+	exit 1
+	;;
+esac
+
+
+# should be renamed to SIMICS_HOST_DIR (bug 10827)
+# <add id="environment variable">
+# <dt><tt>SIMICS_HOST</tt></dt>
+# <dd>
+# Overrides the host type detected by Simics. The value must be the
+# name of the directory containing the host-specific files of a Simics
+# installation. Typically a string on the form arch-os, e.g.,
+# linux32.
+# </dd></add>
+if [ -n "$SIMICS_HOST" ]; then
+    if [ -d "$SIMICS_ROOT/$SIMICS_HOST/bin"  ]; then
+	echo $SIMICS_HOST
+	exit 0
+    else
+	echo "Non-existing host $SIMICS_HOST." >&2
+	exit 1
+    fi
+else
+    for bits in $BITS; do
+	host=$OS_PART$bits
+	if [ -d "$SIMICS_ROOT/$host/bin" ]; then
+	    echo $host
+	    exit 0
+	fi
+    done
+    echo "No matching host found." >&2
+    exit 1
+fi
diff --git a/simics-tools/scripts/host_type.py b/simics-tools/scripts/host_type.py
new file mode 100755
index 0000000..0913378
--- /dev/null
+++ b/simics-tools/scripts/host_type.py
@@ -0,0 +1,40 @@
+#!/usr/bin/python
+
+# This Software is part of Wind River Simics. The rights to copy, distribute,
+# modify, or otherwise make use of this Software may be licensed only
+# pursuant to the terms of an applicable Wind River license agreement.
+# 
+# Copyright 2010-2016 Intel Corporation
+
+# Platform-independent and import-able Python interface to host-type.sh.
+
+from subprocess import Popen, PIPE
+import os, sys
+import simicsutils.host
+
+class HostTypeError(Exception): pass
+
+def host_type(simics_root):
+    if simicsutils.host.is_windows():
+        # sh is not available, so instead emulate the behavior of host-type.sh
+        return os.environ.get('SIMICS_HOST', simicsutils.host.host_type())
+    host_type_sh = os.path.join(simics_root, "scripts", "host-type.sh")
+    if not os.path.isfile(host_type_sh):
+        raise HostTypeError("Invalid simics_root: Script '%s' not found"
+                            % host_type_sh)
+
+    proc = Popen([host_type_sh], stdout = PIPE, stderr = PIPE)
+    (stdout, stderr) = proc.communicate()
+    if proc.returncode == 0:
+        return stdout.rstrip()
+    else:
+        raise HostTypeError("%s failed: " % host_type_sh + stderr)
+
+if __name__ == "__main__":
+    simics_root = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))
+    try:
+        result = host_type(simics_root)
+    except HostTypeError, e:
+        sys.stderr.write(e.message)
+        exit(1)
+    sys.stdout.write(result + "\n")
-- 
1.9.1

