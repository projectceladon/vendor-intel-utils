From 655e3e6760bc2b821bdfb9687ad27ecf875a4782 Mon Sep 17 00:00:00 2001
From: "Gupta Kumar, Sanjiv" <sanjiv.kumar.gupta@intel.com>
Date: Thu, 10 Aug 2017 16:28:08 +0530
Subject: [PATCH 1/2] Changes to read environment variables in blueprint files

Change-Id: Ia9875b39afcbe96d69cc72354dae5757ed0833af
Category: Device Enablement
Origin: Internal
Upstream-Candidate: yes
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-48718
Signed-off-by: Gupta Kumar, Sanjiv <sanjiv.kumar.gupta@intel.com>
---
 context.go       | 16 ++++++++++++++++
 parser/parser.go | 27 +++++++++++++++++++++++++++
 2 files changed, 43 insertions(+)

diff --git a/context.go b/context.go
index 9dd68b4..82cb7ed 100644
--- a/context.go
+++ b/context.go
@@ -518,6 +518,8 @@ func (c *Context) SetAllowMissingDependencies(allowMissingDependencies bool) {
 // each of the module definitions encountered.  If the Blueprints file contains
 // an assignment to the "subdirs" variable, then the subdirectories listed are
 // searched for Blueprints files returned in the subBlueprints return value.
+// If the Blueprints file contains an assignment to the "subdir_prefix" variable,
+// then all the subdirs will be prepended with the prefix before searching the subdirectories.
 // If the Blueprints file contains an assignment to the "build" variable, then
 // the file listed are returned in the subBlueprints return value.
 //
@@ -536,6 +538,7 @@ func (c *Context) parse(rootDir, filename string, r io.Reader,
 	scope.Remove("subdirs")
 	scope.Remove("optional_subdirs")
 	scope.Remove("build")
+	scope.Remove("subdir_prefix")
 	file, errs = parser.ParseAndEval(filename, r, scope)
 	if len(errs) > 0 {
 		for i, err := range errs {
@@ -574,6 +577,19 @@ func (c *Context) parse(rootDir, filename string, r io.Reader,
 		errs = append(errs, err)
 	}
 
+	//Check for the directory prefix
+	subdir_prefix, _, err := getStringFromScope(scope, "subdir_prefix")
+	if err != nil {
+		errs = append(errs, err)
+	}
+
+	//Append the subdir prefix to subdirs
+	if subdir_prefix != "" {
+		for i, subdir := range subdirs {
+			subdirs[i] = subdir_prefix + "/" + subdir;
+		}
+	}
+
 	if subBlueprintsName == "" {
 		subBlueprintsName = "Blueprints"
 	}
diff --git a/parser/parser.go b/parser/parser.go
index de4e8e2..b43762d 100644
--- a/parser/parser.go
+++ b/parser/parser.go
@@ -18,6 +18,7 @@ import (
 	"errors"
 	"fmt"
 	"io"
+	"os"
 	"sort"
 	"strconv"
 	"strings"
@@ -439,6 +440,8 @@ func (p *parser) parseOperator(value1 Expression) *Operator {
 
 func (p *parser) parseValue() (value Expression) {
 	switch p.tok {
+	case '$':
+		return p.parseEnvVariable()
 	case scanner.Ident:
 		return p.parseVariable()
 	case scanner.String:
@@ -454,6 +457,30 @@ func (p *parser) parseValue() (value Expression) {
 	}
 }
 
+func (p *parser) parseEnvVariable() *String {
+	var value *String
+	var pos scanner.Position
+	var str string
+	//Parse to expand the environment variable in-place
+	p.accept('$')
+	p.accept('(')
+	if p.tok == scanner.Ident {
+		str = p.scanner.TokenText()
+		pos = p.scanner.Position;
+		str = os.Getenv(str)
+		p.accept(scanner.Ident)
+		p.accept(')')
+	} else {
+		p.errorf("expected an environment variable identifier, found %s\n",scanner.TokenString(p.tok))
+	}
+
+	value = &String{
+			LiteralPos: pos,
+			Value:      str,
+		}
+	return value;
+}
+
 func (p *parser) parseVariable() Expression {
 	var value Expression
 
-- 
1.9.1

