From 2f4b8e3e9cc41f55f42338a99562cf0469af4186 Mon Sep 17 00:00:00 2001
From: sgnanase <sundar.gnanasekaran@intel.com>
Date: Wed, 1 Mar 2017 13:46:54 +0530
Subject: [PATCH 1/3] Enable 'make publish' target

Adding supporting folders required for 'make publish'
target.

Change-Id: I1d66e28f0b926ca5c07266a5a460050155ab602f
Signed-off-by: sgnanase <sundar.gnanasekaran@intel.com>
---
 tasks/publish.mk             | 218 +++++++++++++++++++++++++++++++++++++++++++
 testkeys/blpolicy-delete.txt |   8 ++
 2 files changed, 226 insertions(+)
 create mode 100644 tasks/publish.mk
 create mode 100644 testkeys/blpolicy-delete.txt

diff --git a/tasks/publish.mk b/tasks/publish.mk
new file mode 100644
index 0000000..782840d
--- /dev/null
+++ b/tasks/publish.mk
@@ -0,0 +1,218 @@
+# This provides the 'publish' and 'publish_ci' makefile targets.
+#
+# PUBLISH target:
+# 	NOTE: When using the 'publish' target you MUST also use the 'dist'
+# 	target.  The 'dist' target is a special target and unfortunately we
+# 	can't just depend on the 'dist' target :(
+# 	   e.g. 'make dist publish'
+# 	   e.g. 'make droid dist publish'
+#
+# 	DO NOT DO: 'make publish' as it will not work
+#
+# PUBLISH_CI target:
+# 	The 'publish_ci' target may be called by itself as it has a dependency
+# 	on the one file we need.
+# 	   e.g. 'make publish_ci'
+
+publish_dest := $(TOP)/pub/$(TARGET_PRODUCT)/$(TARGET_BUILD_VARIANT)
+publish_tool_dest :=  $(publish_dest)/../tools
+publish_tool_destw := $(publish_tool_dest)/windows-x86/
+publish_tool_destl := $(publish_tool_dest)/linux-x86/
+publish_make_dir = $(if $(wildcard $1),,mkdir -p $1)
+
+.PHONY: publish_mkdir_dest
+publish_mkdir_dest:
+	$(call publish_make_dir, $(publish_dest))
+
+# Publish System symbols
+PUB_SYSTEM_SYMBOLS := $(publish_dest)/symbols.tar.gz
+
+$(PUB_SYSTEM_SYMBOLS): systemtarball
+	@echo "Publish system symbols"
+	$(hide) mkdir -p $(@D)
+	tar --checkpoint=1000 --checkpoint-action=dot -czf $@ $(PRODUCT_OUT)/symbols
+
+.PHONY: publish_system_symbols
+publish_system_symbols: $(PUB_SYSTEM_SYMBOLS)
+
+.PHONY: publish_kernel_debug
+# if kernel is not a prebuilt one
+# and kernel is built locally
+ifeq ($(TARGET_PREBUILT_KERNEL),)
+ifneq ($(LOCAL_KERNEL_PATH),)
+# Publish Kernel debug
+PUB_KERNEL_DBG := vmlinux.bz2 System.map.bz2
+PUB_KERNEL_DBG_PATH := $(publish_dest)/kernel
+PUB_KERNEL_DBG := $(addprefix $(PUB_KERNEL_DBG_PATH)/,$(PUB_KERNEL_DBG))
+
+$(PUB_KERNEL_DBG): $(LOCAL_KERNEL)
+	@echo "Publish $(basename $(@F))"
+	$(hide) mkdir -p $(@D)
+	$(hide) bzip2 -c $(LOCAL_KERNEL_PATH)/$(basename $(@F)) > $@
+
+PUB_KERNEL_MODULES = $(PUB_KERNEL_DBG_PATH)/kernel_modules-$(TARGET_BUILD_VARIANT).tar.bz2
+
+$(PUB_KERNEL_MODULES): $(LOCAL_KERNEL_PATH)/copy_modules
+	@echo "Publish Kernel Modules"
+	$(hide) mkdir -p $(@D)
+	-tar --checkpoint=1000 --checkpoint-action=dot -cjf $@ -C $(LOCAL_KERNEL_PATH)/lib/modules .
+
+publish_kernel_debug: $(PUB_KERNEL_DBG) $(PUB_KERNEL_MODULES)
+	@echo "Publish kernel debug: $(notdir $^)"
+endif # $(LOCAL_KERNEL_PATH)
+else
+publish_kernel_debug:
+	@echo "Publish kernel debug: skipped"
+endif
+
+# Publish Sofia LTE CMCC images
+ifeq ($(PUBLISH_CMCC_IMG),true)
+PUB_CMCC_ZIP := $(publish_dest)/$(notdir $(CMCC_TARGET))
+$(PUB_CMCC_ZIP): publish_mkdir_dest $(CMCC_TARGET)
+	$(hide) $(ACP) $(CMCC_TARGET) $@
+endif
+
+# Publish OS agnostic tag
+ifneq ($(OS_AGNOSTIC_INFO),)
+PUB_OSAGNOSTIC_TAG := $(publish_dest)/$(notdir $(OS_AGNOSTIC_INFO))
+$(PUB_OSAGNOSTIC_TAG): publish_mkdir_dest $(OS_AGNOSTIC_INFO)
+	$(hide)($(ACP) $(OS_AGNOSTIC_INFO) $@)
+endif
+
+# Publish Firmware symbols
+.PHONY: publish_firmware_symbols
+FIRMWARE_SYMBOLS_FILE := $(TARGET_DEVICE)-symbols_firmware.zip
+FIRMWARE_SYMBOLS_PATH := $(wildcard hardware/intel/$(TARGET_BOARD_PLATFORM)-fls/$(PRODUCT_MODEL)/symbols/*.elf)
+
+publish_firmware_symbols: publish_mkdir_dest publish_flashfiles
+ifneq ($(BUILD_OSAS),1) # prebuilt
+	@echo "------------Publish prebuilt firmware symbols from $(FIRMWARE_SYMBOLS_PATH) -----------"
+ifneq ($(FIRMWARE_SYMBOLS_PATH),)
+	$(hide)-(zip -jry $(publish_dest)/$(FIRMWARE_SYMBOLS_FILE) $(FIRMWARE_SYMBOLS_PATH))
+endif
+else # built from source
+	@echo "------------Publish compiled firmware symbols-----------"
+	$(info $(BOOTLOADER_BIN_PATH) $(VMM_BUILD_OUT) $(SECVM_BUILD_DIR))
+	$(hide)-(zip -jry $(publish_dest)/$(FIRMWARE_SYMBOLS_FILE) $(BOOTLOADER_BIN_PATH)/*/*.elf $(VMM_BUILD_OUT)/*/*.elf $(SECVM_BUILD_DIR)/*.elf $(THREADX_BUILD_DIR)/*.elf)
+endif
+
+# Are we doing an 'sdk' type lunch target
+PUBLISH_SDK := $(strip $(filter sdk sdk_x86,$(TARGET_PRODUCT)))
+
+ifndef PUBLISH_SDK
+
+.PHONY: publish_flashfiles
+ifdef INTEL_FACTORY_FLASHFILES_TARGET
+publish_flashfiles: publish_mkdir_dest $(INTEL_FACTORY_FLASHFILES_TARGET)
+	@$(ACP) $(INTEL_FACTORY_FLASHFILES_TARGET) $(publish_dest)
+else
+publish_flashfiles:
+	@echo "Warning: Unable to fulfill publish_flashfiles makefile request"
+endif
+
+.PHONY:publish_ifwi
+ifeq ($(USE_INTEL_FLASHFILES),false)
+publish_ifwi:
+	@echo "Warning: Unable to fulfill publish_ifwi makefile request"
+endif
+
+.PHONY: publish_liveimage
+ifdef INTEL_LIVEIMAGE_TARGET
+publish_liveimage: publish_mkdir_dest $(INTEL_LIVEIMAGE_TARGET)
+	@$(ACP) $(INTEL_LIVEIMAGE_TARGET) $(publish_dest)
+else
+publish_liveimage:
+	@echo "Warning: Unable to fulfill publish_liveimage makefile request"
+endif
+
+.PHONY: publish_gptimage
+ifdef GPTIMAGE_BIN
+publish_gptimage: publish_mkdir_dest $(GPTIMAGE_BIN)
+	@$(ACP) $(GPTIMAGE_BIN) $(publish_dest)
+ifdef CRAFFIMAGE_BIN
+	$(TOP)/device/intel/build/createcraffimage.py --image $(GPTIMAGE_BIN)
+	@$(ACP) $(CRAFFIMAGE_BIN) $(publish_dest)
+endif
+else
+publish_gptimage:
+	@echo "Warning: Unable to fulfill publish_gptimage makefile request"
+endif
+
+
+.PHONY: publish_androidia_image
+ifdef ANDROID_IA_IMAGE
+publish_androidia_image: publish_mkdir_dest $(ANDROID_IA_IMAGE)
+	@$(ACP) $(ANDROID_IA_IMAGE) $(publish_dest)
+else
+publish_androidia_image:
+	@echo "Warning: Unable to fulfill publish_androidia_image makefile request"
+endif
+
+.PHONY: publish_otapackage
+publish_otapackage: publish_mkdir_dest $(INTERNAL_OTA_PACKAGE_TARGET)
+	@$(ACP) $(INTERNAL_OTA_PACKAGE_TARGET) $(publish_dest)
+
+.PHONY: publish_ota_targetfiles
+publish_ota_targetfiles: publish_mkdir_dest $(BUILT_TARGET_FILES_PACKAGE)
+	@$(ACP) $(BUILT_TARGET_FILES_PACKAGE) $(publish_dest)
+
+.PHONY: publish_ota_flashfile
+ifneq ($(PUBLISH_CONF),)
+BUILDBOT_PUBLISH_DEPS := $(shell python -c 'import json,os ; print " ".join(json.loads(os.environ["PUBLISH_CONF"]).get("$(TARGET_BUILD_VARIANT)",[]))')
+
+# Translate buildbot target to makefile target
+publish_ota_flashfile: $(BUILDBOT_PUBLISH_DEPS)
+
+full_ota: publish_otapackage
+full_ota_flashfile:
+ota_target_files: publish_ota_targetfiles
+system_img:
+else
+publish_ota_flashfile:
+	@echo "Do not publish ota_flashfile"
+endif # PUBLISH_CONF
+
+PUBLISH_CI_FILES := $(DIST_DIR)/fastboot $(DIST_DIR)/adb
+.PHONY: publish_ci
+publish_ci: publish_liveimage publish_ota_flashfile publish_gptimage publish_ifwi publish_firmware_symbols $(PUB_OSAGNOSTIC_TAG) $(PUB_CMCC_ZIP) $(PLATFORM_RMA_TOOLS_ZIP)
+	$(if $(wildcard $(publish_dest)), \
+	  $(foreach f,$(PUBLISH_CI_FILES), \
+	    $(if $(wildcard $(f)),$(ACP) $(f) $(publish_dest);,)),)
+	@$(hide) mkdir -p $(publish_tool_destl)
+	@$(hide) $(ACP) $(PLATFORM_RMA_TOOLS_ZIP) $(publish_tool_destl)
+
+
+.PHONY: publish_windows_tools
+publish_windows_tools: $(PLATFORM_RMA_TOOLS_CROSS_ZIP)
+	@$(hide) mkdir -p $(publish_tool_destw)
+	@$(hide) $(ACP) $(PLATFORM_RMA_TOOLS_CROSS_ZIP) $(publish_tool_destw)
+
+else # !PUBLISH_SDK
+# Unfortunately INTERNAL_SDK_TARGET is always defined, so its existence does
+# not indicate that we are building the SDK
+
+.PHONY: publish_ci
+publish_ci: publish_sdk_target
+
+
+.PHONY: publish_sdk_target
+publish_sdk_target: publish_mkdir_dest $(INTERNAL_SDK_TARGET)
+	@$(ACP) $(INTERNAL_SDK_TARGET) $(publish_dest)
+
+
+endif # !PUBLISH_SDK
+
+
+# We need to make sure our 'publish' target depends on the other targets so
+# that it will get done at the end.  Logic copied from build/core/distdir.mk
+PUBLISH_GOALS := $(strip $(filter-out publish publish_ci,$(MAKECMDGOALS)))
+PUBLISH_GOALS := $(strip $(filter-out $(INTERNAL_MODIFIER_TARGETS),$(PUBLISH_GOALS)))
+ifeq (,$(PUBLISH_GOALS))
+# The commandline was something like "make publish" or "make publish showcommands".
+# Add a dependency on a real target.
+PUBLISH_GOALS := $(DEFAULT_GOAL)
+endif
+
+.PHONY: publish
+publish: publish_mkdir_dest $(PUBLISH_GOALS) publish_ifwi publish_gptimage publish_firmware_symbols $(PUB_OSAGNOSTIC_TAG) $(PUB_CMCC_ZIP) publish_androidia_image
+	@$(ACP) $(DIST_DIR)/* $(publish_dest)
diff --git a/testkeys/blpolicy-delete.txt b/testkeys/blpolicy-delete.txt
new file mode 100644
index 0000000..d781943
--- /dev/null
+++ b/testkeys/blpolicy-delete.txt
@@ -0,0 +1,8 @@
+# This file generated by generate_blpolicy_oemvars to disable the Bootloader Policy.
+# This file clear the secured variable.  Use with caution.
+GUID = 1ac80a82-4f0c-456b-9a99-debeb431fcc1
+
+[ad] OAK %03%08%00%01%00%00%01%00%00%00%00%00%00%00%00%00%87%05%00%00%00%02%f1%0e%9d%d2%af%4a%df%68%ee%49%8a%a9%34%7d%37%56%65%a7%30%82%05%6b%06%09%2a%86%48%86%f7%0d%01%07%02%a0%82%05%5c%30%82%05%58%02%01%01%31%0f%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%30%0b%06%09%2a%86%48%86%f7%0d%01%07%01%a0%82%02%fd%30%82%02%f9%30%82%01%e1%a0%03%02%01%02%02%09%00%8b%5d%5d%8e%ea%e4%da%d4%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%13%31%11%30%0f%06%03%55%04%03%0c%08%63%75%73%74%6f%6d%65%72%30%1e%17%0d%31%35%30%37%30%31%31%34%30%37%34%35%5a%17%0d%34%32%31%31%31%36%31%34%30%37%34%35%5a%30%13%31%11%30%0f%06%03%55%04%03%0c%08%63%75%73%74%6f%6d%65%72%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%cd%cf%14%eb%a9%f9%4b%24%12%c4%00%f4%39%61%27%b2%a7%09%de%e5%a9%0e%18%95%2a%a4%02%72%69%f0%d6%f4%cd%ce%66%84%74%e8%13%fa%f5%72%42%e0%dc%86%52%5f%e8%d2%b4%98%7d%74%07%ad%bf%19%02%94%45%c6%d9%f4%01%f3%05%30%15%d9%8a%3f%07%21%70%94%02%ac%d8%06%2c%2e%52%06%a5%d5%97%d5%3c%fd%c4%74%fc%4c%fb%44%43%bb%4b%0b%c1%e6%3c%40%33%7d%ae%26%72%96%05%02%24%ce%ec%14%28%b4%7e%37%e9%3c%0f%b5%ac%2a%7d%ec%a3%cd%f7%5f%b8%d0%e7%90%15%c2%b3%6d%c8%8c%f6%3f%34%7f%06%c1%54%04%84%f7%64%90%f3%93%fb%9d%c3%9d%64%c2%5e%85%b3%b5%2c%70%5a%d7%67%a8%e0%89%1a%75%4b%9e%3a%35%52%65%00%46%c9%5c%65%69%2f%a1%ea%a3%0e%3d%85%2b%31%57%7d%9c%a6%54%39%2d%1d%12%74%bf%2b%83%a2%8f%57%52%c9%2d%04%81%7c%6c%f0%e3%7a%dd%60%01%7d%e3%cd%29%59%62%69%98%61%0d%3d%6f%2a%8e%d1%ef%8f%3c%cd%90%de%65%e2%27%a0%3c%1d%04%f3%9d%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%b6%b1%1d%06%78%97%91%5a%c9%88%e4%30%b4%5f%ee%53%8e%4a%54%ab%30%1f%06%03%55%1d%23%04%18%30%16%80%14%b6%b1%1d%06%78%97%91%5a%c9%88%e4%30%b4%5f%ee%53%8e%4a%54%ab%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%74%cf%19%61%3d%a6%e2%d1%ba%ed%fc%42%0c%5f%c0%9a%a3%4f%1f%5d%1b%29%22%4e%e9%7e%96%e8%05%95%e2%64%76%23%56%96%59%ea%ac%a2%4d%ff%0b%68%0d%4e%d5%ac%b4%e0%41%bb%16%43%37%05%01%68%19%b8%0b%4c%e3%26%44%a8%a8%f4%64%8e%9e%04%d9%34%61%9c%7e%05%24%5b%1c%c7%06%b2%ce%45%43%16%5f%50%d6%01%2c%e1%ed%4c%62%0c%ae%bf%42%7c%91%07%c7%49%c0%b3%4e%99%25%04%8a%4f%3b%f9%fc%3b%6b%7b%fc%ad%16%26%76%b3%ce%32%3c%37%ab%ac%09%a5%26%7e%f4%27%40%1b%36%22%03%6c%89%21%2b%68%e0%c4%10%9b%e2%ce%c6%a0%5b%69%16%e8%b6%6e%6e%bb%51%3d%40%e9%d3%e8%8a%47%2a%68%97%fb%46%b3%42%ba%a3%1d%30%17%56%20%82%07%af%e6%51%28%26%7c%e4%b7%75%2f%ab%cf%ca%3a%83%f7%b7%ed%cf%87%c9%63%d5%5f%84%68%95%e7%f2%95%ce%7a%86%ea%00%8f%e6%f6%f8%31%8e%e3%76%f7%63%16%c6%ee%60%de%16%f2%5b%1b%49%0a%f6%eb%a5%f8%a7%ee%3a%a2%19%58%f8%ec%31%82%02%32%30%82%02%2e%02%01%01%30%20%30%13%31%11%30%0f%06%03%55%04%03%0c%08%63%75%73%74%6f%6d%65%72%02%09%00%8b%5d%5d%8e%ea%e4%da%d4%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%a0%81%e4%30%18%06%09%2a%86%48%86%f7%0d%01%09%03%31%0b%06%09%2a%86%48%86%f7%0d%01%07%01%30%1c%06%09%2a%86%48%86%f7%0d%01%09%05%31%0f%17%0d%31%35%30%38%30%37%31%32%31%39%35%31%5a%30%2f%06%09%2a%86%48%86%f7%0d%01%09%04%31%22%04%20%a7%94%94%c5%ca%63%80%2d%d9%c5%17%7a%2a%f8%8d%d6%9d%a9%e5%9f%38%7a%c7%7a%77%fa%32%0a%5c%6a%96%81%30%79%06%09%2a%86%48%86%f7%0d%01%09%0f%31%6c%30%6a%30%0b%06%09%60%86%48%01%65%03%04%01%2a%30%0b%06%09%60%86%48%01%65%03%04%01%16%30%0b%06%09%60%86%48%01%65%03%04%01%02%30%0a%06%08%2a%86%48%86%f7%0d%03%07%30%0e%06%08%2a%86%48%86%f7%0d%03%02%02%02%00%80%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%40%30%07%06%05%2b%0e%03%02%07%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%28%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%04%82%01%00%46%83%32%89%60%80%b2%24%1d%37%70%dd%18%9b%2d%88%c0%da%af%21%0e%44%d4%f7%67%ec%63%c0%03%8b%c9%05%25%11%1c%b8%89%a5%1d%4a%1b%da%0d%33%e7%bc%b1%7b%3d%cb%1b%ca%9d%52%cd%18%96%24%8a%03%4d%03%f9%df%c1%e1%e6%ac%d4%b9%44%ae%b1%07%ce%cd%17%ea%dc%b8%05%68%c2%24%80%3c%4a%3c%53%30%45%9d%f0%8c%b9%42%47%bc%03%a7%2d%01%6e%9d%c3%41%e7%84%ea%b2%d3%c5%1e%34%b8%dc%12%9a%eb%47%d5%b7%c5%23%e0%67%08%7c%76%38%67%31%31%ce%d4%d5%08%ef%1a%4e%89%2b%d6%1d%f6%39%74%06%52%62%c0%51%1a%15%b9%88%8a%84%20%da%3a%b5%6e%66%c3%6b%28%2d%ec%a0%70%e9%c8%e9%c8%51%a5%63%ad%bc%8f%57%a0%7b%fc%10%82%32%88%ca%48%a0%73%d0%96%3a%45%99%ce%00%41%96%7b%4a%61%ee%81%05%f5%4e%60%2c%56%d8%3f%af%a7%02%a4%a1%22%f0%8f%24%e8%50%19%a9%22%f4%51%40%6a%6b%52%8b%23%cc%64%0d%aa%ad%b4%98%90%0c%bd%e6%86%3c%94%84%16%4d%02%7d
+
+[ad] BPM %03%08%00%01%00%00%01%00%00%00%00%00%00%00%00%00%87%05%00%00%00%02%f1%0e%9d%d2%af%4a%df%68%ee%49%8a%a9%34%7d%37%56%65%a7%30%82%05%6b%06%09%2a%86%48%86%f7%0d%01%07%02%a0%82%05%5c%30%82%05%58%02%01%01%31%0f%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%30%0b%06%09%2a%86%48%86%f7%0d%01%07%01%a0%82%02%fd%30%82%02%f9%30%82%01%e1%a0%03%02%01%02%02%09%00%8b%5d%5d%8e%ea%e4%da%d4%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%13%31%11%30%0f%06%03%55%04%03%0c%08%63%75%73%74%6f%6d%65%72%30%1e%17%0d%31%35%30%37%30%31%31%34%30%37%34%35%5a%17%0d%34%32%31%31%31%36%31%34%30%37%34%35%5a%30%13%31%11%30%0f%06%03%55%04%03%0c%08%63%75%73%74%6f%6d%65%72%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%cd%cf%14%eb%a9%f9%4b%24%12%c4%00%f4%39%61%27%b2%a7%09%de%e5%a9%0e%18%95%2a%a4%02%72%69%f0%d6%f4%cd%ce%66%84%74%e8%13%fa%f5%72%42%e0%dc%86%52%5f%e8%d2%b4%98%7d%74%07%ad%bf%19%02%94%45%c6%d9%f4%01%f3%05%30%15%d9%8a%3f%07%21%70%94%02%ac%d8%06%2c%2e%52%06%a5%d5%97%d5%3c%fd%c4%74%fc%4c%fb%44%43%bb%4b%0b%c1%e6%3c%40%33%7d%ae%26%72%96%05%02%24%ce%ec%14%28%b4%7e%37%e9%3c%0f%b5%ac%2a%7d%ec%a3%cd%f7%5f%b8%d0%e7%90%15%c2%b3%6d%c8%8c%f6%3f%34%7f%06%c1%54%04%84%f7%64%90%f3%93%fb%9d%c3%9d%64%c2%5e%85%b3%b5%2c%70%5a%d7%67%a8%e0%89%1a%75%4b%9e%3a%35%52%65%00%46%c9%5c%65%69%2f%a1%ea%a3%0e%3d%85%2b%31%57%7d%9c%a6%54%39%2d%1d%12%74%bf%2b%83%a2%8f%57%52%c9%2d%04%81%7c%6c%f0%e3%7a%dd%60%01%7d%e3%cd%29%59%62%69%98%61%0d%3d%6f%2a%8e%d1%ef%8f%3c%cd%90%de%65%e2%27%a0%3c%1d%04%f3%9d%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%b6%b1%1d%06%78%97%91%5a%c9%88%e4%30%b4%5f%ee%53%8e%4a%54%ab%30%1f%06%03%55%1d%23%04%18%30%16%80%14%b6%b1%1d%06%78%97%91%5a%c9%88%e4%30%b4%5f%ee%53%8e%4a%54%ab%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%74%cf%19%61%3d%a6%e2%d1%ba%ed%fc%42%0c%5f%c0%9a%a3%4f%1f%5d%1b%29%22%4e%e9%7e%96%e8%05%95%e2%64%76%23%56%96%59%ea%ac%a2%4d%ff%0b%68%0d%4e%d5%ac%b4%e0%41%bb%16%43%37%05%01%68%19%b8%0b%4c%e3%26%44%a8%a8%f4%64%8e%9e%04%d9%34%61%9c%7e%05%24%5b%1c%c7%06%b2%ce%45%43%16%5f%50%d6%01%2c%e1%ed%4c%62%0c%ae%bf%42%7c%91%07%c7%49%c0%b3%4e%99%25%04%8a%4f%3b%f9%fc%3b%6b%7b%fc%ad%16%26%76%b3%ce%32%3c%37%ab%ac%09%a5%26%7e%f4%27%40%1b%36%22%03%6c%89%21%2b%68%e0%c4%10%9b%e2%ce%c6%a0%5b%69%16%e8%b6%6e%6e%bb%51%3d%40%e9%d3%e8%8a%47%2a%68%97%fb%46%b3%42%ba%a3%1d%30%17%56%20%82%07%af%e6%51%28%26%7c%e4%b7%75%2f%ab%cf%ca%3a%83%f7%b7%ed%cf%87%c9%63%d5%5f%84%68%95%e7%f2%95%ce%7a%86%ea%00%8f%e6%f6%f8%31%8e%e3%76%f7%63%16%c6%ee%60%de%16%f2%5b%1b%49%0a%f6%eb%a5%f8%a7%ee%3a%a2%19%58%f8%ec%31%82%02%32%30%82%02%2e%02%01%01%30%20%30%13%31%11%30%0f%06%03%55%04%03%0c%08%63%75%73%74%6f%6d%65%72%02%09%00%8b%5d%5d%8e%ea%e4%da%d4%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%a0%81%e4%30%18%06%09%2a%86%48%86%f7%0d%01%09%03%31%0b%06%09%2a%86%48%86%f7%0d%01%07%01%30%1c%06%09%2a%86%48%86%f7%0d%01%09%05%31%0f%17%0d%31%35%30%38%30%37%31%32%31%39%35%31%5a%30%2f%06%09%2a%86%48%86%f7%0d%01%09%04%31%22%04%20%88%71%6b%d4%da%e9%de%c1%16%a6%d4%77%7f%e3%d0%2f%56%d6%23%52%6f%d0%b8%b9%b6%9c%73%c6%aa%2c%bc%59%30%79%06%09%2a%86%48%86%f7%0d%01%09%0f%31%6c%30%6a%30%0b%06%09%60%86%48%01%65%03%04%01%2a%30%0b%06%09%60%86%48%01%65%03%04%01%16%30%0b%06%09%60%86%48%01%65%03%04%01%02%30%0a%06%08%2a%86%48%86%f7%0d%03%07%30%0e%06%08%2a%86%48%86%f7%0d%03%02%02%02%00%80%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%40%30%07%06%05%2b%0e%03%02%07%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%28%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%04%82%01%00%1d%40%58%89%fb%fb%f3%4f%ce%23%bf%cd%82%ee%d3%cb%91%a2%d0%f7%4b%af%df%0e%6f%5f%0d%ec%d3%ac%d7%b4%22%cd%e4%02%f7%27%38%ef%09%4d%61%a0%78%21%a0%90%4a%3d%5f%5d%6c%90%cd%21%83%70%b8%fe%bd%68%ee%a6%df%61%36%e8%b6%bb%03%ba%b6%7c%41%e5%67%99%42%43%e9%c7%96%83%ae%54%18%80%df%3e%56%c9%13%11%2d%71%6d%d6%40%36%00%e9%14%8b%42%2c%ea%6e%3a%b6%62%dd%d5%fa%f9%1d%52%1e%99%12%d9%6c%bf%ab%c8%77%81%90%5c%02%55%23%d3%13%66%ab%1f%b7%45%22%50%e0%7f%98%cf%d4%13%3e%33%50%d0%db%9c%54%dc%d9%6d%1a%0f%4b%10%c1%06%bc%2e%6e%b4%70%56%21%99%11%e5%8c%bc%d0%fc%47%4d%74%97%d4%d1%57%7c%d5%f2%e7%ee%10%ed%3f%36%25%38%06%40%2c%b3%27%ad%ce%c5%81%f2%7a%dd%7c%3b%58%49%af%14%89%23%d0%8d%96%5a%e5%3d%38%d0%76%f0%f7%8a%c7%44%0a%82%8a%8c%b8%66%06%0d%a3%fc%f0%2f%b5%dd%cc%70%bd%4b%11%c2%46%b6%83%af%68%5a%d7
+
-- 
1.9.1

