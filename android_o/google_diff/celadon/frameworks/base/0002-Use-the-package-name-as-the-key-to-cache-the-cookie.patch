From 649bc71b15b10552677b3225a3e91e91090652c3 Mon Sep 17 00:00:00 2001
From: "Yan, WalterX" <walterx.yan@intel.com>
Date: Wed, 25 Apr 2018 15:34:06 +0800
Subject: [PATCH 02/16] Use the package name as the key to cache the cookie.

PackageParser.Package will be changed after re-installing an
instant app. Before the cookie persist, to uninstall the app,
to install it, then to get the cookie immediately will not
get it from the cache (mPendingPersistCookies).

Test: run cst -m CtsAppSecurityHostTestCases \
-t android.appsecurity.cts.InstantCookieHostTest

Change-Id: Id353b63c5a985d224aa6fce137b13f9aecf810da
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-61156
Signed-off-by: Yan, WalterX <walterx.yan@intel.com>
---
 .../java/com/android/server/pm/InstantAppRegistry.java     | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/services/core/java/com/android/server/pm/InstantAppRegistry.java b/services/core/java/com/android/server/pm/InstantAppRegistry.java
index e1e5b35..94c945e 100644
--- a/services/core/java/com/android/server/pm/InstantAppRegistry.java
+++ b/services/core/java/com/android/server/pm/InstantAppRegistry.java
@@ -1159,7 +1159,7 @@ class InstantAppRegistry {
         // the fact that package are cached by the system so the ==
         // comparison would match and we end up with a way to cancel
         // persisting the cookie for a user and package.
-        private final SparseArray<ArrayMap<PackageParser.Package, SomeArgs>> mPendingPersistCookies
+        private final SparseArray<ArrayMap<String, SomeArgs>> mPendingPersistCookies
                 = new SparseArray<>();
 
         public CookiePersistence(Looper looper) {
@@ -1188,10 +1188,10 @@ class InstantAppRegistry {
 
         public @Nullable byte[] getPendingPersistCookieLPr(@NonNull PackageParser.Package pkg,
                 @UserIdInt int userId) {
-            ArrayMap<PackageParser.Package, SomeArgs> pendingWorkForUser =
+            ArrayMap<String, SomeArgs> pendingWorkForUser =
                     mPendingPersistCookies.get(userId);
             if (pendingWorkForUser != null) {
-                SomeArgs state = pendingWorkForUser.get(pkg);
+                SomeArgs state = pendingWorkForUser.get(pkg.packageName);
                 if (state != null) {
                     return (byte[]) state.arg1;
                 }
@@ -1211,7 +1211,7 @@ class InstantAppRegistry {
         private void addPendingPersistCookieLPw(@UserIdInt int userId,
                 @NonNull PackageParser.Package pkg, @NonNull byte[] cookie,
                 @NonNull File cookieFile) {
-            ArrayMap<PackageParser.Package, SomeArgs> pendingWorkForUser =
+            ArrayMap<String, SomeArgs> pendingWorkForUser =
                     mPendingPersistCookies.get(userId);
             if (pendingWorkForUser == null) {
                 pendingWorkForUser = new ArrayMap<>();
@@ -1220,16 +1220,16 @@ class InstantAppRegistry {
             SomeArgs args = SomeArgs.obtain();
             args.arg1 = cookie;
             args.arg2 = cookieFile;
-            pendingWorkForUser.put(pkg, args);
+            pendingWorkForUser.put(pkg.packageName, args);
         }
 
         private SomeArgs removePendingPersistCookieLPr(@NonNull PackageParser.Package pkg,
                 @UserIdInt int userId) {
-            ArrayMap<PackageParser.Package, SomeArgs> pendingWorkForUser =
+            ArrayMap<String, SomeArgs> pendingWorkForUser =
                     mPendingPersistCookies.get(userId);
             SomeArgs state = null;
             if (pendingWorkForUser != null) {
-                state = pendingWorkForUser.remove(pkg);
+                state = pendingWorkForUser.remove(pkg.packageName);
                 if (pendingWorkForUser.isEmpty()) {
                     mPendingPersistCookies.remove(userId);
                 }
-- 
1.9.1

