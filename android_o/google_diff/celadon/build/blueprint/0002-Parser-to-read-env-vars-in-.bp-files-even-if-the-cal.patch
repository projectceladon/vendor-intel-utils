From 49967d321895497613786471d832cd3edb4a6752 Mon Sep 17 00:00:00 2001
From: "Gupta Kumar, Sanjiv" <sanjiv.kumar.gupta@intel.com>
Date: Mon, 6 Nov 2017 10:04:36 +0530
Subject: [PATCH 2/2] Parser to read env vars in .bp files even if the caller
 destroys shell variables.

Currently soong clears the env before parsing the .bp files, however it stashes the env vars in config.
With this fix, We allow the callers to provide an environment Handle as a fallback, if the variable is not found via os.LookupEnv

Change-Id: I33959ad5c6fdd80711232fcf5695dde5a2db6c2f
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-52213
Category: Device Enablement
Origin: Internal
Upstream-Candidate: yes
Signed-off-by: Gupta Kumar, Sanjiv <sanjiv.kumar.gupta@intel.com>
---
 bootstrap/command.go  |  1 +
 context.go            | 12 ++++++++++--
 parser/parser.go      | 24 ++++++++++++++++++++++--
 parser/parser_test.go |  2 +-
 unpack_test.go        |  2 +-
 5 files changed, 35 insertions(+), 6 deletions(-)

diff --git a/bootstrap/command.go b/bootstrap/command.go
index 7c220e5..6754541 100644
--- a/bootstrap/command.go
+++ b/bootstrap/command.go
@@ -116,6 +116,7 @@ func Main(ctx *blueprint.Context, config interface{}, extraNinjaFileDeps ...stri
 	ctx.RegisterModuleType("blueprint_go_binary", newGoBinaryModuleFactory(bootstrapConfig, StageMain))
 	ctx.RegisterTopDownMutator("bootstrap_stage", propagateStageBootstrap)
 	ctx.RegisterSingletonType("bootstrap", newSingletonFactory(bootstrapConfig))
+        ctx.SetEnvHandle(config)
 
 	ctx.RegisterSingletonType("glob", globSingletonFactory(ctx))
 
diff --git a/context.go b/context.go
index 82cb7ed..7989d39 100644
--- a/context.go
+++ b/context.go
@@ -29,7 +29,7 @@ import (
 	"sync/atomic"
 	"text/scanner"
 	"text/template"
-
+        
 	"github.com/google/blueprint/parser"
 	"github.com/google/blueprint/pathtools"
 	"github.com/google/blueprint/proptools"
@@ -75,6 +75,7 @@ type Context struct {
 	earlyMutatorInfo    []*mutatorInfo
 	variantMutatorNames []string
 	moduleNinjaNames    map[string]*moduleGroup
+        hndl                parser.EnvHandle
 
 	depsModified uint32 // positive if a mutator modified the dependencies
 
@@ -514,6 +515,13 @@ func (c *Context) SetAllowMissingDependencies(allowMissingDependencies bool) {
 	c.allowMissingDependencies = allowMissingDependencies
 }
 
+func (c *Context) SetEnvHandle(config interface{}) {
+        conf, ok := config.(parser.EnvHandle) 
+        if ok {
+                c.hndl = conf
+        }
+}
+
 // Parse parses a single Blueprints file from r, creating Module objects for
 // each of the module definitions encountered.  If the Blueprints file contains
 // an assignment to the "subdirs" variable, then the subdirectories listed are
@@ -539,7 +547,7 @@ func (c *Context) parse(rootDir, filename string, r io.Reader,
 	scope.Remove("optional_subdirs")
 	scope.Remove("build")
 	scope.Remove("subdir_prefix")
-	file, errs = parser.ParseAndEval(filename, r, scope)
+	file, errs = parser.ParseAndEval(filename, r, scope, c.hndl)
 	if len(errs) > 0 {
 		for i, err := range errs {
 			if parseErr, ok := err.(*parser.ParseError); ok {
diff --git a/parser/parser.go b/parser/parser.go
index b43762d..30e8728 100644
--- a/parser/parser.go
+++ b/parser/parser.go
@@ -84,10 +84,17 @@ func parse(p *parser) (file *File, errs []error) {
 
 }
 
-func ParseAndEval(filename string, r io.Reader, scope *Scope) (file *File, errs []error) {
+//This interface is a fallback handle to take care of evaluating environment variables in .bp files.
+//Fallback is required just in case the caller wants to destroy the shell for some reason (Currently soong does it)
+type EnvHandle interface {
+        Getenv(s string) string
+}
+
+func ParseAndEval(filename string, r io.Reader, scope *Scope,h EnvHandle) (file *File, errs []error) {
 	p := newParser(r, scope)
 	p.eval = true
 	p.scanner.Filename = filename
+	p.hndl = h
 
 	return parse(p)
 }
@@ -99,6 +106,7 @@ func Parse(filename string, r io.Reader, scope *Scope) (file *File, errs []error
 	return parse(p)
 }
 
+
 type parser struct {
 	scanner  scanner.Scanner
 	tok      rune
@@ -106,6 +114,7 @@ type parser struct {
 	scope    *Scope
 	comments []*CommentGroup
 	eval     bool
+        hndl     EnvHandle
 }
 
 func newParser(r io.Reader, scope *Scope) *parser {
@@ -467,7 +476,18 @@ func (p *parser) parseEnvVariable() *String {
 	if p.tok == scanner.Ident {
 		str = p.scanner.TokenText()
 		pos = p.scanner.Position;
-		str = os.Getenv(str)
+                if p.eval {
+		        env_val, ok := os.LookupEnv(str)
+                        //Env variable not found on the shell, try falling back to EnvHandle
+                        if !ok {
+                                if p.hndl != nil { //Getenv from EnvHandle
+                                        env_val = p.hndl.Getenv(str)
+                                } else { //No EnvHandle, assume nil value
+                                        env_val = "" 
+                                }
+                        }
+                        str = env_val;
+                }
 		p.accept(scanner.Ident)
 		p.accept(')')
 	} else {
diff --git a/parser/parser_test.go b/parser/parser_test.go
index bde67e5..57757a6 100644
--- a/parser/parser_test.go
+++ b/parser/parser_test.go
@@ -616,7 +616,7 @@ var validParseTestCases = []struct {
 func TestParseValidInput(t *testing.T) {
 	for _, testCase := range validParseTestCases {
 		r := bytes.NewBufferString(testCase.input)
-		file, errs := ParseAndEval("", r, NewScope(nil))
+		file, errs := ParseAndEval("", r, NewScope(nil), nil)
 		if len(errs) != 0 {
 			t.Errorf("test case: %s", testCase.input)
 			t.Errorf("unexpected errors:")
diff --git a/unpack_test.go b/unpack_test.go
index f470356..f3d3e61 100644
--- a/unpack_test.go
+++ b/unpack_test.go
@@ -506,7 +506,7 @@ type EmbeddedInterface interface{}
 func TestUnpackProperties(t *testing.T) {
 	for _, testCase := range validUnpackTestCases {
 		r := bytes.NewBufferString(testCase.input)
-		file, errs := parser.ParseAndEval("", r, parser.NewScope(nil))
+		file, errs := parser.ParseAndEval("", r, parser.NewScope(nil), nil)
 		if len(errs) != 0 {
 			t.Errorf("test case: %s", testCase.input)
 			t.Errorf("unexpected parse errors:")
-- 
1.9.1

