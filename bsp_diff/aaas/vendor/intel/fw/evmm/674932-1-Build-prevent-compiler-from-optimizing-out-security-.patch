From 7a68571ae8d2083a5282915a7398598f265b249b Mon Sep 17 00:00:00 2001
From: Qi Yadong <yadong.qi@intel.com>
Date: Mon, 24 Jun 2019 16:27:00 +0800
Subject: [PATCH] Build: prevent compiler from optimizing out security checks

Add below compiler flags:
	-fno-strict-overflow
	-fno-delete-null-pointer-checks
	-fwrapv

Add link flags:
	-z noexecstack

Change-Id: Id9aa55db40ecaf2d119d89f2b32d180b91904d06
Signed-off-by: Qi Yadong <yadong.qi@intel.com>
---
 Makefile                       | 9 +++++++++
 loader/stage0/rule.stage0_link | 2 +-
 loader/stage1/Makefile         | 2 +-
 vmm/Makefile                   | 2 +-
 4 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/Makefile b/Makefile
index 202d913..38d2e7b 100644
--- a/Makefile
+++ b/Makefile
@@ -59,6 +59,12 @@ CFLAGS += -static -nostdinc
 # Disable implicit builtin knowledge of functions
 CFLAGS += -fno-builtin
 
+# Do not assume null pointer deference does not exist
+CFLAGS += -fno-delete-null-pointer-checks
+
+# Treat signed integer overflow as twoâ€™s complement
+CFLAGS += -fwrapv
+
 # add warning checks as much as possible.
 # -Wconversion option will cause a warning like i += 1, so we strip this
 # warning option
@@ -82,6 +88,9 @@ CFLAGS += -fno-hosted -Wtrampolines -Wlogical-op
 # without this flag, the highest bit will be treated as sign bit
 # e.g. int a:2 = 3, but it's printf("%d", a) is -1.
 CFLAGS += -funsigned-bitfields
+
+# Do not assume that signed overflow does not occur
+CFLAGS += -fno-strict-overflow
 endif
 
 AFLAGS = -c -m64 $(EVMM_CMPL_FLAGS) -fPIC -static -nostdinc
diff --git a/loader/stage0/rule.stage0_link b/loader/stage0/rule.stage0_link
index 5c4d55d..f890fb6 100644
--- a/loader/stage0/rule.stage0_link
+++ b/loader/stage0/rule.stage0_link
@@ -1,6 +1,6 @@
 TARGET = stage0.elf
 
-LDFLAGS = -T linker.lds -z max-page-size=4096
+LDFLAGS = -T linker.lds -z max-page-size=4096 -z noexecstack
 
 ifeq (, $(findstring -DDEBUG, $(EVMM_CMPL_FLAGS)))
 LDFLAGS += -s
diff --git a/loader/stage1/Makefile b/loader/stage1/Makefile
index f800e29..f43bac1 100644
--- a/loader/stage1/Makefile
+++ b/loader/stage1/Makefile
@@ -17,7 +17,7 @@ ASOURCES = $(wildcard *.S)
 
 include $(PROJS)/rule.linux
 
-LDFLAGS = -e stage1_main -m elf_x86_64 -pie -z max-page-size=4096
+LDFLAGS = -e stage1_main -m elf_x86_64 -pie -z max-page-size=4096 -z noexecstack
 
 ifeq (, $(findstring -DDEBUG, $(EVMM_CMPL_FLAGS)))
 LDFLAGS += -s
diff --git a/vmm/Makefile b/vmm/Makefile
index 1a26d3a..9233f1c 100644
--- a/vmm/Makefile
+++ b/vmm/Makefile
@@ -35,7 +35,7 @@ AFLAGS += $(AINCLUDES)
 
 include $(PROJS)/rule.linux
 
-LDFLAGS = -e vmm_main -pie -z max-page-size=4096
+LDFLAGS = -e vmm_main -pie -z max-page-size=4096 -z noexecstack
 
 ifeq (, $(findstring -DDEBUG, $(EVMM_CMPL_FLAGS)))
 LDFLAGS += -s
-- 
2.22.0

