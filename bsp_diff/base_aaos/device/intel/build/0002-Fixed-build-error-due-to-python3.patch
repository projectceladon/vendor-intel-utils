From a423ef544e72847fd682d3d7691919322722a249 Mon Sep 17 00:00:00 2001
From: Ankit Agarwal <ankit.agarwal@intel.com>
Date: Tue, 18 Jun 2024 11:05:36 +0530
Subject: [PATCH] Fixed build error due to python3.

Observed errors when compiling using python3.
Fixed python3 based issues.

Tests: Prepared EB, there is no issue.

Tracked-On: NA
Signed-off-by: Ankit Agarwal <ankit.agarwal@intel.com>
---
 releasetools/flashfiles_from_target_files | 44 +++++++++++------------
 releasetools/intel_common.py              |  2 +-
 2 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/releasetools/flashfiles_from_target_files b/releasetools/flashfiles_from_target_files
index 02de5ff..70ac96e 100755
--- a/releasetools/flashfiles_from_target_files
+++ b/releasetools/flashfiles_from_target_files
@@ -97,14 +97,14 @@ class VariantIpGenerator:
 
     def __add_variant_flashfile(self, ip, variant):
         variant_flashfile = self.flashfile + "_" + variant + ".ini"
-        print "Variant flashfile = %s"%variant_flashfile
+        print("Variant flashfile = {}".format(variant_flashfile))
         # Sanity check to avoid future silent removal
         eg = self.empty_groups(ip)
         if eg:
             raise AssertionError("Unexpected malformed section %s" % eg[0])
 
         if os.path.isfile(variant_flashfile):
-            print "Reading INI configuration for %s ..."%variant
+            print("Reading INI configuration for {} ...".format(variant))
             with open(variant_flashfile, "r") as f:
                 ip.parse(f)
         self.variant_files = self.variant_files_common
@@ -125,7 +125,7 @@ class VariantIpGenerator:
         # This may happen when a mixin (platform level) disables a feature, while
         # local flashfile.ini (variant level) is kept and customizes this feature.
         for s in self.empty_groups(ip):
-            print "Removing malformed section : ", s
+            print("Removing malformed section : {}".format(s))
             ip.delete_section(s)
 
     def empty_groups(self, ip):
@@ -214,7 +214,7 @@ def getFromZip(zip_path, filename):
     with zipfile.ZipFile(zip_path, "r") as zf:
         data = zf.open(filename).read()
         info = zf.getinfo(filename)
-    return (common.File(filename, data), (info.external_attr >> 16L) & 0xFFFF)
+    return (common.File(filename, data), (info.external_attr >> 16) & 0xFFFF)
 
 def getProvdataVariants(unpack_dir):
     variants = []
@@ -250,7 +250,7 @@ def process_image(unpack_dir, dest_zip, source, target, configs, variant=None, t
     if target_out in flashfile_content:
         return
     else:
-        print "-- Adding", target_out
+        print("-- Adding {}".format(target_out))
     # Default is no special permissions
     perms = None
     # retrieve file from target file package based on source & target strings
@@ -310,7 +310,7 @@ def process_image_fast(product_out, flashfiles_out, source, target, variant=None
     if target_out in flashfile_content:
         return
 
-    print "-- Adding", target_out
+    print("-- Adding {}".format(target_out))
     outfile = os.path.join(flashfiles_out, target_out)
     if not os.path.exists(os.path.dirname(outfile)):
         os.mkdir(os.path.dirname(outfile))
@@ -374,7 +374,7 @@ def main(argv):
 
         flashfile = getIntermediates(product_out, "flashfiles", "flashfiles")
     else:
-        print "Unzipping target-files..."
+        print("Unzipping target-files...")
         unpack_dir = common.UnzipTemp(args[0])
         if OPTIONS.add_image:
             input_super = os.path.join(unpack_dir, "IMAGES")
@@ -392,13 +392,13 @@ def main(argv):
 
     # Retrieve "generic" PFT instructions from target file package
     if os.path.isfile(flashfile + ".ini"):
-        print "Reading INI configuration..."
+        print("Reading INI configuration...")
         with open(flashfile + ".ini", "r") as f:
             ip = iniparser.IniParser()
             ip.parse(f)
         configs, files = flash_cmd_generator.parse_config([ip], build_type, platform)
     elif os.path.isfile(flashfile + ".json") and not OPTIONS.unified_variants:
-        print "Reading JSON configuration..."
+        print("Reading JSON configuration...")
         with open(flashfile + ".json", "r") as f:
             conf = json.loads(f.read())
         configs, files = flashxml.parse_config(conf, build_type, platform)
@@ -406,25 +406,25 @@ def main(argv):
         if not OPTIONS.mv_config_default:
             common.Usage(__doc__)
             sys.exit(1)
-        print "Reading JSON FLS configuration..."
+        print("Reading JSON FLS configuration...")
         with open(flashfile + "_fls.json", "r") as f:
             conf = json.loads(f.read())
         configs, files = flashflsxml.parse_config(conf, build_type, platform, OPTIONS.mv_config_default, system)
     else:
-        print "Exiting, Missing correct flashfile configuration for generating Flashfiles."
+        print("Exiting, Missing correct flashfile configuration for generating Flashfiles.")
         sys.exit(1)
 
     if OPTIONS.fast:
         fastff_dir = args[1]
         # If mega flashfile is enabled, create multi-variant version of PFT instructions
         if OPTIONS.unified_variants or OPTIONS.variants :
-            print "Adding variant specific configurations to ip..."
+            print("Adding variant specific configurations to ip...")
             vip = VariantIpGenerator(ip, configs, OPTIONS.variants, variant_files, flashfile)
             vip.generate_variant_ip()
             configs, cmd_files = flash_cmd_generator.parse_config(vip.variant_ips, build_type, platform)
             cmd_files = set([i for _,i in cmd_files])
 
-        print "Adding required binaries..."
+        print("Adding required binaries...")
         for src, target in files:
             if OPTIONS.variants:
                 for variant in OPTIONS.variants:
@@ -442,7 +442,7 @@ def main(argv):
                 src,target = file.split(":")
                 process_image_fast(product_out, fastff_dir, src, target, variant, variantFilename(target, variant))
 
-        print "Generating JSON flash configuration files..."
+        print("Generating JSON flash configuration files...")
         for fn, data in configs:
             with open(os.path.join(fastff_dir,fn), 'w') as file:
                 file.write(data)
@@ -450,14 +450,14 @@ def main(argv):
         with zipfile.ZipFile(args[1], "w", zipfile.ZIP_DEFLATED,allowZip64=True) as dest_zip:
             # If mega flashfile is enabled, create multi-variant version of PFT instructions
             if OPTIONS.unified_variants or OPTIONS.variants :
-                print "Adding variant specific configurations to ip..."
+                print("Adding variant specific configurations to ip...")
                 vip = VariantIpGenerator(ip, configs, OPTIONS.variants, variant_files, flashfile)
                 vip.generate_variant_ip()
                 configs, cmd_files = flash_cmd_generator.parse_config(vip.variant_ips, build_type, platform)
                 cmd_files = set([i for _,i in cmd_files])
 
             # Using "generic" instructions as reference, grab required files & insert into flashfile zip
-            print "Adding required binaries..."
+            print("Adding required binaries...")
             for src, target in files:
                 if OPTIONS.variants:
                     for variant in OPTIONS.variants:
@@ -477,20 +477,20 @@ def main(argv):
                     process_image(unpack_dir, dest_zip, src, target, configs, variant, variantFilename(target, variant))
 
             # Write flash_cmd_generator parsed PFT flashing instructions to file & insert into flashfile zip
-            print "Generating JSON flash configuration files..."
+            print("Generating JSON flash configuration files...")
             for fn, data in configs:
                 ifile = common.File(fn, data)
                 ifile.AddToZip(dest_zip)
-    print "All done."
+    print("All done.")
 
 if __name__ == '__main__':
     try:
         common.CloseInheritedPipes()
         main(sys.argv[1:])
-    except common.ExternalError, e:
-        print
-        print "   ERROR: %s" % (e,)
-        print
+    except common.ExternalError as e:
+        print("")
+        print("   ERROR: {}".format(e))
+        print("")
         sys.exit(1)
     finally:
         common.Cleanup()
diff --git a/releasetools/intel_common.py b/releasetools/intel_common.py
index c2267e9..32184f6 100644
--- a/releasetools/intel_common.py
+++ b/releasetools/intel_common.py
@@ -1,4 +1,4 @@
-
+#!/usr/bin/env python
 #
 # Copyright (C) 2014 The Android Open Source Project
 #
-- 
2.34.1

