From c15ff778173887d981af133083e8eafcf3f10e45 Mon Sep 17 00:00:00 2001
From: Ratnesh Kumar Rai <ratnesh.kumar.rai@intel.com>
Date: Mon, 20 Feb 2023 22:40:36 +0530
Subject: [PATCH] Changes to add oneDNN for OpenVINO 2022.3.0

- Added Android.bp file to generate libdnnl
- Added files that are generated during cmake

Tracked-On: OAM-106595
Signed-off-by: Nagamani Chennuboina <nagamani.chennuboina@intel.com>
Signed-off-by: Ratnesh Kumar Rai <ratnesh.kumar.rai@intel.com>
---
 Android.bp                         | 497 +++++++++++++++++++++++++++++
 include/oneapi/dnnl/dnnl_config.h  | 157 +++++++++
 include/oneapi/dnnl/dnnl_version.h |  36 +++
 3 files changed, 690 insertions(+)
 create mode 100644 Android.bp
 create mode 100644 include/oneapi/dnnl/dnnl_config.h
 create mode 100644 include/oneapi/dnnl/dnnl_version.h

diff --git a/Android.bp b/Android.bp
new file mode 100644
index 000000000..5fbace792
--- /dev/null
+++ b/Android.bp
@@ -0,0 +1,497 @@
+//#################################################
+cc_library_headers {
+    name: "libdnnl_headers",
+    vendor: true,
+    export_include_dirs: [
+        "include",
+        "src",
+        "src/../include"
+    ]
+}
+
+//#################################################
+
+cc_library_static {
+
+    name: "libdnnl",
+    proprietary: true,
+    owner: "intel",
+    compile_multilib: "64",
+
+    srcs: [
+        "src/common/batch_normalization.cpp",
+        "src/common/bfloat16.cpp",
+        "src/common/binary.cpp",
+        "src/common/broadcast_strategy.cpp",
+        "src/common/cache_blob_id.cpp",
+        "src/common/concat.cpp",
+        "src/common/convolution.cpp",
+        "src/common/convolution_pd.cpp",
+        "src/common/deconvolution.cpp",
+        "src/common/dnnl_debug.cpp",
+        "src/common/dnnl_debug_autogenerated.cpp",
+        "src/common/dnnl_thread.cpp",
+        "src/common/eltwise.cpp",
+        "src/common/engine.cpp",
+        "src/common/experimental.cpp",
+        "src/common/fpmath_mode.cpp",
+        "src/common/gemm.cpp",
+        "src/common/inner_product.cpp",
+        "src/common/ittnotify.cpp",
+        "src/common/layer_normalization.cpp",
+        "src/common/lrn.cpp",
+        "src/common/matmul.cpp",
+        "src/common/memory.cpp",
+        "src/common/memory_debug.cpp",
+        "src/common/memory_desc_wrapper.cpp",
+        "src/common/memory_storage.cpp",
+        "src/common/memory_tracking.cpp",
+        "src/common/memory_zero_pad.cpp",
+        "src/common/pooling.cpp",
+        "src/common/prelu.cpp",
+        "src/common/primitive.cpp",
+        "src/common/primitive_attr.cpp",
+        "src/common/primitive_cache.cpp",
+        "src/common/primitive_desc.cpp",
+        "src/common/primitive_desc_iface.cpp",
+        "src/common/primitive_desc_iterator.cpp",
+        "src/common/primitive_exec_types.cpp",
+        "src/common/primitive_hashing.cpp",
+        "src/common/primitive_hashing_utils.cpp",
+        "src/common/primitive_iface.cpp",
+        "src/common/query.cpp",
+        "src/common/reduction.cpp",
+        "src/common/reorder.cpp",
+        "src/common/resampling.cpp",
+        "src/common/rnn.cpp",
+        "src/common/rw_mutex.cpp",
+        "src/common/scratchpad.cpp",
+        "src/common/scratchpad_debug.cpp",
+        "src/common/serialization.cpp",
+        "src/common/shuffle.cpp",
+        "src/common/softmax.cpp",
+        "src/common/stream.cpp",
+        "src/common/sum.cpp",
+        "src/common/utils.cpp",
+        "src/common/verbose.cpp",
+        "src/common/ittnotify/ittnotify_static.c",
+        "src/common/ittnotify/jitprofiling.c",
+        "src/common/ittnotify/ittptmark64.S",
+        "src/cpu/bfloat16.cpp",
+        "src/cpu/binary_injector_utils.cpp",
+        "src/cpu/cpu_batch_normalization_list.cpp",
+        "src/cpu/cpu_batch_normalization_utils.cpp",
+        "src/cpu/cpu_binary_list.cpp",
+        "src/cpu/cpu_concat.cpp",
+        "src/cpu/cpu_convolution_list.cpp",
+        "src/cpu/cpu_deconvolution_list.cpp",
+        "src/cpu/cpu_eltwise_list.cpp",
+        "src/cpu/cpu_engine.cpp",
+        "src/cpu/cpu_inner_product_list.cpp",
+        "src/cpu/cpu_layer_normalization_list.cpp",
+        "src/cpu/cpu_lrn_list.cpp",
+        "src/cpu/cpu_pooling_list.cpp",
+        "src/cpu/cpu_prelu_list.cpp",
+        "src/cpu/cpu_reduction_list.cpp",
+        "src/cpu/cpu_resampling_list.cpp",
+        "src/cpu/cpu_rnn_list.cpp",
+        "src/cpu/cpu_shuffle_list.cpp",
+        "src/cpu/cpu_softmax_list.cpp",
+        "src/cpu/cpu_sum.cpp",
+        "src/cpu/float16.cpp",
+        "src/cpu/gemm_convolution.cpp",
+        "src/cpu/gemm_convolution_utils.cpp",
+        "src/cpu/gemm_inner_product.cpp",
+        "src/cpu/gemm_inner_product_utils.cpp",
+        "src/cpu/gemm_x8s8s32x_conv_zp_src_pad_comp.cpp",
+        "src/cpu/gemm_x8s8s32x_convolution.cpp",
+        "src/cpu/gemm_x8s8s32x_convolution_utils.cpp",
+        "src/cpu/gemm_x8s8s32x_inner_product.cpp",
+        "src/cpu/nchw_pooling.cpp",
+        "src/cpu/ncsp_batch_normalization.cpp",
+        "src/cpu/nhwc_pooling.cpp",
+        "src/cpu/nspc_batch_normalization.cpp",
+        "src/cpu/platform.cpp",
+        "src/cpu/primitive_attr_postops.cpp",
+        "src/cpu/ref_batch_normalization.cpp",
+        "src/cpu/ref_binary.cpp",
+        "src/cpu/ref_convolution.cpp",
+        "src/cpu/ref_convolution_int8.cpp",
+        "src/cpu/ref_deconvolution.cpp",
+        "src/cpu/ref_depthwise_injector.cpp",
+        "src/cpu/ref_eltwise.cpp",
+        "src/cpu/ref_inner_product.cpp",
+        "src/cpu/ref_inner_product_int8.cpp",
+        "src/cpu/ref_layer_normalization.cpp",
+        "src/cpu/ref_lrn.cpp",
+        "src/cpu/ref_pooling.cpp",
+        "src/cpu/ref_prelu.cpp",
+        "src/cpu/ref_reduction.cpp",
+        "src/cpu/ref_resampling.cpp",
+        "src/cpu/ref_shuffle.cpp",
+        "src/cpu/ref_softmax.cpp",
+        "src/cpu/simple_concat.cpp",
+        "src/cpu/simple_layer_normalization.cpp",
+        "src/cpu/simple_resampling.cpp",
+        "src/cpu/simple_sum.cpp",
+        "src/cpu/zero_point_utils.cpp",
+        "src/cpu/gemm/f32/gemm_utils_f32.cpp",
+        "src/cpu/gemm/f32/ref_gemm_f32.cpp",
+        "src/cpu/gemm/gemm.cpp",
+        "src/cpu/gemm/gemm_pack.cpp",
+        "src/cpu/gemm/s8x8s32/ref_gemm_s8x8s32.cpp",
+        "src/cpu/gemm/s8x8s32/simple_gemm_s8s8s32.cpp",
+        "src/cpu/matmul/cpu_matmul_list.cpp",
+        "src/cpu/matmul/gemm_bf16_matmul.cpp",
+        "src/cpu/matmul/gemm_f32_matmul.cpp",
+        "src/cpu/matmul/gemm_x8s8s32x_matmul.cpp",
+        "src/cpu/matmul/ref_matmul.cpp",
+        "src/cpu/matmul/ref_matmul_int8.cpp",
+        "src/cpu/reorder/cpu_reorder.cpp",
+        "src/cpu/reorder/cpu_reorder_comp_bf16_s8.cpp",
+        "src/cpu/reorder/cpu_reorder_comp_f32_s8.cpp",
+        "src/cpu/reorder/cpu_reorder_comp_s8_s8.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_bf16.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_bin.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_f16.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_f32_bf16.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_f32_bin.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_f32_f16.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_f32_f32.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_f32_s32.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_f32_s8.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_f32_u8.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_s32.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_s8.cpp",
+        "src/cpu/reorder/cpu_reorder_regular_u8.cpp",
+        "src/cpu/rnn/brgemm_cell_common.cpp",
+        "src/cpu/rnn/cell_common.cpp",
+        "src/cpu/rnn/cell_gru.cpp",
+        "src/cpu/rnn/cell_gru_lbr.cpp",
+        "src/cpu/rnn/ref_postgemm_gru.cpp",
+        "src/cpu/rnn/ref_postgemm_gru_lbr.cpp",
+        "src/cpu/rnn/ref_postgemm_lstm.cpp",
+        "src/cpu/rnn/ref_postgemm_lstm_projection.cpp",
+        "src/cpu/rnn/ref_postgemm_rnn.cpp",
+        "src/cpu/rnn/ref_rnn.cpp",
+        "src/cpu/rnn/rnn_utils.cpp",
+        "src/cpu/jit_utils/jit_utils.cpp",
+        "src/cpu/jit_utils/linux_perf/linux_perf.cpp",
+        "src/cpu/x64/amx_tile_configure.cpp",
+        "src/cpu/x64/brgemm/brgemm.cpp",
+        "src/cpu/x64/brgemm/brgemm_utils.cpp",
+        "src/cpu/x64/brgemm/jit_brdgmm_kernel.cpp",
+        "src/cpu/x64/brgemm/jit_brgemm_amx_uker.cpp",
+        "src/cpu/x64/brgemm/jit_brgemm_kernel.cpp",
+        "src/cpu/x64/cpu_barrier.cpp",
+        "src/cpu/x64/cpu_isa_traits.cpp",
+        "src/cpu/x64/cpu_reducer.cpp",
+        "src/cpu/x64/gemm/amx/jit_avx512_core_amx_copy_kern.cpp",
+        "src/cpu/x64/gemm/amx/jit_avx512_core_amx_gemm_kern.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_gemm_bf16bf16f32_kern.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_gemv_bf16bf16f32_kern.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_s16_24x8_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_s16_24x8_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_s16_24x8_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_s16_24x8_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_s16_48x8_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_s16_48x8_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_s16_48x8_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/bf16/jit_avx512_core_s16_48x8_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx2_f32_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx2_f32_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx2_f32_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx2_f32_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx2_kernel_sgemm_kern.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx512_core_f32_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx512_core_f32_copy_at_kern_part1_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx512_core_f32_copy_at_kern_part2_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx512_core_f32_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx512_core_f32_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx512_core_gemm_smalln_tn_f32_kern.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_f32_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_f32_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_f32_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_f32_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_gemv_t_f32_kern.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_kernel_b0_sgemm_kern_part1_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_kernel_b0_sgemm_kern_part2_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_kernel_sgemm_kern_part1_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_avx_kernel_sgemm_kern_part2_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_sse41_f32_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_sse41_f32_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_sse41_f32_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_sse41_f32_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_sse41_gemv_n_f32_kern.cpp",
+        "src/cpu/x64/gemm/f32/jit_sse41_gemv_t_f32_kern.cpp",
+        "src/cpu/x64/gemm/f32/jit_sse41_kernel_b0_sgemm_kern_autogen.cpp",
+        "src/cpu/x64/gemm/f32/jit_sse41_kernel_sgemm_kern_autogen.cpp",
+        "src/cpu/x64/gemm/gemm_driver.cpp",
+        "src/cpu/x64/gemm/gemm_info.cpp",
+        "src/cpu/x64/gemm/gemm_pack.cpp",
+        "src/cpu/x64/gemm/gemv_driver.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_gemm_s8u8s32_kern.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_u8_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_u8_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_u8_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_u8_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_u8_copy_sum_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_u8_copy_sum_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_u8_copy_sum_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_u8_copy_sum_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_vnni_u8_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_vnni_u8_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_vnni_u8_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_vnni_u8_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_vnni_u8_copy_sum_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_vnni_u8_copy_sum_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_vnni_u8_copy_sum_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx2_vnni_u8_copy_sum_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_gemm_s8u8s32_kern.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_gemv_s8x8s32.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_kernel_gemv_s8x8s32_kern.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_u8_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_u8_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_u8_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_u8_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_kernel_b0_b_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_kernel_b0_c_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_kernel_b0_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_kernel_b0_r_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_kernel_b_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_kernel_c_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_kernel_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_kernel_r_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_u8_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_u8_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_u8_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_u8_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_u8_copy_sum_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_u8_copy_sum_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_u8_copy_sum_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_avx_u8_copy_sum_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_kernel_b0_b_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_kernel_b0_c_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_kernel_b0_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_kernel_b0_r_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_kernel_b_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_kernel_c_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_kernel_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_kernel_r_gemm_s8u8s32_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_u8_copy_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_u8_copy_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_u8_copy_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_u8_copy_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_u8_copy_sum_an_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_u8_copy_sum_at_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_u8_copy_sum_bn_kern_autogen.cpp",
+        "src/cpu/x64/gemm/s8x8s32/jit_sse41_u8_copy_sum_bt_kern_autogen.cpp",
+        "src/cpu/x64/gemm_bf16_convolution.cpp",
+        "src/cpu/x64/gemm_bf16_inner_product.cpp",
+        "src/cpu/x64/injectors/injector_utils.cpp",
+        "src/cpu/x64/injectors/jit_uni_binary_injector.cpp",
+        "src/cpu/x64/injectors/jit_uni_depthwise_injector.cpp",
+        "src/cpu/x64/injectors/jit_uni_eltwise_injector.cpp",
+        "src/cpu/x64/injectors/jit_uni_postops_injector.cpp",
+        "src/cpu/x64/injectors/jit_uni_quantization_injector.cpp",
+        "src/cpu/x64/ip_convolution.cpp",
+        "src/cpu/x64/jit_avx2_1x1_conv_kernel_f32.cpp",
+        "src/cpu/x64/jit_avx2_1x1_conv_kernel_f32_old.cpp",
+        "src/cpu/x64/jit_avx2_1x1_convolution.cpp",
+        "src/cpu/x64/jit_avx2_1x1_convolution_with_dw_conv.cpp",
+        "src/cpu/x64/jit_avx2_conv_kernel_f32.cpp",
+        "src/cpu/x64/jit_avx2_convolution.cpp",
+        "src/cpu/x64/jit_avx512_common_1x1_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_common_1x1_convolution.cpp",
+        "src/cpu/x64/jit_avx512_common_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_common_convolution.cpp",
+        "src/cpu/x64/jit_avx512_common_resampling.cpp",
+        "src/cpu/x64/jit_avx512_core_amx_1x1_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_amx_1x1_convolution.cpp",
+        "src/cpu/x64/jit_avx512_core_amx_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_amx_convolution.cpp",
+        "src/cpu/x64/jit_avx512_core_amx_deconvolution.cpp",
+        "src/cpu/x64/jit_avx512_core_bf16_1x1_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_bf16_1x1_convolution.cpp",
+        "src/cpu/x64/jit_avx512_core_bf16_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_bf16_convolution.cpp",
+        "src/cpu/x64/jit_avx512_core_bf16_dw_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_bf16_sum.cpp",
+        "src/cpu/x64/jit_avx512_core_bf16cvt.cpp",
+        "src/cpu/x64/jit_avx512_core_f32_wino_conv_2x3.cpp",
+        "src/cpu/x64/jit_avx512_core_f32_wino_conv_4x3.cpp",
+        "src/cpu/x64/jit_avx512_core_f32_wino_conv_4x3_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_fork_bf16_dw_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_fp16cvt.cpp",
+        "src/cpu/x64/jit_avx512_core_u8s8s32x_wino_convolution.cpp",
+        "src/cpu/x64/jit_avx512_core_x8s8s32x_1x1_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_x8s8s32x_1x1_convolution.cpp",
+        "src/cpu/x64/jit_avx512_core_x8s8s32x_conv_kernel.cpp",
+        "src/cpu/x64/jit_avx512_core_x8s8s32x_convolution.cpp",
+        "src/cpu/x64/jit_avx512_core_x8s8s32x_deconvolution.cpp",
+        "src/cpu/x64/jit_brdgmm_dw_conv.cpp",
+        "src/cpu/x64/jit_brgemm_1x1_conv.cpp",
+        "src/cpu/x64/jit_brgemm_conv.cpp",
+        "src/cpu/x64/jit_brgemm_conv_bwd.cpp",
+        "src/cpu/x64/jit_brgemm_conv_bwd_w.cpp",
+        "src/cpu/x64/jit_brgemm_conv_comp_pad_kernel.cpp",
+        "src/cpu/x64/jit_brgemm_conv_trans_kernel.cpp",
+        "src/cpu/x64/jit_brgemm_conv_utils.cpp",
+        "src/cpu/x64/jit_brgemm_decompress_kernel.cpp",
+        "src/cpu/x64/jit_brgemm_inner_product.cpp",
+        "src/cpu/x64/jit_brgemm_inner_product_utils.cpp",
+        "src/cpu/x64/jit_brgemm_transpose_utils.cpp",
+        "src/cpu/x64/jit_gemm_convolution_utils.cpp",
+        "src/cpu/x64/jit_gemm_inner_product_utils.cpp",
+        "src/cpu/x64/jit_gemm_x8s8s32x_conv_zp_src_pad_comp.cpp",
+        "src/cpu/x64/jit_gemm_x8s8s32x_convolution_utils.cpp",
+        "src/cpu/x64/jit_sse41_1x1_conv_kernel_f32.cpp",
+        "src/cpu/x64/jit_sse41_1x1_convolution.cpp",
+        "src/cpu/x64/jit_sse41_conv_kernel_f32.cpp",
+        "src/cpu/x64/jit_sse41_convolution.cpp",
+        "src/cpu/x64/jit_transpose_utils.cpp",
+        "src/cpu/x64/jit_uni_batch_normalization.cpp",
+        "src/cpu/x64/jit_uni_batch_normalization_s8.cpp",
+        "src/cpu/x64/jit_uni_binary.cpp",
+        "src/cpu/x64/jit_uni_binary_kernel.cpp",
+        "src/cpu/x64/jit_uni_deconv_zp_pad_str_kernel.cpp",
+        "src/cpu/x64/jit_uni_dw_conv_kernel_f32.cpp",
+        "src/cpu/x64/jit_uni_dw_conv_kernel_utils.cpp",
+        "src/cpu/x64/jit_uni_dw_conv_row_f32.cpp",
+        "src/cpu/x64/jit_uni_dw_convolution.cpp",
+        "src/cpu/x64/jit_uni_eltwise.cpp",
+        "src/cpu/x64/jit_uni_eltwise_int.cpp",
+        "src/cpu/x64/jit_uni_fork_dw_conv_kernel_f32.cpp",
+        "src/cpu/x64/jit_uni_fork_dw_convolution.cpp",
+        "src/cpu/x64/jit_uni_fork_softmax.cpp",
+        "src/cpu/x64/jit_uni_fork_softmax_kernel_f32.cpp",
+        "src/cpu/x64/jit_uni_i8i8_pooling.cpp",
+        "src/cpu/x64/jit_uni_layer_normalization.cpp",
+        "src/cpu/x64/jit_uni_planar_conv_kernel_f32.cpp",
+        "src/cpu/x64/jit_uni_planar_convolution.cpp",
+        "src/cpu/x64/jit_uni_pool_kernel.cpp",
+        "src/cpu/x64/jit_uni_pooling.cpp",
+        "src/cpu/x64/jit_uni_reduction.cpp",
+        "src/cpu/x64/jit_uni_reduction_kernel.cpp",
+        "src/cpu/x64/jit_uni_reorder.cpp",
+        "src/cpu/x64/jit_uni_reorder_utils.cpp",
+        "src/cpu/x64/jit_uni_resampling.cpp",
+        "src/cpu/x64/jit_uni_resampling_kernel.cpp",
+        "src/cpu/x64/jit_uni_softmax.cpp",
+        "src/cpu/x64/jit_uni_tbb_batch_normalization.cpp",
+        "src/cpu/x64/jit_uni_x8s8s32x_1x1_conv_kernel.cpp",
+        "src/cpu/x64/jit_uni_x8s8s32x_1x1_convolution.cpp",
+        "src/cpu/x64/jit_uni_x8s8s32x_conv_kernel.cpp",
+        "src/cpu/x64/jit_uni_x8s8s32x_convolution.cpp",
+        "src/cpu/x64/jit_uni_x8s8s32x_deconvolution.cpp",
+        "src/cpu/x64/lrn/jit_avx512_common_lrn.cpp",
+        "src/cpu/x64/lrn/jit_avx512_common_lrn_bwd_base.cpp",
+        "src/cpu/x64/lrn/jit_avx512_common_lrn_bwd_blocked.cpp",
+        "src/cpu/x64/lrn/jit_avx512_common_lrn_bwd_nhwc.cpp",
+        "src/cpu/x64/lrn/jit_avx512_common_lrn_fwd_base.cpp",
+        "src/cpu/x64/lrn/jit_avx512_common_lrn_fwd_blocked.cpp",
+        "src/cpu/x64/lrn/jit_avx512_common_lrn_fwd_nhwc.cpp",
+        "src/cpu/x64/lrn/jit_uni_lrn.cpp",
+        "src/cpu/x64/lrn/jit_uni_lrn_kernel.cpp",
+        "src/cpu/x64/matmul/brgemm_matmul.cpp",
+        "src/cpu/x64/matmul/brgemm_matmul_copy_utils.cpp",
+        "src/cpu/x64/matmul/brgemm_matmul_utils.cpp",
+        "src/cpu/x64/prelu/jit_prelu_backward.cpp",
+        "src/cpu/x64/prelu/jit_prelu_base_kernel.cpp",
+        "src/cpu/x64/prelu/jit_prelu_forward.cpp",
+        "src/cpu/x64/prelu/jit_prelu_reduction_kernel.cpp",
+        "src/cpu/x64/prelu/jit_prelu_utils.cpp",
+        "src/cpu/x64/prelu/jit_uni_prelu_backward_kernel.cpp",
+        "src/cpu/x64/prelu/jit_uni_prelu_forward_kernel.cpp",
+        "src/cpu/x64/rnn/brgemm_cell_common_bwd.cpp",
+        "src/cpu/x64/rnn/brgemm_cell_common_fwd.cpp",
+        "src/cpu/x64/rnn/brgemm_cell_common_reorders.cpp",
+        "src/cpu/x64/rnn/brgemm_cell_common_utils.cpp",
+        "src/cpu/x64/rnn/jit_brgemm_transpose_single_row.cpp",
+        "src/cpu/x64/rnn/jit_diff_weights_peephole.cpp",
+        "src/cpu/x64/rnn/jit_gates_reduction.cpp",
+        "src/cpu/x64/rnn/rnn_brgemm_utils.cpp",
+        "src/cpu/x64/shuffle/jit_uni_shuffle.cpp",
+        "src/cpu/x64/shuffle/jit_uni_shuffle_kernel.cpp",
+        "src/cpu/x64/utils/jit_io_helper.cpp"
+    ],
+
+    header_libs: [
+        "libdnnl_headers",
+        "libtbb_headers"
+    ],
+
+    cflags: [
+        "-O3",
+        "-std=c++11",
+        "-DANDROID",
+        "-D__ANDROID__",
+        "-D_FORTIFY_SOURCE=2",
+        "-DNDEBUG",
+        "-Wformat",
+        "-Wall",
+        "-Wformat-security",
+        "-Wuninitialized",
+        "-Wno-undef",
+        "-Wno-unused-function",
+        "-Winit-self",
+        "-Wmaybe-uninitialized",
+        "-Wreturn-type",
+        "-Wno-unused-variable",
+        "-Wno-unused-parameter",
+        "-Wno-error=redundant-move",
+        "-Wno-unknown-pragmas",
+        "-Wno-profile-instr-missing",
+        "-Wno-sign-conversion",
+        "-Wno-reorder-ctor",
+        "-Wno-deprecated-declarations",
+        "-Wno-non-virtual-dtor",
+        "-Wno-overloaded-virtual",
+        "-Wno-strict-overflow",
+        "-fPIC",
+        "-fexceptions",
+        "-frtti",
+        "-ffunction-sections",
+        "-fdata-sections",
+        "-fdiagnostics-show-option",
+        "-fstack-protector-all",
+        "-fsigned-char",
+        "-Wno-suggest-override",
+        "-Wno-undef",
+        "-Wno-missing-declarations",
+        "-fopenmp",
+        "-fvisibility-inlines-hidden",
+        "-fvisibility=hidden",
+        "-msse4.1",
+        "-fno-delete-null-pointer-checks",
+        "-fwrapv",
+        "-fstack-protector-strong",
+    ] + [
+        "-DDNNL_DISABLE_PRIMITIVE_CACHE",
+        "-DDNNL_ENABLE_CONCURRENT_EXEC",
+        "-DDNNL_ENABLE_CPU_ISA_HINTS",
+        "-DDNNL_ENABLE_MAX_CPU_ISA",
+        "-DDNNL_X64=1",
+        "-DDNNL_XBYAK_NO_EXCEPTION",
+        "-DENABLE_INTEL_CPU=1",
+        "-DIE_BUILD_POSTFIX=\"\"",
+        "-D__STDC_CONSTANT_MACROS",
+        "-D__STDC_LIMIT_MACROS"
+    ],
+
+    shared_libs: [
+        "liblog"
+    ],
+
+    rtti: true,
+
+    strip: {
+        none: true,
+    }
+}
diff --git a/include/oneapi/dnnl/dnnl_config.h b/include/oneapi/dnnl/dnnl_config.h
new file mode 100644
index 000000000..5a8f9824b
--- /dev/null
+++ b/include/oneapi/dnnl/dnnl_config.h
@@ -0,0 +1,157 @@
+/*******************************************************************************
+* Copyright 2019-2022 Intel Corporation
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*******************************************************************************/
+
+#ifndef ONEAPI_DNNL_DNNL_CONFIG_H
+#define ONEAPI_DNNL_DNNL_CONFIG_H
+
+#include "oneapi/dnnl/dnnl_types.h"
+
+/// @cond DO_NOT_DOCUMENT_THIS
+
+// All symbols shall be internal unless marked as DNNL_API
+#if defined _WIN32 || defined __CYGWIN__
+#define DNNL_HELPER_DLL_IMPORT __declspec(dllimport)
+#define DNNL_HELPER_DLL_EXPORT __declspec(dllexport)
+#else
+#if __GNUC__ >= 4
+#define DNNL_HELPER_DLL_IMPORT __attribute__((visibility("default")))
+#define DNNL_HELPER_DLL_EXPORT __attribute__((visibility("default")))
+#else
+#define DNNL_HELPER_DLL_IMPORT
+#define DNNL_HELPER_DLL_EXPORT
+#endif
+#endif
+
+#ifdef DNNL_DLL
+#ifdef DNNL_DLL_EXPORTS
+#define DNNL_API DNNL_HELPER_DLL_EXPORT
+#else
+#define DNNL_API DNNL_HELPER_DLL_IMPORT
+#endif
+#else
+#define DNNL_API
+#endif
+
+#if defined(__GNUC__)
+#define DNNL_DEPRECATED __attribute__((deprecated))
+#elif defined(_MSC_VER)
+#define DNNL_DEPRECATED __declspec(deprecated)
+#else
+#define DNNL_DEPRECATED
+#endif
+
+/// @endcond
+
+// clang-format off
+
+// oneDNN CPU threading runtime
+#define DNNL_CPU_THREADING_RUNTIME DNNL_RUNTIME_TBB
+
+// oneDNN CPU engine runtime
+#define DNNL_CPU_RUNTIME DNNL_RUNTIME_TBB
+
+// oneDNN GPU engine runtime
+#define DNNL_GPU_RUNTIME DNNL_RUNTIME_NONE
+
+// clang-format on
+
+#if defined(DNNL_CPU_RUNTIME) && defined(DNNL_GPU_RUNTIME)
+#if (DNNL_CPU_RUNTIME == DNNL_RUNTIME_OCL)
+#error "Unexpected DNNL_CPU_RUNTIME"
+#endif
+#if (DNNL_GPU_RUNTIME != DNNL_RUNTIME_NONE) \
+        && (DNNL_GPU_RUNTIME != DNNL_RUNTIME_OCL) \
+        && (DNNL_GPU_RUNTIME != DNNL_RUNTIME_SYCL)
+#error "Unexpected DNNL_GPU_RUNTIME"
+#endif
+#if (DNNL_CPU_RUNTIME == DNNL_RUNTIME_NONE \
+        && DNNL_GPU_RUNTIME == DNNL_RUNTIME_NONE)
+#error "At least one runtime must be specified"
+#endif
+#else
+#error "BOTH DNNL_CPU_RUNTIME and DNNL_GPU_RUNTIME must be defined"
+#endif
+
+// For SYCL CPU, a primitive may be created and executed in different threads
+// hence the global scratchpad does not work. This enables concurrent execution
+// when CPU runtime is SYCL to avoid the issue.
+#if DNNL_CPU_RUNTIME == DNNL_RUNTIME_SYCL
+#ifndef DNNL_ENABLE_CONCURRENT_EXEC
+#define DNNL_ENABLE_CONCURRENT_EXEC
+#endif
+#endif
+
+// When defined, primitive cache stores runtime objects.
+#define DNNL_USE_RT_OBJECTS_IN_PRIMITIVE_CACHE
+
+// When defined, DPCPP is supported.
+/* #undef DNNL_WITH_SYCL */
+
+// When defined, Level Zero is supported.
+/* #undef DNNL_WITH_LEVEL_ZERO */
+
+// When defined, SYCL CUDA backend is used.
+/* #undef DNNL_SYCL_CUDA */
+
+// When defined, SYCL HIP backend is used.
+/* #undef DNNL_SYCL_HIP */
+
+// When defined, stack checker is enabled.
+/* #undef DNNL_ENABLE_STACK_CHECKER */
+
+// When defined, experimental features are enabled.
+/* #undef DNNL_EXPERIMENTAL */
+
+// List of configurating build controls
+// Workload controls
+#define BUILD_TRAINING 0
+#define BUILD_INFERENCE 1
+// Primitive controls
+#define BUILD_PRIMITIVE_ALL 0
+#define BUILD_BATCH_NORMALIZATION 0
+#define BUILD_BINARY 0
+#define BUILD_CONCAT 1
+#define BUILD_CONVOLUTION 1
+#define BUILD_DECONVOLUTION 1
+#define BUILD_ELTWISE 0
+#define BUILD_INNER_PRODUCT 1
+#define BUILD_LAYER_NORMALIZATION 0
+#define BUILD_LRN 1
+#define BUILD_MATMUL 1
+#define BUILD_POOLING 1
+#define BUILD_PRELU 0
+#define BUILD_REDUCTION 1
+#define BUILD_REORDER 1
+#define BUILD_RESAMPLING 0
+#define BUILD_RNN 1
+#define BUILD_SHUFFLE 0
+#define BUILD_SOFTMAX 1
+#define BUILD_SUM 0
+// Primitives CPU ISA controls
+#define BUILD_PRIMITIVE_CPU_ISA_ALL 1
+#define BUILD_SSE41 0
+#define BUILD_AVX2 0
+#define BUILD_AVX512 0
+#define BUILD_AMX 0
+// Primitives GPU ISA controls
+#define BUILD_PRIMITIVE_GPU_ISA_ALL 1
+#define BUILD_GEN9 0
+#define BUILD_GEN11 0
+#define BUILD_XELP 0
+#define BUILD_XEHP 0
+#define BUILD_XEHPG 0
+#define BUILD_XEHPC 0
+#endif
diff --git a/include/oneapi/dnnl/dnnl_version.h b/include/oneapi/dnnl/dnnl_version.h
new file mode 100644
index 000000000..41eac2b09
--- /dev/null
+++ b/include/oneapi/dnnl/dnnl_version.h
@@ -0,0 +1,36 @@
+/*******************************************************************************
+* Copyright 2019-2020 Intel Corporation
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*******************************************************************************/
+
+#ifndef ONEAPI_DNNL_DNNL_VERSION_H
+#define ONEAPI_DNNL_DNNL_VERSION_H
+
+// clang-format off
+
+/// Major version
+#define DNNL_VERSION_MAJOR 2
+
+/// Minor version
+#define DNNL_VERSION_MINOR 7
+
+/// Patch version
+#define DNNL_VERSION_PATCH 0
+
+/// Git commit hash
+#define DNNL_VERSION_HASH  "44de3c3698b687c26e487fc8f0213fa487e8fe2c"
+
+// clang-format on
+
+#endif
-- 
2.17.1

