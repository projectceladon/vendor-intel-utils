From edd39b420f1c95453269f95a58c07ce7b29d529a Mon Sep 17 00:00:00 2001
From: "Yan, Shaopu" <shaopu.yan@intel.com>
Date: Tue, 28 Nov 2023 23:46:05 +0800
Subject: [PATCH 32/54] OP-TEE: send root of trust via ivshmem driver to optee

on optee side, the keymaster ta will bind these information
into each user generated keys.

Tracked-On: OAM-113489
Signed-off-by: Yan, Shaopu <shaopu.yan@intel.com>
---
 include/security.h          |  7 ++++++-
 kernelflinger.c             | 20 +++++++++++++++-----
 libkernelflinger/security.c | 31 +++++++++++++++++++++++++++++++
 3 files changed, 52 insertions(+), 6 deletions(-)

diff --git a/include/security.h b/include/security.h
index 9acd08a..92f40d9 100644
--- a/include/security.h
+++ b/include/security.h
@@ -42,7 +42,7 @@
 
 #define BOOT_TARGET_SIZE         32
 #define BOOT_SIGNATURE_MAX_SIZE  4096
-#define ROT_DATA_STRUCT_VERSION2 0x02
+#define ROT_DATA_STRUCT_VERSION2  2
 #define ATTESTATION_ID_MAX_LENGTH 64
 
 #define SETUP_MODE_VAR          L"SetupMode"
@@ -98,6 +98,11 @@ EFI_STATUS init_rot_data(
 /* Return rot data instance pointer*/
 struct rot_data_t *get_rot_data();
 
+#ifdef USE_IVSHMEM
+EFI_STATUS ivsh_send_rot_data(IN VOID *bootimage, IN UINT8 boot_state,
+        IN VBDATA *vb_data);
+#endif
+
 EFI_STATUS raw_pub_key_sha256(
         IN const UINT8 *pub_key,
         IN UINTN pub_key_len,
diff --git a/kernelflinger.c b/kernelflinger.c
index 194fb9c..f3d2984 100644
--- a/kernelflinger.c
+++ b/kernelflinger.c
@@ -918,6 +918,16 @@ static EFI_STATUS load_image(VOID *bootimage, VOID *vendorbootimage, UINT8 boot_
 		efi_perror(ret, L"Failed to set os secure boot");
 #endif
 
+#ifdef USE_IVSHMEM
+	if (is_bootimg_target(boot_target)) {
+		ret = ivsh_send_rot_data(bootimage, boot_state, vb_data);
+		if (EFI_ERROR(ret)) {
+			debug(L"Unable to send the root of trust data to optee");
+			die();
+		}
+	}
+#endif
+
 	/* install acpi tables before starting trusty */
 	ret = setup_acpi_table(bootimage, boot_target);
 	if (EFI_ERROR(ret)) {
@@ -949,11 +959,11 @@ static EFI_STATUS load_image(VOID *bootimage, VOID *vendorbootimage, UINT8 boot_
 			die();
 		}
 
-                ret = update_attestation_ids(vendorbootimage);
-                if (EFI_ERROR(ret)) {
-                        efi_perror(ret, L"Unable to get the attestation ids for trusty");
-                        die();
-                }
+		ret = update_attestation_ids(vendorbootimage);
+		if (EFI_ERROR(ret)) {
+			efi_perror(ret, L"Unable to get the attestation ids for trusty");
+			die();
+		}
 
 		set_boottime_stamp(TM_LOAD_TOS_DONE);
 		ret = start_trusty(tosimage);
diff --git a/libkernelflinger/security.c b/libkernelflinger/security.c
index c353f6c..4264bb6 100644
--- a/libkernelflinger/security.c
+++ b/libkernelflinger/security.c
@@ -48,6 +48,12 @@
 #include "life_cycle.h"
 #include "uefi_utils.h"
 
+#ifdef USE_IVSHMEM
+#include "ivshmem.h"
+
+extern UINT64 g_ivshmem_rot_addr;
+#endif
+
 /* OsSecureBoot is *not* a standard EFI_GLOBAL variable
  *
  * It's value will be read at ExitBootServices() by the BIOS to run
@@ -194,6 +200,31 @@ EFI_STATUS update_rot_data(IN VOID *bootimage, IN UINT8 boot_state,
         return ret;
 }
 
+#ifdef USE_IVSHMEM
+EFI_STATUS ivsh_send_rot_data(IN VOID *bootimage, IN UINT8 boot_state,
+                        IN VBDATA *vb_data)
+{
+    EFI_STATUS ret = EFI_SUCCESS;
+
+    if (!g_ivshmem_rot_addr)
+        return EFI_NOT_READY;
+
+    ret = update_rot_data(bootimage, boot_state, vb_data);
+    if (EFI_ERROR(ret)) {
+        efi_perror(ret, L"Unable to update the root of trust data");
+        return ret;
+    }
+
+    memcpy_s((void*)g_ivshmem_rot_addr, sizeof(struct rot_data_t),
+            &rot_data, sizeof(struct rot_data_t));
+
+    /* trigger an interrupt to optee */
+    ivshmem_rot_interrupt();
+
+    return ret;
+}
+#endif
+
 /* initialize the struct rot_data for startup_information */
 EFI_STATUS init_rot_data(UINT32 boot_state)
 {
-- 
2.25.1

