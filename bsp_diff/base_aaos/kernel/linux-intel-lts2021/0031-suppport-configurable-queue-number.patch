From 290061ec5132420f7f07687e4b07f46679a946ae Mon Sep 17 00:00:00 2001
From: Hang Liu <hang1.liu@intel.com>
Date: Sat, 1 Jul 2023 11:09:56 +0800
Subject: [PATCH] suppport configurable queue number

virtio backend set the vblank queue number
in the config space, since vblank interrupt reuse
the virtio queue interrupt.

Tracked-On: OAM-113127
Signed-off-by: Hang Liu<hang1.liu@intel.com>
---
 drivers/gpu/drm/virtio/virtgpu_drv.c |  1 +
 drivers/gpu/drm/virtio/virtgpu_drv.h | 10 ++++-
 drivers/gpu/drm/virtio/virtgpu_kms.c | 55 ++++++++++++++++++++++++----
 include/uapi/linux/virtio_gpu.h      |  2 +
 4 files changed, 59 insertions(+), 9 deletions(-)

diff --git a/drivers/gpu/drm/virtio/virtgpu_drv.c b/drivers/gpu/drm/virtio/virtgpu_drv.c
index 17a03dd80d33..116b3aacaca1 100644
--- a/drivers/gpu/drm/virtio/virtgpu_drv.c
+++ b/drivers/gpu/drm/virtio/virtgpu_drv.c
@@ -149,6 +149,7 @@ static unsigned int features[] = {
 	VIRTIO_GPU_F_CONTEXT_INIT,
 	VIRTIO_GPU_F_MODIFIER,
 	VIRTIO_GPU_F_SCALING,
+	VIRTIO_GPU_F_VBLANK,
 };
 
 #ifdef CONFIG_PM_SLEEP
diff --git a/drivers/gpu/drm/virtio/virtgpu_drv.h b/drivers/gpu/drm/virtio/virtgpu_drv.h
index ae641321576e..726be31b3099 100644
--- a/drivers/gpu/drm/virtio/virtgpu_drv.h
+++ b/drivers/gpu/drm/virtio/virtgpu_drv.h
@@ -217,6 +217,11 @@ struct virtio_gpu_drv_cap_cache {
 	atomic_t is_valid;
 };
 
+struct virtio_gpu_vblank {
+	struct virtio_gpu_queue vblank;
+	uint32_t buf[4];
+};
+
 struct virtio_gpu_device {
 	struct drm_device *ddev;
 
@@ -224,9 +229,10 @@ struct virtio_gpu_device {
 
 	struct virtio_gpu_output outputs[VIRTIO_GPU_MAX_SCANOUTS];
 	uint32_t num_scanouts;
-
+	uint32_t num_vblankq;
 	struct virtio_gpu_queue ctrlq;
 	struct virtio_gpu_queue cursorq;
+
 	struct kmem_cache *vbufs;
 
 	atomic_t pending_commands;
@@ -246,6 +252,7 @@ struct virtio_gpu_device {
 	bool has_edid;
 	bool has_modifier;
 	bool has_scaling;
+	bool has_vblank;
 	bool has_indirect;
 	bool has_resource_assign_uuid;
 	bool has_resource_blob;
@@ -270,6 +277,7 @@ struct virtio_gpu_device {
 	spinlock_t resource_export_lock;
 	/* protects map state and host_visible_mm */
 	spinlock_t host_visible_lock;
+	struct virtio_gpu_vblank vblank[];
 };
 
 struct virtio_gpu_fpriv {
diff --git a/drivers/gpu/drm/virtio/virtgpu_kms.c b/drivers/gpu/drm/virtio/virtgpu_kms.c
index 5efab12de9f6..ad1a756ea151 100644
--- a/drivers/gpu/drm/virtio/virtgpu_kms.c
+++ b/drivers/gpu/drm/virtio/virtgpu_kms.c
@@ -114,21 +114,49 @@ static void virtio_gpu_get_capsets(struct virtio_gpu_device *vgdev,
 
 int virtio_gpu_find_vqs(struct virtio_gpu_device *vgdev)
 {
-	static vq_callback_t *callbacks[] = {
-		virtio_gpu_ctrl_ack, virtio_gpu_cursor_ack
-	};
-	static const char * const names[] = { "control", "cursor" };
-	struct virtqueue *vqs[2];
+	vq_callback_t **callbacks;
+	struct virtqueue **vqs;
+	int i, total_vqs, err;
+	const char **names;
 	int ret;
 
-	ret = virtio_find_vqs(vgdev->vdev, 2, vqs, callbacks, names, NULL);
+	total_vqs = vgdev->num_vblankq + 2;
+	vqs = kcalloc(total_vqs, sizeof(*vqs), GFP_KERNEL);
+	callbacks = kmalloc_array(total_vqs, sizeof(vq_callback_t *),
+				  GFP_KERNEL);
+	names = kmalloc_array(total_vqs, sizeof(char *), GFP_KERNEL);
+
+	if (!callbacks || !vqs || !names) {
+		err = -ENOMEM;
+		goto out;
+	}
+
+	callbacks[0] = virtio_gpu_ctrl_ack;
+	callbacks[1] = virtio_gpu_cursor_ack;
+	names[0] = "control";
+	names[1] = "cursor";
+	for (i = 2; i < total_vqs; i++) {
+		callbacks[i] = virtio_gpu_vblank_ack;
+		names[i] = "vblank";
+	}
+
+	ret = virtio_find_vqs(vgdev->vdev, total_vqs, vqs, callbacks, names, NULL);
 	if (ret)
-		return ret;
+		goto out;
 
 	vgdev->ctrlq.vq = vqs[0];
 	vgdev->cursorq.vq = vqs[1];
 
-	return 0;
+	for (i = 2; i < total_vqs; i++)
+		vgdev->vblank[i-2].vblank.vq = vqs[i];
+
+	ret = 0;
+out:
+	kfree(names);
+
+	kfree(callbacks);
+	kfree(vqs);
+	return ret;
 }
 
 int virtio_gpu_init(struct virtio_device *vdev, struct drm_device *dev)
@@ -186,6 +214,9 @@ int virtio_gpu_init(struct virtio_device *vdev, struct drm_device *dev)
 	if (virtio_has_feature(vgdev->vdev, VIRTIO_GPU_F_SCALING)) {
 		vgdev->has_scaling = true;
 	}
+	if (virtio_has_feature(vgdev->vdev, VIRTIO_GPU_F_VBLANK)) {
+		vgdev->has_vblank = true;
+	}
 	if (virtio_has_feature(vgdev->vdev, VIRTIO_GPU_F_RESOURCE_BLOB)) {
 		vgdev->has_resource_blob = true;
 		if (virtio_has_feature(vgdev->vdev, VIRTIO_GPU_F_MODIFIER)) {
@@ -224,6 +255,14 @@ int virtio_gpu_init(struct virtio_device *vdev, struct drm_device *dev)
 	DRM_INFO("features: %ccontext_init\n",
 		 vgdev->has_context_init ? '+' : '-');
 
+	vgdev->num_vblankq = 0;
+	if(vgdev->has_vblank)
+		virtio_cread_le(vgdev->vdev, struct virtio_gpu_config,
+				num_pipe, &vgdev->num_vblankq);
+
+	for(i=0; i<vgdev->num_vblankq; i++)
+		spin_lock_init(&vgdev->vblank[i].vblank.qlock);
+
 	ret = virtio_gpu_find_vqs(vgdev);
 	if (ret) {
 		DRM_ERROR("failed to find virt queues\n");
diff --git a/include/uapi/linux/virtio_gpu.h b/include/uapi/linux/virtio_gpu.h
index bf8e9ce9f071..1d05de645484 100644
--- a/include/uapi/linux/virtio_gpu.h
+++ b/include/uapi/linux/virtio_gpu.h
@@ -73,6 +73,7 @@
 */
 #define VIRTIO_GPU_F_SCALING	6
 
+#define VIRTIO_GPU_F_VBLANK     7
 
 enum virtio_gpu_ctrl_type {
 	VIRTIO_GPU_UNDEFINED = 0,
@@ -380,6 +381,7 @@ struct virtio_gpu_config {
 	__le32 events_clear;
 	__le32 num_scanouts;
 	__le32 num_capsets;
+	__le32 num_pipe;
 };
 
 /* simple formats for fbcon/X use */
-- 
2.40.0

