From 21fc9c046a8e9fa232e0b65a77d7bef97d53228a Mon Sep 17 00:00:00 2001
From: Hang Liu <hang1.liu@intel.com>
Date: Tue, 11 Jul 2023 11:16:00 +0800
Subject: [PATCH] add scaling support

The gem buffer created by i915 in guest vm may be
smaller than the resolution determined by the
mode setting operation. In that case, a new framebuffer
may be created by virtio gpu driver, and i915 rendering
must be utilized to do the composition. To save the
effort, pass the dst crtc info to the backend which will
scale the gem buffer to the crtc.

Tracked-On: OAM-113127
Signed-off-by: Hang Liu<hang1.liu@intel.com>
---
 drivers/gpu/drm/virtio/virtgpu_drv.c   |  1 +
 drivers/gpu/drm/virtio/virtgpu_drv.h   |  6 ++++++
 drivers/gpu/drm/virtio/virtgpu_kms.c   |  3 +++
 drivers/gpu/drm/virtio/virtgpu_plane.c | 23 +++++++++++++++++++++--
 drivers/gpu/drm/virtio/virtgpu_vq.c    | 20 ++++++++++++++++++++
 include/uapi/linux/virtio_gpu.h        | 14 ++++++++++++++
 6 files changed, 65 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/virtio/virtgpu_drv.c b/drivers/gpu/drm/virtio/virtgpu_drv.c
index d8ba8c8a33fc..17a03dd80d33 100644
--- a/drivers/gpu/drm/virtio/virtgpu_drv.c
+++ b/drivers/gpu/drm/virtio/virtgpu_drv.c
@@ -148,6 +148,7 @@ static unsigned int features[] = {
 	VIRTIO_GPU_F_RESOURCE_BLOB,
 	VIRTIO_GPU_F_CONTEXT_INIT,
 	VIRTIO_GPU_F_MODIFIER,
+	VIRTIO_GPU_F_SCALING,
 };
 
 #ifdef CONFIG_PM_SLEEP
diff --git a/drivers/gpu/drm/virtio/virtgpu_drv.h b/drivers/gpu/drm/virtio/virtgpu_drv.h
index fbc84d0cd2ed..ae641321576e 100644
--- a/drivers/gpu/drm/virtio/virtgpu_drv.h
+++ b/drivers/gpu/drm/virtio/virtgpu_drv.h
@@ -245,6 +245,7 @@ struct virtio_gpu_device {
 	bool has_virgl_3d;
 	bool has_edid;
 	bool has_modifier;
+	bool has_scaling;
 	bool has_indirect;
 	bool has_resource_assign_uuid;
 	bool has_resource_blob;
@@ -433,6 +434,11 @@ virtio_gpu_cmd_set_scanout_blob(struct virtio_gpu_device *vgdev,
 void virtio_gpu_cmd_set_modifier(struct virtio_gpu_device *vgdev,
 				 uint32_t scanout_id,
 				 struct drm_framebuffer *fb);
+
+void virtio_gpu_cmd_set_scaling(struct virtio_gpu_device *vgdev,
+				     uint32_t scanout_id,
+				     struct drm_rect *rect_dst);
+
 /* virtgpu_display.c */
 int virtio_gpu_modeset_init(struct virtio_gpu_device *vgdev);
 void virtio_gpu_modeset_fini(struct virtio_gpu_device *vgdev);
diff --git a/drivers/gpu/drm/virtio/virtgpu_kms.c b/drivers/gpu/drm/virtio/virtgpu_kms.c
index fd3e7fe01202..5efab12de9f6 100644
--- a/drivers/gpu/drm/virtio/virtgpu_kms.c
+++ b/drivers/gpu/drm/virtio/virtgpu_kms.c
@@ -183,6 +183,9 @@ int virtio_gpu_init(struct virtio_device *vdev, struct drm_device *dev)
 	if (virtio_has_feature(vgdev->vdev, VIRTIO_GPU_F_RESOURCE_UUID)) {
 		vgdev->has_resource_assign_uuid = true;
 	}
+	if (virtio_has_feature(vgdev->vdev, VIRTIO_GPU_F_SCALING)) {
+		vgdev->has_scaling = true;
+	}
 	if (virtio_has_feature(vgdev->vdev, VIRTIO_GPU_F_RESOURCE_BLOB)) {
 		vgdev->has_resource_blob = true;
 		if (virtio_has_feature(vgdev->vdev, VIRTIO_GPU_F_MODIFIER)) {
diff --git a/drivers/gpu/drm/virtio/virtgpu_plane.c b/drivers/gpu/drm/virtio/virtgpu_plane.c
index ec07cd2e23b6..ac9132c5b22f 100644
--- a/drivers/gpu/drm/virtio/virtgpu_plane.c
+++ b/drivers/gpu/drm/virtio/virtgpu_plane.c
@@ -125,9 +125,13 @@ static int virtio_gpu_plane_atomic_check(struct drm_plane *plane,
 {
 	struct drm_plane_state *new_plane_state = drm_atomic_get_new_plane_state(state,
 										 plane);
+	struct drm_device *dev = plane->dev;
+	struct virtio_gpu_device *vgdev = dev->dev_private;
 	bool is_cursor = plane->type == DRM_PLANE_TYPE_CURSOR;
 	struct drm_crtc_state *crtc_state;
 	int ret;
+	int min_scale = DRM_PLANE_NO_SCALING;
+	int max_scale = DRM_PLANE_NO_SCALING;
 
 	if (!new_plane_state->fb || WARN_ON(!new_plane_state->crtc))
 		return 0;
@@ -137,9 +141,13 @@ static int virtio_gpu_plane_atomic_check(struct drm_plane *plane,
 	if (IS_ERR(crtc_state))
                 return PTR_ERR(crtc_state);
 
+	if(vgdev->has_scaling && (new_plane_state->fb->format->format != DRM_FORMAT_C8)) {
+		min_scale = 1;
+		max_scale = 0x30000-1;
+	}
 	ret = drm_atomic_helper_check_plane_state(new_plane_state, crtc_state,
-						  DRM_PLANE_NO_SCALING,
-						  DRM_PLANE_NO_SCALING,
+						  min_scale,
+						  max_scale,
 						  is_cursor, true);
 	return ret;
 }
@@ -275,6 +283,17 @@ static void virtio_gpu_primary_plane_update(struct drm_plane *plane,
 		}
 	}
 
+	if(vgdev->has_scaling) {
+		struct drm_rect rect_dst;
+
+		rect_dst.x1 = plane->state->crtc_x;
+		rect_dst.y1 = plane->state->crtc_y;
+		rect_dst.x2 = plane->state->crtc_w;
+		rect_dst.y2 = plane->state->crtc_h;
+
+		virtio_gpu_cmd_set_scaling(vgdev, output->index, &rect_dst);
+	}
+
 	virtio_gpu_resource_flush(plane,
 				  rect.x1,
 				  rect.y1,
diff --git a/drivers/gpu/drm/virtio/virtgpu_vq.c b/drivers/gpu/drm/virtio/virtgpu_vq.c
index a96a8438b475..4ee59ccbb456 100644
--- a/drivers/gpu/drm/virtio/virtgpu_vq.c
+++ b/drivers/gpu/drm/virtio/virtgpu_vq.c
@@ -1311,3 +1311,23 @@ void virtio_gpu_cmd_set_modifier(struct virtio_gpu_device *vgdev,
 	cmd_p->scanout_id = cpu_to_le32(scanout_id);
 	virtio_gpu_queue_ctrl_buffer(vgdev, vbuf);
 }
+
+void virtio_gpu_cmd_set_scaling(struct virtio_gpu_device *vgdev,
+				     uint32_t scanout_id,
+				     struct drm_rect *rect_dst)
+{
+	struct virtio_gpu_set_scaling *cmd_p;
+	struct virtio_gpu_vbuffer *vbuf;
+
+	cmd_p = virtio_gpu_alloc_cmd(vgdev, &vbuf, sizeof(*cmd_p));
+	memset(cmd_p, 0, sizeof(*cmd_p));
+	cmd_p->hdr.type = cpu_to_le32(VIRTIO_GPU_CMD_SET_SCALING);
+	cmd_p->scanout_id = cpu_to_le32(scanout_id);
+
+	cmd_p->dst.width = cpu_to_le32(rect_dst->x2);
+	cmd_p->dst.height = cpu_to_le32(rect_dst->y2);
+	cmd_p->dst.x = cpu_to_le32(rect_dst->x1);
+	cmd_p->dst.y = cpu_to_le32(rect_dst->y1);
+
+	virtio_gpu_queue_ctrl_buffer(vgdev, vbuf);
+}
diff --git a/include/uapi/linux/virtio_gpu.h b/include/uapi/linux/virtio_gpu.h
index 3a251301395b..bf8e9ce9f071 100644
--- a/include/uapi/linux/virtio_gpu.h
+++ b/include/uapi/linux/virtio_gpu.h
@@ -68,6 +68,11 @@
  *VIRTIO_GPU_CMD_SET_MODIFIER
  */
 #define VIRTIO_GPU_F_MODIFIER            5
+/*
+*VIRTIO_GPU_CMD_SET_SCALING
+*/
+#define VIRTIO_GPU_F_SCALING	6
+
 
 enum virtio_gpu_ctrl_type {
 	VIRTIO_GPU_UNDEFINED = 0,
@@ -88,6 +93,7 @@ enum virtio_gpu_ctrl_type {
 	VIRTIO_GPU_CMD_RESOURCE_CREATE_BLOB,
 	VIRTIO_GPU_CMD_SET_SCANOUT_BLOB,
 	VIRTIO_GPU_CMD_SET_MODIFIER,
+	VIRTIO_GPU_CMD_SET_SCALING,
 
 	/* 3d commands */
 	VIRTIO_GPU_CMD_CTX_CREATE = 0x0200,
@@ -208,6 +214,14 @@ struct virtio_gpu_resource_flush {
 	__le32 padding;
 };
 
+/* VIRTIO_GPU_CMD_SET_SCALING */
+struct virtio_gpu_set_scaling {
+	struct virtio_gpu_ctrl_hdr hdr;
+	struct virtio_gpu_rect dst;
+	__le32 scanout_id;
+	__le32 padding;
+};
+
 /* VIRTIO_GPU_CMD_TRANSFER_TO_HOST_2D: simple transfer to_host */
 struct virtio_gpu_transfer_to_host_2d {
 	struct virtio_gpu_ctrl_hdr hdr;
-- 
2.40.0

