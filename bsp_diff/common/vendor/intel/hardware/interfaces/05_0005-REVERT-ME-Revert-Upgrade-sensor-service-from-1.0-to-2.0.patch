From b1a144167920fe7a6075a8d21e5063dfe571b23c Mon Sep 17 00:00:00 2001
From: svenate <salini.venate@intel.com>
Date: Wed, 20 Jul 2022 14:27:58 +0530
Subject: [PATCH 3/3] Revert "Upgrade sensor service from 1.0 to 2.0"

This reverts commit 8ac9d7a4ce5ad3204179c64b1b8dc800d9a00212.
---
 sensors/2.0/Android.bp                        |  46 ---
 sensors/2.0/ISensors.hal                      | 276 ------------------
 sensors/2.0/ISensorsCallback.hal              |  48 ---
 sensors/2.0/OWNERS                            |   3 -
 sensors/2.0/SensorsV2_0.h                     |  39 ---
 ...droid.hardware.sensors@2.0-service-mock.rc |   5 -
 sensors/2.0/android.hardware.sensors@2.0.xml  |  11 -
 sensors/2.0/service.cpp                       |  41 ---
 sensors/2.0/types.hal                         |  50 ----
 9 files changed, 519 deletions(-)
 delete mode 100644 sensors/2.0/Android.bp
 delete mode 100644 sensors/2.0/ISensors.hal
 delete mode 100644 sensors/2.0/ISensorsCallback.hal
 delete mode 100644 sensors/2.0/OWNERS
 delete mode 100644 sensors/2.0/SensorsV2_0.h
 delete mode 100644 sensors/2.0/android.hardware.sensors@2.0-service-mock.rc
 delete mode 100644 sensors/2.0/android.hardware.sensors@2.0.xml
 delete mode 100644 sensors/2.0/service.cpp
 delete mode 100644 sensors/2.0/types.hal

diff --git a/sensors/2.0/Android.bp b/sensors/2.0/Android.bp
deleted file mode 100644
index bb38327..0000000
--- a/sensors/2.0/Android.bp
+++ /dev/null
@@ -1,46 +0,0 @@
-//
-// Copyright (C) 2018 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-cc_binary {
-    name: "android.hardware.sensors@2.0-service.mock",
-    defaults: ["hidl_defaults"],
-    vendor: true,
-    relative_install_path: "hw",
-    srcs: [
-        "service.cpp",
-    ],
-    init_rc: ["android.hardware.sensors@2.0-service-mock.rc"],
-    header_libs: [
-        "android.hardware.sensors@2.X-shared-utils",
-    ],
-    shared_libs: [
-        "android.hardware.sensors@1.0",
-        "android.hardware.sensors@2.0",
-        // Needed to compile some shared utilities for both 2.0/2.1 impls, but
-        // isn't normally needed for a HAL that only supports 2.0.
-        "android.hardware.sensors@2.1",
-        "libcutils",
-        "libfmq",
-        "libhidlbase",
-        "liblog",
-        "libpower",
-        "libutils",
-    ],
-    static_libs: [
-        "android.hardware.sensors@1.0-convert",
-        "android.hardware.sensors@2.X-shared-impl",
-    ],
-    vintf_fragments: ["android.hardware.sensors@2.0.xml"],
-}
diff --git a/sensors/2.0/ISensors.hal b/sensors/2.0/ISensors.hal
deleted file mode 100644
index a84c56e..0000000
--- a/sensors/2.0/ISensors.hal
+++ /dev/null
@@ -1,276 +0,0 @@
-/*
- * Copyright (C) 2018 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package android.hardware.sensors@2.0;
-
-import @1.0::Event;
-import @1.0::OperationMode;
-import @1.0::RateLevel;
-import @1.0::Result;
-import @1.0::SensorInfo;
-import @1.0::SharedMemInfo;
-import @2.0::ISensorsCallback;
-
-interface ISensors {
-    /**
-     * Enumerate all available (static) sensors.
-     *
-     * The SensorInfo for each sensor returned by getSensorsList must be stable
-     * from the initial call to getSensorsList after a device boot until the
-     * entire system restarts. The SensorInfo for each sensor must not change
-     * between subsequent calls to getSensorsList, even across restarts of the
-     * HAL and its dependencies (for example, the sensor handle for a given
-     * sensor must not change across HAL restarts).
-     */
-    getSensorsList() generates (vec<SensorInfo> list);
-
-    /**
-     * Place the module in a specific mode. The following modes are defined
-     *
-     *  SENSOR_HAL_NORMAL_MODE - Normal operation. Default state of the module.
-     *
-     *  SENSOR_HAL_DATA_INJECTION_MODE - Loopback mode.
-     *    Data is injected for the supported sensors by the sensor service in
-     *    this mode.
-     *
-     * @return OK on success
-     *     BAD_VALUE if requested mode is not supported
-     *     PERMISSION_DENIED if operation is not allowed
-     */
-    setOperationMode(OperationMode mode) generates (Result result);
-
-    /**
-     * Activate/de-activate one sensor.
-     *
-     * After sensor de-activation, existing sensor events that have not
-     * been written to the event queue must be abandoned immediately so that
-     * subsequent activations do not get stale sensor events (events
-     * that are generated prior to the latter activation).
-     *
-     * @param sensorHandle is the handle of the sensor to change.
-     * @param enabled set to true to enable, or false to disable the sensor.
-     * @return result OK on success, BAD_VALUE if sensorHandle is invalid.
-     */
-    activate(int32_t sensorHandle, bool enabled) generates (Result result);
-
-    /**
-     * Initialize the Sensors HAL's Fast Message Queues (FMQ) and callback.
-     *
-     * The Fast Message Queues (FMQ) that are used to send data between the
-     * framework and the HAL. The callback is used by the HAL to notify the
-     * framework of asynchronous events, such as a dynamic sensor connection.
-     *
-     * The Event FMQ is used to transport sensor events from the HAL to the
-     * framework. The Event FMQ is created using the eventQueueDescriptor.
-     * Data may only be written to the Event FMQ. Data must not be read from
-     * the Event FMQ since the framework is the only reader. Upon receiving
-     * sensor events, the HAL writes the sensor events to the Event FMQ.
-     *
-     * Once the HAL is finished writing sensor events to the Event FMQ, the HAL
-     * must notify the framework that sensor events are available to be read and
-     * processed. This is accomplished by either:
-     *     1) Calling the Event FMQ’s EventFlag::wake() function with
-              EventQueueFlagBits::READ_AND_PROCESS
-     *     2) Setting the write notification in the Event FMQ’s writeBlocking()
-     *        function to EventQueueFlagBits::READ_AND_PROCESS.
-     *
-     * If the Event FMQ’s writeBlocking() function is used, the read
-     * notification must be set to EventQueueFlagBits::EVENTS_READ in order to
-     * be notified and unblocked when the framework has successfully read events
-     * from the Event FMQ.
-     *
-     * The Wake Lock FMQ is used by the framework to notify the HAL when it is
-     * safe to release its wake_lock. When the framework receives WAKE_UP events
-     * from the Event FMQ and the framework has acquired a wake_lock, the
-     * framework must write the number of WAKE_UP events processed to the Wake
-     * Lock FMQ. When the HAL reads the data from the Wake Lock FMQ, the HAL
-     * decrements its current count of unprocessed WAKE_UP events and releases
-     * its wake_lock if the current count of unprocessed WAKE_UP events is
-     * zero. It is important to note that the HAL must acquire the wake lock and
-     * update its internal state regarding the number of outstanding WAKE_UP
-     * events _before_ posting the event to the Wake Lock FMQ, in order to avoid
-     * a race condition that can lead to loss of wake lock synchronization with
-     * the framework.
-     *
-     * The framework must use the WakeLockQueueFlagBits::DATA_WRITTEN value to
-     * notify the HAL that data has been written to the Wake Lock FMQ and must
-     * be read by HAL.
-     *
-     * The ISensorsCallback is used by the HAL to notify the framework of
-     * asynchronous events, such as a dynamic sensor connection.
-     *
-     * The name of any wake_lock acquired by the Sensors HAL for WAKE_UP events
-     * must begin with "SensorsHAL_WAKEUP".
-     *
-     * If WAKE_LOCK_TIMEOUT_SECONDS has elapsed since the most recent WAKE_UP
-     * event was written to the Event FMQ without receiving a message on the
-     * Wake Lock FMQ, then any held wake_lock for WAKE_UP events must be
-     * released.
-     *
-     * If either the Event FMQ or the Wake Lock FMQ is already initialized when
-     * initialize is invoked, then both existing FMQs must be discarded and the
-     * new descriptors must be used to create new FMQs within the HAL. The
-     * number of outstanding WAKE_UP events should also be reset to zero, and
-     * any outstanding wake_locks held as a result of WAKE_UP events should be
-     * released.
-     *
-     * All active sensor requests and direct channels must be closed and
-     * properly cleaned up when initialize is called in order to ensure that the
-     * HAL and framework's state is consistent (e.g. after a runtime restart).
-     *
-     * initialize must be thread safe and prevent concurrent calls
-     * to initialize from simultaneously modifying state.
-     *
-     * @param eventQueueDescriptor Fast Message Queue descriptor that is used to
-     *     create the Event FMQ which is where sensor events are written. The
-     *     descriptor is obtained from the framework's FMQ that is used to read
-     *     sensor events.
-     * @param wakeLockDescriptor Fast Message Queue descriptor that is used to
-     *     create the Wake Lock FMQ which is where wake_lock events are read
-     *     from. The descriptor is obtained from the framework's FMQ that is
-     *     used to write wake_lock events.
-     * @param sensorsCallback sensors callback that receives asynchronous data
-     *     from the Sensors HAL.
-     * @return result OK on success; BAD_VALUE if descriptor is invalid (such
-     *     as null)
-     */
-    @entry
-    @callflow(next = {"getSensorsList"})
-    initialize(fmq_sync<Event> eventQueueDescriptor,
-               fmq_sync<uint32_t> wakeLockDescriptor,
-               ISensorsCallback sensorsCallback)
-        generates
-              (Result result);
-
-    /**
-     * Sets a sensor’s parameters, including sampling frequency and maximum
-     * report latency. This function can be called while the sensor is
-     * activated, in which case it must not cause any sensor measurements to
-     * be lost: transitioning from one sampling rate to the other cannot cause
-     * lost events, nor can transitioning from a high maximum report latency to
-     * a low maximum report latency.
-     *
-     * @param sensorHandle handle of sensor to be changed.
-     * @param samplingPeriodNs specifies sensor sample period in nanoseconds.
-     * @param maxReportLatencyNs allowed delay time before an event is sampled
-     *     to time of report.
-     * @return result OK on success, BAD_VALUE if any parameters are invalid.
-     */
-    batch(int32_t sensorHandle,
-          int64_t samplingPeriodNs,
-          int64_t maxReportLatencyNs)
-        generates (
-          Result result);
-
-    /**
-     * Trigger a flush of internal FIFO.
-     *
-     * Flush adds a FLUSH_COMPLETE metadata event to the end of the "batch mode"
-     * FIFO for the specified sensor and flushes the FIFO.  If the FIFO is empty
-     * or if the sensor doesn't support batching (FIFO size zero), return
-     * SUCCESS and add a trivial FLUSH_COMPLETE event added to the event stream.
-     * This applies to all sensors other than one-shot sensors. If the sensor
-     * is a one-shot sensor, flush must return BAD_VALUE and not generate any
-     * flush complete metadata.  If the sensor is not active at the time flush()
-     * is called, flush() return BAD_VALUE.
-     *
-     * @param sensorHandle handle of sensor to be flushed.
-     * @return result OK on success and BAD_VALUE if sensorHandle is invalid.
-     */
-    flush(int32_t sensorHandle) generates (Result result);
-
-    /**
-     * Inject a single sensor event or push operation environment parameters to
-     * device.
-     *
-     * When device is in NORMAL mode, this function is called to push operation
-     * environment data to device. In this operation, Event is always of
-     * SensorType::AdditionalInfo type. See operation evironment parameters
-     * section in AdditionalInfoType.
-     *
-     * When device is in DATA_INJECTION mode, this function is also used for
-     * injecting sensor events.
-     *
-     * Regardless of OperationMode, injected SensorType::ADDITIONAL_INFO
-     * type events should not be routed back to the sensor event queue.
-     *
-     * @see AdditionalInfoType
-     * @see OperationMode
-     * @param event sensor event to be injected
-     * @return result OK on success; PERMISSION_DENIED if operation is not
-     *     allowed; INVALID_OPERATION, if this functionality is unsupported;
-     *     BAD_VALUE if sensor event cannot be injected.
-     */
-    injectSensorData(Event event) generates (Result result);
-
-    /**
-     * Register direct report channel.
-     *
-     * Register a direct channel with supplied shared memory information. Upon
-     * return, the sensor hardware is responsible for resetting the memory
-     * content to initial value (depending on memory format settings).
-     *
-     * @param mem shared memory info data structure.
-     * @return result OK on success; BAD_VALUE if shared memory information is
-     *     not consistent; NO_MEMORY if shared memory cannot be used by sensor
-     *     system; INVALID_OPERATION if functionality is not supported.
-     * @return channelHandle a positive integer used for referencing registered
-     *     direct channel (>0) in configureDirectReport and
-     *     unregisterDirectChannel if result is OK, -1 otherwise.
-     */
-    registerDirectChannel(SharedMemInfo mem)
-               generates (Result result,
-                          int32_t channelHandle);
-
-    /**
-     * Unregister direct report channel.
-     *
-     * Unregister a direct channel previously registered using
-     * registerDirectChannel, and remove all active sensor report configured in
-     * still active sensor report configured in the direct channel.
-     *
-     * @param channelHandle handle of direct channel to be unregistered.
-     * @return result OK if direct report is supported; INVALID_OPERATION
-     *     otherwise.
-     */
-    unregisterDirectChannel(int32_t channelHandle) generates (Result result);
-
-    /**
-     * Configure direct sensor event report in direct channel.
-     *
-     * This function start, modify rate or stop direct report of a sensor in a
-     * certain direct channel.
-     *
-     * @param sensorHandle handle of sensor to be configured. When combined
-     *     with STOP rate, sensorHandle can be -1 to denote all active sensors
-     *     in the direct channel specified by channel Handle.
-     * @param channelHandle handle of direct channel to be configured.
-     * @param rate rate level, see RateLevel enum.
-     * @return result OK on success; BAD_VALUE if parameter is invalid (such as
-     *     rate level is not supported by sensor, channelHandle does not exist,
-     *     etc); INVALID_OPERATION if functionality is not supported.
-     * @return reportToken positive integer to identify multiple sensors of
-     *     the same type in a single direct channel. Ignored if rate is STOP.
-     *     See SharedMemFormat.
-     */
-    configDirectReport(
-            int32_t sensorHandle,
-            int32_t channelHandle,
-            RateLevel rate
-        ) generates (
-            Result result,
-            int32_t reportToken);
-};
diff --git a/sensors/2.0/ISensorsCallback.hal b/sensors/2.0/ISensorsCallback.hal
deleted file mode 100644
index e0bd98f..0000000
--- a/sensors/2.0/ISensorsCallback.hal
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2018 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package android.hardware.sensors@2.0;
-
-import @1.0::SensorInfo;
-
-interface ISensorsCallback {
-    /**
-     * Notify the framework that new dynamic sensors have been connected.
-     *
-     * If a dynamic sensor was previously connected and has not been
-     * disconnected, then that sensor must not be included in sensorInfos.
-     *
-     * @param sensorInfos vector of SensorInfo for each dynamic sensor that
-     *     was connected.
-     */
-    oneway onDynamicSensorsConnected(vec<SensorInfo> sensorInfos);
-
-    /**
-     * Notify the framework that previously connected dynamic sensors have been
-     * disconnected.
-     *
-     * If a dynamic sensor was previously disconnected and has not been
-     * reconnected, then that sensor must not be included in sensorHandles.
-     *
-     * The HAL must ensure that all sensor events from departing dynamic
-     * sensors have been written to the Event FMQ before calling
-     * onDynamicSensorsDisconnected.
-     *
-     * @param sensorHandles vector of sensor handles for each dynamic sensors
-     *     that was disconnected.
-     */
-    oneway onDynamicSensorsDisconnected(vec<int32_t> sensorHandles);
-};
diff --git a/sensors/2.0/OWNERS b/sensors/2.0/OWNERS
deleted file mode 100644
index 90c2330..0000000
--- a/sensors/2.0/OWNERS
+++ /dev/null
@@ -1,3 +0,0 @@
-arthuri@google.com
-bduddie@google.com
-stange@google.com
diff --git a/sensors/2.0/SensorsV2_0.h b/sensors/2.0/SensorsV2_0.h
deleted file mode 100644
index 345835a..0000000
--- a/sensors/2.0/SensorsV2_0.h
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2020 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef ANDROID_HARDWARE_SENSORS_V2_0_H
-#define ANDROID_HARDWARE_SENSORS_V2_0_H
-
-#include "Sensors.h"
-
-#include <android/hardware/sensors/2.0/ISensors.h>
-
-namespace android {
-namespace hardware {
-namespace sensors {
-namespace V2_0 {
-namespace implementation {
-
-struct SensorsV2_0 : public ::android::hardware::sensors::V2_X::implementation::Sensors<ISensors> {
-};
-
-}  // namespace implementation
-}  // namespace V2_0
-}  // namespace sensors
-}  // namespace hardware
-}  // namespace android
-
-#endif  // ANDROID_HARDWARE_SENSORS_V2_0_H
\ No newline at end of file
diff --git a/sensors/2.0/android.hardware.sensors@2.0-service-mock.rc b/sensors/2.0/android.hardware.sensors@2.0-service-mock.rc
deleted file mode 100644
index 1fee4f2..0000000
--- a/sensors/2.0/android.hardware.sensors@2.0-service-mock.rc
+++ /dev/null
@@ -1,5 +0,0 @@
-service vendor.sensors-hal-2-0-mock /vendor/bin/hw/android.hardware.sensors@2.0-service.mock
-    class hal
-    user system
-    group system
-    rlimit rtprio 10 10
diff --git a/sensors/2.0/android.hardware.sensors@2.0.xml b/sensors/2.0/android.hardware.sensors@2.0.xml
deleted file mode 100644
index 1acc8e6..0000000
--- a/sensors/2.0/android.hardware.sensors@2.0.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<manifest version="1.0" type="device">
-    <hal format="hidl">
-        <name>android.hardware.sensors</name>
-        <transport>hwbinder</transport>
-        <version>2.0</version>
-        <interface>
-            <name>ISensors</name>
-            <instance>default</instance>
-        </interface>
-    </hal>
-</manifest>
diff --git a/sensors/2.0/service.cpp b/sensors/2.0/service.cpp
deleted file mode 100644
index e20bf85..0000000
--- a/sensors/2.0/service.cpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2018 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#define LOG_TAG "android.hardware.sensors@2.0-service"
-
-#include <android/hardware/sensors/2.0/ISensors.h>
-#include <hidl/HidlTransportSupport.h>
-#include <log/log.h>
-#include <utils/StrongPointer.h>
-#include "SensorsV2_0.h"
-
-using android::hardware::configureRpcThreadpool;
-using android::hardware::joinRpcThreadpool;
-using android::hardware::sensors::V2_0::ISensors;
-using android::hardware::sensors::V2_0::implementation::SensorsV2_0;
-
-int main(int /* argc */, char** /* argv */) {
-    configureRpcThreadpool(1, true);
-
-    android::sp<ISensors> sensors = new SensorsV2_0();
-    if (sensors->registerAsService() != ::android::OK) {
-        ALOGE("Failed to register Sensors HAL instance");
-        return -1;
-    }
-
-    joinRpcThreadpool();
-    return 1;  // joinRpcThreadpool shouldn't exit
-}
diff --git a/sensors/2.0/types.hal b/sensors/2.0/types.hal
deleted file mode 100644
index 4457544..0000000
--- a/sensors/2.0/types.hal
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2018 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package android.hardware.sensors@2.0;
-
-enum SensorTimeout : int32_t {
-    /**
-     * The maximum number of seconds to wait for a message on the Wake Lock FMQ
-     * before automatically releasing any wake_lock held for a WAKE_UP event.
-     */
-    WAKE_LOCK_SECONDS = 1,
-};
-
-enum EventQueueFlagBits : uint32_t {
-    /**
-     * Used to notify the Event FMQ that events should be read and processed.
-     */
-    READ_AND_PROCESS = 1 << 0,
-
-    /**
-     * Used by the framework to signal to the HAL when events have been
-     * successfully read from the Event FMQ.
-     *
-     * If the MessageQueue::writeBlocking function is being used to write sensor
-     * events to the Event FMQ, then the readNotification parameter must be set
-     * to EVENTS_READ.
-     */
-     EVENTS_READ = 1 << 1,
-};
-
-enum WakeLockQueueFlagBits : uint32_t {
-    /**
-     * Used to notify the HAL that the framework has written data to the Wake
-     * Lock FMQ.
-     */
-     DATA_WRITTEN = 1 << 0,
-};
-- 
2.17.1

