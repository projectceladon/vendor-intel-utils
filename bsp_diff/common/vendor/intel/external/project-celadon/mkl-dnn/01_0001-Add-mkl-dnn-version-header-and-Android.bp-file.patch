From 8af2ac448ffb93b52226b99dcbb628b379cb8d59 Mon Sep 17 00:00:00 2001
From: Jaikrishna Nemallapudi <nemallapudi.jaikrishna@intel.com>
Date: Mon, 1 Mar 2021 14:37:14 +0530
Subject: [PATCH] Add mkl-dnn version header and Android.bp file

Added mkldnn version header file

Tracked-On: OAM-96219
Signed-off-by: Jaikrishna Nemallapudi <nemallapudi.jaikrishna@intel.com>
Signed-off-by: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
---
 Android.bp               | 293 +++++++++++++++++++++++++++++++++++++++
 include/mkldnn_version.h |  32 +++++
 2 files changed, 325 insertions(+)
 create mode 100644 Android.bp
 create mode 100644 include/mkldnn_version.h

diff --git a/Android.bp b/Android.bp
new file mode 100644
index 000000000..cd50fb27f
--- /dev/null
+++ b/Android.bp
@@ -0,0 +1,293 @@
+//#################################################
+cc_library_static {
+
+    name: "libmkldnn",
+    proprietary: true,
+    owner: "intel",
+    compile_multilib: "64",
+
+    local_include_dirs: [
+        "include",
+        "src",
+        "src/common",
+        "src/cpu",
+        "src/cpu/xbyak",
+    ],
+
+    srcs: [
+        "src/common/batch_normalization.cpp",
+        "src/common/binary_convolution.cpp",
+        "src/common/convolution.cpp",
+        "src/common/convolution_pd.cpp",
+        "src/common/deconvolution.cpp",
+        "src/common/deformable_convolution.cpp",
+        "src/common/eltwise.cpp",
+        "src/common/engine.cpp",
+        "src/common/inner_product.cpp",
+        "src/common/lrn.cpp",
+        "src/common/memory.cpp",
+        "src/common/memory_desc_wrapper.cpp",
+        "src/common/mkldnn_debug.cpp",
+        "src/common/pooling.cpp",
+        "src/common/primitive.cpp",
+        "src/common/primitive_attr.cpp",
+        "src/common/primitive_desc.cpp",
+        "src/common/primitive_iterator.cpp",
+        "src/common/quantization.cpp",
+        "src/common/query.cpp",
+        "src/common/reorder.cpp",
+        "src/common/rnn.cpp",
+        "src/common/roi_pooling.cpp",
+        "src/common/scratchpad.cpp",
+        "src/common/shuffle.cpp",
+        "src/common/softmax.cpp",
+        "src/common/stream.cpp",
+        "src/common/utils.cpp",
+        "src/common/verbose.cpp",
+        "src/cpu/bfloat16_utils.cpp",
+        "src/cpu/cpu_barrier.cpp",
+        "src/cpu/cpu_batch_normalization_utils.cpp",
+        "src/cpu/cpu_concat.cpp",
+        "src/cpu/cpu_engine.cpp",
+        "src/cpu/cpu_memory.cpp",
+        "src/cpu/cpu_primitive.cpp",
+        "src/cpu/cpu_reducer.cpp",
+        "src/cpu/cpu_reorder.cpp",
+        "src/cpu/cpu_sum.cpp",
+        "src/cpu/gemm/bf16/jit_avx512_core_gemm_bf16bf16f32_kern.cpp",
+        "src/cpu/gemm/bf16/jit_avx512_core_s16_copy_an_kern.cpp",
+        "src/cpu/gemm/bf16/jit_avx512_core_s16_copy_at_kern.cpp",
+        "src/cpu/gemm/bf16/jit_avx512_core_s16_copy_bn_kern.cpp",
+        "src/cpu/gemm/bf16/jit_avx512_core_s16_copy_bt_kern.cpp",
+        "src/cpu/gemm/f32/gemm_utils_f32.cpp",
+        "src/cpu/gemm/f32/jit_avx2_f32_copy_an_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx2_f32_copy_at_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx2_f32_copy_bn_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx2_f32_copy_bt_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx2_kernel_sgemm_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx512_common_gemm_f32.cpp",
+        "src/cpu/gemm/f32/jit_avx512_core_f32_copy_an_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx512_core_f32_copy_at_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx512_core_f32_copy_bn_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx512_core_f32_copy_bt_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx_f32_copy_an_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx_f32_copy_at_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx_f32_copy_bn_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx_f32_copy_bt_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx_gemm_f32.cpp",
+        "src/cpu/gemm/f32/jit_avx_gemv_t_f32_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx_kernel_b0_sgemm_kern.cpp",
+        "src/cpu/gemm/f32/jit_avx_kernel_sgemm_kern.cpp",
+        "src/cpu/gemm/f32/jit_sse42_f32_copy_an_kern.cpp",
+        "src/cpu/gemm/f32/jit_sse42_f32_copy_at_kern.cpp",
+        "src/cpu/gemm/f32/jit_sse42_f32_copy_bn_kern.cpp",
+        "src/cpu/gemm/f32/jit_sse42_f32_copy_bt_kern.cpp",
+        "src/cpu/gemm/f32/jit_sse42_gemv_t_f32_kern.cpp",
+        "src/cpu/gemm/f32/jit_sse42_kernel_b0_sgemm_kern.cpp",
+        "src/cpu/gemm/f32/jit_sse42_kernel_sgemm_kern.cpp",
+        "src/cpu/gemm/f32/ref_gemm_f32.cpp",
+        "src/cpu/gemm/gemm.cpp",
+        "src/cpu/gemm/gemm_driver.cpp",
+        "src/cpu/gemm/gemm_info.cpp",
+        "src/cpu/gemm/gemm_pack.cpp",
+        "src/cpu/gemm/gemv_driver.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_u8_copy_an_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_u8_copy_at_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_u8_copy_bn_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_u8_copy_bt_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_u8_copy_sum_an_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_u8_copy_sum_at_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_u8_copy_sum_bn_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx2_u8_copy_sum_bt_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_gemv_s8x8s32.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_kernel_gemv_s8x8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_an_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_at_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_bn_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_bt_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_an_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_at_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_bn_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_bt_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_kernel_b0_b_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_kernel_b0_c_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_kernel_b0_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_kernel_b0_r_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_kernel_b_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_kernel_c_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_kernel_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_kernel_r_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_u8_copy_an_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_u8_copy_at_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_u8_copy_bn_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_u8_copy_bt_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_u8_copy_sum_an_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_u8_copy_sum_at_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_u8_copy_sum_bn_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_avx_u8_copy_sum_bt_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_kernel_b0_b_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_kernel_b0_c_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_kernel_b0_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_kernel_b0_r_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_kernel_b_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_kernel_c_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_kernel_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_kernel_r_gemm_s8u8s32_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_u8_copy_an_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_u8_copy_at_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_u8_copy_bn_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_u8_copy_bt_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_u8_copy_sum_an_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_u8_copy_sum_at_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_u8_copy_sum_bn_kern.cpp",
+        "src/cpu/gemm/s8x8s32/jit_sse41_u8_copy_sum_bt_kern.cpp",
+        "src/cpu/gemm/s8x8s32/ref_gemm_s8x8s32.cpp",
+        "src/cpu/gemm/s8x8s32/simple_gemm_s8s8s32.cpp",
+        "src/cpu/gemm_bf16_convolution.cpp",
+        "src/cpu/gemm_bf16_inner_product.cpp",
+        "src/cpu/gemm_convolution.cpp",
+        "src/cpu/gemm_convolution_utils.cpp",
+        "src/cpu/gemm_inner_product.cpp",
+        "src/cpu/gemm_inner_product_utils.cpp",
+        "src/cpu/gemm_x8s8s32x_convolution.cpp",
+        "src/cpu/gemm_x8s8s32x_inner_product.cpp",
+        "src/cpu/jit_avx2_1x1_conv_kernel_f32.cpp",
+        "src/cpu/jit_avx2_1x1_convolution.cpp",
+        "src/cpu/jit_avx2_conv_kernel_f32.cpp",
+        "src/cpu/jit_avx2_convolution.cpp",
+        "src/cpu/jit_avx512_common_1x1_conv_kernel.cpp",
+        "src/cpu/jit_avx512_common_1x1_convolution.cpp",
+        "src/cpu/jit_avx512_common_conv_kernel.cpp",
+        "src/cpu/jit_avx512_common_conv_winograd_kernel_f32.cpp",
+        "src/cpu/jit_avx512_common_convolution.cpp",
+        "src/cpu/jit_avx512_common_convolution_winograd.cpp",
+        "src/cpu/jit_avx512_common_lrn.cpp",
+        "src/cpu/jit_avx512_core_bf16_1x1_conv_kernel.cpp",
+        "src/cpu/jit_avx512_core_bf16_1x1_convolution.cpp",
+        "src/cpu/jit_avx512_core_bf16_conv_kernel.cpp",
+        "src/cpu/jit_avx512_core_bf16_convolution.cpp",
+        "src/cpu/jit_avx512_core_bf16_dw_conv_kernel.cpp",
+        "src/cpu/jit_avx512_core_bf16_sum.cpp",
+        "src/cpu/jit_avx512_core_fp32_wino_conv_2x3.cpp",
+        "src/cpu/jit_avx512_core_fp32_wino_conv_4x3.cpp",
+        "src/cpu/jit_avx512_core_fp32_wino_conv_4x3_kernel.cpp",
+        "src/cpu/jit_avx512_core_u8s8s32x_wino_convolution.cpp",
+        "src/cpu/jit_avx512_core_x8s8s32x_1x1_conv_kernel.cpp",
+        "src/cpu/jit_avx512_core_x8s8s32x_1x1_convolution.cpp",
+        "src/cpu/jit_avx512_core_x8s8s32x_conv_kernel.cpp",
+        "src/cpu/jit_avx512_core_x8s8s32x_convolution.cpp",
+        "src/cpu/jit_avx512_core_x8s8s32x_deconvolution.cpp",
+        "src/cpu/jit_sse42_1x1_conv_kernel_f32.cpp",
+        "src/cpu/jit_sse42_1x1_convolution.cpp",
+        "src/cpu/jit_sse42_conv_kernel_f32.cpp",
+        "src/cpu/jit_sse42_convolution.cpp",
+        "src/cpu/jit_sse42_i8i8_pooling.cpp",
+        "src/cpu/jit_transpose_src_utils.cpp",
+        "src/cpu/jit_uni_batch_normalization.cpp",
+        "src/cpu/jit_uni_batch_normalization_s8.cpp",
+        "src/cpu/jit_uni_bin_conv_kernel.cpp",
+        "src/cpu/jit_uni_binary_convolution.cpp",
+        "src/cpu/jit_uni_def_conv_kernel_f32.cpp",
+        "src/cpu/jit_uni_deformable_convolution.cpp",
+        "src/cpu/jit_uni_depthwise.cpp",
+        "src/cpu/jit_uni_dw_conv_kernel_f32.cpp",
+        "src/cpu/jit_uni_dw_convolution.cpp",
+        "src/cpu/jit_uni_eltwise.cpp",
+        "src/cpu/jit_uni_fork_softmax.cpp",
+        "src/cpu/jit_uni_fork_softmax_kernel_f32.cpp",
+        "src/cpu/jit_uni_i8i8_pooling.cpp",
+        "src/cpu/jit_uni_lrn.cpp",
+        "src/cpu/jit_uni_lrn_kernel_f32.cpp",
+        "src/cpu/jit_uni_planar_conv_kernel_f32.cpp",
+        "src/cpu/jit_uni_planar_convolution.cpp",
+        "src/cpu/jit_uni_pool_kernel.cpp",
+        "src/cpu/jit_uni_pooling.cpp",
+        "src/cpu/jit_uni_quantization.cpp",
+        "src/cpu/jit_uni_reorder.cpp",
+        "src/cpu/jit_uni_reorder_utils.cpp",
+        "src/cpu/jit_uni_roi_pool_kernel_f32.cpp",
+        "src/cpu/jit_uni_roi_pooling.cpp",
+        "src/cpu/jit_uni_softmax.cpp",
+        "src/cpu/jit_uni_x8s8s32x_conv_kernel.cpp",
+        "src/cpu/jit_uni_x8s8s32x_convolution.cpp",
+        "src/cpu/jit_uni_x8s8s32x_dw_conv_kernel.cpp",
+        "src/cpu/jit_uni_x8s8s32x_dw_convolution.cpp",
+        "src/cpu/nchw_pooling.cpp",
+        "src/cpu/ncsp_batch_normalization.cpp",
+        "src/cpu/nhwc_pooling.cpp",
+        "src/cpu/nspc_batch_normalization.cpp",
+        "src/cpu/ref_batch_normalization.cpp",
+        "src/cpu/ref_binary_convolution.cpp",
+        "src/cpu/ref_convolution.cpp",
+        "src/cpu/ref_deconvolution.cpp",
+        "src/cpu/ref_deformable_convolution.cpp",
+        "src/cpu/ref_depthwise.cpp",
+        "src/cpu/ref_eltwise.cpp",
+        "src/cpu/ref_inner_product.cpp",
+        "src/cpu/ref_lrn.cpp",
+        "src/cpu/ref_pooling.cpp",
+        "src/cpu/ref_quantization.cpp",
+        "src/cpu/ref_roi_pooling.cpp",
+        "src/cpu/ref_shuffle.cpp",
+        "src/cpu/ref_softmax.cpp",
+        "src/cpu/rnn/cell_common.cpp",
+        "src/cpu/rnn/cell_gru.cpp",
+        "src/cpu/rnn/cell_gru_lbr.cpp",
+        "src/cpu/rnn/ref_postgemm_gru.cpp",
+        "src/cpu/rnn/ref_postgemm_gru_lbr.cpp",
+        "src/cpu/rnn/ref_postgemm_lstm.cpp",
+        "src/cpu/rnn/ref_postgemm_rnn.cpp",
+        "src/cpu/rnn/ref_rnn.cpp",
+        "src/cpu/rnn/rnn_utils.cpp",
+        "src/cpu/simple_concat.cpp",
+        "src/cpu/simple_sum.cpp",
+    ],
+
+    header_libs: [
+        "libinference_headers",
+    ],
+
+    cflags: [
+        "-Wformat",
+        "-Wformat-security",
+        "-D_FORTIFY_SOURCE=2",
+        "-fstack-protector-all",
+        "-O3",
+        "-DNDEBUG",
+        "-fvisibility=default",
+        "-Wall",
+        "-Wno-unknown-pragmas",
+        "-Wno-strict-overflow",
+        "-Wno-unused-variable",
+        "-Wno-unused-parameter",
+        "-Wno-non-virtual-dtor",
+        "-frtti",
+        "-fexceptions",
+        "-msse4.2",
+        "-std=c++11",
+        "-fPIC",
+    ] + [
+        "-DANDROID",
+        "-D__ANDROID__",
+    ],
+    rtti: true,
+
+    strip: {
+        none: true,
+    }
+}
+
+//#################################################
+cc_library_headers {
+    name: "libmkldnn_headers",
+    vendor: true,
+    export_include_dirs: [
+        "include",
+        "src",
+        "src/common",
+        "src/cpu",
+        "src/cpu/xbyak",
+    ],
+}
diff --git a/include/mkldnn_version.h b/include/mkldnn_version.h
new file mode 100644
index 000000000..f3c966054
--- /dev/null
+++ b/include/mkldnn_version.h
@@ -0,0 +1,32 @@
+/*******************************************************************************
+* Copyright 2019 Intel Corporation
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*******************************************************************************/
+
+#ifndef MKLDNN_VERSION_H
+#define MKLDNN_VERSION_H
+
+/* Major version of MKL-DNN */
+#define MKLDNN_VERSION_MAJOR 0
+
+/* Minor version of MKL-DNN */
+#define MKLDNN_VERSION_MINOR 18
+
+/* Patch version of MKL-DNN */
+#define MKLDNN_VERSION_PATCH 0
+
+/* Git Commit Hash of MKL-DNN */
+#define MKLDNN_VERSION_HASH  "17da8999282fa9e52adfa5a3faf5d8f5bcbe9540"
+
+#endif
-- 
2.17.1

