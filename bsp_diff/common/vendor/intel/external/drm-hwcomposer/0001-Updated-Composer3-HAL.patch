From 4d6a62d94a89db16ef1ca57b702ae5429a8d1ccb Mon Sep 17 00:00:00 2001
From: Ankit Agarwal <ankit.agarwal@intel.com>
Date: Thu, 13 Jun 2024 09:25:01 +0530
Subject: [PATCH] Updated Composer3 HAL.

Updating android.hardware.graphics.composer3 hal version from V2 to V3.
Also adding new apis as per hal version V3.

Tests: Build the EB, there was no issue.

Tracked-On: NA
Signed-off-by: Ankit Agarwal <ankit.agarwal@intel.com>
---
 hwc3-server/default/Android.bp             |  2 +-
 hwc3-server/default/ComposerClient.cpp     | 13 +++++++++
 hwc3-server/default/ComposerClient.h       |  6 ++++
 hwc3-server/default/impl/HalImpl.cpp       | 34 ++++++++++++++++++++++
 hwc3-server/default/impl/HalImpl.h         |  5 ++++
 hwc3-server/default/include/IComposerHal.h |  7 +++++
 6 files changed, 66 insertions(+), 1 deletion(-)

diff --git a/hwc3-server/default/Android.bp b/hwc3-server/default/Android.bp
index eb48a1e..668d255 100644
--- a/hwc3-server/default/Android.bp
+++ b/hwc3-server/default/Android.bp
@@ -53,7 +53,7 @@ cc_binary {
     shared_libs: [
         "android.hardware.graphics.composer@2.1-resources",
         "android.hardware.graphics.composer@2.2-resources",
-        "android.hardware.graphics.composer3-V2-ndk",
+        "android.hardware.graphics.composer3-V3-ndk",
         "libbase",
         "libbinder_ndk",
         "libcutils",
diff --git a/hwc3-server/default/ComposerClient.cpp b/hwc3-server/default/ComposerClient.cpp
index c3afda6..2254a7e 100644
--- a/hwc3-server/default/ComposerClient.cpp
+++ b/hwc3-server/default/ComposerClient.cpp
@@ -424,6 +424,19 @@ ndk::ScopedAStatus ComposerClient::setRefreshRateChangedCallbackDebugEnabled(int
     return TO_BINDER_STATUS(EX_UNSUPPORTED);
 }
 
+ndk::ScopedAStatus ComposerClient::getDisplayConfigurations(
+        int64_t display, int32_t maxFrameIntervalNs, std::vector<DisplayConfiguration>* configs) {
+    DEBUG_FUNC();
+    auto err = mHal->getDisplayConfigurations(display, maxFrameIntervalNs, configs);
+    return TO_BINDER_STATUS(err);
+}
+
+ndk::ScopedAStatus ComposerClient::notifyExpectedPresent(int64_t, const ClockMonotonicTimestamp&,
+                                                         int32_t) {
+    return TO_BINDER_STATUS(EX_UNSUPPORTED);
+}
+
+
 void ComposerClient::HalEventCallback::onHotplug(int64_t display, bool connected) {
     DEBUG_FUNC();
     if (connected) {
diff --git a/hwc3-server/default/ComposerClient.h b/hwc3-server/default/ComposerClient.h
index 2a84952..dee8b35 100644
--- a/hwc3-server/default/ComposerClient.h
+++ b/hwc3-server/default/ComposerClient.h
@@ -134,6 +134,12 @@ public:
     ndk::ScopedAStatus setIdleTimerEnabled(int64_t display, int32_t timeout) override;
     ndk::ScopedAStatus setRefreshRateChangedCallbackDebugEnabled(int64_t displayId,
                                                                bool enabled) override;
+    ndk::ScopedAStatus getDisplayConfigurations(int64_t displayId, int32_t maxFrameIntervalNs,
+                                                std::vector<DisplayConfiguration>*) override;
+    ndk::ScopedAStatus notifyExpectedPresent(int64_t displayId,
+                                             const ClockMonotonicTimestamp& expectedPresentTime,
+                                             int32_t maxFrameIntervalNs) override;
+
 protected:
     ::ndk::SpAIBinder createBinder() override;
 
diff --git a/hwc3-server/default/impl/HalImpl.cpp b/hwc3-server/default/impl/HalImpl.cpp
index 4d16d49..5e120d7 100644
--- a/hwc3-server/default/impl/HalImpl.cpp
+++ b/hwc3-server/default/impl/HalImpl.cpp
@@ -471,6 +471,40 @@ int32_t HalImpl::getDisplayConfigs(int64_t display, std::vector<int32_t>* config
     return HWC2_ERROR_NONE;
 }
 
+int32_t HalImpl::getDisplayConfigurations(int64_t display, int32_t,
+                                          std::vector<DisplayConfiguration>* outConfigs) {
+    std::vector<int32_t> configIds;
+    RET_IF_ERR(getDisplayConfigs(display, &configIds));
+
+    for (const auto configId : configIds) {
+        DisplayConfiguration config;
+        config.configId = configId;
+        // Get required display attributes
+        RET_IF_ERR(getDisplayAttribute(display, configId, DisplayAttribute::WIDTH, &config.width));
+        RET_IF_ERR(
+                getDisplayAttribute(display, configId, DisplayAttribute::HEIGHT, &config.height));
+        RET_IF_ERR(getDisplayAttribute(display, configId, DisplayAttribute::VSYNC_PERIOD,
+                                       &config.vsyncPeriod));
+        RET_IF_ERR(getDisplayAttribute(display, configId, DisplayAttribute::CONFIG_GROUP,
+                                       &config.configGroup));
+        // Get optional display attributes
+        int32_t dpiX, dpiY;
+        auto statusDpiX = getDisplayAttribute(display, configId, DisplayAttribute::DPI_X, &dpiX);
+        auto statusDpiY = getDisplayAttribute(display, configId, DisplayAttribute::DPI_Y, &dpiY);
+        // TODO(b/294120341): getDisplayAttribute for DPI should return dots per inch
+        if (statusDpiX == HWC2_ERROR_NONE && statusDpiY == HWC2_ERROR_NONE) {
+            config.dpi = {dpiX / 1000.0f, dpiY / 1000.0f};
+        }
+        outConfigs->push_back(config);
+    }
+
+    return HWC2_ERROR_NONE;
+}
+
+int32_t HalImpl::notifyExpectedPresent(int64_t, const ClockMonotonicTimestamp&, int32_t) {
+    return HWC2_ERROR_UNSUPPORTED;
+}
+
 int32_t HalImpl::getDisplayConnectionType(int64_t display, DisplayConnectionType* outType) {
     if (!mDispatch.getDisplayConnectionType) {
         return HWC2_ERROR_UNSUPPORTED;
diff --git a/hwc3-server/default/impl/HalImpl.h b/hwc3-server/default/impl/HalImpl.h
index d6876b1..7f3047a 100644
--- a/hwc3-server/default/impl/HalImpl.h
+++ b/hwc3-server/default/impl/HalImpl.h
@@ -59,6 +59,11 @@ class HalImpl : public IComposerHal {
     int32_t getDisplayBrightnessSupport(int64_t display, bool& outSupport) override;
     int32_t getDisplayCapabilities(int64_t display, std::vector<DisplayCapability>* caps) override;
     int32_t getDisplayConfigs(int64_t display, std::vector<int32_t>* configs) override;
+    int32_t getDisplayConfigurations(int64_t display, int32_t maxFrameIntervalNs,
+                                     std::vector<DisplayConfiguration>* outConfigs) override;
+    int32_t notifyExpectedPresent(int64_t display,
+                                  const ClockMonotonicTimestamp& expectedPresentTime,
+                                  int32_t frameIntervalNs) override;
     int32_t getDisplayConnectionType(int64_t display, DisplayConnectionType* outType) override;
     int32_t getDisplayIdentificationData(int64_t display, DisplayIdentification* id) override;
     int32_t getDisplayName(int64_t display, std::string* outName) override;
diff --git a/hwc3-server/default/include/IComposerHal.h b/hwc3-server/default/include/IComposerHal.h
index 6fe25c5..9855d95 100644
--- a/hwc3-server/default/include/IComposerHal.h
+++ b/hwc3-server/default/include/IComposerHal.h
@@ -46,6 +46,7 @@
 #include <aidl/android/hardware/graphics/composer3/DisplayBrightness.h>
 #include <aidl/android/hardware/graphics/composer3/DisplayCapability.h>
 #include <aidl/android/hardware/graphics/composer3/DisplayCommand.h>
+#include <aidl/android/hardware/graphics/composer3/DisplayConfiguration.h>
 #include <aidl/android/hardware/graphics/composer3/DisplayConnectionType.h>
 #include <aidl/android/hardware/graphics/composer3/DisplayContentSample.h>
 #include <aidl/android/hardware/graphics/composer3/DisplayContentSamplingAttributes.h>
@@ -78,6 +79,7 @@
 // avoid naming conflict
 using AidlPixelFormat = aidl::android::hardware::graphics::common::PixelFormat;
 using AidlNativeHandle = aidl::android::hardware::common::NativeHandle;
+using DisplayConfiguration = aidl::android::hardware::graphics::composer3::DisplayConfiguration;
 
 namespace aidl::android::hardware::graphics::composer3::impl {
 
@@ -125,6 +127,11 @@ class IComposerHal {
     virtual int32_t getDisplayCapabilities(int64_t display,
                                            std::vector<DisplayCapability>* caps) = 0;
     virtual int32_t getDisplayConfigs(int64_t display, std::vector<int32_t>* configs) = 0;
+    virtual int32_t getDisplayConfigurations(int64_t display, int32_t maxFrameIntervalNs,
+                                             std::vector<DisplayConfiguration>* configs) = 0;
+    virtual int32_t notifyExpectedPresent(int64_t display,
+                                          const ClockMonotonicTimestamp& expectedPresentTime,
+                                          int32_t frameIntervalNs) = 0;
     virtual int32_t getDisplayConnectionType(int64_t display, DisplayConnectionType* outType) = 0;
     virtual int32_t getDisplayIdentificationData(int64_t display, DisplayIdentification *id) = 0;
     virtual int32_t getDisplayName(int64_t display, std::string* outName) = 0;
-- 
2.34.1

