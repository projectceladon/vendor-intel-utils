From eea60c6a3c6ea1887289c9979912228322e5a6bf Mon Sep 17 00:00:00 2001
From: Ankit Agrawal <ankit.agarwal@intel.com>
Date: Thu, 18 May 2023 15:30:47 +0530
Subject: [PATCH] Resolved Build Error in kernelflinger.

We were getting following build errors-:
Error-1: hardware/intel/kernelflinger/libkernelflinger/vbmeta_ias.c:199:40: error: incomplete definition of type 'struct evp_pkey_st'
if (EVP_PKEY_RSA != EVP_PKEY_type(pkey->type)) {
external/boringssl/include/openssl/base.h:424:16: note: forward declaration of 'struct evp_pkey_st'

Solution-: instead of defining as reference pointer for pkey->type, use
function method instead.

Error-2: external/boringssl/include/openssl/base.h:333:9: error: unknown type name 'ptrdiff_t'
Solution-: include stddef.h file to resolve cyclic dependency.

Error-3: external/boringssl/include/openssl/bytestring.h:382:70: warning: declaration of 'struct tm' will not be visible outside of this function [-Wvisibility]
Solution-: include declartion of this in header file.

Tracked-On: OAM-106853
Signed-off-by: Ankit Agrawal <ankit.agarwal@intel.com>
---
 libkernelflinger/vbmeta_ias.c   |   2 +-
 libsslsupport/openssl_support.h |   2 +
 libsslsupport/stddef.h          | 113 ++++++++++++++++++++++++++++++++
 3 files changed, 116 insertions(+), 1 deletion(-)

diff --git a/libkernelflinger/vbmeta_ias.c b/libkernelflinger/vbmeta_ias.c
index 1f2f769..8e603f7 100644
--- a/libkernelflinger/vbmeta_ias.c
+++ b/libkernelflinger/vbmeta_ias.c
@@ -196,7 +196,7 @@ static EVP_PKEY *get_rsa_pubkey(X509 *cert)
 	if (!pkey)
 		return NULL;
 
-	if (EVP_PKEY_RSA != EVP_PKEY_type(pkey->type)) {
+	if (EVP_PKEY_RSA != EVP_PKEY_type(EVP_PKEY_id(pkey))) {
 	        EVP_PKEY_free(pkey);
 		return NULL;
 	}
diff --git a/libsslsupport/openssl_support.h b/libsslsupport/openssl_support.h
index 38939fe..884d14b 100644
--- a/libsslsupport/openssl_support.h
+++ b/libsslsupport/openssl_support.h
@@ -18,4 +18,6 @@ typedef struct {
 #endif
 } pthread_rwlock_t;
 
+struct tm;
+
 #endif 	/* _OPENSSL_SUPPORT_H_ */
diff --git a/libsslsupport/stddef.h b/libsslsupport/stddef.h
index e69de29..84c8bd6 100644
--- a/libsslsupport/stddef.h
+++ b/libsslsupport/stddef.h
@@ -0,0 +1,113 @@
+#if !defined(__STDDEF_H) || defined(__need_ptrdiff_t) ||                       \
+	    defined(__need_size_t) || defined(__need_wchar_t) ||                       \
+	        defined(__need_NULL) || defined(__need_wint_t)
+
+#if !defined(__need_ptrdiff_t) && !defined(__need_size_t) &&                   \
+	    !defined(__need_wchar_t) && !defined(__need_NULL) &&                       \
+	        !defined(__need_wint_t)
+/* Always define miscellaneous pieces when modules are available. */
+#if !__has_feature(modules)
+#define __STDDEF_H
+#endif
+#define __need_ptrdiff_t
+#define __need_size_t
+#define __need_wchar_t
+#define __need_NULL
+#define __need_STDDEF_H_misc
+/* __need_wint_t is intentionally not defined here. */
+#endif
+
+#if defined(__need_ptrdiff_t)
+#if !defined(_PTRDIFF_T) || __has_feature(modules)
+/* Always define ptrdiff_t when modules are available. */
+#if !__has_feature(modules)
+#define _PTRDIFF_T
+#endif
+typedef __PTRDIFF_TYPE__ ptrdiff_t;
+#endif
+#undef __need_ptrdiff_t
+#endif /* defined(__need_ptrdiff_t) */
+
+#if defined(__need_size_t)
+#if !defined(_SIZE_T) || __has_feature(modules)
+/* Always define size_t when modules are available. */
+#if !__has_feature(modules)
+#define _SIZE_T
+#endif
+typedef __SIZE_TYPE__ size_t;
+#endif
+#undef __need_size_t
+#endif /*defined(__need_size_t) */
+
+#if defined(__need_STDDEF_H_misc)
+/* ISO9899:2011 7.20 (C11 Annex K): Define rsize_t if __STDC_WANT_LIB_EXT1__ is
+ *  * enabled. */
+#if (defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1 && \
+		     !defined(_RSIZE_T)) || __has_feature(modules)
+/* Always define rsize_t when modules are available. */
+#if !__has_feature(modules)
+#define _RSIZE_T
+#endif
+typedef __SIZE_TYPE__ rsize_t;
+#endif
+#endif /* defined(__need_STDDEF_H_misc) */
+
+#if defined(__need_wchar_t)
+#ifndef __cplusplus
+/* Always define wchar_t when modules are available. */
+#if !defined(_WCHAR_T) || __has_feature(modules)
+#if !__has_feature(modules)
+#define _WCHAR_T
+#if defined(_MSC_EXTENSIONS)
+#define _WCHAR_T_DEFINED
+#endif
+#endif
+typedef __WCHAR_TYPE__ wchar_t;
+#endif
+#endif
+#undef __need_wchar_t
+#endif /* defined(__need_wchar_t) */
+
+#if defined(__need_NULL)
+#undef NULL
+#ifdef __cplusplus
+#  if !defined(__MINGW32__) && !defined(_MSC_VER)
+#    define NULL __null
+#  else
+#    define NULL 0
+#  endif
+#else
+#  define NULL ((void*)0)
+#endif
+#ifdef __cplusplus
+#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)
+namespace std { typedef decltype(nullptr) nullptr_t; }
+using ::std::nullptr_t;
+#endif
+#endif
+#undef __need_NULL
+#endif /* defined(__need_NULL) */
+
+#if defined(__need_STDDEF_H_misc)
+#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
+#include "__stddef_max_align_t.h"
+#endif
+#define offsetof(t, d) __builtin_offsetof(t, d)
+#undef __need_STDDEF_H_misc
+#endif  /* defined(__need_STDDEF_H_misc) */
+
+/* Some C libraries expect to see a wint_t here. Others (notably MinGW) will use
+ * __WINT_TYPE__ directly; accommodate both by requiring __need_wint_t */
+#if defined(__need_wint_t)
+/* Always define wint_t when modules are available. */
+#if !defined(_WINT_T) || __has_feature(modules)
+#if !__has_feature(modules)
+#define _WINT_T
+#endif
+typedef __WINT_TYPE__ wint_t;
+#endif
+#undef __need_wint_t
+#endif /* __need_wint_t */
+
+#endif
+
-- 
2.17.1

