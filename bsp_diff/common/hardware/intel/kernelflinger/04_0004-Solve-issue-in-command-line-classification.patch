From 8410c47dcd364587d02bb251f8ad4a6874e5f994 Mon Sep 17 00:00:00 2001
From: "Chen, Gang G" <gang.g.chen@intel.com>
Date: Sat, 2 Jul 2022 21:18:56 +0800
Subject: [PATCH] Solve issue in command line classification

kernelflinger will parse kernel command lines and pass to
kernel. But it doesn't parse it correclty. Sometimes, it will
lack of some characters, so kernel boots fail

Solve it by refine command line classifiction function.

Tracked-On: OAM-102350
Signed-off-by: Chen, Gang G <gang.g.chen@intel.com>
---
 libkernelflinger/android.c | 107 +++++++++++++++++++++++--------------
 1 file changed, 66 insertions(+), 41 deletions(-)

diff --git a/libkernelflinger/android.c b/libkernelflinger/android.c
index 3fe1844..2777f6f 100644
--- a/libkernelflinger/android.c
+++ b/libkernelflinger/android.c
@@ -1095,49 +1095,74 @@ static EFI_STATUS classify_cmd_parameters(
                 OUT UINT8 *kernelcmd
                 )
 {
-        CHAR8 *savedPtr, *token = NULL;
-        CHAR8 *tempChar;
-        char delim = ' ';
-        UINT32 cmdCount = 0;
-        UINT32 confCount = 0;
-
-        if (cmd_conf == NULL || androidcmd == NULL || kernelcmd == NULL)
-                return EFI_INVALID_PARAMETER;
-
-        tempChar = cmd_conf;
-        while(*tempChar == ' ')
-                tempChar += 1;
-        token = (CHAR8 *)strtok_r((char *)tempChar, &delim, (char **)&savedPtr);
-
-        while (token != NULL) {
-                if (strncmp(token, "androidboot", strlen("androidboot")) == 0) {
-                        memcpy_s(androidcmd + confCount, strlen(token), token, strlen(token));
-                        confCount += strlen(token);
-                        /* In bootconfig, a config value cannot be empty. If so, we need to set
-                         * its value to the default value of "unknown"
-                         * */
-                        if (androidcmd[confCount - 1] == '=') {
-                                memcpy_s(androidcmd + confCount, 7, "unknown", 7);
-                                confCount += 7;
-                        }
-                        androidcmd[confCount] = '\n';
-                        confCount += 1;
-                } else {
-                        memcpy_s(kernelcmd + cmdCount, strlen(token), token, strlen(token));
-                        cmdCount += strlen(token);
-                        kernelcmd[cmdCount] = ' ';
-                        cmdCount += 1;
-                }
-                token = (CHAR8 *)strtok_r(NULL, &delim, (char **)&savedPtr);
-        }
-
-        androidcmd[confCount - 1] = '\0';
-        kernelcmd[confCount - 1] = '\0';
-
-        return EFI_SUCCESS;
+	UINT32 cnt;
+	bool end = false;
+	CHAR8 *tempChar;
+	CHAR8 *androidcmd_tmp = androidcmd;
+	CHAR8 *kernelcmd_tmp = kernelcmd;
+
+	if (cmd_conf == NULL || androidcmd == NULL || kernelcmd == NULL)
+		return EFI_INVALID_PARAMETER;
+
+	tempChar = cmd_conf;
+	while(*tempChar == ' ')
+		tempChar += 1;
+
+	while (*tempChar != '\0') {
+		cnt = 0;
+		if (strncmp(tempChar, "androidboot", strlen("androidboot")) == 0) {
+			cnt = strlen("androidboot");
+			while (true) {
+				if (tempChar[cnt] == '\0') {
+					memcpy_s(androidcmd_tmp, cnt, tempChar, cnt);
+					androidcmd_tmp += cnt;
+					end = true;
+					break;
+				} else if (tempChar[cnt] == ' ') {
+					if (tempChar[cnt - 1] == '=') {
+						memcpy_s(androidcmd_tmp, cnt, tempChar, cnt);
+						memcpy_s(androidcmd_tmp + cnt, 7, "unknown", 7);
+						androidcmd_tmp += cnt + 7;
+					} else {
+						memcpy_s(androidcmd_tmp, cnt, tempChar, cnt);
+						androidcmd_tmp += cnt;
+					}
+					*androidcmd_tmp = '\n';
+					androidcmd_tmp += 1;
+					tempChar += cnt;
+					break;
+				}
+				cnt ++;
+			}
+		} else {
+			while (true) {
+				if (tempChar[cnt] == '\0') {
+					memcpy_s(kernelcmd_tmp, cnt, tempChar, cnt);
+					kernelcmd_tmp += cnt;
+					end = true;
+					break;
+				} else if (tempChar[cnt] == ' ') {
+					memcpy_s(kernelcmd_tmp, cnt+1, tempChar, cnt+1);
+					tempChar += cnt+1;
+					kernelcmd_tmp += cnt+1;
+					break;
+				}
+				cnt ++;
+			}
+		}
+
+		if (end) break;
+
+		while(*tempChar == ' ')
+			tempChar += 1;
+	}
+
+	*androidcmd_tmp = '\0';
+	*kernelcmd_tmp = '\0';
+
+	return EFI_SUCCESS;
 }
 
-
 /* when we call setup_command_line in EFI, parameter is EFI_GUID *swap_guid.
  * when we call setup_command_line in NON EFI, parameter is const CHAR8 *abl_cmd_line.
  * */
-- 
2.25.1

