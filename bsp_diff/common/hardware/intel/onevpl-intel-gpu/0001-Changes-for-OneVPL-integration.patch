From 02b411f8078a07e521931cfd70eb81d88ee880b8 Mon Sep 17 00:00:00 2001
From: yerriswamy <yerriswamy.kt@intel.com>
Date: Fri, 28 Oct 2022 23:23:43 +0530
Subject: [PATCH] Changes for OneVPL integration

- Added base Android.mk files
- Addressed build issues if MFX_ENABLE_ASC is not defined.
- Addressed build issues when uMFX_FOURCC_ABGR16F is used outside
ONEVPL_EXPERIMENTAL macro.

Change-Id: I43eaa4907bfa5658230ebb42846dc0651fba31aa4
Tracked-On: OAM-104545
Signed-off-by: Neeraj Solanki <neeraj.solanki@intel.com>
Signed-off-by: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Signed-off-by: Ratnesh Kumar Rai <ratnesh.kumar.rai@intel.com>
Signed-off-by: yerriswamy <yerriswamy.kt@intel.com>
---
 Android.mk                                    |   4 +
 _studio/Android.mk                            |   3 +
 _studio/mfx_lib/Android.mk                    | 299 ++++++++++++++++++
 .../h264/include/mfx_h264_encode_hw_utils.h   |   2 +-
 .../encode_hw/h264/src/mfx_h264_encode_hw.cpp |   8 +
 _studio/mfx_lib/ext/asc/src/asc_cm.cpp        |   3 +-
 .../ext/h264/src/mfx_h264_encode_cm.cpp       |  15 +
 _studio/mfx_lib/shared/src/mfx_common_int.cpp |  15 +-
 _studio/mfx_lib/vpp/src/mfx_vpp_sw_core.cpp   |   2 +
 _studio/mfx_lib/vpp/src/mfx_vpp_utils.cpp     |   2 +
 _studio/shared/Android.mk                     |   3 +
 _studio/shared/asc/Android.mk                 |  97 ++++++
 _studio/shared/asc/include/asc.h              |   1 +
 _studio/shared/asc/src/asc.cpp                |   4 +
 _studio/shared/include/mfx_config.h           |  12 +-
 _studio/shared/include/mfx_utils.h            |   6 +
 _studio/shared/include/mfx_vpp_interface.h    |   2 +
 _studio/shared/mfx_trace/Android.mk           |  30 ++
 _studio/shared/src/libmfx_core.cpp            |   3 +-
 _studio/shared/umc/Android.mk                 |   3 +
 _studio/shared/umc/codec/Android.mk           |  87 +++++
 _studio/shared/umc/core/Android.mk            |  40 +++
 _studio/shared/umc/io/Android.mk              |  37 +++
 android/Android.bp                            |  10 +
 android/Android.mk                            |  12 +
 android/include/mfx_android_config.h          |  22 ++
 android/include/mfx_android_defs.h            |  60 ++++
 android/mfx_defs.mk                           | 112 +++++++
 android/mfx_defs_internal.mk                  |  32 ++
 29 files changed, 915 insertions(+), 11 deletions(-)
 create mode 100644 Android.mk
 create mode 100644 _studio/Android.mk
 create mode 100644 _studio/mfx_lib/Android.mk
 create mode 100644 _studio/shared/Android.mk
 create mode 100644 _studio/shared/asc/Android.mk
 create mode 100644 _studio/shared/mfx_trace/Android.mk
 create mode 100644 _studio/shared/umc/Android.mk
 create mode 100644 _studio/shared/umc/codec/Android.mk
 create mode 100644 _studio/shared/umc/core/Android.mk
 create mode 100644 _studio/shared/umc/io/Android.mk
 create mode 100644 android/Android.bp
 create mode 100644 android/Android.mk
 create mode 100644 android/include/mfx_android_config.h
 create mode 100644 android/include/mfx_android_defs.h
 create mode 100644 android/mfx_defs.mk
 create mode 100644 android/mfx_defs_internal.mk

diff --git a/Android.mk b/Android.mk
new file mode 100644
index 00000000..bfaab8be
--- /dev/null
+++ b/Android.mk
@@ -0,0 +1,4 @@
+MFX_HOME:= $(call my-dir)
+
+# Recursively call sub-folder Android.mk
+include $(call all-subdir-makefiles)
diff --git a/_studio/Android.mk b/_studio/Android.mk
new file mode 100644
index 00000000..86c9b78c
--- /dev/null
+++ b/_studio/Android.mk
@@ -0,0 +1,3 @@
+# Recursively call sub-folder Android.mk
+
+include $(call all-subdir-makefiles)
\ No newline at end of file
diff --git a/_studio/mfx_lib/Android.mk b/_studio/mfx_lib/Android.mk
new file mode 100644
index 00000000..34d7652a
--- /dev/null
+++ b/_studio/mfx_lib/Android.mk
@@ -0,0 +1,299 @@
+
+LOCAL_PATH:= $(MFX_HOME)/_studio
+
+# =============================================================================
+
+MFX_LOCAL_DECODERS := h265 h264 vc1 mjpeg vp8 vp9 av1
+MFX_LOCAL_ENCODERS := h264 mpeg2 mjpeg vp9
+
+# Setting subdirectories to march thru
+MFX_LOCAL_DIRS := \
+    scheduler/linux \
+
+MFX_LOCAL_DIRS_IMPL := \
+    $(addprefix decode/, $(MFX_LOCAL_DECODERS)) \
+    vpp
+
+MFX_LOCAL_DIRS_HW := \
+    $(addprefix encode_hw/, $(MFX_LOCAL_ENCODERS)) \
+    mctf_package/mctf \
+    cmrt_cross_platform
+
+#scheduler/linux/src
+MFX_LOCAL_SRC_FILES := \
+    $(patsubst $(LOCAL_PATH)/%, %, $(foreach dir, $(MFX_LOCAL_DIRS), $(wildcard $(LOCAL_PATH)/mfx_lib/$(dir)/src/*.cpp)))
+
+#decode/h265 h264 vc1 mjpeg vp8 vp9 av1/src
+MFX_LOCAL_SRC_FILES_IMPL := \
+    $(patsubst $(LOCAL_PATH)/%, %, $(foreach dir, $(MFX_LOCAL_DIRS_IMPL), $(wildcard $(LOCAL_PATH)/mfx_lib/$(dir)/src/*.cpp)))
+
+#encode_hw/h264 mpeg2 mjpeg vp9/src
+MFX_LOCAL_SRC_FILES_HW := \
+    $(MFX_LOCAL_SRC_FILES_IMPL) \
+    $(patsubst $(LOCAL_PATH)/%, %, $(foreach dir, $(MFX_LOCAL_DIRS_HW), $(wildcard $(LOCAL_PATH)/mfx_lib/$(dir)/src/*.cpp)))
+
+#mpeg2 hw decoder
+MFX_LOCAL_SRC_FILES_HW += $(addprefix mfx_lib/decode/mpeg2/hw/src/, \
+    mfx_mpeg2_decode.cpp)
+
+MFX_LOCAL_SRC_FILES_HW += $(addprefix mfx_lib/ext/genx/h264_encode/isa/, \
+    genx_simple_me_gen12lp_isa.cpp \
+    genx_histogram_gen12lp_isa.cpp)
+
+MFX_LOCAL_SRC_FILES_HW += \
+    mfx_lib/encode_hw/hevc/hevcehw_disp.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/hevcehw_base.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_impl.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_alloc.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_constraints.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_dirty_rect.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_encoded_frame_info.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_enctools.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_ext_brc.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_hdr_sei.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_hrd.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_scc.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_interlace.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_legacy.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_legacy_defaults.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_max_frame_size.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_packer.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_parser.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_recon_info.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_rext.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_roi.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_task.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_query_impl_desc.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_weighted_prediction.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/g12/hevcehw_g12_caps.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_interlace_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_dirty_rect_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_max_frame_size_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_roi_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_va_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_rext_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_va_packer_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_qp_modulation_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/base/hevcehw_base_weighted_prediction_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/g12/hevcehw_g12_lin.cpp \
+    mfx_lib/encode_hw/hevc/linux/xe_hpm/hevcehw_xe_hpm_lin.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_extddi.cpp \
+    mfx_lib/encode_hw/hevc/agnostic/base/hevcehw_base_caps.cpp \
+    mfx_lib/encode_hw/shared/ehw_resources_pool.cpp \
+    mfx_lib/encode_hw/shared/ehw_task_manager.cpp \
+    mfx_lib/encode_hw/shared/ehw_device_vaapi.cpp \
+    mfx_lib/encode_hw/shared/ehw_utils_vaapi.cpp \
+    mfx_lib/ext/cmrt_cross_platform/src/cm_mem_copy.cpp \
+    mfx_lib/ext/cmrt_cross_platform/src/cmrt_cross_platform.cpp \
+    mfx_lib/ext/cmrt_cross_platform/src/cmrt_utility.cpp \
+    shared/mfx_logging/src/mfx_utils_logging.cpp \
+    mfx_lib/ext/asc/src/asc_cm.cpp
+
+#scheduler/linux/include
+MFX_LOCAL_INCLUDES := \
+    $(foreach dir, $(MFX_LOCAL_DIRS), $(wildcard $(LOCAL_PATH)/mfx_lib/$(dir)/include))
+
+#decode/h265 h264 vc1 mjpeg vp8 vp9 av1/include
+MFX_LOCAL_INCLUDES_IMPL := \
+    $(MFX_LOCAL_INCLUDES) \
+    $(foreach dir, $(MFX_LOCAL_DIRS_IMPL), $(wildcard $(LOCAL_PATH)/mfx_lib/$(dir)/include))
+
+#decode/mpeg2/hw/include
+MFX_LOCAL_INCLUDES_IMPL += \
+    $(MFX_HOME)/_studio/mfx_lib/decode/mpeg2/hw/include
+
+#encode_hw/h264 mpeg2 mjpeg vp9/include
+MFX_LOCAL_INCLUDES_IMPL += \
+    $(foreach dir, $(MFX_LOCAL_DIRS_HW), $(wildcard $(LOCAL_PATH)/mfx_lib/$(dir)/include))
+
+MFX_LOCAL_INCLUDES_HW := \
+    $(MFX_LOCAL_INCLUDES_IMPL) \
+    $(MFX_HOME)/_studio/mfx_lib/ext/asc/include \
+    $(MFX_HOME)/_studio/mfx_lib/ext/genx/h264_encode/isa \
+    $(MFX_HOME)/_studio/mfx_lib/ext/genx/field_copy/isa \
+    $(MFX_HOME)/_studio/mfx_lib/ext/genx/copy_kernels/isa \
+    $(MFX_HOME)/_studio/mfx_lib/ext/cmrt_cross_platform/include \
+    $(MFX_HOME)/_studio/mfx_lib/ext/genx/mctf/isa \
+    $(MFX_HOME)/_studio/mfx_lib/ext/genx/asc/isa \
+    $(MFX_HOME)/_studio/mfx_lib/ext/h264/include \
+    $(MFX_HOME)/_studio/mfx_lib/ext/mpeg2/include \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/hevc \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/hevc/agnostic \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/hevc/agnostic/base \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/hevc/agnostic/g12 \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/hevc/linux \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/hevc/linux/base \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/hevc/linux/g12 \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/hevc/linux/xe_hpm \
+    $(MFX_HOME)/_studio/mfx_lib/encode_hw/shared \
+    $(MFX_HOME)/_studio/mfx_lib/scheduler/linux/include \
+    $(MFX_HOME)/_studio/shared/asc/include \
+    $(MFX_HOME)/_studio/shared/mfx_logging/include
+
+MFX_LOCAL_STATIC_LIBRARIES_HW := \
+    libmfx_core_hw \
+    libumc_codecs_hw \
+    libumc_brc \
+    libumc_va \
+    libumc_core_hw \
+    libmfx_gen_trace \
+    libmfx_asc
+
+MFX_LOCAL_LDFLAGS_HW := \
+    $(MFX_LDFLAGS) \
+    -Wl,--version-script=$(LOCAL_PATH)/mfx_lib/libmfx-gen.map
+
+# =============================================================================
+
+UMC_DIRS := \
+    h264_enc \
+    brc
+
+UMC_DIRS_IMPL := \
+    h265_dec h264_dec mpeg2_dec vc1_dec jpeg_dec vp9_dec av1_dec \
+    vc1_common jpeg_common color_space_converter
+
+UMC_LOCAL_INCLUDES := \
+    $(foreach dir, $(UMC_DIRS), $(wildcard $(MFX_HOME)/_studio/shared/umc/codec/$(dir)/include))
+
+UMC_LOCAL_INCLUDES_IMPL := \
+    $(UMC_LOCAL_INCLUDES) \
+    $(foreach dir, $(UMC_DIRS_IMPL), $(wildcard $(MFX_HOME)/_studio/shared/umc/codec/$(dir)/include))
+
+UMC_LOCAL_INCLUDES_HW := \
+    $(UMC_LOCAL_INCLUDES_IMPL)
+
+# =============================================================================
+
+MFX_SHARED_FILES_IMPL := $(addprefix mfx_lib/shared/src/, \
+    mfx_brc_common.cpp \
+    mfx_common_int.cpp \
+    mfx_enc_common.cpp \
+    mfx_vc1_dec_common.cpp \
+    mfx_vpx_dec_common.cpp \
+    mfx_common_decode_int.cpp)
+
+MFX_SHARED_FILES_HW := \
+    $(MFX_SHARED_FILES_IMPL)
+
+MFX_SHARED_FILES_HW += $(addprefix mfx_lib/ext/genx/asc/isa/, \
+    genx_scd_gen12lp_isa.cpp)
+
+MFX_SHARED_FILES_HW += $(addprefix mfx_lib/ext/genx/copy_kernels/isa/, \
+    genx_copy_kernel_gen12lp_isa.cpp)
+
+MFX_SHARED_FILES_HW += $(addprefix mfx_lib/ext/genx/field_copy/isa/, \
+    genx_fcopy_gen12lp_isa.cpp)
+
+MFX_SHARED_FILES_HW += $(addprefix mfx_lib/ext/genx/mctf/isa/, \
+    genx_me_gen12lp_isa.cpp \
+    genx_mc_gen12lp_isa.cpp \
+    genx_sd_gen12lp_isa.cpp)
+
+MFX_SHARED_FILES_HW += $(addprefix mfx_lib/ext/mpeg2/src/, \
+    mfx_mpeg2_encode_debug_hw.cpp \
+    mfx_mpeg2_encode_full_hw.cpp \
+    mfx_mpeg2_encode_hw.cpp \
+    mfx_mpeg2_encode_utils_hw.cpp \
+    mfx_mpeg2_encode_vaapi.cpp \
+    mfx_mpeg2_encode_factory.cpp \
+    mfx_mpeg2_enc_common_hw.cpp)
+
+MFX_SHARED_FILES_HW += $(addprefix mfx_lib/ext/h264/src/, \
+    mfx_h264_encode_cm.cpp)
+
+MFX_LIB_SHARED_FILES_1 := $(addprefix mfx_lib/shared/src/, \
+    libmfxsw.cpp \
+    libmfxsw_async.cpp \
+    libmfxsw_decode.cpp \
+    libmfxsw_decode_vp.cpp \
+    libmfxsw_functions.cpp \
+    libmfxsw_enc.cpp \
+    libmfxsw_encode.cpp \
+    libmfxsw_pak.cpp \
+    libmfxsw_plugin.cpp \
+    libmfxsw_query.cpp \
+    libmfxsw_session.cpp \
+    libmfxsw_vpp.cpp \
+    mfx_session.cpp \
+    mfx_critical_error_handler.cpp)
+
+MFX_LIB_SHARED_FILES_2 := $(addprefix shared/src/, \
+    fast_copy.cpp \
+    fast_copy_c_impl.cpp \
+    fast_copy_sse4_impl.cpp \
+    mfx_vpp_vaapi.cpp \
+    mfx_vpp_helper.cpp \
+    libmfx_allocator.cpp \
+    libmfx_allocator_vaapi.cpp \
+    libmfx_core.cpp \
+    libmfx_core_hw.cpp \
+    libmfx_core_factory.cpp \
+    libmfx_core_vaapi.cpp \
+    mfx_umc_alloc_wrapper.cpp \
+    mfx_umc_mjpeg_vpp.cpp)
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := \
+    $(MFX_LOCAL_SRC_FILES) \
+    $(MFX_LOCAL_SRC_FILES_HW) \
+    $(MFX_SHARED_FILES_HW)
+
+LOCAL_C_INCLUDES := \
+    $(MFX_LOCAL_INCLUDES_HW) \
+    $(UMC_LOCAL_INCLUDES_HW) \
+    $(MFX_INCLUDES_INTERNAL_HW)
+
+LOCAL_CPPFLAGS += -std=c++14
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -Wno-error -Wno-unused-parameter -Wno-implicit-fallthrough
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libmfx_core_hw
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+
+include $(BUILD_STATIC_LIBRARY)
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := $(MFX_LIB_SHARED_FILES_1) $(MFX_LIB_SHARED_FILES_2)
+
+LOCAL_C_INCLUDES := \
+    $(MFX_LOCAL_INCLUDES_HW) \
+    $(UMC_LOCAL_INCLUDES_HW) \
+    $(MFX_INCLUDES_INTERNAL_HW)
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -Wno-error -Wno-unused-parameter -Wno-implicit-fallthrough
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_LDFLAGS := $(MFX_LOCAL_LDFLAGS_HW)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+LOCAL_WHOLE_STATIC_LIBRARIES := $(MFX_LOCAL_STATIC_LIBRARIES_HW)
+LOCAL_SHARED_LIBRARIES := libva liblog libcutils libdrm
+
+ifeq ($(MFX_ENABLE_ITT_TRACES),true)
+    LOCAL_WHOLE_STATIC_LIBRARIES += libittnotify
+endif
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libmfx-gen
+
+include $(BUILD_SHARED_LIBRARY)
diff --git a/_studio/mfx_lib/encode_hw/h264/include/mfx_h264_encode_hw_utils.h b/_studio/mfx_lib/encode_hw/h264/include/mfx_h264_encode_hw_utils.h
index 7f5199b5..47bab7ba 100644
--- a/_studio/mfx_lib/encode_hw/h264/include/mfx_h264_encode_hw_utils.h
+++ b/_studio/mfx_lib/encode_hw/h264/include/mfx_h264_encode_hw_utils.h
@@ -35,9 +35,9 @@
 #include "mfx_h264_encode_interface.h"
 #ifdef MFX_ENABLE_EXT
 #include "mfx_h264_encode_cm.h"
+#endif
 #ifdef MFX_ENABLE_ASC
 #include "asc_cm.h"
-#endif
 #else
 #include "asc.h"
 #endif
diff --git a/_studio/mfx_lib/encode_hw/h264/src/mfx_h264_encode_hw.cpp b/_studio/mfx_lib/encode_hw/h264/src/mfx_h264_encode_hw.cpp
index c958564d..5ea759f9 100644
--- a/_studio/mfx_lib/encode_hw/h264/src/mfx_h264_encode_hw.cpp
+++ b/_studio/mfx_lib/encode_hw/h264/src/mfx_h264_encode_hw.cpp
@@ -974,8 +974,10 @@ mfxStatus ImplementationAvc::InitScd(mfxFrameAllocRequest& request)
         m_video.mfx.FrameInfo.CropH, 
         m_video.mfx.FrameInfo.Width, 
         m_video.mfx.FrameInfo.PicStruct, 
+#ifdef MFX_ENABLE_ASC
 #ifdef MFX_ENABLE_KERNELS
         m_cmDevice, 
+#endif
 #endif
         IsCmNeededForSCD(m_video));
     MFX_CHECK_STS(sts);
@@ -2454,6 +2456,7 @@ mfxStatus ImplementationAvc::SCD_Put_Frame_Cm(DdiTask & task)
 {
     (void)task;
 #ifdef MFX_ENABLE_EXT
+#ifdef MFX_ENABLE_ASC
     task.m_SceneChange = false;
     mfxFrameSurface1 *pSurfI = nullptr;
     pSurfI = task.m_yuv;
@@ -2491,6 +2494,7 @@ mfxStatus ImplementationAvc::SCD_Put_Frame_Cm(DdiTask & task)
 #else
     MFX_RETURN(MFX_ERR_UNSUPPORTED);
 #endif
+#endif
 }
 
 mfxStatus ImplementationAvc::SCD_Put_Frame_Hw(DdiTask& task)
@@ -2664,11 +2668,13 @@ mfxStatus ImplementationAvc::BuildPPyr(DdiTask & task, mfxU32 pyrWidth, bool bLa
 mfxStatus ImplementationAvc::SCD_Get_FrameType(DdiTask & task)
 {
 #ifdef MFX_ENABLE_EXT
+#ifdef MFX_ENABLE_ASC
     if (task.m_wsSubSamplingEv)
     {
         MFX_SAFE_CALL(amtScd.ProcessQueuedFrame(&task.m_wsSubSamplingEv, &task.m_wsSubSamplingTask, &task.m_wsGpuImage, &task.m_Yscd));
         ReleaseResource(m_scd, (mfxHDL)task.m_wsGpuImage);
     }
+#endif
 #endif
     mfxExtCodingOption2 const & extOpt2 = GetExtBufferRef(m_video);
     mfxExtCodingOption3 const & extOpt3 = GetExtBufferRef(m_video);
@@ -2751,6 +2757,7 @@ using namespace ns_asc;
 mfxStatus ImplementationAvc::Prd_LTR_Operation(DdiTask & task)
 {
 #ifdef MFX_ENABLE_EXT
+#ifdef MFX_ENABLE_ASC
     if (task.m_wsSubSamplingEv && CommonCaps::IsCmSupported(m_core->GetHWType()))
     {
         MFX_SAFE_CALL(amtScd.ProcessQueuedFrame(&task.m_wsSubSamplingEv, &task.m_wsSubSamplingTask, &task.m_wsGpuImage, &task.m_Yscd));
@@ -2761,6 +2768,7 @@ mfxStatus ImplementationAvc::Prd_LTR_Operation(DdiTask & task)
     {
         amtScd.ProcessQueuedFrame(&task.m_Yscd);
     }
+#endif
 #endif
     task.m_frameLtrReassign = 0;
     task.m_LtrOrder = m_LtrOrder;
diff --git a/_studio/mfx_lib/ext/asc/src/asc_cm.cpp b/_studio/mfx_lib/ext/asc/src/asc_cm.cpp
index e1a759b8..cee4048a 100644
--- a/_studio/mfx_lib/ext/asc/src/asc_cm.cpp
+++ b/_studio/mfx_lib/ext/asc/src/asc_cm.cpp
@@ -179,9 +179,10 @@ mfxStatus ASC_Cm::InitGPUsurf(CmDevice* pCmDevice) {
     case PLATFORM_INTEL_RKL:
     case PLATFORM_INTEL_DG1:
     case PLATFORM_INTEL_ADL_N:
-
+#ifdef MFX_ENABLE_ASC
         res = m_device->LoadProgram((void *)genx_scd_gen12lp, sizeof(genx_scd_gen12lp), m_program, "nojitter");
         break;
+#endif
     default:
         res = CM_NOT_IMPLEMENTED;
     }
diff --git a/_studio/mfx_lib/ext/h264/src/mfx_h264_encode_cm.cpp b/_studio/mfx_lib/ext/h264/src/mfx_h264_encode_cm.cpp
index b46426b7..2d5e27dc 100755
--- a/_studio/mfx_lib/ext/h264/src/mfx_h264_encode_cm.cpp
+++ b/_studio/mfx_lib/ext/h264/src/mfx_h264_encode_cm.cpp
@@ -60,7 +60,11 @@ CmProgram * ReadProgram(CmDevice * device, const mfxU8 * buffer, size_t len)
     return program;
 }
 
+#ifdef ANDROID
+CmKernel * CreateKernel(CmDevice * device, CmProgram * program, char const * name, const void * funcptr)
+#else
 CmKernel * CreateKernel(CmDevice * device, CmProgram * program, char const * name, void * funcptr)
+#endif
 {
     int result = CM_SUCCESS;
     CmKernel * kernel = 0;
@@ -870,15 +874,26 @@ void CmContext::Setup(
 
     if (m_program)
     {
+#ifdef ANDROID
+        m_kernelI = CreateKernel(m_device, m_program, "EncMB_I", CM_KERNEL_FUNCTION(EncMB_I));
+        m_kernelP = CreateKernel(m_device, m_program, "EncMB_P", CM_KERNEL_FUNCTION(EncMB_P));
+        m_kernelB = CreateKernel(m_device, m_program, "EncMB_B", CM_KERNEL_FUNCTION(EncMB_B));
+#else
         m_kernelI = CreateKernel(m_device, m_program, "EncMB_I", (void *)EncMB_I);
         m_kernelP = CreateKernel(m_device, m_program, "EncMB_P", (void *)EncMB_P);
         m_kernelB = CreateKernel(m_device, m_program, "EncMB_B", (void *)EncMB_B);
+#endif
     }
 
     if (m_programHist)
     {
+#ifdef ANDROID
+        m_kernelHistFrame = CreateKernel(m_device, m_programHist, "HistogramSLMFrame", CM_KERNEL_FUNCTION(HistogramFrame));
+        m_kernelHistFields = CreateKernel(m_device, m_programHist, "HistogramSLMFields", CM_KERNEL_FUNCTION(HistogramFields));
+#else
         m_kernelHistFrame = CreateKernel(m_device, m_programHist, "HistogramSLMFrame", (void *)HistogramFrame);
         m_kernelHistFields = CreateKernel(m_device, m_programHist, "HistogramSLMFields", (void *)HistogramFields);
+#endif
     }
     m_nullBuf.Reset(m_device, 4);
 
diff --git a/_studio/mfx_lib/shared/src/mfx_common_int.cpp b/_studio/mfx_lib/shared/src/mfx_common_int.cpp
index e39bccfe..45627c46 100644
--- a/_studio/mfx_lib/shared/src/mfx_common_int.cpp
+++ b/_studio/mfx_lib/shared/src/mfx_common_int.cpp
@@ -88,7 +88,9 @@ mfxStatus CheckFrameInfoCommon(mfxFrameInfo  *info, mfxU32 codecId)
     case MFX_FOURCC_P016:
     case MFX_FOURCC_Y216:
     case MFX_FOURCC_Y416:
+#ifdef ONEVPL_EXPERIMENTAL
     case MFX_FOURCC_ABGR16F:
+#endif
         break;
     default:
         MFX_RETURN(MFX_ERR_INVALID_VIDEO_PARAM);
@@ -983,8 +985,11 @@ mfxU32 GetMinPitch(mfxU32 fourcc, mfxU16 width)
 
         case MFX_FOURCC_ARGB16:
         case MFX_FOURCC_ABGR16:  
+#ifdef ONEVPL_EXPERIMENTAL
         case MFX_FOURCC_ABGR16F:     return width * 8;
-
+#else
+            return width * 8;
+#endif
         case MFX_FOURCC_YUY2:
         case MFX_FOURCC_UYVY:        return width * 2;
 
@@ -1029,9 +1034,9 @@ mfxU8* GetFramePointer(mfxU32 fourcc, mfxFrameData const& data)
         case MFX_FOURCC_Y410:        return reinterpret_cast<mfxU8*>(data.Y410); break;
 
         case MFX_FOURCC_Y416:        return reinterpret_cast<mfxU8*>(data.U16); break;
-
+#ifdef ONEVPL_EXPERIMENTAL
         case MFX_FOURCC_ABGR16F:     return reinterpret_cast<mfxU8*>(data.ABGRFP16); break;
-
+#endif
         default:                     return data.Y;
     }
 }
@@ -1108,10 +1113,10 @@ mfxU16 BitDepthFromFourcc(mfxU32 fourcc)
     case MFX_FOURCC_Y216:
     case MFX_FOURCC_Y416:
         return 12;
-
+#ifdef ONEVPL_EXPERIMENTAL
     case MFX_FOURCC_ABGR16F:
         return 16;
-
+#endif
         // RGB formats
 #if defined (MFX_ENABLE_FOURCC_RGB565)
     case MFX_FOURCC_RGB565:
diff --git a/_studio/mfx_lib/vpp/src/mfx_vpp_sw_core.cpp b/_studio/mfx_lib/vpp/src/mfx_vpp_sw_core.cpp
index 7e0b6ef1..69ca4084 100644
--- a/_studio/mfx_lib/vpp/src/mfx_vpp_sw_core.cpp
+++ b/_studio/mfx_lib/vpp/src/mfx_vpp_sw_core.cpp
@@ -910,7 +910,9 @@ mfxStatus VideoVPPBase::Query(VideoCORE * core, mfxVideoParam *in, mfxVideoParam
 #endif // MFX_ENABLE_FOURCC_RGB565
             out->vpp.In.FourCC != MFX_FOURCC_RGB4 &&
             out->vpp.In.FourCC != MFX_FOURCC_BGR4 &&
+#ifdef ONEVPL_EXPERIMENTAL
             out->vpp.In.FourCC != MFX_FOURCC_ABGR16F &&
+#endif
             out->vpp.In.FourCC != MFX_FOURCC_P010 &&
             out->vpp.In.FourCC != MFX_FOURCC_UYVY &&
             out->vpp.In.FourCC != MFX_FOURCC_P210 &&
diff --git a/_studio/mfx_lib/vpp/src/mfx_vpp_utils.cpp b/_studio/mfx_lib/vpp/src/mfx_vpp_utils.cpp
index 20249928..5ea9c994 100644
--- a/_studio/mfx_lib/vpp/src/mfx_vpp_utils.cpp
+++ b/_studio/mfx_lib/vpp/src/mfx_vpp_utils.cpp
@@ -1496,10 +1496,12 @@ mfxStatus CheckFrameInfo(mfxFrameInfo* info, mfxU32 request)
         case MFX_FOURCC_Y216:
         case MFX_FOURCC_Y416:
             break;
+#ifdef ONEVPL_EXPERIMENTAL
         case MFX_FOURCC_ABGR16F:
         case MFX_FOURCC_I420:
         case MFX_FOURCC_UYVY:
             break;
+#endif
         case MFX_FOURCC_ARGB16:
             break;
         case MFX_FOURCC_R16:
diff --git a/_studio/shared/Android.mk b/_studio/shared/Android.mk
new file mode 100644
index 00000000..86c9b78c
--- /dev/null
+++ b/_studio/shared/Android.mk
@@ -0,0 +1,3 @@
+# Recursively call sub-folder Android.mk
+
+include $(call all-subdir-makefiles)
\ No newline at end of file
diff --git a/_studio/shared/asc/Android.mk b/_studio/shared/asc/Android.mk
new file mode 100644
index 00000000..38e1960c
--- /dev/null
+++ b/_studio/shared/asc/Android.mk
@@ -0,0 +1,97 @@
+LOCAL_PATH:= $(call my-dir)
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := $(addprefix src/, asc_avx2_impl.cpp)
+
+LOCAL_C_INCLUDES := \
+    $(MFX_INCLUDES_INTERNAL_HW) \
+    $(MFX_HOME)/_studio/mfx_lib/cmrt_cross_platform/include \
+    $(MFX_HOME)/_studio/mfx_lib/ext/genx/asc/isa
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -mavx2 \
+    -Wno-error \
+    -Wno-unused-parameter
+
+LOCAL_CFLAGS += -I $(MFX_HOME)/_studio/shared/asc/include/
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libmfx_asc_avx2
+include $(BUILD_STATIC_LIBRARY)
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := $(addprefix src/, asc_sse4_impl.cpp)
+
+LOCAL_C_INCLUDES := \
+    $(MFX_INCLUDES_INTERNAL_HW) \
+    $(MFX_HOME)/_studio/mfx_lib/cmrt_cross_platform/include \
+    $(MFX_HOME)/_studio/mfx_lib/ext/genx/asc/isa
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -msse4.1 \
+    -Wno-error \
+    -Wno-unused-parameter
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libmfx_asc_sse4
+include $(BUILD_STATIC_LIBRARY)
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+ASC_SRC_FILES := $(addprefix src/, \
+	asc.cpp \
+	asc_c_impl.cpp \
+	iofunctions.cpp \
+	motion_estimation_engine.cpp \
+	tree.cpp)
+
+LOCAL_SRC_FILES := $(ASC_SRC_FILES)
+
+LOCAL_C_INCLUDES := \
+    $(MFX_INCLUDES_INTERNAL_HW) \
+    $(MFX_HOME)/_studio/mfx_lib/cmrt_cross_platform/include \
+    $(MFX_HOME)/_studio/mfx_lib/ext/genx/asc/isa
+
+LOCAL_STATIC_LIBRARIES := \
+	libmfx_asc_avx2 \
+	libmfx_asc_sse4
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -msse4.1 \
+    -Wno-error \
+    -Wno-unused-parameter
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+LOCAL_WHOLE_STATIC_LIBRARIES := $(LOCAL_STATIC_LIBRARIES)
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libmfx_asc
+
+include $(BUILD_STATIC_LIBRARY)
diff --git a/_studio/shared/asc/include/asc.h b/_studio/shared/asc/include/asc.h
index bc0e2b48..8176001e 100644
--- a/_studio/shared/asc/include/asc.h
+++ b/_studio/shared/asc/include/asc.h
@@ -117,6 +117,7 @@ typedef struct ASCextended_storage {
 class ASC {
 public:
     ASC();
+    virtual ~ASC();
 protected:
     mfxU32
         m_gpuImPitch,
diff --git a/_studio/shared/asc/src/asc.cpp b/_studio/shared/asc/src/asc.cpp
index 97e8db29..a7609116 100644
--- a/_studio/shared/asc/src/asc.cpp
+++ b/_studio/shared/asc/src/asc.cpp
@@ -204,6 +204,10 @@ ASC::ASC()
 {
 }
 
+ASC::~ASC()
+{
+}
+
 void ASC::Setup_Environment() {
     m_dataIn->accuracy = 1;
 
diff --git a/_studio/shared/include/mfx_config.h b/_studio/shared/include/mfx_config.h
index de69ca7e..dfa860ae 100644
--- a/_studio/shared/include/mfx_config.h
+++ b/_studio/shared/include/mfx_config.h
@@ -28,9 +28,15 @@
 #undef  UMC_VA_LINUX
 #define UMC_VA_LINUX
 
-// mfx_features.h is auto-generated file containing mediasdk per-component
-// enable defines
-#include "mfx_features.h"
+#if defined(ANDROID)
+    // we don't support config auto-generation on Android and have hardcoded
+    // definition instead
+    #include "mfx_android_defs.h"
+#else
+    // mfxconfig.h is auto-generated file containing mediasdk per-component
+    // enable defines
+    #include "mfx_features.h"
+#endif
 
 #define SYNCHRONIZATION_BY_VA_MAP_BUFFER
 #if !defined(SYNCHRONIZATION_BY_VA_SYNC_SURFACE)
diff --git a/_studio/shared/include/mfx_utils.h b/_studio/shared/include/mfx_utils.h
index 34f10c7a..e3a71d1f 100644
--- a/_studio/shared/include/mfx_utils.h
+++ b/_studio/shared/include/mfx_utils.h
@@ -24,6 +24,7 @@
 #include "mfx_config.h"
 
 #include "mfxstructures.h"
+#include "mfxcommon.h"
 
 #include "mfxdeprecated.h"
 #include "mfxplugin.h"
@@ -799,6 +800,7 @@ struct mfxRefCountable
     virtual mfxU32    GetRefCounter() const = 0;
     virtual void      AddRef()              = 0;
     virtual mfxStatus Release()             = 0;
+    virtual ~mfxRefCountable() {};
 };
 
 template <typename T>
@@ -823,9 +825,11 @@ protected:
     template <typename X, typename std::enable_if<HasRefInterface<X>::value, bool>::type = true>
     void AssignFunctionPointers()
     {
+#ifdef ONEVPL_EXPERIMENTAL
         T::RefInterface.AddRef        = _AddRef2;
         T::RefInterface.Release       = _Release2;
         T::RefInterface.GetRefCounter = _GetRefCounter2;
+#endif
     }
 
     template <typename X, typename std::enable_if<!HasRefInterface<X>::value, bool>::type = true>
@@ -918,6 +922,7 @@ public:
         return MFX_ERR_NONE;
     }
 
+#ifdef ONEVPL_EXPERIMENTAL
     static mfxStatus _AddRef2(mfxRefInterface* object)
     {
         MFX_CHECK_NULL_PTR1(object);
@@ -948,6 +953,7 @@ public:
         *counter = instance->GetRefCounter();
         return MFX_ERR_NONE;
     }
+#endif
 
 protected:
 
diff --git a/_studio/shared/include/mfx_vpp_interface.h b/_studio/shared/include/mfx_vpp_interface.h
index 613eaadd..f7445054 100644
--- a/_studio/shared/include/mfx_vpp_interface.h
+++ b/_studio/shared/include/mfx_vpp_interface.h
@@ -94,7 +94,9 @@ namespace MfxHwVideoProcessing
         MFX_FOURCC_Y216      ,
         MFX_FOURCC_Y416      ,
         MFX_FOURCC_BGRP      ,
+#ifdef ONEVPL_EXPERIMENTAL
         MFX_FOURCC_ABGR16F   ,
+#endif
         MFX_FOURCC_I420      ,
     };
 
diff --git a/_studio/shared/mfx_trace/Android.mk b/_studio/shared/mfx_trace/Android.mk
new file mode 100644
index 00000000..e22c3eb9
--- /dev/null
+++ b/_studio/shared/mfx_trace/Android.mk
@@ -0,0 +1,30 @@
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := $(addprefix src/, $(notdir $(wildcard $(LOCAL_PATH)/src/*.cpp)))
+
+LOCAL_C_INCLUDES := \
+    $(MFX_INCLUDES_INTERNAL_HW) \
+    $(MFX_HOME)/api/mediasdk_structures
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -Wno-error \
+    -Wno-unused-parameter
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+
+ifeq ($(MFX_ENABLE_ITT_TRACES),true)
+  LOCAL_STATIC_LIBRARIES += libittnotify
+  LOCAL_HEADER_LIBRARIES += llibittnotify_headers
+endif
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libmfx_gen_trace
+
+include $(BUILD_STATIC_LIBRARY)
diff --git a/_studio/shared/src/libmfx_core.cpp b/_studio/shared/src/libmfx_core.cpp
index 0ccb4ce1..715626ef 100644
--- a/_studio/shared/src/libmfx_core.cpp
+++ b/_studio/shared/src/libmfx_core.cpp
@@ -1157,6 +1157,7 @@ mfxStatus CoreDoSWFastCopy(mfxFrameSurface1 & dst, const mfxFrameSurface1 & src,
     }
     case MFX_FOURCC_P8:
         return FastCopy::Copy(dst.Data.Y, dstPitch, src.Data.Y, srcPitch, roi, copyFlag);
+#ifdef ONEVPL_EXPERIMENTAL
     case MFX_FOURCC_ABGR16F:
     {
         MFX_CHECK_NULL_PTR1(src.Data.ABGRFP16);
@@ -1167,7 +1168,7 @@ mfxStatus CoreDoSWFastCopy(mfxFrameSurface1 & dst, const mfxFrameSurface1 & src,
 
         return FastCopy::Copy(ptrDst, dstPitch, ptrSrc, srcPitch, roi, copyFlag);
     }
-
+#endif
     default:
         MFX_RETURN(MFX_ERR_UNSUPPORTED);
     }
diff --git a/_studio/shared/umc/Android.mk b/_studio/shared/umc/Android.mk
new file mode 100644
index 00000000..86c9b78c
--- /dev/null
+++ b/_studio/shared/umc/Android.mk
@@ -0,0 +1,3 @@
+# Recursively call sub-folder Android.mk
+
+include $(call all-subdir-makefiles)
\ No newline at end of file
diff --git a/_studio/shared/umc/codec/Android.mk b/_studio/shared/umc/codec/Android.mk
new file mode 100644
index 00000000..47efbd1f
--- /dev/null
+++ b/_studio/shared/umc/codec/Android.mk
@@ -0,0 +1,87 @@
+LOCAL_PATH:= $(call my-dir)
+
+# Setting subdirectories to march thru
+MFX_CODEC_LOCAL_DIRS := \
+    h264_enc \
+    vc1_common \
+    jpeg_common \
+    color_space_converter \
+    mpeg2_dec \
+    h265_dec \
+    h264_dec \
+    vc1_dec \
+    jpeg_dec \
+    vp9_dec \
+    av1_dec
+
+MFX_CODEC_LOCAL_SRC_FILES := \
+  $(patsubst $(LOCAL_PATH)/%, %, $(foreach dir, $(MFX_CODEC_LOCAL_DIRS), $(wildcard $(LOCAL_PATH)/$(dir)/src/*.cpp)))
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := \
+    brc/src/umc_brc.cpp \
+    brc/src/umc_h264_brc.cpp \
+    brc/src/umc_mpeg2_brc.cpp \
+    brc/src/umc_video_brc.cpp
+
+LOCAL_C_INCLUDES := \
+    $(LOCAL_PATH)/brc/include \
+    $(MFX_INCLUDES_INTERNAL_HW)
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -Wno-error \
+    -Wno-unused-parameter \
+    -Wno-deprecated-declarations
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libumc_brc
+
+include $(BUILD_STATIC_LIBRARY)
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := $(MFX_CODEC_LOCAL_SRC_FILES)
+
+LOCAL_C_INCLUDES := \
+    $(LOCAL_PATH)/av1_dec/include \
+    $(LOCAL_PATH)/color_space_converter/include \
+    $(LOCAL_PATH)/h264_dec/include \
+    $(LOCAL_PATH)/h265_dec/include \
+    $(LOCAL_PATH)/jpeg_common/include \
+    $(LOCAL_PATH)/jpeg_dec/include \
+    $(LOCAL_PATH)/mpeg2_dec/include \
+    $(LOCAL_PATH)/vc1_common/include \
+    $(LOCAL_PATH)/vc1_dec/include \
+    $(LOCAL_PATH)/vp9_dec/include \
+    $(MFX_INCLUDES_INTERNAL_HW)
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -Wno-error \
+    -Wno-unused-parameter
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libumc_codecs_hw
+
+include $(BUILD_STATIC_LIBRARY)
\ No newline at end of file
diff --git a/_studio/shared/umc/core/Android.mk b/_studio/shared/umc/core/Android.mk
new file mode 100644
index 00000000..edb036e5
--- /dev/null
+++ b/_studio/shared/umc/core/Android.mk
@@ -0,0 +1,40 @@
+LOCAL_PATH:= $(call my-dir)
+
+# Setting subdirectories to march thru
+MFX_LOCAL_DIRS := \
+    vm \
+    vm_plus \
+    umc
+
+MFX_LOCAL_SRC_FILES := \
+    $(patsubst $(LOCAL_PATH)/%, %, $(foreach dir, $(MFX_LOCAL_DIRS), $(wildcard $(LOCAL_PATH)/$(dir)/src/*.c))) \
+    $(patsubst $(LOCAL_PATH)/%, %, $(foreach dir, $(MFX_LOCAL_DIRS), $(wildcard $(LOCAL_PATH)/$(dir)/src/*.cpp)))
+
+MFX_LOCAL_INCLUDES := \
+    $(foreach dir, $(MFX_LOCAL_DIRS), $(wildcard $(LOCAL_PATH)/$(dir)/include))
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := $(MFX_LOCAL_SRC_FILES)
+
+LOCAL_C_INCLUDES := \
+    $(MFX_LOCAL_INCLUDES) \
+    $(MFX_INCLUDES_INTERNAL_HW)
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -Wno-error \
+    -Wno-unused-parameter
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libumc_core_hw
+
+include $(BUILD_STATIC_LIBRARY)
\ No newline at end of file
diff --git a/_studio/shared/umc/io/Android.mk b/_studio/shared/umc/io/Android.mk
new file mode 100644
index 00000000..e28259ae
--- /dev/null
+++ b/_studio/shared/umc/io/Android.mk
@@ -0,0 +1,37 @@
+LOCAL_PATH:= $(call my-dir)
+
+MFX_LOCAL_DIRS_HW := \
+    umc_va
+
+MFX_LOCAL_SRC_FILES_HW := \
+  $(patsubst $(LOCAL_PATH)/%, %, $(foreach dir, $(MFX_LOCAL_DIRS_HW), $(wildcard $(LOCAL_PATH)/$(dir)/src/*.cpp)))
+
+MFX_LOCAL_INCLUDES_HW := \
+  $(foreach dir, $(MFX_LOCAL_DIRS_HW), $(wildcard $(LOCAL_PATH)/$(dir)/include))
+
+# =============================================================================
+
+include $(CLEAR_VARS)
+include $(MFX_HOME)/android/mfx_defs.mk
+
+LOCAL_SRC_FILES := $(MFX_LOCAL_SRC_FILES_HW)
+
+LOCAL_C_INCLUDES := \
+    $(MFX_LOCAL_INCLUDES_HW) \
+    $(MFX_INCLUDES_INTERNAL_HW)
+
+LOCAL_CFLAGS := \
+    $(MFX_CFLAGS_INTERNAL_HW) \
+    -Wno-error \
+    -Wno-unused-parameter \
+    -Wno-implicit-fallthrough
+
+LOCAL_CFLAGS_32 := $(MFX_CFLAGS_INTERNAL_32)
+LOCAL_CFLAGS_64 := $(MFX_CFLAGS_INTERNAL_64)
+
+LOCAL_HEADER_LIBRARIES := libmfx_gen_headers
+
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE := libumc_va
+
+include $(BUILD_STATIC_LIBRARY)
\ No newline at end of file
diff --git a/android/Android.bp b/android/Android.bp
new file mode 100644
index 00000000..746bac2f
--- /dev/null
+++ b/android/Android.bp
@@ -0,0 +1,10 @@
+
+cc_library_headers {
+
+    name: "libmfx_android_headers",
+    export_include_dirs: [
+        "include",
+    ],
+
+    vendor: true,
+}
\ No newline at end of file
diff --git a/android/Android.mk b/android/Android.mk
new file mode 100644
index 00000000..579d3285
--- /dev/null
+++ b/android/Android.mk
@@ -0,0 +1,12 @@
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libmfx_gen_headers
+LOCAL_EXPORT_C_INCLUDE_DIRS :=  \
+    $(MFX_HOME)/api/vpl \
+    $(MFX_HOME)/api/vpl/private \
+    $(MFX_HOME)/api/mediasdk_structures \
+    $(MFX_HOME)/android/include
+
+include $(BUILD_HEADER_LIBRARY)
\ No newline at end of file
diff --git a/android/include/mfx_android_config.h b/android/include/mfx_android_config.h
new file mode 100644
index 00000000..9e799b3b
--- /dev/null
+++ b/android/include/mfx_android_config.h
@@ -0,0 +1,22 @@
+/********************************************************************************
+
+INTEL CORPORATION PROPRIETARY INFORMATION
+This software is supplied under the terms of a license agreement or nondisclosure
+agreement with Intel Corporation and may not be copied or disclosed except in
+accordance with the terms of that agreement
+Copyright(c) 2011-2018 Intel Corporation. All Rights Reserved.
+
+*********************************************************************************/
+
+#ifndef __MFX_CONFIG_H__
+#define __MFX_CONFIG_H__
+
+/* Google versions of Android */
+#define MFX_O     0x06
+#define MFX_O_MR1 0x07
+#define MFX_P     0x08
+#define MFX_Q     0x09
+#define MFX_R     0x0b
+#define MFX_S     0x0c
+
+#endif // #ifndef __MFX_CONFIG_H__
\ No newline at end of file
diff --git a/android/include/mfx_android_defs.h b/android/include/mfx_android_defs.h
new file mode 100644
index 00000000..026268e6
--- /dev/null
+++ b/android/include/mfx_android_defs.h
@@ -0,0 +1,60 @@
+// Copyright (c) 2017-2018 Intel Corporation
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in all
+// copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+// SOFTWARE.
+
+#ifndef __MFX_ANDROID_DEFS_H__
+#define __MFX_ANDROID_DEFS_H__
+
+  #define MFX_ENABLE_VC1_VIDEO_DECODE
+
+  #define MFX_ENABLE_MPEG2_VIDEO_DECODE
+
+  #define MFX_ENABLE_H265_VIDEO_DECODE
+
+  #define MFX_ENABLE_H265_VIDEO_ENCODE
+
+  #define MFX_ENABLE_H264_VIDEO_DECODE
+
+  #define MFX_ENABLE_H264_VIDEO_ENCODE
+
+  #define MFX_ENABLE_MJPEG_VIDEO_DECODE
+
+  #define MFX_ENABLE_MJPEG_VIDEO_ENCODE
+
+  #define MFX_ENABLE_VP8_VIDEO_DECODE
+
+  #define MFX_ENABLE_VP9_VIDEO_DECODE
+
+  #define MFX_ENABLE_VP9_VIDEO_ENCODE
+
+  #define MFX_ENABLE_AV1_VIDEO_DECODE
+
+  #define MFX_ENABLE_VPP
+
+  #define MFX_ENABLE_EXT
+
+  //#define MFX_ENABLE_ENCTOOLS
+
+  //#define MFX_ENABLE_USER_ENCTOOLS
+
+#if MFX_ANDROID_VERSION >= MFX_P
+  #define MFX_ENABLE_KERNELS
+#endif
+
+#endif // #ifndef __MFX_ANDROID_DEFS_H__
\ No newline at end of file
diff --git a/android/mfx_defs.mk b/android/mfx_defs.mk
new file mode 100644
index 00000000..1674cefe
--- /dev/null
+++ b/android/mfx_defs.mk
@@ -0,0 +1,112 @@
+# Purpose:
+#   Defines include paths, compilation flags, etc. to build Media SDK targets.
+#
+# Defined variables:
+#   MFX_CFLAGS - common flags for all targets
+#   MFX_CFLAGS_LIBVA - LibVA support flags (to build apps with or without LibVA support)
+#   MFX_INCLUDES - common include paths for all targets
+#   MFX_INCLUDES_LIBVA - include paths to LibVA headers
+#   MFX_LDFLAGS - common link flags for all targets
+
+# =============================================================================
+# Common definitions
+
+MFX_CFLAGS := -DANDROID
+
+#Media Version
+MEDIA_VERSION := 20.5
+MEDIA_VERSION_EXTRA := ""
+MEDIA_VERSION_ALL := $(MEDIA_VERSION).pre$(MEDIA_VERSION_EXTRA)
+
+MFX_CFLAGS += -DMEDIA_VERSION_STR=\"\\\"${MEDIA_VERSION_ALL}\\\"\"
+
+# Android version preference:
+ifneq ($(filter 12 12.% S ,$(PLATFORM_VERSION)),)
+  MFX_ANDROID_VERSION:= MFX_S
+endif
+ifneq ($(filter 11 11.% R ,$(PLATFORM_VERSION)),)
+  MFX_ANDROID_VERSION:= MFX_R
+endif
+ifneq ($(filter 10 10.% Q ,$(PLATFORM_VERSION)),)
+  MFX_ANDROID_VERSION:= MFX_Q
+endif
+ifneq ($(filter 9 9.% P ,$(PLATFORM_VERSION)),)
+  MFX_ANDROID_VERSION:= MFX_P
+endif
+ifneq ($(filter 8.% O ,$(PLATFORM_VERSION)),)
+  ifneq ($(filter 8.0.%,$(PLATFORM_VERSION)),)
+    MFX_ANDROID_VERSION:= MFX_O
+  else
+    MFX_ANDROID_VERSION:= MFX_O_MR1
+  endif
+endif
+
+# Passing Android-dependency information to the code
+MFX_CFLAGS += \
+  -DMFX_ANDROID_VERSION=$(MFX_ANDROID_VERSION) \
+  -include mfx_android_config.h
+
+MFX_CFLAGS += \
+    -DMFX_ENABLE_CPLIB \
+    -DMFX_VERSION=2006
+
+MFX_CFLAGS += \
+  -DMFX_FILE_VERSION=\"`echo $(MFX_VERSION) | cut -f 1 -d.``date +.%-y.%-m.%-d`\" \
+  -DMFX_PRODUCT_VERSION=\"$(MFX_VERSION)\"
+
+#  Security
+MFX_CFLAGS += \
+  -fstack-protector \
+  -fPIE -fPIC -pie \
+  -O2 -D_FORTIFY_SOURCE=2 \
+  -Wformat -Wformat-security \
+  -fexceptions -frtti -msse4.1
+
+ifeq ($(filter MFX_O MFX_O_MR1, $(MFX_ANDROID_VERSION)),)
+  ifeq ($(MFX_ENABLE_ITT_TRACES),)
+    # Enabled ITT traces by default
+    MFX_ENABLE_ITT_TRACES := true
+  endif
+endif
+
+ifeq ($(MFX_ENABLE_ITT_TRACES),true)
+  MFX_CFLAGS += -DMFX_TRACE_ENABLE_ITT
+endif
+
+# Enable feature with output decoded frames without latency regarding
+# SPS.VUI.max_num_reorder_frames
+ifeq ($(ENABLE_MAX_NUM_REORDER_FRAMES_OUTPUT),)
+    ENABLE_MAX_NUM_REORDER_FRAMES_OUTPUT:= true
+endif
+
+ifeq ($(ENABLE_MAX_NUM_REORDER_FRAMES_OUTPUT),true)
+  MFX_CFLAGS += -DENABLE_MAX_NUM_REORDER_FRAMES_OUTPUT
+endif
+
+# LibVA support.
+MFX_CFLAGS_LIBVA := -DLIBVA_SUPPORT -DLIBVA_ANDROID_SUPPORT
+
+ifneq ($(filter $(MFX_ANDROID_VERSION), MFX_O),)
+  MFX_CFLAGS_LIBVA += -DANDROID_O
+endif
+
+# Setting usual paths to include files
+MFX_INCLUDES := $(LOCAL_PATH)/include
+
+MFX_INCLUDES_LIBVA := $(TARGET_OUT_HEADERS)/libva
+
+# Setting usual link flags
+MFX_LDFLAGS := \
+  -z noexecstack \
+  -z relro -z now
+
+# Setting vendor
+LOCAL_MODULE_OWNER := intel
+
+# Moving executables to proprietary location
+LOCAL_PROPRIETARY_MODULE := true
+
+# =============================================================================
+
+# Definitions specific to Media SDK internal things (do not apply for samples)
+include $(MFX_HOME)/android/mfx_defs_internal.mk
\ No newline at end of file
diff --git a/android/mfx_defs_internal.mk b/android/mfx_defs_internal.mk
new file mode 100644
index 00000000..573a2e74
--- /dev/null
+++ b/android/mfx_defs_internal.mk
@@ -0,0 +1,32 @@
+# Purpose:
+#   Defines include paths, compilation flags, etc. to build Media SDK
+# internal targets (libraries, test applications, etc.).
+#
+# Defined variables:
+#   MFX_CFLAGS_INTERNAL - all flags needed to build MFX targets
+#   MFX_CFLAGS_INTERNAL_HW - all flags needed to build MFX HW targets
+#   MFX_INCLUDES_INTERNAL - all include paths needed to build MFX targets
+#   MFX_INCLUDES_INTERNAL_HW - all include paths needed to build MFX HW targets
+
+MFX_CFLAGS_INTERNAL := $(MFX_CFLAGS)
+MFX_CFLAGS_INTERNAL_HW := $(MFX_CFLAGS_INTERNAL) -DMFX_VA
+MFX_CFLAGS_INTERNAL_32 := -DLINUX32
+MFX_CFLAGS_INTERNAL_64 := -DLINUX32 -DLINUX64
+
+MFX_INCLUDES_INTERNAL :=  \
+    $(MFX_INCLUDES) \
+    $(MFX_HOME)/_studio/shared/include \
+    $(MFX_HOME)/_studio/shared/mfx_logging/include \
+    $(MFX_HOME)/_studio/shared/umc/core/umc/include \
+    $(MFX_HOME)/_studio/shared/umc/core/vm/include \
+    $(MFX_HOME)/_studio/shared/umc/core/vm_plus/include \
+    $(MFX_HOME)/_studio/shared/umc/io/umc_va/include \
+    $(MFX_HOME)/_studio/mfx_lib/shared/include \
+    $(MFX_HOME)/_studio/shared/include \
+    $(MFX_HOME)/_studio/enctools/aenc/include \
+    $(MFX_HOME)/_studio/enctools/include \
+    $(MFX_HOME)/contrib/ipp/include
+
+MFX_INCLUDES_INTERNAL_HW := \
+    $(MFX_INCLUDES_INTERNAL) \
+    $(MFX_INCLUDES_LIBVA)
\ No newline at end of file
-- 
2.17.1

