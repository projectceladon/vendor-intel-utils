From 80bab0233f8f0f3170144bc31ec06b0dc094440c Mon Sep 17 00:00:00 2001
From: Ankit Agarwal <ankit.agarwal@intel.com>
Date: Tue, 18 Jun 2024 10:27:25 +0530
Subject: [PATCH] [WA] Fixed build error in media deamon.

Observed build error due to missing defination of "das_st"
Adding header files for it.

Tests: Prepared EB, there was no error.

Tracked-On: NA
Signed-off-by: Ankit Agarwal <ankit.agarwal@intel.com>
---
 daemon/internal.h  | 38 ++++++++++++++++++++
 daemon/internal2.h | 86 ++++++++++++++++++++++++++++++++++++++++++++++
 daemon/srm.cpp     |  1 +
 3 files changed, 125 insertions(+)
 create mode 100644 daemon/internal.h
 create mode 100644 daemon/internal2.h

diff --git a/daemon/internal.h b/daemon/internal.h
new file mode 100644
index 0000000..d3c904d
--- /dev/null
+++ b/daemon/internal.h
@@ -0,0 +1,38 @@
+#ifndef OPENSSL_HEADER_DSA_INTERNAL_H
+#define OPENSSL_HEADER_DSA_INTERNAL_H
+
+#include <openssl/dsa.h>
+
+#include <openssl/thread.h>
+#include "internal2.h"
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+struct dsa_st {
+  BIGNUM *p;
+  BIGNUM *q;
+  BIGNUM *g;
+
+  BIGNUM *pub_key;
+  BIGNUM *priv_key;
+
+  // Normally used to cache montgomery values
+  CRYPTO_MUTEX method_mont_lock;
+  BN_MONT_CTX *method_mont_p;
+  BN_MONT_CTX *method_mont_q;
+  CRYPTO_refcount_t references;
+  CRYPTO_EX_DATA ex_data;
+};
+
+// dsa_check_key performs cheap self-checks on |dsa|, and ensures it is within
+// DoS bounds. It returns one on success and zero on error.
+int dsa_check_key(const DSA *dsa);
+
+
+#if defined(__cplusplus)
+}  // extern C
+#endif
+
+#endif  // OPENSSL_HEADER_DSA_INTERNAL_H
diff --git a/daemon/internal2.h b/daemon/internal2.h
new file mode 100644
index 0000000..533c725
--- /dev/null
+++ b/daemon/internal2.h
@@ -0,0 +1,86 @@
+#ifndef OPENSSL_HEADER_CRYPTO_INTERNAL_H
+#define OPENSSL_HEADER_CRYPTO_INTERNAL_H
+
+#include <openssl/arm_arch.h>
+#include <openssl/crypto.h>
+#include <openssl/ex_data.h>
+#include <openssl/stack.h>
+#include <openssl/thread.h>
+
+#include <assert.h>
+#include <string.h>
+
+#if defined(BORINGSSL_CONSTANT_TIME_VALIDATION)
+#include <valgrind/memcheck.h>
+#endif
+
+#if defined(BORINGSSL_FIPS_BREAK_TESTS)
+#include <stdlib.h>
+#endif
+
+#if !defined(__cplusplus)
+#if !defined(__STDC_VERSION__) || __STDC_VERSION__ < 201112L
+// BoringSSL requires C11 to build the library. The most likely cause of
+// pre-C11 modes is stale -std=c99 or -std=gnu99 flags in build configuration.
+// Such flags can be removed. If building with MSVC, build with /std:c11.
+#error "BoringSSL must be built in C11 mode or higher."
+#endif
+#include <stdalign.h>
+#endif
+
+#if defined(OPENSSL_THREADS) && \
+    (!defined(OPENSSL_WINDOWS) || defined(__MINGW32__))
+#include <pthread.h>
+#define OPENSSL_PTHREADS
+#endif
+
+#if defined(OPENSSL_THREADS) && !defined(OPENSSL_PTHREADS) && \
+    defined(OPENSSL_WINDOWS)
+#define OPENSSL_WINDOWS_THREADS
+#endif
+
+// Determine the atomics implementation to use with C.
+#if !defined(__cplusplus)
+#if !defined(OPENSSL_C11_ATOMIC) && defined(OPENSSL_THREADS) && \
+    !defined(__STDC_NO_ATOMICS__)
+#define OPENSSL_C11_ATOMIC
+#endif
+
+#if defined(OPENSSL_C11_ATOMIC)
+#include <stdatomic.h>
+#endif
+
+// Older MSVC does not support C11 atomics, so we fallback to the Windows APIs.
+// When both are available (e.g. clang-cl), we prefer the C11 ones. The Windows
+// APIs don't allow some operations to be implemented as efficiently. This can
+// be removed once we can rely on
+// https://devblogs.microsoft.com/cppblog/c11-atomics-in-visual-studio-2022-version-17-5-preview-2/
+#if !defined(OPENSSL_C11_ATOMIC) && defined(OPENSSL_THREADS) && \
+    defined(OPENSSL_WINDOWS)
+#define OPENSSL_WINDOWS_ATOMIC
+#endif
+#endif  // !__cplusplus
+
+
+
+
+
+
+
+
+#if !defined(OPENSSL_THREADS)
+typedef struct crypto_mutex_st {
+  char padding;  // Empty structs have different sizes in C and C++.
+} CRYPTO_MUTEX;
+#define CRYPTO_MUTEX_INIT { 0 }
+#elif defined(OPENSSL_WINDOWS_THREADS)
+typedef SRWLOCK CRYPTO_MUTEX;
+#define CRYPTO_MUTEX_INIT SRWLOCK_INIT
+#elif defined(OPENSSL_PTHREADS)
+typedef pthread_rwlock_t CRYPTO_MUTEX;
+#define CRYPTO_MUTEX_INIT PTHREAD_RWLOCK_INITIALIZER
+#else
+#error "Unknown threading library"
+#endif
+
+#endif
diff --git a/daemon/srm.cpp b/daemon/srm.cpp
index dff8ae2..5989bf4 100644
--- a/daemon/srm.cpp
+++ b/daemon/srm.cpp
@@ -39,6 +39,7 @@
 #include <string.h>
 #include <memory.h>
 
+#include "internal.h"
 #include "srm.h"
 #include "hdcpdef.h"
 
-- 
2.34.1

