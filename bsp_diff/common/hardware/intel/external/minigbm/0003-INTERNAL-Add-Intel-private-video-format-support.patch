From 741bb83144d2efb93e47fc11264599826dc4c711 Mon Sep 17 00:00:00 2001
From: Ren Chenglei <chenglei.ren@intel.com>
Date: Fri, 9 Jun 2023 21:13:57 +0530
Subject: [PATCH] INTERNAL: Add Intel private video format support

Add NV12_Y_TILED_INTEL video format to PlaneLayoutsMap
needed for codec2.0

Signed-off-by: Ren Chenglei <chenglei.ren@intel.com>
Signed-off-by: Yang, Dong <dong.yang@intel.com>
---
 cros_gralloc/gralloc4/Android.bp            |  4 +-
 cros_gralloc/gralloc4/CrosGralloc4Mapper.cc | 12 +++++
 cros_gralloc/gralloc4/CrosGralloc4Utils.cc  | 55 +++++++++++++++++++++
 drv_helpers.c                               |  7 +++
 4 files changed, 77 insertions(+), 1 deletion(-)

diff --git a/cros_gralloc/gralloc4/Android.bp b/cros_gralloc/gralloc4/Android.bp
index fb6aca9..05fa989 100644
--- a/cros_gralloc/gralloc4/Android.bp
+++ b/cros_gralloc/gralloc4/Android.bp
@@ -109,6 +109,7 @@ cc_binary {
     shared_libs: ["libminigbm_gralloc_intel"],
     vintf_fragments: ["android.hardware.graphics.allocator@4.0.xml"],
     init_rc: ["android.hardware.graphics.allocator@4.0-service.minigbm_intel.rc"],
+    cflags: ["-DUSE_GRALLOC1",],
     enabled: false,
     arch: {
         x86: {
@@ -123,7 +124,7 @@ cc_binary {
 cc_library_shared {
     name: "android.hardware.graphics.mapper@4.0-impl.minigbm",
     defaults: ["minigbm_gralloc4_common_defaults"],
-    shared_libs: ["libminigbm_gralloc"],
+    shared_libs: ["libminigbm_gralloc_intel"],
     vintf_fragments: ["android.hardware.graphics.mapper@4.0.xml"],
     srcs: [":minigbm_gralloc4_mapper_files"],
 }
@@ -150,6 +151,7 @@ cc_library_shared {
     shared_libs: ["libminigbm_gralloc_intel"],
     vintf_fragments: ["android.hardware.graphics.mapper@4.0.xml"],
     srcs: [":minigbm_gralloc4_mapper_files"],
+    cflags: ["-DUSE_GRALLOC1",],
     enabled: false,
     arch: {
         x86: {
diff --git a/cros_gralloc/gralloc4/CrosGralloc4Mapper.cc b/cros_gralloc/gralloc4/CrosGralloc4Mapper.cc
index a8a4f52..1f87e65 100644
--- a/cros_gralloc/gralloc4/CrosGralloc4Mapper.cc
+++ b/cros_gralloc/gralloc4/CrosGralloc4Mapper.cc
@@ -16,6 +16,10 @@
 #include "cros_gralloc/cros_gralloc_helpers.h"
 #include "cros_gralloc/gralloc4/CrosGralloc4Utils.h"
 
+#ifdef USE_GRALLOC1
+#include "cros_gralloc/i915_private_android_types.h"
+#endif
+
 using aidl::android::hardware::graphics::common::BlendMode;
 using aidl::android::hardware::graphics::common::Dataspace;
 using aidl::android::hardware::graphics::common::PlaneLayout;
@@ -138,8 +142,16 @@ Return<Error> CrosGralloc4Mapper::validateBufferSize(void* rawHandle,
     }
 
     PixelFormat crosHandleFormat = static_cast<PixelFormat>(crosHandle->droid_format);
+#ifdef USE_GRALLOC1
+    int32_t yuvFormat = static_cast<int32_t>(descriptor.format);
+    if (descriptor.format != crosHandleFormat && yuvFormat != crosHandle->droid_format &&
+            !(descriptor.format == PixelFormat::YCBCR_420_888 &&
+            crosHandle->droid_format == HAL_PIXEL_FORMAT_NV12)) {
+        ALOGE("Failed to validateBufferSize. Format mismatch.\n");
+#else
     if (descriptor.format != crosHandleFormat) {
         ALOGE("Failed to validateBufferSize. Format mismatch.");
+#endif
         return Error::BAD_BUFFER;
     }
 
diff --git a/cros_gralloc/gralloc4/CrosGralloc4Utils.cc b/cros_gralloc/gralloc4/CrosGralloc4Utils.cc
index 515269a..3451b0b 100644
--- a/cros_gralloc/gralloc4/CrosGralloc4Utils.cc
+++ b/cros_gralloc/gralloc4/CrosGralloc4Utils.cc
@@ -18,6 +18,10 @@
 
 #include "cros_gralloc/cros_gralloc_helpers.h"
 
+#ifdef USE_GRALLOC1
+#include "cros_gralloc/i915_private_android.h"
+#endif
+
 using aidl::android::hardware::graphics::common::PlaneLayout;
 using aidl::android::hardware::graphics::common::PlaneLayoutComponent;
 using aidl::android::hardware::graphics::common::PlaneLayoutComponentType;
@@ -55,6 +59,22 @@ int convertToBufferUsage(uint64_t grallocUsage, uint64_t* outBufferUsage) {
     return 0;
 }
 
+#ifdef USE_GRALLOC1
+bool IsSupportedYUVFormat(uint32_t droid_format) {
+    switch (droid_format) {
+        case HAL_PIXEL_FORMAT_YCbCr_420_888:
+        case HAL_PIXEL_FORMAT_YV12:
+        case HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED:
+            return true;
+        default:
+            return i915_private_supported_yuv_format(droid_format);
+    }
+
+    return false;
+}
+
+#endif
+
 int convertToCrosDescriptor(const BufferDescriptorInfo& descriptor,
                             struct cros_gralloc_buffer_descriptor* outCrosDescriptor) {
     outCrosDescriptor->name = descriptor.name;
@@ -68,9 +88,20 @@ int convertToCrosDescriptor(const BufferDescriptorInfo& descriptor,
         return -EINVAL;
     }
     if (convertToDrmFormat(descriptor.format, &outCrosDescriptor->drm_format)) {
+#ifdef USE_GRALLOC1
+        ALOGE("Failed to convert descriptor by convertToDrmFormat");
+        if (!IsSupportedYUVFormat(static_cast<uint32_t>(descriptor.format))) {
+            std::string pixelFormatString = getPixelFormatString(descriptor.format);
+            ALOGE("Failed to convert descriptor. Unsupported fomat %s\n", pixelFormatString.c_str());
+            return -EINVAL;
+        } else {
+            outCrosDescriptor->drm_format = cros_gralloc_convert_format(static_cast<int32_t>(descriptor.format));
+        }
+#else
         std::string pixelFormatString = getPixelFormatString(descriptor.format);
         ALOGE("Failed to convert descriptor. Unsupported format %s", pixelFormatString.c_str());
         return -EINVAL;
+#endif
     }
     if (convertToBufferUsage(descriptor.usage, &outCrosDescriptor->use_flags)) {
         std::string usageString = getUsageString(descriptor.usage);
@@ -238,6 +269,30 @@ const std::unordered_map<uint32_t, std::vector<PlaneLayout>>& GetPlaneLayoutsMap
                               .verticalSubsampling = 2,
                       }}},
 
+#ifdef USE_GRALLOC1
+                    {DRM_FORMAT_NV12_Y_TILED_INTEL,
+                     {{
+                              .components = {{.type = android::gralloc4::PlaneLayoutComponentType_Y,
+                                              .offsetInBits = 0,
+                                              .sizeInBits = 8}},
+                              .sampleIncrementInBits = 8,
+                              .horizontalSubsampling = 1,
+                              .verticalSubsampling = 1,
+                      },
+                      {
+                              .components =
+                                      {{.type = android::gralloc4::PlaneLayoutComponentType_CB,
+                                        .offsetInBits = 0,
+                                        .sizeInBits = 8},
+                                        {.type = android::gralloc4::PlaneLayoutComponentType_CR,
+                                        .offsetInBits = 8,
+                                        .sizeInBits = 8}},
+                              .sampleIncrementInBits = 16,
+                              .horizontalSubsampling = 2,
+                              .verticalSubsampling = 2,
+                      }}},
+#endif
+
                     {DRM_FORMAT_P010,
                      {{
                               .components = {{.type = android::gralloc4::PlaneLayoutComponentType_Y,
diff --git a/drv_helpers.c b/drv_helpers.c
index cd51881..4cc1966 100644
--- a/drv_helpers.c
+++ b/drv_helpers.c
@@ -19,6 +19,10 @@
 #include "drv_priv.h"
 #include "util.h"
 
+#ifdef USE_GRALLOC1
+#include "i915_private.h"
+#endif
+
 struct planar_layout {
 	size_t num_planes;
 	int horizontal_subsampling[DRV_MAX_PLANES];
@@ -104,6 +108,9 @@ static const struct planar_layout *layout_from_format(uint32_t format)
 
 	case DRM_FORMAT_NV12:
 	case DRM_FORMAT_NV21:
+#ifdef USE_GRALLOC1
+	case DRM_FORMAT_NV12_Y_TILED_INTEL:
+#endif
 		return &biplanar_yuv_420_layout;
 
 	case DRM_FORMAT_P010:
-- 
2.40.1

