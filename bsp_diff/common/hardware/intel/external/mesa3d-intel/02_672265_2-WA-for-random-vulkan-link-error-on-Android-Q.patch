From f49165492d7841634048c513e2bd3de98caab095 Mon Sep 17 00:00:00 2001
From: renchenglei <chenglei.ren@intel.com>
Date: Wed, 12 Jun 2019 14:18:44 +0800
Subject: [PATCH] WA for random vulkan link error on Android Q

On Android Q, there is some enhancement for building. We may encounter
random vulkan link error on build bot with a low reproduced rate(5%).
This WA to help fix the random link issue.

Change-Id: I694b4a9a6305fe4c610a746e2934c71dba632f8c
Tracked-On:
Signed-off-by: Chenglei Ren <chenglei.ren@intel.com>
---
 src/intel/vulkan/anv_util.c | 73 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 72 insertions(+), 1 deletion(-)

diff --git a/src/intel/vulkan/anv_util.c b/src/intel/vulkan/anv_util.c
index 1159ccecc6a9..b00342d8f2b2 100644
--- a/src/intel/vulkan/anv_util.c
+++ b/src/intel/vulkan/anv_util.c
@@ -76,6 +76,77 @@ __anv_perf_warn(struct anv_instance *instance, const void *object,
    intel_logw("%s:%d: PERF: %s", file, line, buffer);
 }

+const char *
+vk_Result_to_str_pri(VkResult input)
+{
+    switch(input) {
+        case -1000244000:
+            return "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT";
+        case -1000174001:
+            return "VK_ERROR_NOT_PERMITTED_EXT";
+        case -1000161000:
+            return "VK_ERROR_FRAGMENTATION_EXT";
+        case -1000158000:
+            return "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT";
+        case -1000072003:
+            return "VK_ERROR_INVALID_EXTERNAL_HANDLE";
+        case -1000069000:
+            return "VK_ERROR_OUT_OF_POOL_MEMORY";
+        case -1000012000:
+            return "VK_ERROR_INVALID_SHADER_NV";
+        case -1000011001:
+            return "VK_ERROR_VALIDATION_FAILED_EXT";
+        case -1000003001:
+            return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
+        case -1000001004:
+            return "VK_ERROR_OUT_OF_DATE_KHR";
+        case -1000000001:
+            return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
+        case -1000000000:
+            return "VK_ERROR_SURFACE_LOST_KHR";
+        case -12:
+            return "VK_ERROR_FRAGMENTED_POOL";
+        case -11:
+            return "VK_ERROR_FORMAT_NOT_SUPPORTED";
+        case -10:
+            return "VK_ERROR_TOO_MANY_OBJECTS";
+        case -9:
+            return "VK_ERROR_INCOMPATIBLE_DRIVER";
+        case -8:
+            return "VK_ERROR_FEATURE_NOT_PRESENT";
+        case -7:
+            return "VK_ERROR_EXTENSION_NOT_PRESENT";
+        case -6:
+            return "VK_ERROR_LAYER_NOT_PRESENT";
+        case -5:
+            return "VK_ERROR_MEMORY_MAP_FAILED";
+        case -4:
+            return "VK_ERROR_DEVICE_LOST";
+        case -3:
+            return "VK_ERROR_INITIALIZATION_FAILED";
+        case -2:
+            return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
+        case -1:
+            return "VK_ERROR_OUT_OF_HOST_MEMORY";
+        case 0:
+            return "VK_SUCCESS";
+        case 1:
+            return "VK_NOT_READY";
+        case 2:
+            return "VK_TIMEOUT";
+        case 3:
+            return "VK_EVENT_SET";
+        case 4:
+            return "VK_EVENT_RESET";
+        case 5:
+            return "VK_INCOMPLETE";
+        case 1000001003:
+            return "VK_SUBOPTIMAL_KHR";
+    default:
+        unreachable("Undefined enum value.");
+    }
+}
+
 VkResult
 __vk_errorv(struct anv_instance *instance, const void *object,
             VkDebugReportObjectTypeEXT type, VkResult error,
@@ -84,7 +155,7 @@ __vk_errorv(struct anv_instance *instance, const void *object,
    char buffer[256];
    char report[512];

-   const char *error_str = vk_Result_to_str(error);
+   const char *error_str = vk_Result_to_str_pri(error);

    if (format) {
       vsnprintf(buffer, sizeof(buffer), format, ap);
--
2.22.0
