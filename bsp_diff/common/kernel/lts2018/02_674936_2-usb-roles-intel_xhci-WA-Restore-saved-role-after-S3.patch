From 8ce07ed0cb3897a0df81ce794c2bdaebbd68122e Mon Sep 17 00:00:00 2001
From: "Chen, Hu" <hu1.chen@intel.com>
Date: Tue, 2 Jul 2019 18:02:04 +0800
Subject: [PATCH] usb: roles: intel_xhci: WA: Restore saved role after S3

There is a bug in the bios of APL NUC.  That is, the usb role is lost
after resume (it becomes "none"). This WA records the role before
suspend and set usb to that role after resume.  With this WA, adb works
wll after resume.

Expect a formal fix in either HAL or driver layer.

Change-Id: I933be7b2eee10db0364bc972f423b677bfd41a6d
Tracked-On: https://jira.devtools.intel.com/browse/OAM-83811
Signed-off-by: Chen, Hu <hu1.chen@intel.com>
Signed-off-by: Balaji <m.balaji@intel.com>
---
 .../usb/roles/intel-xhci-usb-role-switch.c    | 31 +++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/drivers/usb/roles/intel-xhci-usb-role-switch.c b/drivers/usb/roles/intel-xhci-usb-role-switch.c
index f9ed262c15b3..9e1f7df082c1 100644
--- a/drivers/usb/roles/intel-xhci-usb-role-switch.c
+++ b/drivers/usb/roles/intel-xhci-usb-role-switch.c
@@ -21,6 +21,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/property.h>
 #include <linux/usb/role.h>
+#include <linux/suspend.h>
 
 /* register definition */
 #define DUAL_ROLE_CFG0			0x68
@@ -42,6 +43,9 @@ struct intel_xhci_usb_data {
 	struct usb_role_switch *role_sw;
 	void __iomem *base;
 	bool disable_sw_switch;
+	struct device *dev;
+	enum usb_role role;
+	struct notifier_block pm_nb;
 };
 
 static int intel_xhci_usb_set_role(struct device *dev, enum usb_role role)
@@ -149,6 +153,28 @@ static const struct usb_role_switch_desc sw_desc = {
 	.allow_userspace_control = true,
 };
 
+static int intel_xhci_usb_pm_notifier(struct notifier_block *notifier,
+				      unsigned long pm_event, void *unused)
+{
+	struct intel_xhci_usb_data *data =
+		container_of(notifier, struct intel_xhci_usb_data, pm_nb);
+
+	switch (pm_event) {
+	case PM_SUSPEND_PREPARE:
+		data->role = intel_xhci_usb_get_role(data->dev);
+		break;
+	case PM_POST_SUSPEND:
+		if (intel_xhci_usb_get_role(data->dev) != data->role)
+			intel_xhci_usb_set_role(data->dev, data->role);
+		break;
+
+	default:
+		break;
+	}
+
+	return NOTIFY_DONE;
+}
+
 static int intel_xhci_usb_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -175,6 +201,10 @@ static int intel_xhci_usb_probe(struct platform_device *pdev)
 	if (IS_ERR(data->role_sw))
 		return PTR_ERR(data->role_sw);
 
+	data->dev = dev;
+	data->pm_nb.notifier_call = intel_xhci_usb_pm_notifier;
+	register_pm_notifier(&data->pm_nb);
+
 	pm_runtime_set_active(dev);
 	pm_runtime_enable(dev);
 
@@ -188,6 +218,7 @@ static int intel_xhci_usb_remove(struct platform_device *pdev)
 	pm_runtime_disable(&pdev->dev);
 
 	usb_role_switch_unregister(data->role_sw);
+	unregister_pm_notifier(&data->pm_nb);
 	return 0;
 }
 
-- 
2.21.0

