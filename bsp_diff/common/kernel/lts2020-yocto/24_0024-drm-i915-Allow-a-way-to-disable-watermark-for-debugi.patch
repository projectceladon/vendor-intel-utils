From ed547ed381d53544171a0b613d0dd7d421c123b0 Mon Sep 17 00:00:00 2001
From: kanlihu <kanli.hu@intel.com>
Date: Wed, 11 May 2022 23:52:16 +0800
Subject: [PATCH 4/5] drm/i915: Allow a way to disable watermark for debuging
 purposes.

Without watermark the power consumption will blow up, but
when enabling platforms and dealing with different kinds of
crashes, screen corruptions, pipe underuns, etc we need to be
able to easily disable watermark to see if we are on the right
investigation track.

Another possibility was to skip at the beginning and avoid all
calculations, but I'm not sure about it. Maybe it might be still
useful to know the calculated values when debuging.

v2
---
 .../drm/i915/display/intel_display_debugfs.c  | 19 +++++++++++++++++++
 drivers/gpu/drm/i915/i915_params.c            |  2 ++
 drivers/gpu/drm/i915/i915_params.h            |  1 +
 drivers/gpu/drm/i915/intel_pm.c               |  4 ++--
 4 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/display/intel_display_debugfs.c b/drivers/gpu/drm/i915/display/intel_display_debugfs.c
index e04767695530d..66c6249b6798b 100644
--- a/drivers/gpu/drm/i915/display/intel_display_debugfs.c
+++ b/drivers/gpu/drm/i915/display/intel_display_debugfs.c
@@ -144,6 +144,24 @@ static int i915_ips_status(struct seq_file *m, void *unused)
 	return 0;
 }
 
+static int i915_enable_watermark(struct seq_file *m, void *unused)
+{
+	struct drm_i915_private *dev_priv = node_to_i915(m->private);
+	intel_wakeref_t wakeref;
+
+	if (!HAS_IPS(dev_priv))
+		return -ENODEV;
+
+	wakeref = intel_runtime_pm_get(&dev_priv->runtime_pm);
+
+	seq_printf(m, "Enabled by kernel parameter: %s\n",
+		   yesno(dev_priv->params.enable_watermark));
+
+	intel_runtime_pm_put(&dev_priv->runtime_pm, wakeref);
+
+	return 0;
+}
+
 static int i915_sr_status(struct seq_file *m, void *unused)
 {
 	struct drm_i915_private *dev_priv = node_to_i915(m->private);
@@ -2113,6 +2131,7 @@ static const struct drm_info_list intel_display_debugfs_list[] = {
 	{"i915_frontbuffer_tracking", i915_frontbuffer_tracking, 0},
 	{"i915_fbc_status", i915_fbc_status, 0},
 	{"i915_ips_status", i915_ips_status, 0},
+	{"i915_enable_watermark", i915_enable_watermark, 0},
 	{"i915_sr_status", i915_sr_status, 0},
 	{"i915_opregion", i915_opregion, 0},
 	{"i915_vbt", i915_vbt, 0},
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index 8ceb454947d61..1fe92b392aa83 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -120,6 +120,8 @@ i915_param_named_unsafe(disable_power_well, int, 0400,
 
 i915_param_named_unsafe(enable_ips, int, 0400, "Enable IPS (default: true)");
 
+i915_param_named_unsafe(enable_watermark, int, 0600, "Enable Watermark (default: true)");
+
 i915_param_named(fastboot, int, 0400,
 	"Try to skip unnecessary mode sets at boot time "
 	"(0=disabled, 1=enabled) "
diff --git a/drivers/gpu/drm/i915/i915_params.h b/drivers/gpu/drm/i915/i915_params.h
index af6cbd3155ebb..56d38098e3e63 100644
--- a/drivers/gpu/drm/i915/i915_params.h
+++ b/drivers/gpu/drm/i915/i915_params.h
@@ -59,6 +59,7 @@ struct drm_printer;
 	param(bool, enable_psr2_sel_fetch, true, 0400) \
 	param(int, disable_power_well, -1, 0400) \
 	param(int, enable_ips, 1, 0600) \
+	param(int, enable_watermark, 1, 0600) \
 	param(int, invert_brightness, 0, 0600) \
 	param(int, enable_guc, -1, 0400) \
 	param(unsigned int, guc_feature_flags, 0, 0400) \
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index ebc006ed90c02..71ddb54e40daf 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -3427,7 +3427,7 @@ static void ilk_compute_wm_results(struct drm_i915_private *dev_priv,
 			(r->pri_val << WM1_LP_SR_SHIFT) |
 			r->cur_val;
 
-		if (r->enable)
+		if (r->enable && dev_priv->params.enable_watermark)
 			results->wm_lp[wm_lp - 1] |= WM1_LP_SR_EN;
 
 		if (DISPLAY_VER(dev_priv) >= 8)
@@ -5884,7 +5884,7 @@ static void skl_write_wm_level(struct drm_i915_private *dev_priv,
 {
 	u32 val = 0;
 
-	if (level->enable)
+	if (level->enable && dev_priv->params.enable_watermark)
 		val |= PLANE_WM_EN;
 	if (level->ignore_lines)
 		val |= PLANE_WM_IGNORE_LINES;
-- 
2.31.0

