From 0fa1e1cc9bbf13a4276812b9632f7efdfb50a8b8 Mon Sep 17 00:00:00 2001
From: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Date: Sat, 5 Dec 2020 20:47:04 +0530
Subject: [PATCH 35/40] Revert "ANDROID: kbuild: fix dynamic ftrace with clang
 LTO"

This reverts commit ce32b4c010106140614f5b916c06449c6f63d87d.
---
 arch/Kconfig                      |  2 +-
 include/asm-generic/vmlinux.lds.h |  1 -
 include/linux/compiler-clang.h    |  7 -------
 include/linux/compiler_types.h    |  4 ----
 kernel/trace/ftrace.c             |  6 +++---
 scripts/Makefile.build            | 11 -----------
 scripts/Makefile.modfinal         |  4 ----
 scripts/link-vmlinux.sh           | 18 ------------------
 scripts/recordmcount.c            |  4 +---
 9 files changed, 5 insertions(+), 52 deletions(-)

diff --git a/arch/Kconfig b/arch/Kconfig
index 89e48d3792fc..029acb2462fc 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -597,7 +597,7 @@ config LTO_CLANG
 	bool "Use Clang's Link Time Optimization (LTO) (EXPERIMENTAL)"
 	depends on ARCH_SUPPORTS_LTO_CLANG
 	depends on !KASAN
-	depends on !FTRACE_MCOUNT_RECORD || HAVE_C_RECORDMCOUNT
+	depends on !FTRACE_MCOUNT_RECORD
 	depends on CC_IS_CLANG && CLANG_VERSION >= 100000 && LD_IS_LLD
 	select LTO
 	help
diff --git a/include/asm-generic/vmlinux.lds.h b/include/asm-generic/vmlinux.lds.h
index 796681c59697..cfd6450e9609 100644
--- a/include/asm-generic/vmlinux.lds.h
+++ b/include/asm-generic/vmlinux.lds.h
@@ -528,7 +528,6 @@
 		*(.text.unlikely .text.unlikely.*)			\
 		*(.text.unknown .text.unknown.*)			\
 		*(.text..refcount)					\
-		*(.text..ftrace)					\
 		*(.ref.text)						\
 	MEM_KEEP(init.text*)						\
 	MEM_KEEP(exit.text*)						\
diff --git a/include/linux/compiler-clang.h b/include/linux/compiler-clang.h
index 5e97289e1e67..18fc4d29ef27 100644
--- a/include/linux/compiler-clang.h
+++ b/include/linux/compiler-clang.h
@@ -48,10 +48,3 @@
 #else
 # define __noscs
 #endif
-
-#ifdef CONFIG_LTO_CLANG
-#ifdef CONFIG_FTRACE_MCOUNT_RECORD
-#define __norecordmcount \
-	__attribute__((__section__(".text..ftrace")))
-#endif
-#endif
diff --git a/include/linux/compiler_types.h b/include/linux/compiler_types.h
index 48e7e3396656..be5d5be4b1ae 100644
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@ -206,10 +206,6 @@ struct ftrace_likely_data {
 # define __noscs
 #endif
 
-#ifndef __norecordmcount
-# define __norecordmcount
-#endif
-
 #ifndef asm_volatile_goto
 #define asm_volatile_goto(x...) asm goto(x)
 #endif
diff --git a/kernel/trace/ftrace.c b/kernel/trace/ftrace.c
index 536aadfaf59d..fbba31baef53 100644
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@ -5571,9 +5571,9 @@ static int ftrace_cmp_ips(const void *a, const void *b)
 	return 0;
 }
 
-static int __norecordmcount ftrace_process_locs(struct module *mod,
-						unsigned long *start,
-						unsigned long *end)
+static int ftrace_process_locs(struct module *mod,
+			       unsigned long *start,
+			       unsigned long *end)
 {
 	struct ftrace_page *start_pg;
 	struct ftrace_page *pg;
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index e1ca92679728..40b072cccdde 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -176,12 +176,6 @@ ifdef BUILD_C_RECORDMCOUNT
 ifeq ("$(origin RECORDMCOUNT_WARN)", "command line")
   RECORDMCOUNT_FLAGS = -w
 endif
-
-ifdef CONFIG_LTO_CLANG
-# With LTO, we postpone running recordmcount until after the LTO link step, so
-# let's export the parameters for the link script.
-export RECORDMCOUNT_FLAGS
-else
 # Due to recursion, we must skip empty.o.
 # The empty.o file is created in the make process in order to determine
 # the target endianness and word size. It is made before all other C
@@ -190,8 +184,6 @@ sub_cmd_record_mcount =					\
 	if [ $(@) != "scripts/mod/empty.o" ]; then	\
 		$(objtree)/scripts/recordmcount $(RECORDMCOUNT_FLAGS) "$(@)";	\
 	fi;
-endif
-
 recordmcount_source := $(srctree)/scripts/recordmcount.c \
 		    $(srctree)/scripts/recordmcount.h
 else
@@ -201,13 +193,10 @@ sub_cmd_record_mcount = perl $(srctree)/scripts/recordmcount.pl "$(ARCH)" \
 	"$(OBJDUMP)" "$(OBJCOPY)" "$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS)" \
 	"$(LD) $(KBUILD_LDFLAGS)" "$(NM)" "$(RM)" "$(MV)" \
 	"$(if $(part-of-module),1,0)" "$(@)";
-
 recordmcount_source := $(srctree)/scripts/recordmcount.pl
 endif # BUILD_C_RECORDMCOUNT
-ifndef CONFIG_LTO_CLANG
 cmd_record_mcount = $(if $(findstring $(strip $(CC_FLAGS_FTRACE)),$(_c_flags)),	\
 	$(sub_cmd_record_mcount))
-endif # CONFIG_LTO_CLANG
 endif # CC_USING_RECORD_MCOUNT
 endif # CONFIG_FTRACE_MCOUNT_RECORD
 
diff --git a/scripts/Makefile.modfinal b/scripts/Makefile.modfinal
index 216a3f84bafe..2164a84a45a2 100644
--- a/scripts/Makefile.modfinal
+++ b/scripts/Makefile.modfinal
@@ -41,10 +41,6 @@ ifdef CONFIG_LTO_CLANG
 			echo -T $(@:.ko=.o.symversions))  		\
 		 -o $@ --whole-archive $(filter %.o, $^);		\
 	$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) $@, true)
-
-  ifdef CONFIG_FTRACE_MCOUNT_RECORD
-      cmd_ld_ko_o += ; $(objtree)/scripts/recordmcount $(RECORDMCOUNT_FLAGS) $@
-  endif
 else
       cmd_ld_ko_o =                                                     \
 	$(LD) -r $(KBUILD_LDFLAGS)					\
diff --git a/scripts/link-vmlinux.sh b/scripts/link-vmlinux.sh
index 5951c1eac1d0..4bd929e8fc05 100755
--- a/scripts/link-vmlinux.sh
+++ b/scripts/link-vmlinux.sh
@@ -87,19 +87,6 @@ modpost_link()
 	${LD} ${KBUILD_LDFLAGS} -r -o ${1} $(modversions) ${objects}
 }
 
-# If CONFIG_LTO_CLANG is selected, we postpone running recordmcount until
-# we have compiled LLVM IR to an object file.
-recordmcount()
-{
-	if [ -z "${CONFIG_LTO_CLANG}" ]; then
-		return
-	fi
-
-	if [ -n "${CONFIG_FTRACE_MCOUNT_RECORD}" ]; then
-		scripts/recordmcount ${RECORDMCOUNT_FLAGS} $*
-	fi
-}
-
 # Link of vmlinux
 # ${1} - output file
 # ${2}, ${3}, ... - optional extra .o files
@@ -310,11 +297,6 @@ modpost_link vmlinux.o
 # modpost vmlinux.o to check for section mismatches
 ${MAKE} -f "${srctree}/scripts/Makefile.modpost" MODPOST_VMLINUX=1
 
-if [ -n "${CONFIG_LTO_CLANG}" ]; then
-	# Call recordmcount if needed
-	recordmcount vmlinux.o
-fi
-
 info MODINFO modules.builtin.modinfo
 ${OBJCOPY} -j .modinfo -O binary vmlinux.o modules.builtin.modinfo
 
diff --git a/scripts/recordmcount.c b/scripts/recordmcount.c
index d8f5e02f1a7d..b9c2ee7ab43f 100644
--- a/scripts/recordmcount.c
+++ b/scripts/recordmcount.c
@@ -414,9 +414,7 @@ static int is_mcounted_section_name(char const *const txtname)
 		strcmp(".irqentry.text", txtname) == 0 ||
 		strcmp(".softirqentry.text", txtname) == 0 ||
 		strcmp(".kprobes.text", txtname) == 0 ||
-		strcmp(".cpuidle.text", txtname) == 0 ||
-		(strncmp(".text.",       txtname, 6) == 0 &&
-		 strcmp(".text..ftrace", txtname) != 0);
+		strcmp(".cpuidle.text", txtname) == 0;
 }
 
 static char const *already_has_rel_mcount = "success"; /* our work here is done! */
-- 
2.17.1

