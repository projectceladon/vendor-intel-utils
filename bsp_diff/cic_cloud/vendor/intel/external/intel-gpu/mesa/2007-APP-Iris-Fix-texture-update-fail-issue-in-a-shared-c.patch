From 088d8b048463deae8733fb2c5f0e2b891ec13d6e Mon Sep 17 00:00:00 2001
From: Marc Mao <marc.mao@intel.com>
Date: Thu, 17 Nov 2022 15:11:33 +0800
Subject: [WA] Iris: Fix texture update fail issue in a shared context

Issue: Danmaku in Youku shows abnormal
Cause: When using Multi-thread rendering,
       the resources updated in a shared
       context are not flushed in time.
Fix: Add shareCtx flag in iris_context,
     and directly flush batch in
     iris_transfer_flush_region.

Change-Id: I1352d13204aa99164707c6dd14136eab1e0eff0d
Signed-off-by: Marc Mao <marc.mao@intel.com>
---
 src/gallium/drivers/iris/iris_context.c  |  5 +++++
 src/gallium/drivers/iris/iris_context.h  |  3 +++
 src/gallium/drivers/iris/iris_resource.c | 10 ++++++++++
 src/gallium/include/pipe/p_defines.h     |  3 +++
 src/mesa/state_tracker/st_manager.c      |  3 +++
 5 files changed, 24 insertions(+)

diff --git a/src/gallium/drivers/iris/iris_context.c b/src/gallium/drivers/iris/iris_context.c
index 47d1e023b4a..181f8d9ac9b 100644
--- a/src/gallium/drivers/iris/iris_context.c
+++ b/src/gallium/drivers/iris/iris_context.c
@@ -379,6 +379,11 @@ iris_create_context(struct pipe_screen *pscreen, void *priv, unsigned flags)
    screen->vtbl.init_render_context(&ice->batches[IRIS_BATCH_RENDER]);
    screen->vtbl.init_compute_context(&ice->batches[IRIS_BATCH_COMPUTE]);
 
+   if (flags & PIPE_CONTEXT_SHARE_STATE)
+      ice->bShareCtx = true;
+   else
+      ice->bShareCtx = false;
+
    if (!(flags & PIPE_CONTEXT_PREFER_THREADED))
       return ctx;
 
diff --git a/src/gallium/drivers/iris/iris_context.h b/src/gallium/drivers/iris/iris_context.h
index a773145200b..038378eba3a 100644
--- a/src/gallium/drivers/iris/iris_context.h
+++ b/src/gallium/drivers/iris/iris_context.h
@@ -862,6 +862,9 @@ struct iris_context {
       /** Resource holding the pixel pipe hashing tables. */
       struct pipe_resource *pixel_hashing_tables;
    } state;
+
+   /** share state with other context or not */
+   bool bShareCtx;
 };
 
 #define perf_debug(dbg, ...) do {                      \
diff --git a/src/gallium/drivers/iris/iris_resource.c b/src/gallium/drivers/iris/iris_resource.c
index 81cc955b6ae..1823f4ac6e5 100644
--- a/src/gallium/drivers/iris/iris_resource.c
+++ b/src/gallium/drivers/iris/iris_resource.c
@@ -2547,8 +2547,12 @@ iris_transfer_flush_region(struct pipe_context *ctx,
    struct iris_resource *res = (struct iris_resource *) xfer->resource;
    struct iris_transfer *map = (void *) xfer;
 
+   bool needFlush = false;
    if (map->staging)
+   {
       iris_flush_staging_region(xfer, box);
+      needFlush = ice->bShareCtx;
+   }
 
    if (res->base.b.target == PIPE_BUFFER) {
       util_range_add(&res->base.b, &res->valid_buffer_range, box->x, box->x + box->width);
@@ -2558,6 +2562,12 @@ iris_transfer_flush_region(struct pipe_context *ctx,
     * any PIPE_CONTROLs to a batch.
     */
    iris_dirty_for_history(ice, res);
+   if (needFlush)
+   {
+      for (int i = 0; i < IRIS_BATCH_COUNT; i++) {
+         iris_batch_flush(&ice->batches[i]);
+      }
+   }
 }
 
 static void
diff --git a/src/gallium/include/pipe/p_defines.h b/src/gallium/include/pipe/p_defines.h
index 76d01dd25e2..f1e9e636b9a 100644
--- a/src/gallium/include/pipe/p_defines.h
+++ b/src/gallium/include/pipe/p_defines.h
@@ -442,6 +442,9 @@ enum pipe_flush_flags
 /** Stop execution if the device is reset. */
 #define PIPE_CONTEXT_LOSE_CONTEXT_ON_RESET (1 << 6)
 
+/** Share state with other context. */
+#define PIPE_CONTEXT_SHARE_STATE    (1 << 7)
+
 /**
  * Create a protected context to access protected content (surfaces,
  * textures, ...)
diff --git a/src/mesa/state_tracker/st_manager.c b/src/mesa/state_tracker/st_manager.c
index 69aba3dd53b..1254c284ad4 100644
--- a/src/mesa/state_tracker/st_manager.c
+++ b/src/mesa/state_tracker/st_manager.c
@@ -1067,6 +1067,9 @@ st_api_create_context(struct st_manager *smapi,
    if (attribs->flags & ST_CONTEXT_FLAG_PROTECTED)
       ctx_flags |= PIPE_CONTEXT_PROTECTED;
 
+   if (shared_stctxi != NULL)
+      ctx_flags |= PIPE_CONTEXT_SHARE_STATE;
+
    pipe = smapi->screen->context_create(smapi->screen, NULL, ctx_flags);
    if (!pipe) {
       *error = ST_CONTEXT_ERROR_NO_MEMORY;
-- 
2.33.1

