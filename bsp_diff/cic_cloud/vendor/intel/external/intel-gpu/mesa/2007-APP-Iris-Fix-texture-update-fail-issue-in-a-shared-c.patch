From 954b852feee3fc484371f65a06fbacf2b04eb3fe Mon Sep 17 00:00:00 2001
From: Marc Mao <marc.mao@intel.com>
Date: Wed, 29 Mar 2023 14:12:05 +0800
Subject: [APP] Iris: Fix texture update fail issue in a shared context

Issue: Danmaku in Youku shows abnormal
Cause: When using Multi-thread rendering,
       the resources updated in a shared
       context are not flushed in time.
Fix: Add shareCtx flag in iris_context,
     and directly flush batch in
     iris_transfer_flush_region.

Change-Id: I38f21352453e6975af8839e897df44bb23a199fe
Signed-off-by: Marc Mao <marc.mao@intel.com>
---
 src/gallium/drivers/iris/iris_context.c  |  5 +++++
 src/gallium/drivers/iris/iris_context.h  |  3 +++
 src/gallium/drivers/iris/iris_resource.c | 10 ++++++++++
 src/gallium/include/pipe/p_defines.h     |  3 +++
 src/mesa/state_tracker/st_manager.c      |  6 +++++-
 5 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/src/gallium/drivers/iris/iris_context.c b/src/gallium/drivers/iris/iris_context.c
index cc48d535d46..f41fba7c13f 100644
--- a/src/gallium/drivers/iris/iris_context.c
+++ b/src/gallium/drivers/iris/iris_context.c
@@ -377,6 +377,11 @@ iris_create_context(struct pipe_screen *pscreen, void *priv, unsigned flags)
    screen->vtbl.init_render_context(&ice->batches[IRIS_BATCH_RENDER]);
    screen->vtbl.init_compute_context(&ice->batches[IRIS_BATCH_COMPUTE]);
 
+   if (flags & PIPE_CONTEXT_SHARE_STATE)
+      ice->bShareCtx = true;
+   else
+      ice->bShareCtx = false;
+
    if (!(flags & PIPE_CONTEXT_PREFER_THREADED))
       return ctx;
 
diff --git a/src/gallium/drivers/iris/iris_context.h b/src/gallium/drivers/iris/iris_context.h
index 2252c2fed38..4ee3003c531 100644
--- a/src/gallium/drivers/iris/iris_context.h
+++ b/src/gallium/drivers/iris/iris_context.h
@@ -891,6 +891,9 @@ struct iris_context {
       /** Resource holding the pixel pipe hashing tables. */
       struct pipe_resource *pixel_hashing_tables;
    } state;
+
+   /** share state with other context or not */
+   bool bShareCtx;
 };
 
 #define perf_debug(dbg, ...) do {                      \
diff --git a/src/gallium/drivers/iris/iris_resource.c b/src/gallium/drivers/iris/iris_resource.c
index 1b611f72897..219828cd3dc 100644
--- a/src/gallium/drivers/iris/iris_resource.c
+++ b/src/gallium/drivers/iris/iris_resource.c
@@ -2630,8 +2630,12 @@ iris_transfer_flush_region(struct pipe_context *ctx,
    struct iris_resource *res = (struct iris_resource *) xfer->resource;
    struct iris_transfer *map = (void *) xfer;
 
+   bool needFlush = false;
    if (map->staging)
+   {
       iris_flush_staging_region(xfer, box);
+      needFlush = ice->bShareCtx;
+   }
 
    if (res->base.b.target == PIPE_BUFFER) {
       util_range_add(&res->base.b, &res->valid_buffer_range, box->x, box->x + box->width);
@@ -2641,6 +2645,12 @@ iris_transfer_flush_region(struct pipe_context *ctx,
     * any PIPE_CONTROLs to a batch.
     */
    iris_dirty_for_history(ice, res);
+   if (needFlush)
+   {
+      for (int i = 0; i < IRIS_BATCH_COUNT; i++) {
+         iris_batch_flush(&ice->batches[i]);
+      }
+   }
 }
 
 static void
diff --git a/src/gallium/include/pipe/p_defines.h b/src/gallium/include/pipe/p_defines.h
index b122cc56ae2..673cd83c1fa 100644
--- a/src/gallium/include/pipe/p_defines.h
+++ b/src/gallium/include/pipe/p_defines.h
@@ -442,6 +442,9 @@ enum pipe_flush_flags
 /** Stop execution if the device is reset. */
 #define PIPE_CONTEXT_LOSE_CONTEXT_ON_RESET (1 << 6)
 
+/** Share state with other context. */
+#define PIPE_CONTEXT_SHARE_STATE    (1 << 7)
+
 /**
  * Create a protected context to access protected content (surfaces,
  * textures, ...)
diff --git a/src/mesa/state_tracker/st_manager.c b/src/mesa/state_tracker/st_manager.c
index a878bad2586..eb3572f8958 100644
--- a/src/mesa/state_tracker/st_manager.c
+++ b/src/mesa/state_tracker/st_manager.c
@@ -954,6 +954,7 @@ st_api_create_context(struct pipe_frontend_screen *fscreen,
    struct pipe_context *pipe;
    struct gl_config mode, *mode_ptr = &mode;
    bool no_error = false;
+   unsigned context_flags = attribs->context_flags;
 
    _mesa_initialize(attribs->options.mesa_extension_override);
 
@@ -974,9 +975,12 @@ st_api_create_context(struct pipe_frontend_screen *fscreen,
    if (attribs->flags & ST_CONTEXT_FLAG_NO_ERROR)
       no_error = true;
 
+   if (shared_ctx != NULL)
+      context_flags |= PIPE_CONTEXT_SHARE_STATE;
+
    pipe = fscreen->screen->context_create(fscreen->screen, NULL,
                                           PIPE_CONTEXT_PREFER_THREADED |
-                                          attribs->context_flags);
+                                          context_flags);
    if (!pipe) {
       *error = ST_CONTEXT_ERROR_NO_MEMORY;
       return NULL;
-- 
2.25.1

