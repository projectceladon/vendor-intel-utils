From 8b067a8fb99c63c0d318cf328da6fede9a9f7508 Mon Sep 17 00:00:00 2001
From: gkdeepa <g.k.deepa@intel.com>
Date: Thu, 16 Dec 2021 17:49:58 +0530
Subject: [PATCH] Add check bit for every frame recv

Tracked-On:
---
 include/CameraSocketServerThread.h |  2 +-
 src/CameraSocketServerThread.cpp   | 44 ++++++++++++++++++++++++------
 src/VirtualFakeCamera3.cpp         |  2 +-
 3 files changed, 38 insertions(+), 10 deletions(-)

diff --git a/include/CameraSocketServerThread.h b/include/CameraSocketServerThread.h
index 3e81d33..54a3a61 100644
--- a/include/CameraSocketServerThread.h
+++ b/include/CameraSocketServerThread.h
@@ -60,6 +60,7 @@ public:
     virtual void requestExit();
     virtual status_t requestExitAndWait();
     int getClientFd();
+    ssize_t size_update = 0;
 
 private:
     virtual status_t readyToRun();
@@ -85,7 +86,6 @@ private:
     // Source: https://tools.ietf.org/html/rfc6184#page-13
     std::array<uint8_t, 200 * 1024> mSocketBuffer = {};
     size_t mSocketBufferSize = 0;
-    ssize_t size_update = 0;
     struct ValidateClientCapability {
         bool validCodecType = false;
         bool validResolution = false;
diff --git a/src/CameraSocketServerThread.cpp b/src/CameraSocketServerThread.cpp
index 285c621..72ff4e8 100644
--- a/src/CameraSocketServerThread.cpp
+++ b/src/CameraSocketServerThread.cpp
@@ -339,7 +339,7 @@ bool CameraSocketServerThread::configureCapabilities() {
             ALOGV("%s: capability info received from client is not completely correct and expected",
                   __FUNCTION__);
             break;
-        } else {
+        else {
             ALOGV("%s: capability info received from client is correct and expected",
                    __FUNCTION__);
             valid_client_cap_info = true;
@@ -658,22 +658,49 @@ bool CameraSocketServerThread::threadLoop() {
             } else if ((event & POLLIN)) {  // preview / record
                 // data is available in socket => read data
                 if (gIsInFrameI420) {
-                    ssize_t size = 0;
                      
                      if(trans_mode == VSOCK){
-                        while(size_update != 460800){
-                            size = recv(mClientFd, (char *)fbuffer+size_update, 460800, 0);
-                            size_update += size;
-                            if (size_update == 460800){
+                        char buffer_header[5];
+                        int size_header =0; 
+                        ssize_t size_pending =0; 
+                        size_header = recv(mClientFd, (char *)buffer_header, 2, 0);
+                        if(size_header < 0)
+                          ALOGE("header recv error %d",size_header); 
+                        if(!strncmp(buffer_header,"OK",2)){
+                        size_pending = 460800;  
+                        while(size_pending != 0){
+                            ssize_t size_data = 0;
+                            size_data = recv(mClientFd, (char *)fbuffer+size_update, size_pending, 0);
+                            if(size_data < 0){
+                               //error handling while in preview
+                               ALOGE(LOG_TAG "entered into recv error, break to recover");
+                               continue;
+                            }
+                            size_update += size_data;
+                            size_pending -= size_data;
+                            if (size_pending == 0){
                                 handle->clientRevCount++;
+#if 0
+                                FILE *fp_dump = fopen("/data/dump.yuv","w");
+                                if(fp_dump != NULL){
+                                fwrite(fbuffer,460800,1,fp_dump); 
+                                fclose(fp_dump);
+                                }
+#endif
                                 size_update = 0;
+                                
                                 ALOGV(LOG_TAG
                                    "[I420] %s: Packet rev %d and "
-                                   "size %zd",
-                                   __FUNCTION__, handle->clientRevCount, size);
+                                   "size %zd",    
+                                   __FUNCTION__, handle->clientRevCount, size_data);
+                               break;
                             }
                         }
+                     }else
+                         ALOGE("received NOT OK");
+                       
                     }else{
+                    ssize_t size = 0;
                     if ((size = recv(mClientFd, (char *)fbuffer, 460800, MSG_WAITALL)) > 0) {
                         handle->clientRevCount++;
                         ALOGV(LOG_TAG
@@ -748,6 +775,7 @@ bool CameraSocketServerThread::threadLoop() {
     mClientFd = -1;
     close(mSocketServerFd);
     mSocketServerFd = -1;
+    size_update = 0;
     return true;
 }
 
diff --git a/src/VirtualFakeCamera3.cpp b/src/VirtualFakeCamera3.cpp
index 5336fe3..df4ccc5 100644
--- a/src/VirtualFakeCamera3.cpp
+++ b/src/VirtualFakeCamera3.cpp
@@ -429,7 +429,7 @@ status_t VirtualFakeCamera3::closeCamera() {
     mSensor = NULL;
     mReadoutThread = NULL;
     mJpegCompressor = NULL;
-
+    mSocketServer->size_update = 0;
     return VirtualCamera3::closeCamera();
 }
 
-- 
2.17.1

