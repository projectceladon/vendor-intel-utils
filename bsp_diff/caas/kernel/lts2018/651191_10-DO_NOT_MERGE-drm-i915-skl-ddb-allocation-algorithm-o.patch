From d7aca788204d66d7211d28ce0481a2ebb2e171c7 Mon Sep 17 00:00:00 2001
From: "Fan, Yugang" <yugang.fan@intel.com>
Date: Wed, 7 Nov 2018 15:59:05 +0800
Subject: [PATCH 2/3] [DO_NOT_MERGE] drm/i915/skl+: ddb allocation algorithm
 optimization

This patch implements new DDB allocation algorithm as per HW team
recommendation. This also takecare of scenario where we allocate less DDB
for the planes with lower relative pixel rate, but they require more DDB
to work.
It also takes care of enabling same watermark level for each
plane in crtc, for efficient power saving.
This algorithm uses fixed ddb allocation for cursor planes.

Note:
This commit rebases on https://patchwork.kernel.org/patch/10495973/ to
fix 1A WM issue when playing video/cursor flicker...

Change-Id: Ie06f95928391f51ac8671229d7011793866b1a06
Signed-off-by: Mahesh Kumar <mahesh1.kumar@intel.com>
Signed-off-by: Fan Yugang <yugang.fan@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h |   5 +-
 drivers/gpu/drm/i915/intel_pm.c | 382 +++++++++++++++++++-------------
 2 files changed, 228 insertions(+), 159 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index f35f1b464a63..bb026accc7b5 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1224,8 +1224,9 @@ struct skl_ddb_values {
 
 struct skl_wm_level {
 	bool plane_en;
-	uint16_t plane_res_b;
-	uint8_t plane_res_l;
+	u16 plane_res_b;
+	u8 plane_res_l;
+	u16 min_dbuf_req;
 };
 
 /* Stores plane specific WM parameters */
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index da62058b5294..57ffc4e25948 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -3855,17 +3855,37 @@ static unsigned int intel_get_ddb_size(struct drm_i915_private *dev_priv,
 	return ddb_size;
 }
 
+static int
+skl_get_num_pipes_active(struct drm_i915_private *dev_priv,
+			 const struct intel_crtc_state *cstate)
+{
+	struct drm_atomic_state *state = cstate->base.state;
+	const struct intel_atomic_state *intel_state;
+	int num_active;
+
+	if (WARN_ON(!state) || !cstate->base.active)
+		return hweight32(dev_priv->active_crtcs);
+
+	intel_state = to_intel_atomic_state(state);
+
+	if (intel_state->active_pipe_changes)
+		num_active = hweight32(intel_state->active_crtcs);
+	else
+		num_active = hweight32(dev_priv->active_crtcs);
+
+	return num_active;
+}
+
 static void
-skl_ddb_get_pipe_allocation_limits(struct drm_device *dev,
+skl_ddb_get_pipe_allocation_limits(struct drm_i915_private *dev_priv,
 				   const struct intel_crtc_state *cstate,
 				   const unsigned int total_data_rate,
 				   struct skl_ddb_allocation *ddb,
-				   struct skl_ddb_entry *alloc, /* out */
-				   int *num_active /* out */)
+				   int num_active, /* out */
+				   struct skl_ddb_entry *alloc /* out */)
 {
 	struct drm_atomic_state *state = cstate->base.state;
 	struct intel_atomic_state *intel_state = to_intel_atomic_state(state);
-	struct drm_i915_private *dev_priv = to_i915(dev);
 	struct drm_crtc *for_crtc = cstate->base.crtc;
 	unsigned int pipe_size, ddb_size;
 	int nth_active_pipe;
@@ -3873,17 +3893,11 @@ skl_ddb_get_pipe_allocation_limits(struct drm_device *dev,
 	if (WARN_ON(!state) || !cstate->base.active) {
 		alloc->start = 0;
 		alloc->end = 0;
-		*num_active = hweight32(dev_priv->active_crtcs);
 		return;
 	}
 
-	if (intel_state->active_pipe_changes)
-		*num_active = hweight32(intel_state->active_crtcs);
-	else
-		*num_active = hweight32(dev_priv->active_crtcs);
-
 	ddb_size = intel_get_ddb_size(dev_priv, cstate, total_data_rate,
-				      *num_active, ddb);
+				      num_active, ddb);
 
 	/*
 	 * If the state doesn't change the active CRTC's, then there's
@@ -3905,7 +3919,7 @@ skl_ddb_get_pipe_allocation_limits(struct drm_device *dev,
 	nth_active_pipe = hweight32(intel_state->active_crtcs &
 				    (drm_crtc_mask(for_crtc) - 1));
 	pipe_size = ddb_size / hweight32(intel_state->active_crtcs);
-	alloc->start = nth_active_pipe * ddb_size / *num_active;
+	alloc->start = nth_active_pipe * ddb_size / num_active;
 	alloc->end = alloc->start + pipe_size;
 }
 
@@ -4332,13 +4346,58 @@ skl_ddb_calc_min(const struct intel_crtc_state *cstate, int num_active,
 	minimum[PLANE_CURSOR] = skl_cursor_allocation(num_active);
 }
 
+static void
+skl_enable_plane_wm_levels(const struct drm_i915_private *dev_priv,
+			   u16 plane_ddb,
+			   u16 max_level,
+			   struct skl_plane_wm *wm)
+{
+	int level;
+	/*
+	* Now enable all levels in WM structure which can be enabled
+	* using current DDB allocation
+	*/
+	for (level = ilk_wm_max_level(dev_priv); level >= 0; level--) {
+		struct skl_wm_level *level_wm = &wm->wm[level];
+
+		if (level_wm->min_dbuf_req > plane_ddb || level > max_level ||
+				(level && level_wm->plane_res_l >= 31) ||
+				level_wm->plane_res_b == 0) {
+			level_wm->plane_en = false;
+			level_wm->plane_res_b = 0;
+			level_wm->plane_res_l = 0;
+		} else {
+			level_wm->plane_en = true;
+		}
+
+		/*
+		* Display WA #826 (SKL:ALL, BXT:ALL) & #1059 (CNL:A)
+		* disable wm level 1-7 on NV12 planes
+		*/
+		if (wm->is_planar && level >= 1 &&
+			(IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
+			IS_CNL_REVID(dev_priv, CNL_REVID_A0, CNL_REVID_A0))) {
+			level_wm->plane_en = false;
+			level_wm->plane_res_b = 0;
+			level_wm->plane_res_l = 0;
+		}
+	}
+
+	if (wm->trans_wm.plane_res_b && wm->trans_wm.plane_res_b < plane_ddb)
+		wm->trans_wm.plane_en = true;
+	else
+		wm->trans_wm.plane_en = false;
+}
+
 static int
 skl_allocate_pipe_ddb(struct intel_crtc_state *cstate,
-		      struct skl_ddb_allocation *ddb /* out */)
+			struct skl_pipe_wm *pipe_wm,
+			struct skl_ddb_allocation *ddb /* out */)
 {
 	struct drm_atomic_state *state = cstate->base.state;
 	struct drm_crtc *crtc = cstate->base.crtc;
 	struct drm_device *dev = crtc->dev;
+	struct drm_i915_private *dev_priv = to_i915(dev);
 	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
 	enum pipe pipe = intel_crtc->pipe;
 	struct skl_ddb_entry *alloc = &cstate->wm.skl.ddb;
@@ -4351,6 +4410,8 @@ skl_allocate_pipe_ddb(struct intel_crtc_state *cstate,
 	unsigned int plane_data_rate[I915_MAX_PLANES] = {};
 	unsigned int uv_plane_data_rate[I915_MAX_PLANES] = {};
 	uint16_t total_min_blocks = 0;
+	u16 total_level_ddb, plane_blocks = 0;
+	int max_level, level;
 
 	/* Clear the partitioning for disabled planes. */
 	memset(ddb->plane[pipe], 0, sizeof(ddb->plane[pipe]));
@@ -4367,14 +4428,15 @@ skl_allocate_pipe_ddb(struct intel_crtc_state *cstate,
 	total_data_rate = skl_get_total_relative_data_rate(cstate,
 							   plane_data_rate,
 							   uv_plane_data_rate);
-	skl_ddb_get_pipe_allocation_limits(dev, cstate, total_data_rate, ddb,
-					   alloc, &num_active);
+	num_active = skl_get_num_pipes_active(dev_priv, cstate);
+	skl_ddb_calc_min(cstate, num_active, minimum, uv_minimum);
+
+	skl_ddb_get_pipe_allocation_limits(dev_priv, cstate, total_data_rate,
+						ddb, num_active, alloc);
 	alloc_size = skl_ddb_entry_size(alloc);
 	if (alloc_size == 0)
 		return 0;
 
-	skl_ddb_calc_min(cstate, num_active, minimum, uv_minimum);
-
 	/*
 	 * 1. Allocate the mininum required blocks for each active plane
 	 * and allocate the cursor, it doesn't require extra allocation
@@ -4386,67 +4448,110 @@ skl_allocate_pipe_ddb(struct intel_crtc_state *cstate,
 		total_min_blocks += uv_minimum[plane_id];
 	}
 
-	if (total_min_blocks > alloc_size) {
+	alloc_size -= minimum[PLANE_CURSOR];
+	ddb->plane[pipe][PLANE_CURSOR].start = alloc->end -
+						minimum[PLANE_CURSOR];
+	ddb->plane[pipe][PLANE_CURSOR].end = alloc->end;
+
+	for (level = ilk_wm_max_level(dev_priv); level >= 0; level--) {
+		total_level_ddb = 0;
+		for_each_plane_id_on_crtc(intel_crtc, plane_id) {
+			struct skl_plane_wm *wm = &pipe_wm->planes[plane_id];
+			u16 plane_res_b = wm->wm[level].min_dbuf_req +
+						wm->uv_wm[level].min_dbuf_req;
+			u16 min = minimum[plane_id] + uv_minimum[plane_id];
+
+			if (plane_id == PLANE_CURSOR)
+				continue;
+
+			total_level_ddb += max(plane_res_b, min);
+		}
+
+		/*
+		* If This level can successfully be enabled with the
+		* pipe's current DDB allocation, then all lower levels are
+		* guaranteed to succeed as well.
+		*/
+		if (total_level_ddb <= alloc_size)
+			break;
+	}
+
+	if (level < 0 || total_min_blocks > alloc_size) {
 		DRM_DEBUG_KMS("Requested display configuration exceeds system DDB limitations");
-		DRM_DEBUG_KMS("minimum required %d/%d\n", total_min_blocks,
-							alloc_size);
+		DRM_DEBUG_KMS("minimum required %d/%d\n", (level < 0) ?
+				total_level_ddb : total_min_blocks, alloc_size);
 		return -EINVAL;
 	}
 
-	alloc_size -= total_min_blocks;
-	ddb->plane[pipe][PLANE_CURSOR].start = alloc->end - minimum[PLANE_CURSOR];
-	ddb->plane[pipe][PLANE_CURSOR].end = alloc->end;
+	max_level = level;
+	alloc_size -= total_level_ddb;
 
 	/*
-	 * 2. Distribute the remaining space in proportion to the amount of
-	 * data each plane needs to fetch from memory.
-	 *
-	 * FIXME: we may not allocate every single block here.
-	 */
+	* PLANE_CURSOR data rate is not included in total_data_rate.
+	* If only cursor plane is enabled we have to enable its WM levels
+	* explicitly before returning. Cursor has fixed ddb allocation,
+	* So it's ok to always check cursor WM enabling before return.
+	*/
+	plane_blocks = skl_ddb_entry_size(&ddb->plane[pipe][PLANE_CURSOR]);
+	skl_enable_plane_wm_levels(dev_priv, plane_blocks, max_level,
+					&pipe_wm->planes[PLANE_CURSOR]);
+
+	/*
+	* 2. Distribute the remaining space in proportion to the amount of
+	* data each plane needs to fetch from memory.
+	*
+	* FIXME: we may not allocate every single block here.
+	*/
 	if (total_data_rate == 0)
 		return 0;
 
 	start = alloc->start;
 	for_each_plane_id_on_crtc(intel_crtc, plane_id) {
 		unsigned int data_rate, uv_data_rate;
-		uint16_t plane_blocks, uv_plane_blocks;
+		u16 plane_blocks = 0, uv_plane_blocks = 0;
+		struct skl_plane_wm *wm = &pipe_wm->planes[plane_id];
+		u16 min_req_blk = wm->wm[max_level].min_dbuf_req;
+		u16 uv_min_req_blk = wm->uv_wm[max_level].min_dbuf_req;
 
 		if (plane_id == PLANE_CURSOR)
 			continue;
 
 		data_rate = plane_data_rate[plane_id];
 
-		/*
-		 * allocation for (packed formats) or (uv-plane part of planar format):
-		 * promote the expression to 64 bits to avoid overflowing, the
-		 * result is < available as data_rate / total_data_rate < 1
-		 */
-		plane_blocks = minimum[plane_id];
-		plane_blocks += div_u64((uint64_t)alloc_size * data_rate,
-					total_data_rate);
-
 		/* Leave disabled planes at (0,0) */
 		if (data_rate) {
+			/*
+			* allocation for (packed formats) or (uv-plane part of
+			* planar format): promote the expression to 64 bits to
+			* avoid overflowing, the result is < available as
+			* data_rate / total_data_rate < 1
+			*/
+
+			plane_blocks = max(minimum[plane_id], min_req_blk);
+			plane_blocks += div_u64((u64)alloc_size *
+					data_rate, total_data_rate);
 			ddb->plane[pipe][plane_id].start = start;
 			ddb->plane[pipe][plane_id].end = start + plane_blocks;
+			start += plane_blocks;
 		}
 
-		start += plane_blocks;
-
 		/* Allocate DDB for UV plane for planar format/NV12 */
 		uv_data_rate = uv_plane_data_rate[plane_id];
 
-		uv_plane_blocks = uv_minimum[plane_id];
-		uv_plane_blocks += div_u64((uint64_t)alloc_size * uv_data_rate,
-					   total_data_rate);
 
 		if (uv_data_rate) {
+			uv_plane_blocks = max(uv_minimum[plane_id],
+						uv_min_req_blk);
+			uv_plane_blocks += div_u64((u64)alloc_size *
+						uv_data_rate, total_data_rate);
+
 			ddb->uv_plane[pipe][plane_id].start = start;
 			ddb->uv_plane[pipe][plane_id].end =
 				start + uv_plane_blocks;
+			start += uv_plane_blocks;
 		}
-
-		start += uv_plane_blocks;
+		skl_enable_plane_wm_levels(dev_priv, plane_blocks,
+						max_level, wm);
 	}
 
 	return 0;
@@ -4778,54 +4883,16 @@ static int skl_compute_plane_wm(const struct drm_i915_private *dev_priv,
 		min_disp_buf_needed = res_blocks;
 	}
 
-	if ((level > 0 && res_lines > 31) ||
-	    res_blocks >= ddb_allocation ||
-	    min_disp_buf_needed >= ddb_allocation) {
-		result->plane_en = false;
-
-		/*
-		 * If there are no valid level 0 watermarks, then we can't
-		 * support this display configuration.
-		 */
-		if (level) {
-			return 0;
-		} else {
-			struct drm_plane *plane = pstate ? pstate->plane : NULL;
-
-			DRM_DEBUG_KMS("Requested display configuration exceeds system watermark limitations\n");
-
-			if (plane) {
-				DRM_DEBUG_KMS("[PLANE:%d:%s] blocks required = %u/%u, lines required = %u/31\n",
-				      plane->base.id, plane->name,
-				      res_blocks, ddb_allocation, res_lines);
-			}
-
-			return -EINVAL;
-		}
-	}
-
-	/*
-	 * Display WA #826 (SKL:ALL, BXT:ALL) & #1059 (CNL:A)
-	 * disable wm level 1-7 on NV12 planes
-	 */
-	if (wp->is_planar && level >= 1 &&
-	    (IS_SKYLAKE(dev_priv) || IS_BROXTON(dev_priv) ||
-	     IS_CNL_REVID(dev_priv, CNL_REVID_A0, CNL_REVID_A0))) {
-		result->plane_en = false;
-		return 0;
-	}
-
 	/* The number of lines are ignored for the level 0 watermark. */
 	result->plane_res_b = res_blocks;
+	result->min_dbuf_req = min_disp_buf_needed + 1;
 	result->plane_res_l = res_lines;
-	result->plane_en = true;
 
 	return 0;
 }
 
 static int
 skl_compute_wm_levels(const struct drm_i915_private *dev_priv,
-		      struct skl_ddb_allocation *ddb,
 		      struct intel_crtc_state *cstate,
 		      const struct intel_plane_state *intel_pstate,
 		      const struct skl_wm_params *wm_params,
@@ -4833,18 +4900,26 @@ skl_compute_wm_levels(const struct drm_i915_private *dev_priv,
 		      int plane_id,
 		      enum plane_id intel_plane_id)
 {
-	struct intel_crtc *intel_crtc = to_intel_crtc(cstate->base.crtc);
-	uint16_t ddb_blocks;
-	enum pipe pipe = intel_crtc->pipe;
+	struct intel_atomic_state *intel_state =
+			to_intel_atomic_state(cstate->base.state);
+	u16 ddb_blocks = 0;
 	int level, max_level = ilk_wm_max_level(dev_priv);
 	int ret;
 
 	if (WARN_ON(intel_pstate && !intel_pstate->base.fb))
 		return -EINVAL;
 
-	ddb_blocks = plane_id ?
-		     skl_ddb_entry_size(&ddb->uv_plane[pipe][intel_plane_id]) :
-		     skl_ddb_entry_size(&ddb->plane[pipe][intel_plane_id]);
+	/* Fix DDB allocation is available only for cursor plane */
+	if (intel_plane_id == PLANE_CURSOR) {
+		int num_active;
+
+		if (intel_state->active_pipe_changes)
+			num_active = hweight32(intel_state->active_crtcs);
+		else
+			num_active = hweight32(dev_priv->active_crtcs);
+
+		ddb_blocks = skl_cursor_allocation(num_active);
+	}
 
 	for (level = 0; level <= max_level; level++) {
 		struct skl_wm_level *result = plane_id ? &wm->uv_wm[level] :
@@ -4902,7 +4977,6 @@ skl_compute_linetime_wm(struct intel_crtc_state *cstate)
 static void skl_compute_transition_wm(struct intel_crtc_state *cstate,
 				      struct skl_wm_params *wp,
 				      struct skl_wm_level *wm_l0,
-				      uint16_t ddb_allocation,
 				      struct skl_wm_level *trans_wm /* out */)
 {
 	struct drm_device *dev = cstate->base.crtc->dev;
@@ -4942,20 +5016,13 @@ static void skl_compute_transition_wm(struct intel_crtc_state *cstate,
 
 	}
 
-	res_blocks += 1;
-
-	if (res_blocks < ddb_allocation) {
-		trans_wm->plane_res_b = res_blocks;
-		trans_wm->plane_en = true;
-		return;
-	}
-
+       trans_wm->plane_res_b = res_blocks + 1;
+       return;
 exit:
-	trans_wm->plane_en = false;
+	trans_wm->plane_res_b = 0;
 }
 
 static int skl_build_plane_wm(struct intel_crtc_state *cstate,
-		struct skl_ddb_allocation *ddb,
 		struct skl_pipe_wm *pipe_wm,
 		int pipe,
 		enum plane_id plane_id,
@@ -4965,24 +5032,22 @@ static int skl_build_plane_wm(struct intel_crtc_state *cstate,
 	const struct drm_i915_private *dev_priv = to_i915(dev);
 	struct skl_plane_wm *wm;
 	struct skl_wm_params wm_params;
-	uint16_t ddb_blocks;
 	int ret;
 
 	wm = &pipe_wm->planes[plane_id];
-	ddb_blocks = skl_ddb_entry_size(&ddb->plane[pipe][plane_id]);
 
 	ret = skl_compute_plane_wm_params(dev_priv, cstate,
 			intel_pstate, &wm_params, 0);
 	if (ret)
 		return ret;
 
-	ret = skl_compute_wm_levels(dev_priv, ddb, cstate,
+	ret = skl_compute_wm_levels(dev_priv, cstate,
 			intel_pstate, &wm_params, wm, 0, plane_id);
 	if (ret)
 		return ret;
 
 	skl_compute_transition_wm(cstate, &wm_params, &wm->wm[0],
-			ddb_blocks, &wm->trans_wm);
+			&wm->trans_wm);
 
 	/* uv plane watermarks must also be validated for NV12/Planar */
 	if (wm_params.is_planar) {
@@ -4995,7 +5060,7 @@ static int skl_build_plane_wm(struct intel_crtc_state *cstate,
 		if (ret)
 			return ret;
 
-		ret = skl_compute_wm_levels(dev_priv, ddb, cstate,
+		ret = skl_compute_wm_levels(dev_priv, cstate,
 				intel_pstate, &wm_params,
 				wm, 1, plane_id);
 		if (ret)
@@ -5006,7 +5071,6 @@ static int skl_build_plane_wm(struct intel_crtc_state *cstate,
 }
 
 static int skl_build_pipe_all_plane_wm(struct intel_crtc_state *cstate,
-			     struct skl_ddb_allocation *ddb,
 			     struct skl_pipe_wm *pipe_wm)
 {
 	struct drm_device *dev = cstate->base.crtc->dev;
@@ -5040,7 +5104,7 @@ static int skl_build_pipe_all_plane_wm(struct intel_crtc_state *cstate,
 			}
 		}
 
-		ret = skl_build_plane_wm(cstate, ddb, pipe_wm,
+		ret = skl_build_plane_wm(cstate, pipe_wm,
 				pipe, plane_id, (struct intel_plane_state *) intel_pstate);
 		if (ret)
 			return ret;
@@ -5051,7 +5115,6 @@ static int skl_build_pipe_all_plane_wm(struct intel_crtc_state *cstate,
 }
 
 static int skl_build_pipe_wm(struct intel_crtc_state *cstate,
-			     struct skl_ddb_allocation *ddb,
 			     struct skl_pipe_wm *pipe_wm)
 {
 	struct drm_crtc_state *crtc_state = &cstate->base;
@@ -5071,7 +5134,7 @@ static int skl_build_pipe_wm(struct intel_crtc_state *cstate,
 		enum plane_id plane_id = to_intel_plane(plane)->id;
 		enum pipe pipe = to_intel_crtc(cstate->base.crtc)->pipe;
 
-		ret = skl_build_plane_wm(cstate, ddb, pipe_wm,
+		ret = skl_build_plane_wm(cstate, pipe_wm,
 				pipe, plane_id, (struct intel_plane_state *) intel_pstate);
 		if (ret)
 			return ret;
@@ -5279,6 +5342,44 @@ bool skl_ddb_allocation_overlaps(struct drm_i915_private *dev_priv,
 	return false;
 }
 
+static int
+skl_ddb_add_affected_planes(struct intel_crtc_state *cstate,
+				const struct skl_pipe_wm *old_pipe_wm,
+				const struct skl_pipe_wm *pipe_wm)
+{
+	struct drm_atomic_state *state = cstate->base.state;
+	struct drm_device *dev = state->dev;
+	struct drm_crtc *crtc = cstate->base.crtc;
+	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
+	struct drm_i915_private *dev_priv = to_i915(dev);
+	struct intel_atomic_state *intel_state = to_intel_atomic_state(state);
+	struct skl_ddb_allocation *new_ddb = &intel_state->wm_results.ddb;
+	struct skl_ddb_allocation *cur_ddb = &dev_priv->wm.skl_hw.ddb;
+	struct drm_plane_state *plane_state;
+	struct drm_plane *plane;
+	enum pipe pipe = intel_crtc->pipe;
+
+	drm_for_each_plane_mask(plane, dev, cstate->base.plane_mask) {
+		enum plane_id plane_id = to_intel_plane(plane)->id;
+		const struct skl_plane_wm *wm = &pipe_wm->planes[plane_id];
+		const struct skl_plane_wm *old_wm =
+					&old_pipe_wm->planes[plane_id];
+
+		if ((skl_ddb_entry_equal(&cur_ddb->plane[pipe][plane_id],
+			&new_ddb->plane[pipe][plane_id]) &&
+			skl_ddb_entry_equal(&cur_ddb->uv_plane[pipe][plane_id],
+			&new_ddb->uv_plane[pipe][plane_id])) &&
+			!memcmp(wm, old_wm, sizeof(struct skl_plane_wm)))
+			continue;
+
+		plane_state = drm_atomic_get_plane_state(state, plane);
+		if (IS_ERR(plane_state))
+			return PTR_ERR(plane_state);
+	}
+
+	return 0;
+}
+
 static int skl_update_pipe_wm(struct drm_crtc_state *cstate,
 			      const struct skl_pipe_wm *old_pipe_wm,
 			      struct skl_pipe_wm *pipe_wm, /* out */
@@ -5289,9 +5390,21 @@ static int skl_update_pipe_wm(struct drm_crtc_state *cstate,
 	int ret;
 
 	if (i915_modparams.avail_planes_per_pipe)
-		ret = skl_build_pipe_all_plane_wm(intel_cstate, ddb, pipe_wm);
+		ret = skl_build_pipe_all_plane_wm(intel_cstate, pipe_wm);
 	else
-		ret = skl_build_pipe_wm(intel_cstate, ddb, pipe_wm);
+		ret = skl_build_pipe_wm(intel_cstate, pipe_wm);
+	if (ret)
+		return ret;
+
+	ret = skl_allocate_pipe_ddb(intel_cstate, pipe_wm, ddb);
+	if (ret)
+		return ret;
+
+	/*
+	* TODO: Planes are included in state to arm WM registers.
+	* Scope to optimize further, by just rewriting plane surf register.
+	*/
+	ret = skl_ddb_add_affected_planes(intel_cstate, old_pipe_wm, pipe_wm);
 	if (ret)
 		return ret;
 
@@ -5316,47 +5429,12 @@ pipes_modified(struct drm_atomic_state *state)
 	return ret;
 }
 
-static int
-skl_ddb_add_affected_planes(struct intel_crtc_state *cstate)
-{
-	struct drm_atomic_state *state = cstate->base.state;
-	struct drm_device *dev = state->dev;
-	struct drm_crtc *crtc = cstate->base.crtc;
-	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
-	struct drm_i915_private *dev_priv = to_i915(dev);
-	struct intel_atomic_state *intel_state = to_intel_atomic_state(state);
-	struct skl_ddb_allocation *new_ddb = &intel_state->wm_results.ddb;
-	struct skl_ddb_allocation *cur_ddb = &dev_priv->wm.skl_hw.ddb;
-	struct drm_plane_state *plane_state;
-	struct drm_plane *plane;
-	enum pipe pipe = intel_crtc->pipe;
-
-	drm_for_each_plane_mask(plane, dev, cstate->base.plane_mask) {
-		enum plane_id plane_id = to_intel_plane(plane)->id;
-
-		if (skl_ddb_entry_equal(&cur_ddb->plane[pipe][plane_id],
-					&new_ddb->plane[pipe][plane_id]) &&
-		    skl_ddb_entry_equal(&cur_ddb->uv_plane[pipe][plane_id],
-					&new_ddb->uv_plane[pipe][plane_id]))
-			continue;
-
-		plane_state = drm_atomic_get_plane_state(state, plane);
-		if (IS_ERR(plane_state))
-			return PTR_ERR(plane_state);
-	}
-
-	return 0;
-}
-
 static int
 skl_compute_ddb(struct drm_atomic_state *state)
 {
 	const struct drm_i915_private *dev_priv = to_i915(state->dev);
 	struct intel_atomic_state *intel_state = to_intel_atomic_state(state);
 	struct skl_ddb_allocation *ddb = &intel_state->wm_results.ddb;
-	struct intel_crtc *crtc;
-	struct intel_crtc_state *cstate;
-	int ret, i;
 
 	memcpy(ddb, &dev_priv->wm.skl_hw.ddb, sizeof(*ddb));
 
@@ -5377,16 +5455,6 @@ skl_compute_ddb(struct drm_atomic_state *state)
 	}
 #endif
 
-	for_each_new_intel_crtc_in_state(intel_state, crtc, cstate, i) {
-		ret = skl_allocate_pipe_ddb(cstate, ddb);
-		if (ret)
-			return ret;
-
-		ret = skl_ddb_add_affected_planes(cstate);
-		if (ret)
-			return ret;
-	}
-
 	return 0;
 }
 
-- 
2.21.0

