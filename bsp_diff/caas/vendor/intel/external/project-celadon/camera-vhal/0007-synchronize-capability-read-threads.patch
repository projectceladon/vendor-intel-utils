From a6f68344c7b4a60c3f9b605dc103e9d4c266d67d Mon Sep 17 00:00:00 2001
From: shivasku82 <shiva.kumara.rudrappa@intel.com>
Date: Fri, 1 Jul 2022 22:55:55 +0530
Subject: [PATCH] synchronize capability read threads

---
 include/VirtualBuffer.h          |  2 --
 include/VirtualCameraFactory.h   |  4 ++++
 src/CameraSocketServerThread.cpp | 11 ++++++-----
 src/VirtualCameraFactory.cpp     |  8 +++-----
 4 files changed, 13 insertions(+), 12 deletions(-)

diff --git a/include/VirtualBuffer.h b/include/VirtualBuffer.h
index 22ffb08..10dd743 100644
--- a/include/VirtualBuffer.h
+++ b/include/VirtualBuffer.h
@@ -42,8 +42,6 @@ extern uint32_t gCameraSensorOrientation;
 // True for back and false for front camera always.
 extern bool gCameraFacingBack;
 
-// Indicate client capability info received successfully when it is true.
-extern bool gCapabilityInfoReceived;
 
 // Status of metadata update, which helps to sync and update
 // each metadata for each camera seperately.
diff --git a/include/VirtualCameraFactory.h b/include/VirtualCameraFactory.h
index 2c17066..0bf25e7 100644
--- a/include/VirtualCameraFactory.h
+++ b/include/VirtualCameraFactory.h
@@ -230,6 +230,10 @@ public:
     // Contains device open entry point, as required by HAL API.
     static struct hw_module_methods_t mCameraModuleMethods;
 
+pthread_cond_t mSignalCapRead = PTHREAD_COND_INITIALIZER;
+
+pthread_mutex_t mCapReadLock = PTHREAD_MUTEX_INITIALIZER;
+
 private:
 #ifdef ENABLE_FFMPEG
     // NV12 Decoder
diff --git a/src/CameraSocketServerThread.cpp b/src/CameraSocketServerThread.cpp
index 657c2b3..086b96b 100644
--- a/src/CameraSocketServerThread.cpp
+++ b/src/CameraSocketServerThread.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 #define LOG_NDEBUG 0
//#define LOG_NNDEBUG 0
 #define LOG_TAG "CameraSocketServerThread: "
 #include <log/log.h>
 #define HAVE_JPEG // required for libyuv.h to export MJPEG decode APIs
@@ -48,6 +48,7 @@
 #include <mutex>
 
 android::ClientVideoBuffer *android::ClientVideoBuffer::ic_instance = 0;
+extern android::VirtualCameraFactory gVirtualCameraFactory;
 
 namespace android {
 
@@ -63,10 +64,10 @@ uint32_t gCodecType;
 uint32_t gCameraSensorOrientation;
 bool gCameraFacingBack;
 
-bool gCapabilityInfoReceived;
 bool gStartMetadataUpdate;
 bool gDoneMetadataUpdate;
 
+
 using namespace socket;
 #ifdef ENABLE_FFMPEG
 CameraSocketServerThread::CameraSocketServerThread(std::string suffix,
@@ -252,8 +253,8 @@ bool CameraSocketServerThread::configureCapabilities() {
           recv_size);
     ALOGI(LOG_TAG "%s: Number of cameras requested = %d", __FUNCTION__, mNumOfCamerasRequested);
 
-    // Update status globally after received successful capability info.
-    gCapabilityInfoReceived = true;
+    pthread_cond_signal(&gVirtualCameraFactory.mSignalCapRead);
+    pthread_mutex_unlock(&gVirtualCameraFactory.mCapReadLock);
 
     // validate capability info received from the client.
     for (int i = 0; i < mNumOfCamerasRequested; i++) {
@@ -739,7 +740,7 @@ bool CameraSocketServerThread::threadLoop() {
                           static_cast<uint8_t*>(fbuffer + (gCameraMaxWidth * gCameraMaxHeight) + ((gCameraMaxWidth * gCameraMaxHeight) / 4)), (gCameraMaxWidth / 2),
                           gCameraMaxWidth, gCameraMaxHeight, gCameraMaxWidth, gCameraMaxHeight);
                           if (res != 0) {
-                              ALOGE("updated fail to convert MJPG to I420 ret %d  and sz %d", res, buffer_header.size);
+                              ALOGE("updated fail to convert MJPG to I420 ret %d  and sz %d w*h %d*%d", res, buffer_header.size, gCameraMaxWidth , gCameraMaxHeight);
                           }
                           free(mjpeg_buffer);
                     } else
diff --git a/src/VirtualCameraFactory.cpp b/src/VirtualCameraFactory.cpp
index 7c76c58..ddd778a 100644
--- a/src/VirtualCameraFactory.cpp
+++ b/src/VirtualCameraFactory.cpp
@@ -93,11 +93,9 @@ VirtualCameraFactory::VirtualCameraFactory()
     // Number of supported cameras and its corresponding
     // metadata info would be updated always based on this
     // capability info from the remote client HW.
-    while (!gCapabilityInfoReceived) {
-        ALOGV("%s: waiting for the capability info...", __func__);
-        // 1ms sleep for this thread.
-        std::this_thread::sleep_for(1ms);
-    }
+    ALOGV("%s: waiting for the capability info...", __func__);
+    pthread_mutex_lock(&mCapReadLock);
+    pthread_cond_wait(&mSignalCapRead, &mCapReadLock);
 
     ALOGV("%s: Received capability info from remote client device", __FUNCTION__);
 
-- 
2.17.1

