From 9ba8ff44d1ffb92654d28126b15ce6c8cdee9de2 Mon Sep 17 00:00:00 2001
From: shivasku82 <shiva.kumara.rudrappa@intel.com>
Date: Fri, 15 Jul 2022 10:35:01 +0530
Subject: [PATCH] frontbackreader thread consuming high cpu

issue: frontbackreader thread keep checking for connection
establish global variable on every 1ms which consume higher
cpu and in cases of host service not starting this high cpu
usage exist always.

solution: replace the thread checking for global variable to
condition variable, now thread is blocking on condition variable
which will unblock only on successful connection with host.

Tracked-On: OAM-102858
Signed-off-by: shivasku82 <shiva.kumara.rudrappa@intel.com>
---
 include/VirtualBuffer.h          |  3 ---
 include/VirtualCameraFactory.h   |  4 ++++
 src/CameraSocketServerThread.cpp |  4 +---
 src/VirtualCameraFactory.cpp     | 10 ++++------
 4 files changed, 9 insertions(+), 12 deletions(-)

diff --git a/include/VirtualBuffer.h b/include/VirtualBuffer.h
index 23776d1..8f94ecc 100644
--- a/include/VirtualBuffer.h
+++ b/include/VirtualBuffer.h
@@ -41,9 +41,6 @@ extern uint32_t gCameraSensorOrientation;
 // True for back and false for front camera always.
 extern bool gCameraFacingBack;
 
-// Indicate client capability info received successfully when it is true.
-extern bool gCapabilityInfoReceived;
-
 // Status of metadata update, which helps to sync and update
 // each metadata for each camera seperately.
 extern bool gStartMetadataUpdate;
diff --git a/include/VirtualCameraFactory.h b/include/VirtualCameraFactory.h
index 2c17066..ded4aa5 100644
--- a/include/VirtualCameraFactory.h
+++ b/include/VirtualCameraFactory.h
@@ -230,6 +230,10 @@ public:
     // Contains device open entry point, as required by HAL API.
     static struct hw_module_methods_t mCameraModuleMethods;
 
+    pthread_cond_t mSignalCapRead = PTHREAD_COND_INITIALIZER;
+
+    pthread_mutex_t mCapReadLock = PTHREAD_MUTEX_INITIALIZER;
+
 private:
 #ifdef ENABLE_FFMPEG
     // NV12 Decoder
diff --git a/src/CameraSocketServerThread.cpp b/src/CameraSocketServerThread.cpp
index c719372..11000a0 100644
--- a/src/CameraSocketServerThread.cpp
+++ b/src/CameraSocketServerThread.cpp
@@ -61,7 +61,6 @@ uint32_t gCodecType;
 uint32_t gCameraSensorOrientation;
 bool gCameraFacingBack;
 
-bool gCapabilityInfoReceived;
 bool gStartMetadataUpdate;
 bool gDoneMetadataUpdate;
 
@@ -250,8 +249,7 @@ bool CameraSocketServerThread::configureCapabilities() {
           recv_size);
     ALOGI(LOG_TAG "%s: Number of cameras requested = %d", __FUNCTION__, mNumOfCamerasRequested);
 
-    // Update status globally after received successful capability info.
-    gCapabilityInfoReceived = true;
+    pthread_cond_signal(&gVirtualCameraFactory.mSignalCapRead);
 
     // validate capability info received from the client.
     for (int i = 0; i < mNumOfCamerasRequested; i++) {
diff --git a/src/VirtualCameraFactory.cpp b/src/VirtualCameraFactory.cpp
index e463174..e82630f 100644
--- a/src/VirtualCameraFactory.cpp
+++ b/src/VirtualCameraFactory.cpp
@@ -90,12 +90,10 @@ VirtualCameraFactory::VirtualCameraFactory()
     // Number of supported cameras and its corresponding
     // metadata info would be updated always based on this
     // capability info from the remote client HW.
-    while (!gCapabilityInfoReceived) {
-        ALOGV("%s: waiting for the capability info...", __func__);
-        // 1ms sleep for this thread.
-        std::this_thread::sleep_for(1ms);
-    }
-
+    ALOGV("%s: waiting for the capability info...", __func__);
+    pthread_mutex_lock(&mCapReadLock);
+    pthread_cond_wait(&mSignalCapRead, &mCapReadLock);
+    pthread_mutex_unlock(&mCapReadLock);
     ALOGV("%s: Received capability info from remote client device", __FUNCTION__);
 
     // Update number of cameras requested from remote client HW.
-- 
2.17.1

