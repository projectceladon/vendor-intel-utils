From 9df5691544bcd1bf0aba0fbb845f448ca10b1b37 Mon Sep 17 00:00:00 2001
From: Qi Yadong <yadong.qi@intel.com>
Date: Thu, 8 Aug 2019 16:47:22 +0800
Subject: [PATCH 4/5] vmm: vtd: support 3-level page-table AGAW

Support 3-level page-table AGAW in VT-d module

Change-Id: I000723e3c315ca1990d1a99e2b7abf3a9c2cb757
Signed-off-by: Qi Yadong <yadong.qi@intel.com>
Tracked-On: https://jira.devtools.intel.com/browse/OAM-84875
---
 vmm/modules/vtd/vtd.c         | 37 +++++++++++++++++++----------------
 vmm/modules/vtd/vtd_mem_map.c | 34 +++++++++++++++++++++++++++++---
 vmm/modules/vtd/vtd_mem_map.h | 18 ++++++++++++++++-
 3 files changed, 68 insertions(+), 21 deletions(-)

diff --git a/vmm/modules/vtd/vtd.c b/vmm/modules/vtd/vtd.c
index 91c79406..e2535098 100644
--- a/vmm/modules/vtd/vtd.c
+++ b/vmm/modules/vtd/vtd.c
@@ -107,7 +107,7 @@ static void vtd_get_cap(void)
 	}
 }
 
-static void vtd_calculate_trans_cap(uint8_t *max_leaf, uint8_t *tm, uint8_t *snoop)
+static void vtd_calculate_trans_cap(uint8_t *max_leaf, uint8_t *tm, uint8_t *snoop, uint8_t *sagaw)
 {
 	uint32_t i;
 	uint32_t idx = 0;
@@ -117,6 +117,7 @@ static void vtd_calculate_trans_cap(uint8_t *max_leaf, uint8_t *tm, uint8_t *sno
 	*max_leaf = MAM_LEVEL_PML4;
 	*tm = 1;
 	*snoop = 1;
+	*sagaw = SAGAW_SUPPORT_3_LVL_PT | SAGAW_SUPPORT_4_LVL_PT;
 
 	for (i=0; i<DMAR_MAX_ENGINE; i++) {
 		if (!engine_list[i].reg_base_hva)
@@ -129,9 +130,7 @@ static void vtd_calculate_trans_cap(uint8_t *max_leaf, uint8_t *tm, uint8_t *sno
 		/* Get maxium leaf level, MAM starts from 4KB, VT-D starts from 2MB */
 		*max_leaf = MIN(*max_leaf, idx);
 
-		/* Need 4-level page-table support */
-		VMM_ASSERT_EX(engine_list[i].cap.bits.sagaw & (1ull << 2),
-				"4-level page-table isn't supported by vtd\n");
+		*sagaw &= engine_list[i].cap.bits.sagaw;
 
 		/*
 		 * Check TM/SNOOP support in external capablity register,
@@ -142,6 +141,10 @@ static void vtd_calculate_trans_cap(uint8_t *max_leaf, uint8_t *tm, uint8_t *sno
 		*tm = *tm & engine_list[i].ecap.bits.dt;
 		*snoop = *snoop & engine_list[i].ecap.bits.sc;
 	}
+
+	/* Need 3/4-level page-table support */
+	VMM_ASSERT_EX(*sagaw & (SAGAW_SUPPORT_3_LVL_PT | SAGAW_SUPPORT_4_LVL_PT),
+		"VT-d: 3/4-level page-table is NOT supported!\n");
 }
 
 static void vtd_send_global_cmd(vtd_engine_t *engine, uint32_t cmd)
@@ -206,12 +209,12 @@ void vtd_update_domain_mapping(UNUSED guest_cpu_handle_t gcpu, void *pv)
 			attr.uint32);
 }
 
-#define set_ctx_entry(ctx_entry, did, slptptr_hpa) \
+#define set_ctx_entry(ctx_entry, did, slptptr_hpa, agaw) \
 { \
 	/* Present(1) = 1 */ \
 	(ctx_entry)->low = (slptptr_hpa) | 0x1; \
-	/* AW(66:64) = 2; DID(87:72) = did */ \
-	(ctx_entry)->high = (((uint64_t)(did)) << 8) | 2; \
+	/* AW(66:64) = agaw; DID(87:72) = did */ \
+	(ctx_entry)->high = (((uint64_t)(did)) << 8) | agaw; \
 }
 
 static void vtd_init_dev_mapping(void)
@@ -219,16 +222,16 @@ static void vtd_init_dev_mapping(void)
 	dma_root_entry_t *root_entry;
 	dma_context_entry_t *ctx_entry;
 	dma_context_entry_t *ctx_table;
+	vtd_trans_table_t trans_table;
 	uint32_t i;
-	uint64_t slptptr_hpa;
 	uint64_t ctx_table_hpa;
 
-	slptptr_hpa = mam_get_table_hpa(vtd_get_mam_handle(gid2did(0)));
+	vtd_get_trans_table(gid2did(0), &trans_table);
 
 	ctx_table = (dma_context_entry_t *)page_alloc(1);
 	for (i=0; i<256; i++) {
 		ctx_entry = &ctx_table[i];
-		set_ctx_entry(ctx_entry, gid2did(0), slptptr_hpa);
+		set_ctx_entry(ctx_entry, gid2did(0), trans_table.hpa, trans_table.agaw);
 	}
 
 	VMM_ASSERT_EX(hmm_hva_to_hpa((uint64_t)ctx_table, &ctx_table_hpa, NULL),
@@ -252,12 +255,10 @@ void vtd_assign_dev(uint16_t domain_id, uint16_t dev_id)
 	dma_root_entry_t *root_entry = NULL;
 	dma_context_entry_t *ctx_table = NULL;
 	dma_context_entry_t *ctx_entry = NULL;
+	vtd_trans_table_t trans_table;
 	uint64_t ctx_table_hpa;
 	uint64_t ctx_table_hva;
 	uint64_t hpa;
-	mam_handle_t mam_handle;
-
-	mam_handle = vtd_get_mam_handle(domain_id);
 
 	/* Locate Context-table from Root-table according to device_id(Bus) */
 	root_entry = &g_remapping.root_table[dev_id>>8];
@@ -282,9 +283,11 @@ void vtd_assign_dev(uint16_t domain_id, uint16_t dev_id)
 		ctx_table = (dma_context_entry_t *)ctx_table_hva;
 	}
 
+	vtd_get_trans_table(domain_id, &trans_table);
+
 	/* Locate Context-entry from Context-table according to device_id(Dev:Func) */
 	ctx_entry = &ctx_table[dev_id & 0xFF];
-	set_ctx_entry(ctx_entry, domain_id, mam_get_table_hpa(mam_handle));
+	set_ctx_entry(ctx_entry, domain_id, trans_table.hpa, trans_table.agaw);
 }
 #endif
 
@@ -348,14 +351,14 @@ static void vtd_invalidate_cache(UNUSED guest_cpu_handle_t gcpu, void *pv)
 
 void vtd_init(void)
 {
-	uint8_t max_leaf, tm, snoop;
+	uint8_t max_leaf, tm, snoop, sagaw;
 
 	vtd_dmar_parse(engine_list);
 
 	vtd_get_cap();
 
-	vtd_calculate_trans_cap(&max_leaf, &tm, &snoop);
-	set_translation_cap(max_leaf, tm, snoop);
+	vtd_calculate_trans_cap(&max_leaf, &tm, &snoop, &sagaw);
+	set_translation_cap(max_leaf, tm, snoop, sagaw);
 
 	vtd_init_dev_mapping();
 
diff --git a/vmm/modules/vtd/vtd_mem_map.c b/vmm/modules/vtd/vtd_mem_map.c
index 3bfbe9fc..0bdcb42d 100644
--- a/vmm/modules/vtd/vtd_mem_map.c
+++ b/vmm/modules/vtd/vtd_mem_map.c
@@ -34,8 +34,9 @@ typedef struct _domain {
 	struct _domain                *next;
 } domain_t;
 
-static uint8_t g_tm = 1;
-static uint8_t g_snoop = 1;
+static uint8_t g_tm;
+static uint8_t g_snoop;
+static uint8_t g_sagaw;
 static domain_t *g_domain_list;
 
 static boolean_t vtd_addr_trans_is_leaf(uint64_t entry, uint32_t level)
@@ -153,9 +154,36 @@ mam_handle_t vtd_get_mam_handle(uint16_t domain_id)
 	return domain->mam_handle;
 }
 
-void set_translation_cap(uint8_t max_leaf, uint8_t tm, uint8_t snoop)
+void set_translation_cap(uint8_t max_leaf, uint8_t tm, uint8_t snoop, uint8_t sagaw)
 {
 	vtd_entry_ops.max_leaf_level = max_leaf;
 	g_tm = tm;
 	g_snoop = snoop;
+	g_sagaw = sagaw;
+}
+
+#define PAGE_TABLE_3_LVL_AGAW 0x1U
+#define PAGE_TABLE_4_LVL_AGAW 0x2U
+void vtd_get_trans_table(uint16_t domain_id, vtd_trans_table_t *trans_table)
+{
+	uint64_t hpa;
+	uint64_t hva;
+	mam_handle_t mam_handle;
+
+	mam_handle = vtd_get_mam_handle(domain_id);
+	hpa = mam_get_table_hpa(mam_handle);
+
+	/*
+	 * The cap must support 3 or 4 level page table and already asserted in
+	 * vtd_calculate_trans_cap().
+	 */
+	if (g_sagaw & SAGAW_SUPPORT_4_LVL_PT) {
+		trans_table->hpa = hpa;
+		trans_table->agaw = PAGE_TABLE_4_LVL_AGAW;
+	} else {
+		VMM_ASSERT(hmm_hpa_to_hva(hpa, &hva));
+		/* Use the first entry of PML4 as 3-level page-table address */
+		trans_table->hpa =  *((uint64_t *)hva) & MASK64_MID(51, 12);
+		trans_table->agaw = PAGE_TABLE_3_LVL_AGAW;
+	}
 }
diff --git a/vmm/modules/vtd/vtd_mem_map.h b/vmm/modules/vtd/vtd_mem_map.h
index fdf8967e..6bc822c0 100644
--- a/vmm/modules/vtd/vtd_mem_map.h
+++ b/vmm/modules/vtd/vtd_mem_map.h
@@ -9,6 +9,13 @@
 #ifndef _VTD_MEM_MAP_H_
 #define _VTD_MEM_MAP_H_
 
+/* SAGAW field of Capability Register */
+#define SAGAW_RESERVED_BIT0    (1U << 0)
+#define SAGAW_SUPPORT_3_LVL_PT (1U << 1)
+#define SAGAW_SUPPORT_4_LVL_PT (1U << 2)
+#define SAGAW_SUPPORT_5_LVL_PT (1U << 3)
+#define SAGAW_RESERVED_BIT5    (1U << 4)
+
 typedef union {
 	struct {
 		uint32_t read  : 1;
@@ -18,7 +25,13 @@ typedef union {
 	uint32_t uint32;
 } vtdpt_attr_t;
 
-void set_translation_cap(uint8_t max_leaf, uint8_t tm, uint8_t snoop);
+typedef struct {
+	uint64_t hpa;
+	uint8_t agaw;
+	uint8_t pad[7];
+} vtd_trans_table_t;
+
+void set_translation_cap(uint8_t max_leaf, uint8_t tm, uint8_t snoop, uint8_t sagaw);
 
 
 /* Get mam_handle of a domain by domain_id.
@@ -27,4 +40,7 @@ void set_translation_cap(uint8_t max_leaf, uint8_t tm, uint8_t snoop);
  */
 mam_handle_t vtd_get_mam_handle(uint16_t domain_id);
 
+
+void vtd_get_trans_table(uint16_t domain_id, vtd_trans_table_t *trans_table);
+
 #endif
-- 
2.21.0

