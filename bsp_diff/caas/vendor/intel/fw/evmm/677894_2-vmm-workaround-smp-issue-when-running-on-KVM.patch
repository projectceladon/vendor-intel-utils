From 8cfe663a5161acfbdf6184dbad480b2622faa028 Mon Sep 17 00:00:00 2001
From: Qi Yadong <yadong.qi@intel.com>
Date: Thu, 15 Aug 2019 11:58:11 +0800
Subject: [PATCH 5/5] vmm: workaround smp issue when running on KVM

1. When enable SMP, KVM(L0) does not support IA32_VMX_MISC.wait_for_sipi,
   KVM will set L2's APs' state to active when it receieves SIPI signal
   from L2.
   So eVMM will:
      1.) not assert IA32_VMX_MISC.wait_for_sipi when running on KVM.
      2.) set L2's AP's initial state to HLT state.

2. When enable SMP, eVMM will receieve a VMEXIT which to set L2's
   VMCS_GUEST_CR4.vmxe on AP. To workaround this issue, eVMM will not assert
   when receieve this vmexit if running on KVM.

Change-Id: Iebdab6557c431149e46a4026ab44ce0d1bd64ecc
Signed-off-by: Qi Yadong <yadong.qi@intel.com>
Tracked-On: https://jira.devtools.intel.com/browse/OAM-84886
---
 vmm/guest/gcpu_state.c        | 16 +++++++++----
 vmm/include/kvm_workaround.h  | 44 +++++++++++++++++++++++++++++++++++
 vmm/vmexit/vmexit_cr_access.c |  3 ++-
 vmm/vmx/vmx_cap.c             |  3 ++-
 4 files changed, 60 insertions(+), 6 deletions(-)
 create mode 100644 vmm/include/kvm_workaround.h

diff --git a/vmm/guest/gcpu_state.c b/vmm/guest/gcpu_state.c
index c3c4fc56..64a8cc3a 100644
--- a/vmm/guest/gcpu_state.c
+++ b/vmm/guest/gcpu_state.c
@@ -16,6 +16,7 @@
 #include "hmm.h"
 #include "vmexit_cr_access.h"
 #include "event.h"
+#include "kvm_workaround.h"
 
 #include "lib/util.h"
 
@@ -277,10 +278,17 @@ void gcpu_set_reset_state(guest_cpu_handle_t gcpu)
 	vmcs_write(vmcs, VMCS_GUEST_SYSENTER_EIP, 0);
 	vmcs_write(vmcs, VMCS_GUEST_PAT, asm_rdmsr(MSR_PAT));
 
-	/* Put guest CPU into the WAIT-FOR-SIPI state */
-	/*  wait-for-SIPI support is checked in vmx_cap_init() */
-	vmcs_write(vmcs, VMCS_GUEST_ACTIVITY_STATE,
-			ACTIVITY_STATE_WAIT_FOR_SIPI);
+	/*
+	 * Running on KVM: Put guest CPU into the HLT state
+	 * Others:         Put guest CPU into the WAIT-FOR-SIPI state
+	 */
+	if (running_on_kvm()) {
+		vmcs_write(vmcs, VMCS_GUEST_ACTIVITY_STATE,
+				ACTIVITY_STATE_HLT);
+	} else {
+		vmcs_write(vmcs, VMCS_GUEST_ACTIVITY_STATE,
+				ACTIVITY_STATE_WAIT_FOR_SIPI);
+	}
 
 	cr0_guest_write(gcpu, 0x60000010);
 	cr4_guest_write(gcpu, 0);
diff --git a/vmm/include/kvm_workaround.h b/vmm/include/kvm_workaround.h
new file mode 100644
index 00000000..8ef5b885
--- /dev/null
+++ b/vmm/include/kvm_workaround.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2015-2019 Intel Corporation.
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ */
+
+#ifndef __KVM_WORKAROUND_H__
+#define __KVM_WORKAROUND_H__
+
+#include "vmm_base.h"
+#include "vmm_asm.h"
+
+#include "lib/util.h"
+
+#define KVM_CPUID_SIGNATURE 0x40000000U
+
+/*
+ * Note: This function is to check whether we are running on top of KVM.
+ *
+ *    1. When enable SMP, KVM(L0) does not support IA32_VMX_MISC.wait_for_sipi,
+ *       KVM will set L2's APs' state to active when it receieves SIPI signal
+ *       from L2.
+ *       So eVMM will:
+ *             1.) not assert IA32_VMX_MISC.wait_for_sipi when running on KVM.
+ *             2.) set L2's AP's initial state to HLT state.
+ *    2. When enable SMP, eVMM will receieve a VMEXIT which to set L2's
+ *       VMCS_GUEST_CR4.vmxe on AP. To workaround this issue, eVMM will not assert
+ *       when receieve this vmexit if running on KVM.
+ */
+static inline boolean_t running_on_kvm(void)
+{
+	cpuid_params_t cpuid_param = { KVM_CPUID_SIGNATURE, 0U, 0U, 0U };
+
+	asm_cpuid(&cpuid_param);
+	if (!memcmp("KVMKVMKVM\0\0\0", &cpuid_param.ebx, 12U)) {
+		return TRUE;
+	}
+
+	return FALSE;
+}
+
+#endif /* __KVM_WORKAROUND_H__ */
diff --git a/vmm/vmexit/vmexit_cr_access.c b/vmm/vmexit/vmexit_cr_access.c
index 4cd5a14d..049b6939 100644
--- a/vmm/vmexit/vmexit_cr_access.c
+++ b/vmm/vmexit/vmexit_cr_access.c
@@ -16,6 +16,7 @@
 #include "guest.h"
 #include "vmm_arch.h"
 #include "heap.h"
+#include "kvm_workaround.h"
 
 #include "lib/util.h"
 
@@ -154,7 +155,7 @@ static cr_pre_handler cr4_vmxe_pre_handler = NULL;
 #else
 static boolean_t cr4_vmxe_pre_handler(uint64_t write_value)
 {
-	if (write_value & CR4_VMXE) // nested VT is not supported by eVmm
+	if ((write_value & CR4_VMXE) && !running_on_kvm()) // nested VT is not supported by eVmm
 	{
 		print_warn("%s(), write_value=0x%llx, injecting #GP\n", __FUNCTION__, write_value);
 		return TRUE;
diff --git a/vmm/vmx/vmx_cap.c b/vmm/vmx/vmx_cap.c
index 299c77a6..2b90e8c1 100644
--- a/vmm/vmx/vmx_cap.c
+++ b/vmm/vmx/vmx_cap.c
@@ -12,6 +12,7 @@
 #include "host_cpu.h"
 #include "dbg.h"
 #include "vmm_arch.h"
+#include "kvm_workaround.h"
 
 #include "lib/util.h"
 
@@ -240,7 +241,7 @@ void vmx_cap_init()
 	g_vmx_cap.init_cr4 |= nice_have & cr_may1;
 
 	misc_data.uint64 = get_misc_data_cap();
-	if (host_cpu_num > 1) {
+	if ((host_cpu_num > 1) && !running_on_kvm()) {
 		VMM_ASSERT_EX(misc_data.bits.sipi,
 			"wait-for-SIPI is not supported\n");
 	}
-- 
2.21.0

