From 50b9930472c3a08d83a2b3f7ef4046d4db6b56de Mon Sep 17 00:00:00 2001
From: jizhenlo <zhenlong.z.ji@intel.com>
Date: Tue, 17 Oct 2023 10:56:54 +0800
Subject: [PATCH 50/54] Add flash support for bootloader a/b slots

bootloader a/b partitions will be adopted, and the flash should
support bootloader a/b slots.

Tracked-On: OAM-112897
Signed-off-by: jizhenlo <zhenlong.z.ji@intel.com>
---
 libfastboot/flash.c         | 15 +++++++++------
 libkernelflinger/slot_avb.c |  8 +++++---
 2 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/libfastboot/flash.c b/libfastboot/flash.c
index 2edd898..fe3cbc5 100644
--- a/libfastboot/flash.c
+++ b/libfastboot/flash.c
@@ -486,11 +486,6 @@ static struct label_exception {
 	{ L"kernel", flash_kernel },
 	{ L"ramdisk", flash_ramdisk },
 	{ ESP_LABEL, flash_esp },
-#ifndef USE_SBL
-	{ BOOTLOADER_LABEL, flash_bootloader },
-	{ BOOTLOADER_A_LABEL, flash_bootloader_a },
-	{ BOOTLOADER_B_LABEL, flash_bootloader_b },
-#endif
 #if defined(IOC_USE_SLCAN) || defined(IOC_USE_CBC)
 	{ L"ioc", flash_ioc },
 #endif
@@ -502,6 +497,7 @@ static struct label_exception {
 EFI_STATUS flash(VOID *data, UINTN size, CHAR16 *label)
 {
 	UINTN i;
+	CHAR16 *full_label;
 
 #ifndef USER
 	/* special case for writing inside esp partition */
@@ -514,7 +510,14 @@ EFI_STATUS flash(VOID *data, UINTN size, CHAR16 *label)
 		if (!StrCmp(LABEL_EXCEPTIONS[i].name, label))
 			return LABEL_EXCEPTIONS[i].flash_func(data, size);
 
-	return flash_partition(data, size, label);
+	full_label = (CHAR16 *)slot_label(label);
+
+	if (!full_label) {
+		error(L"invalid bootloader label");
+		return EFI_INVALID_PARAMETER;
+	}
+
+	return flash_partition(data, size, full_label);
 }
 
 EFI_STATUS flash_file(EFI_HANDLE image, CHAR16 *filename, CHAR16 *label)
diff --git a/libkernelflinger/slot_avb.c b/libkernelflinger/slot_avb.c
index cd3772f..336dcf0 100644
--- a/libkernelflinger/slot_avb.c
+++ b/libkernelflinger/slot_avb.c
@@ -280,6 +280,7 @@ const CHAR16 *slot_label(const CHAR16 *base)
 {
 	const CHAR16 *label;
 	UINTN nb_slot;
+	char *suffix;
 
 	if (!use_slot())
 		return base;
@@ -295,10 +296,11 @@ const CHAR16 *slot_label(const CHAR16 *base)
 		return base;
 	}
 
-	if (!base || !slot_get_active())
-		return NULL;
+	suffix = (char *)slot_get_active();
+	if (!suffix)
+		suffix = suffixes[0];
 
-	label = label_with_suffix(base, slot_get_active());
+	label = label_with_suffix(base, suffix);
 
 	return label;
 }
-- 
2.25.1

