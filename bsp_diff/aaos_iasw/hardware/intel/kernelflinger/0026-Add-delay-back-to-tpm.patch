From 9323de9ed4ab5d173f52e4b47c12ab5c3209d1ab Mon Sep 17 00:00:00 2001
From: jizhenlo <zhenlong.z.ji@intel.com>
Date: Thu, 16 Nov 2023 10:15:01 +0800
Subject: [PATCH 26/54] Add delay back to tpm

Add delay back to some functions of tpm, since the removement
of delay may result in abnormal behavior of tpm operations,
such as timeout for read/write operations.

Tracked-On: OAM-113370
Signed-off-by: jizhenlo <zhenlong.z.ji@intel.com>
---
 include/lib.h            |  1 +
 include/timer.h          |  1 +
 libedk2_tpm/Android.mk   |  2 +-
 libedk2_tpm/Tpm2Ptp.c    |  4 ++--
 libedk2_tpm/Tpm2Tis.c    |  5 +++--
 libkernelflinger/lib.c   | 12 ++++++++++++
 libkernelflinger/timer.c |  4 ++++
 7 files changed, 24 insertions(+), 5 deletions(-)

diff --git a/include/lib.h b/include/lib.h
index 1fdc829..ac2bd88 100644
--- a/include/lib.h
+++ b/include/lib.h
@@ -236,6 +236,7 @@ void StrToLower(CHAR16 *s);
 VOID halt_system(VOID) __attribute__ ((noreturn));
 
 VOID pause(UINTN seconds);
+VOID pause_us(UINTN microseconds);
 
 VOID reboot(CHAR16 *target, EFI_RESET_TYPE type) __attribute__ ((noreturn));
 
diff --git a/include/timer.h b/include/timer.h
index 194cced..ef3aefa 100644
--- a/include/timer.h
+++ b/include/timer.h
@@ -46,6 +46,7 @@ enum TM_POINT {
 };
 
 uint32_t get_cpu_freq(void);
+uint64_t rdtsc(void);
 uint32_t boottime_in_msec(void);
 void set_boottime_stamp(int num);
 void set_efi_enter_point(unsigned int value);
diff --git a/libedk2_tpm/Android.mk b/libedk2_tpm/Android.mk
index fe0469a..9fd3980 100644
--- a/libedk2_tpm/Android.mk
+++ b/libedk2_tpm/Android.mk
@@ -35,7 +35,7 @@ LOCAL_SRC_FILES += Tpm2DeviceLib.c
 endif
 
 LOCAL_C_INCLUDES := $(LOCAL_PATH)/include \
-                    $(LOCAL_PATH)/../include/libkernelflinger \
+                    $(LOCAL_PATH)/../include \
                     $(res_intermediates)
 
 include $(BUILD_EFI_STATIC_LIBRARY)
diff --git a/libedk2_tpm/Tpm2Ptp.c b/libedk2_tpm/Tpm2Ptp.c
index ded5c86..d88be47 100644
--- a/libedk2_tpm/Tpm2Ptp.c
+++ b/libedk2_tpm/Tpm2Ptp.c
@@ -19,6 +19,7 @@
 #include <IndustryStandard/Tpm2Acpi.h>
 #include <IoLib.h>
 #include <RegisterFilterLib.h>
+#include "lib.h"
 
 typedef enum {
   PtpInterfaceTis,
@@ -90,8 +91,7 @@ PtpCrbWaitRegisterBits (
     if ((RegRead & BitSet) == BitSet && (RegRead & BitClear) == 0) {
       return EFI_SUCCESS;
     }
-    //todo
-    //MicroSecondDelay (30);
+    pause_us(30);
   }
   return EFI_TIMEOUT;
 }
diff --git a/libedk2_tpm/Tpm2Tis.c b/libedk2_tpm/Tpm2Tis.c
index b1bec97..5c2f0f8 100644
--- a/libedk2_tpm/Tpm2Tis.c
+++ b/libedk2_tpm/Tpm2Tis.c
@@ -14,6 +14,7 @@
 #include <PcdLib.h>
 
 #include <IndustryStandard/TpmTis.h>
+#include "lib.h"
 
 #define TIS_TIMEOUT_MAX             (90000 * 1000)  // 90s
 
@@ -68,7 +69,7 @@ TisPcWaitRegisterBits (
     if ((RegRead & BitSet) == BitSet && (RegRead & BitClear) == 0) {
       return EFI_SUCCESS;
     }
-    //MicroSecondDelay (30);
+    pause_us(30);
   }
   return EFI_TIMEOUT;
 }
@@ -110,7 +111,7 @@ TisPcReadBurstCount (
     if (*BurstCount != 0) {
       return EFI_SUCCESS;
     }
-   // MicroSecondDelay (30);
+    pause_us(30);
     WaitTime += 30;
   } while (WaitTime < TIS_TIMEOUT_D);
 
diff --git a/libkernelflinger/lib.c b/libkernelflinger/lib.c
index 04e8c2c..da8b8da 100644
--- a/libkernelflinger/lib.c
+++ b/libkernelflinger/lib.c
@@ -67,6 +67,7 @@
 #include <efilib.h>
 
 #include "lib.h"
+#include "timer.h"
 #include "vars.h"
 
 
@@ -1298,6 +1299,17 @@ VOID pause(UINTN seconds)
         uefi_call_wrapper(BS->Stall, 1, seconds * 1000000);
 }
 
+VOID pause_us(UINTN microseconds)
+{
+        UINT64 total_tick;
+        if (microseconds > 10 * 1000000)
+                microseconds = 10 * 1000000;
+
+        total_tick = rdtsc() + get_cpu_freq() * microseconds;
+        while (rdtsc() < total_tick) {
+                asm volatile ("pause");
+        }
+}
 
 VOID halt_system(VOID)
 {
diff --git a/libkernelflinger/timer.c b/libkernelflinger/timer.c
index 580cd42..1d9291c 100644
--- a/libkernelflinger/timer.c
+++ b/libkernelflinger/timer.c
@@ -78,6 +78,10 @@ __RDTSC (void)
 	return (uint64_t) hi << 32 | lo;
 }
 
+uint64_t rdtsc(void) {
+	return __RDTSC();
+}
+
 uint32_t get_cpu_freq(void)
 {
 	uint32_t cpu_freq;
-- 
2.25.1

