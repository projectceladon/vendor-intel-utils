From ecfe15046318b2958adc5fe759a5309cd2652b59 Mon Sep 17 00:00:00 2001
From: gkdeepa <g.k.deepa@intel.com>
Date: Wed, 16 Feb 2022 10:57:21 +0530
Subject: [PATCH] VTS fixes on VHAL

Tracked-On:
---
 include/VirtualBaseCamera.h    |  2 ++
 include/VirtualCamera3.h       |  2 ++
 include/VirtualCameraFactory.h | 13 +++++++++++++
 include/VirtualFakeCamera3.h   |  3 +++
 src/VirtualBaseCamera.cpp      |  8 +++++++-
 src/VirtualCamera3.cpp         |  4 ++++
 src/VirtualCameraFactory.cpp   | 10 +++++++++-
 src/VirtualCameraHal.cpp       |  7 ++++++-
 src/VirtualFakeCamera3.cpp     | 29 ++++++++++++++++++-----------
 9 files changed, 64 insertions(+), 14 deletions(-)

diff --git a/include/VirtualBaseCamera.h b/include/VirtualBaseCamera.h
index d1bb17e..96944f6 100644
--- a/include/VirtualBaseCamera.h
+++ b/include/VirtualBaseCamera.h
@@ -77,6 +77,8 @@ public:
      */
     virtual status_t getCameraInfo(struct camera_info *info) = 0;
 
+    virtual status_t setTorchMode(const char* camera_id, bool enable) =0;
+
     /****************************************************************************
      * Data members
      ***************************************************************************/
diff --git a/include/VirtualCamera3.h b/include/VirtualCamera3.h
index 4ffd714..132abb4 100644
--- a/include/VirtualCamera3.h
+++ b/include/VirtualCamera3.h
@@ -97,6 +97,8 @@ public:
     virtual status_t closeCamera();
 
     virtual status_t getCameraInfo(struct camera_info *info);
+    
+    virtual status_t setTorchMode(const char* camera_id, bool enable); 
 
     /****************************************************************************
      * Camera API implementation.
diff --git a/include/VirtualCameraFactory.h b/include/VirtualCameraFactory.h
index 719f598..67087af 100644
--- a/include/VirtualCameraFactory.h
+++ b/include/VirtualCameraFactory.h
@@ -93,6 +93,13 @@ public:
      * callback.
      */
     int getCameraInfo(int camera_id, struct camera_info *info);
+/*
+     * Gets virtual camera torch mode support.
+     *
+     * This method is called in response to camera_module_t::isSetTorchModeSupported
+     * callback.
+     */
+    int setTorchMode(const char* camera_id, bool enable); 
 
     /*
      * Sets virtual camera callbacks.
@@ -125,6 +132,12 @@ public:
      */
     static int get_camera_info(int camera_id, struct camera_info *info);
 
+
+    /*
+     * camera_module_t::get_torch_support_info callback entry point.
+     */
+    static int set_torch_mode(const char* camera_id, bool enable); 
+
     /*
      * camera_module_t::set_callbacks callback entry point.
      */
diff --git a/include/VirtualFakeCamera3.h b/include/VirtualFakeCamera3.h
index c05c666..18e4fd6 100644
--- a/include/VirtualFakeCamera3.h
+++ b/include/VirtualFakeCamera3.h
@@ -84,6 +84,9 @@ public:
 
     virtual status_t getCameraInfo(struct camera_info *info);
 
+    virtual status_t setTorchMode(const char* camera_id, bool enable); 
+
+
     /****************************************************************************
      * VirtualCamera3 abstract API implementation
      ***************************************************************************/
diff --git a/src/VirtualBaseCamera.cpp b/src/VirtualBaseCamera.cpp
index 747a429..ad1205e 100644
--- a/src/VirtualBaseCamera.cpp
+++ b/src/VirtualBaseCamera.cpp
@@ -24,7 +24,7 @@
  * camera_device_t/camera_module_t structures.
  */
 
-// #define LOG_NDEBUG 0
+//#define LOG_NDEBUG 0
 #define LOG_TAG "VirtualCamera_BaseCamera"
 #include <log/log.h>
 
@@ -61,6 +61,12 @@ status_t VirtualBaseCamera::getCameraInfo(struct camera_info *info) {
     return NO_ERROR;
 }
 
+status_t  VirtualBaseCamera::setTorchMode(const char* camera_id, bool enable){
+    ALOGV("%s", __FUNCTION__);
+
+    return OK;
+}
+
 status_t VirtualBaseCamera::setCameraFD(int socketFd) {
     mCameraSocketFD = socketFd;
     ALOGV("%s mCameraSocketFD = %d", __FUNCTION__, mCameraSocketFD);
diff --git a/src/VirtualCamera3.cpp b/src/VirtualCamera3.cpp
index a8c246e..1285afe 100644
--- a/src/VirtualCamera3.cpp
+++ b/src/VirtualCamera3.cpp
@@ -94,6 +94,10 @@ status_t VirtualCamera3::getCameraInfo(struct camera_info *info) {
     return VirtualBaseCamera::getCameraInfo(info);
 }
 
+status_t VirtualCamera3::setTorchMode(const char* camera_id, bool enable) {
+    return VirtualBaseCamera::setTorchMode(camera_id,enable);
+}
+
 /****************************************************************************
  * Camera Device API implementation.
  * These methods are called from the camera API callback routines.
diff --git a/src/VirtualCameraFactory.cpp b/src/VirtualCameraFactory.cpp
index 478fa68..70c999d 100644
--- a/src/VirtualCameraFactory.cpp
+++ b/src/VirtualCameraFactory.cpp
@@ -19,7 +19,7 @@
  * available for emulation.
  */
 
-#define LOG_NDEBUG 0
+//#define LOG_NDEBUG 0
 #define LOG_TAG "VirtualCamera_Factory "
 #include "VirtualBuffer.h"
 #include "VirtualCameraFactory.h"
@@ -220,6 +220,11 @@ int VirtualCameraFactory::getCameraInfo(int cameraId, struct camera_info *info)
 
     return mVirtualCameras[cameraId]->getCameraInfo(info);
 }
+int  VirtualCameraFactory::setTorchMode(const char* camera_id, bool enable){
+    ALOGI("%s: ", __FUNCTION__);
+    enable = !enable;
+    return -ENOSYS;
+}
 
 int VirtualCameraFactory::setCallbacks(const camera_module_callbacks_t *callbacks) {
     ALOGV("%s: callbacks = %p", __FUNCTION__, callbacks);
@@ -265,6 +270,9 @@ int VirtualCameraFactory::get_number_of_cameras() {
 int VirtualCameraFactory::get_camera_info(int camera_id, struct camera_info *info) {
     return gVirtualCameraFactory.getCameraInfo(camera_id, info);
 }
+int VirtualCameraFactory::set_torch_mode(const char* camera_id, bool enable){
+    return gVirtualCameraFactory.setTorchMode(camera_id, enable);
+}
 
 int VirtualCameraFactory::set_callbacks(const camera_module_callbacks_t *callbacks) {
     return gVirtualCameraFactory.setCallbacks(callbacks);
diff --git a/src/VirtualCameraHal.cpp b/src/VirtualCameraHal.cpp
index 5d83909..29b361e 100644
--- a/src/VirtualCameraHal.cpp
+++ b/src/VirtualCameraHal.cpp
@@ -32,7 +32,11 @@ camera_module_t HAL_MODULE_INFO_SYM = {
     .common =
         {
             .tag = HARDWARE_MODULE_TAG,
-            .module_api_version = CAMERA_MODULE_API_VERSION_2_3,
+            //the camera module api version is changed to 2.4 as the android expects the
+            //api version to be 2.4 and higher for android version greater than Q
+            // this fix was added as part of VTS cases execution
+            //.module_api_version = CAMERA_MODULE_API_VERSION_2_3,
+            .module_api_version = CAMERA_MODULE_API_VERSION_2_4,
             .hal_api_version = HARDWARE_HAL_API_VERSION,
             .id = CAMERA_HARDWARE_MODULE_ID,
             .name = "Virtual Camera Module",
@@ -43,6 +47,7 @@ camera_module_t HAL_MODULE_INFO_SYM = {
         },
     .get_number_of_cameras = android::VirtualCameraFactory::get_number_of_cameras,
     .get_camera_info = android::VirtualCameraFactory::get_camera_info,
+    .set_torch_mode = android::VirtualCameraFactory::set_torch_mode,
     .set_callbacks = android::VirtualCameraFactory::set_callbacks,
     .get_vendor_tag_ops = android::VirtualCameraFactory::get_vendor_tag_ops,
     .open_legacy = android::VirtualCameraFactory::open_legacy};
diff --git a/src/VirtualFakeCamera3.cpp b/src/VirtualFakeCamera3.cpp
index df4ccc5..f1b599a 100644
--- a/src/VirtualFakeCamera3.cpp
+++ b/src/VirtualFakeCamera3.cpp
@@ -72,7 +72,7 @@ const int32_t VirtualFakeCamera3::kHalSupportedFormats[] = {
     HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,  // defined as RGB32
     HAL_PIXEL_FORMAT_RGBA_8888,               // RGB32
     HAL_PIXEL_FORMAT_YCbCr_420_888,           // NV12
-    //HAL_PIXEL_FORMAT_YCrCb_420_SP,            // NV21
+    HAL_PIXEL_FORMAT_YCrCb_420_SP,            // NV21
     // HAL_PIXEL_FORMAT_YV12 /* Not supporting now*/
 };
 
@@ -437,6 +437,11 @@ status_t VirtualFakeCamera3::getCameraInfo(struct camera_info *info) {
     return VirtualCamera3::getCameraInfo(info);
 }
 
+status_t  VirtualFakeCamera3::setTorchMode(const char* camera_id, bool enable){
+    return VirtualCamera3::setTorchMode(camera_id,enable);
+}
+
+
 /**
  * Camera3 interface methods
  */
@@ -524,14 +529,14 @@ status_t VirtualFakeCamera3::configureStreams(camera3_stream_configuration *stre
             return BAD_VALUE;
         }
 
-       /* if (mSrcWidth < newStream->width && mSrcHeight < newStream->height) {
+        if (mSrcWidth < newStream->width && mSrcHeight < newStream->height) {
             // Update app's res request to local variable.
             mSrcWidth = newStream->width;
             mSrcHeight = newStream->height;
             // Update globally for clearing used buffers properly.
             gSrcWidth = mSrcWidth;
             gSrcHeight = mSrcHeight;
-        }*/
+        }
     }
     mInputStream = inputStream;
 
@@ -542,6 +547,7 @@ status_t VirtualFakeCamera3::configureStreams(camera3_stream_configuration *stre
      */
     for (StreamIterator s = mStreams.begin(); s != mStreams.end(); ++s) {
         PrivateStreamInfo *privStream = static_cast<PrivateStreamInfo *>((*s)->priv);
+        if(privStream != NULL) 
         privStream->alive = false;
     }
 
@@ -574,6 +580,9 @@ status_t VirtualFakeCamera3::configureStreams(camera3_stream_configuration *stre
                 ALOGV("%s: GRALLOC0", __FUNCTION__);
 #else
                 ALOGV("%s: GRALLOC1", __FUNCTION__);
+                  //WA: configure usage when requrested for buffer overlay, WA provided during vts run
+                  // cases of configure single stream and flush 
+                   newStream->usage = 0x100;
 #endif
                 break;
             case CAMERA3_STREAM_INPUT:
@@ -652,7 +661,6 @@ status_t VirtualFakeCamera3::registerStreamBuffers(const camera3_stream_buffer_s
 const camera_metadata_t *VirtualFakeCamera3::constructDefaultRequestSettings(int type) {
     ALOGV("%s: E", __FUNCTION__);
     Mutex::Autolock l(mLock);
-
     if (type < 0 || type >= CAMERA3_TEMPLATE_COUNT) {
         ALOGV("%s: Unknown request settings template: %d", __FUNCTION__, type);
         return NULL;
@@ -970,7 +978,7 @@ const camera_metadata_t *VirtualFakeCamera3::constructDefaultRequestSettings(int
     }
 
     mDefaultTemplates[type] = settings.release();
-
+    ALOGV("%s: X", __FUNCTION__);
     return mDefaultTemplates[type];
 }
 
@@ -1632,7 +1640,6 @@ status_t VirtualFakeCamera3::constructStaticInfo() {
         720,
         ANDROID_SCALER_AVAILABLE_STREAM_CONFIGURATIONS_OUTPUT,
     };
-
     const std::vector<int32_t> availableStreamConfigurations720p = {
         HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,
         640,
@@ -1814,7 +1821,6 @@ status_t VirtualFakeCamera3::constructStaticInfo() {
         240,
         Sensor::kFrameDurationRange[0],
     };
-
     const std::vector<int64_t> availableMinFrameDurationsRaw = {
         HAL_PIXEL_FORMAT_RAW16,
         width,
@@ -2161,10 +2167,11 @@ status_t VirtualFakeCamera3::constructStaticInfo() {
     }
 
     // android.info
-
-    const uint8_t supportedHardwareLevel = hasCapability(FULL_LEVEL)
-                                               ? ANDROID_INFO_SUPPORTED_HARDWARE_LEVEL_FULL
-                                               : ANDROID_INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED;
+    //WA during vts case execution for burst mode, setting limited hardware level
+    const uint8_t supportedHardwareLevel = ANDROID_INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED;
+    //const uint8_t supportedHardwareLevel = hasCapability(FULL_LEVEL)
+                                           //    ? ANDROID_INFO_SUPPORTED_HARDWARE_LEVEL_FULL
+                                             //  : ANDROID_INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED;
     ADD_STATIC_ENTRY(ANDROID_INFO_SUPPORTED_HARDWARE_LEVEL, &supportedHardwareLevel,
                      /*count*/ 1);
 
-- 
2.17.1

