From d5a3378bc40488cc0f9c669ebb2f16af38a471ff Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Piotr=20Pi=C3=B3rkowski?= <piotr.piorkowski@intel.com>
Date: Tue, 5 Jul 2022 21:05:19 +0800
Subject: [PATCH] drm/i915/iov: Fix suspend/hibernate when VFs are enabled
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We take a GT PM wakeref while we are enabling the VFs .
During the transition to the S3/S4 state, the driver expects
GT PM to be idle.
However in case when we had VFs enabled, not all wakrefs were returned
which caused the hang.
Let's put GT PM wakrefe during suspend when we have enabled VFs

v2: move iov suspend to suspend prepare path

Patch for: branch IKT/v5.15/bullpen/linux

Signed-off-by: Piotr Pi√≥rkowski <piotr.piorkowski@intel.com>
Signed-off-by: Zawawi, Muhammad Zul Husni <muhammad.zul.husni.zawawi@intel.com>
---
 drivers/gpu/drm/i915/gt/intel_gt_pm.c   |  3 +++
 drivers/gpu/drm/i915/gt/iov/intel_iov.c | 33 +++++++++++++++++++++++++
 drivers/gpu/drm/i915/gt/iov/intel_iov.h |  6 +++++
 drivers/gpu/drm/i915/i915_drv.c         |  2 ++
 drivers/gpu/drm/i915/i915_sriov.c       |  5 ++--
 5 files changed, 47 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/intel_gt_pm.c b/drivers/gpu/drm/i915/gt/intel_gt_pm.c
index 3dfaa4ded557..d8b0ddc57a8a 100644
--- a/drivers/gpu/drm/i915/gt/intel_gt_pm.c
+++ b/drivers/gpu/drm/i915/gt/intel_gt_pm.c
@@ -18,6 +18,7 @@
 #include "intel_rc6.h"
 #include "intel_rps.h"
 #include "intel_wakeref.h"
+#include "iov/intel_iov.h"
 #include "pxp/intel_pxp_pm.h"
 
 #define I915_GT_SUSPEND_IDLE_TIMEOUT (HZ / 2)
@@ -302,6 +303,8 @@ static void wait_for_suspend(struct intel_gt *gt)
 
 void intel_gt_suspend_prepare(struct intel_gt *gt)
 {
+	intel_iov_suspend(&gt->iov);
+
 	user_forcewake(gt, true);
 	wait_for_suspend(gt);
 
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov.c b/drivers/gpu/drm/i915/gt/iov/intel_iov.c
index 50a701975519..c45a073d6b99 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov.c
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov.c
@@ -9,6 +9,7 @@
 #include "intel_iov_relay.h"
 #include "intel_iov_service.h"
 #include "intel_iov_utils.h"
+#include "gt/intel_gt_pm.h"
 
 /**
  * intel_iov_init_early - Prepare IOV data.
@@ -288,6 +289,38 @@ int intel_iov_init_late(struct intel_iov *iov)
 	return 0;
 }
 
+void intel_iov_pf_get_pm_vfs(struct intel_iov *iov)
+{
+	GEM_BUG_ON(!intel_iov_is_pf(iov));
+
+	intel_gt_pm_get_untracked(iov_to_gt(iov));
+}
+
+void intel_iov_pf_put_pm_vfs(struct intel_iov *iov)
+{
+	GEM_BUG_ON(!intel_iov_is_pf(iov));
+
+	intel_gt_pm_put_untracked(iov_to_gt(iov));
+}
+
+void intel_iov_suspend(struct intel_iov *iov)
+{
+	if (!intel_iov_is_pf(iov))
+		return;
+
+	if (pci_num_vf(to_pci_dev(iov_to_i915(iov)->drm.dev)) != 0)
+		intel_iov_pf_put_pm_vfs(iov);
+}
+
+void intel_iov_resume(struct intel_iov *iov)
+{
+	if (!intel_iov_is_pf(iov))
+		return;
+
+	if (pci_num_vf(to_pci_dev(iov_to_i915(iov)->drm.dev)) != 0)
+		intel_iov_pf_get_pm_vfs(iov);
+}
+
 #if IS_ENABLED(CONFIG_DRM_I915_SELFTEST)
 #include "./selftests/iov_live_selftest_ggtt.c"
 #endif
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov.h b/drivers/gpu/drm/i915/gt/iov/intel_iov.h
index 3cc5d18f470c..7547fa24ea5c 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov.h
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov.h
@@ -21,4 +21,10 @@ int intel_iov_init_hw(struct intel_iov *iov);
 void intel_iov_fini_hw(struct intel_iov *iov);
 int intel_iov_init_late(struct intel_iov *iov);
 
+void intel_iov_pf_get_pm_vfs(struct intel_iov *iov);
+void intel_iov_pf_put_pm_vfs(struct intel_iov *iov);
+
+void intel_iov_suspend(struct intel_iov *iov);
+void intel_iov_resume(struct intel_iov *iov);
+
 #endif /* __INTEL_IOV_H__ */
diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index 2bb8527a92a6..1b735db53d07 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -1421,6 +1421,8 @@ static int i915_drm_resume_early(struct drm_device *dev)
 
 	intel_power_domains_resume(dev_priv);
 
+	intel_iov_resume(&to_gt(dev_priv)->iov);
+
 	enable_rpm_wakeref_asserts(&dev_priv->runtime_pm);
 
 	return ret;
diff --git a/drivers/gpu/drm/i915/i915_sriov.c b/drivers/gpu/drm/i915/i915_sriov.c
index e42923d5c462..ec87d4bc0501 100644
--- a/drivers/gpu/drm/i915/i915_sriov.c
+++ b/drivers/gpu/drm/i915/i915_sriov.c
@@ -9,6 +9,7 @@
 
 #include "gt/intel_gt.h"
 #include "gt/intel_gt_pm.h"
+#include "gt/iov/intel_iov.h"
 #include "gt/iov/intel_iov_provisioning.h"
 #include "gt/iov/intel_iov_utils.h"
 
@@ -432,7 +433,7 @@ int i915_sriov_pf_enable_vfs(struct drm_i915_private *i915, int num_vfs)
 		goto fail;
 
 	/* hold the reference to runtime pm as long as VFs are enabled */
-	intel_gt_pm_get_untracked(to_gt(i915));
+	intel_iov_pf_get_pm_vfs(&to_gt(i915)->iov);
 
 	err = intel_iov_provisioning_verify(&to_gt(i915)->iov, num_vfs);
 	if (err == -ENODATA) {
@@ -502,7 +503,7 @@ int i915_sriov_pf_disable_vfs(struct drm_i915_private *i915)
 
 	pf_update_guc_clients(&to_gt(i915)->iov, 0);
 	intel_iov_provisioning_auto(&to_gt(i915)->iov, 0);
-	intel_gt_pm_put_untracked(to_gt(i915));
+	intel_iov_pf_put_pm_vfs(&to_gt(i915)->iov);
 
 	dev_info(dev, "Disabled %u VFs\n", num_vfs);
 	return 0;
-- 
2.31.0

