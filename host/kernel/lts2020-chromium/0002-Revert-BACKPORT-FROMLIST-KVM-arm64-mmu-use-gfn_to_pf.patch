From 0a7e0fe294aec169b8920a557f127804efb897f7 Mon Sep 17 00:00:00 2001
From: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Date: Fri, 15 Oct 2021 08:45:18 +0530
Subject: [PATCH] Revert "BACKPORT: FROMLIST: KVM: arm64/mmu: use
 gfn_to_pfn_page"

This reverts commit f970f65bc750f05a962651baf497bb24cd895368.
Reverting as it causes device reboot during Android VM boot.

Signed-off-by: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
---
 arch/arm64/kvm/mmu.c | 23 ++++++++++-------------
 1 file changed, 10 insertions(+), 13 deletions(-)

diff --git a/arch/arm64/kvm/mmu.c b/arch/arm64/kvm/mmu.c
index 9277663d7edf..999775e7ad92 100644
--- a/arch/arm64/kvm/mmu.c
+++ b/arch/arm64/kvm/mmu.c
@@ -779,7 +779,7 @@ static bool fault_supports_stage2_huge_mapping(struct kvm_memory_slot *memslot,
 static unsigned long
 transparent_hugepage_adjust(struct kvm_memory_slot *memslot,
 			    unsigned long hva, kvm_pfn_t *pfnp,
-			    struct page **page, phys_addr_t *ipap)
+			    phys_addr_t *ipap)
 {
 	kvm_pfn_t pfn = *pfnp;
 
@@ -788,7 +788,7 @@ transparent_hugepage_adjust(struct kvm_memory_slot *memslot,
 	 * sure that the HVA and IPA are sufficiently aligned and that the
 	 * block map is contained within the memslot.
 	 */
-	if (*page && kvm_is_transparent_hugepage(pfn) &&
+	if (kvm_is_transparent_hugepage(pfn) &&
 	    fault_supports_stage2_huge_mapping(memslot, hva, PMD_SIZE)) {
 		/*
 		 * The address we faulted on is backed by a transparent huge
@@ -809,11 +809,10 @@ transparent_hugepage_adjust(struct kvm_memory_slot *memslot,
 		 * page accordingly.
 		 */
 		*ipap &= PMD_MASK;
-		put_page(*page);
+		kvm_release_pfn_clean(pfn);
 		pfn &= ~(PTRS_PER_PMD - 1);
+		kvm_get_pfn(pfn);
 		*pfnp = pfn;
-		*page = pfn_to_page(pfn);
-		get_page(*page);
 
 		return PMD_SIZE;
 	}
@@ -837,7 +836,6 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 	short vma_shift;
 	gfn_t gfn;
 	kvm_pfn_t pfn;
-	struct page *page;
 	bool logging_active = memslot_is_logging(memslot);
 	unsigned long fault_level = kvm_vcpu_trap_get_fault_level(vcpu);
 	unsigned long vma_pagesize, fault_granule;
@@ -930,7 +928,7 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 	 */
 	smp_rmb();
 
-	pfn = gfn_to_pfn_page_prot(kvm, gfn, write_fault, &writable, &page);
+	pfn = gfn_to_pfn_prot(kvm, gfn, write_fault, &writable);
 	if (pfn == KVM_PFN_ERR_HWPOISON) {
 		kvm_send_hwpoison_signal(hva, vma_shift);
 		return 0;
@@ -963,10 +961,11 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 	 */
 	if (vma_pagesize == PAGE_SIZE && !force_pte)
 		vma_pagesize = transparent_hugepage_adjust(memslot, hva,
-							   &pfn, &page,
-							   &fault_ipa);
+							   &pfn, &fault_ipa);
 	if (writable) {
 		prot |= KVM_PGTABLE_PROT_W;
+		kvm_set_pfn_dirty(pfn);
+		mark_page_dirty(kvm, gfn);
 	}
 
 	if (fault_status != FSC_PERM && !device)
@@ -1004,10 +1003,8 @@ static int user_mem_abort(struct kvm_vcpu *vcpu, phys_addr_t fault_ipa,
 
 out_unlock:
 	spin_unlock(&kvm->mmu_lock);
-	if (page) {
-		kvm_set_pfn_accessed(pfn);
-		put_page(page);
-	}
+	kvm_set_pfn_accessed(pfn);
+	kvm_release_pfn_clean(pfn);
 	return ret != -EAGAIN ? ret : 0;
 }
 
-- 
2.40.1

