From f910f97355bbfa71c9f012d74090fc69f2603d0d Mon Sep 17 00:00:00 2001
From: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Date: Fri, 15 Oct 2021 10:16:50 +0530
Subject: [PATCH] Revert "UPSTREAM: drm/i915/gvt: Introduce per object locking
 in GVT scheduler."

This reverts commit f0765eba2d598da46fe9829ccefac919c16345ce.
Reverting as this causes device reboot on Android VM bootup.

Signed-off-by: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
---
 drivers/gpu/drm/i915/gvt/scheduler.c | 49 +++++-----------------------
 1 file changed, 9 insertions(+), 40 deletions(-)

diff --git a/drivers/gpu/drm/i915/gvt/scheduler.c b/drivers/gpu/drm/i915/gvt/scheduler.c
index 3e874c999368..9b2d45c55891 100644
--- a/drivers/gpu/drm/i915/gvt/scheduler.c
+++ b/drivers/gpu/drm/i915/gvt/scheduler.c
@@ -412,9 +412,7 @@ static void release_shadow_wa_ctx(struct intel_shadow_wa_ctx *wa_ctx)
 	if (!wa_ctx->indirect_ctx.obj)
 		return;
 
-	i915_gem_object_lock(wa_ctx->indirect_ctx.obj, NULL);
 	i915_gem_object_unpin_map(wa_ctx->indirect_ctx.obj);
-	i915_gem_object_unlock(wa_ctx->indirect_ctx.obj);
 	i915_gem_object_put(wa_ctx->indirect_ctx.obj);
 
 	wa_ctx->indirect_ctx.obj = NULL;
@@ -522,7 +520,6 @@ static int prepare_shadow_batch_buffer(struct intel_vgpu_workload *workload)
 	struct intel_gvt *gvt = workload->vgpu->gvt;
 	const int gmadr_bytes = gvt->device_info.gmadr_bytes_in_cmd;
 	struct intel_vgpu_shadow_bb *bb;
-	struct i915_gem_ww_ctx ww;
 	int ret;
 
 	list_for_each_entry(bb, &workload->shadow_bb, list) {
@@ -547,19 +544,10 @@ static int prepare_shadow_batch_buffer(struct intel_vgpu_workload *workload)
 		 * directly
 		 */
 		if (!bb->ppgtt) {
-			i915_gem_ww_ctx_init(&ww, false);
-retry:
-			i915_gem_object_lock(bb->obj, &ww);
-
-			bb->vma = i915_gem_object_ggtt_pin_ww(bb->obj, &ww,
-							      NULL, 0, 0, 0);
+			bb->vma = i915_gem_object_ggtt_pin(bb->obj,
+							   NULL, 0, 0, 0);
 			if (IS_ERR(bb->vma)) {
 				ret = PTR_ERR(bb->vma);
-				if (ret == -EDEADLK) {
-					ret = i915_gem_ww_ctx_backoff(&ww);
-					if (!ret)
-						goto retry;
-				}
 				goto err;
 			}
 
@@ -573,15 +561,13 @@ static int prepare_shadow_batch_buffer(struct intel_vgpu_workload *workload)
 						      0);
 			if (ret)
 				goto err;
-
-			/* No one is going to touch shadow bb from now on. */
-			i915_gem_object_flush_map(bb->obj);
-			i915_gem_ww_ctx_fini(&ww);
 		}
+
+		/* No one is going to touch shadow bb from now on. */
+		i915_gem_object_flush_map(bb->obj);
 	}
 	return 0;
 err:
-	i915_gem_ww_ctx_fini(&ww);
 	release_shadow_batch_buffer(workload);
 	return ret;
 }
@@ -608,29 +594,14 @@ static int prepare_shadow_wa_ctx(struct intel_shadow_wa_ctx *wa_ctx)
 	unsigned char *per_ctx_va =
 		(unsigned char *)wa_ctx->indirect_ctx.shadow_va +
 		wa_ctx->indirect_ctx.size;
-	struct i915_gem_ww_ctx ww;
-	int ret;
 
 	if (wa_ctx->indirect_ctx.size == 0)
 		return 0;
 
-	i915_gem_ww_ctx_init(&ww, false);
-retry:
-	i915_gem_object_lock(wa_ctx->indirect_ctx.obj, &ww);
-
-	vma = i915_gem_object_ggtt_pin_ww(wa_ctx->indirect_ctx.obj, &ww, NULL,
-					  0, CACHELINE_BYTES, 0);
-	if (IS_ERR(vma)) {
-		ret = PTR_ERR(vma);
-		if (ret == -EDEADLK) {
-			ret = i915_gem_ww_ctx_backoff(&ww);
-			if (!ret)
-				goto retry;
-		}
-		return ret;
-	}
-
-	i915_gem_ww_ctx_fini(&ww);
+	vma = i915_gem_object_ggtt_pin(wa_ctx->indirect_ctx.obj, NULL,
+				       0, CACHELINE_BYTES, 0);
+	if (IS_ERR(vma))
+		return PTR_ERR(vma);
 
 	/* FIXME: we are not tracking our pinned VMA leaving it
 	 * up to the core to fix up the stray pin_count upon
@@ -664,14 +635,12 @@ static void release_shadow_batch_buffer(struct intel_vgpu_workload *workload)
 
 	list_for_each_entry_safe(bb, pos, &workload->shadow_bb, list) {
 		if (bb->obj) {
-			i915_gem_object_lock(bb->obj, NULL);
 			if (bb->va && !IS_ERR(bb->va))
 				i915_gem_object_unpin_map(bb->obj);
 
 			if (bb->vma && !IS_ERR(bb->vma))
 				i915_vma_unpin(bb->vma);
 
-			i915_gem_object_unlock(bb->obj);
 			i915_gem_object_put(bb->obj);
 		}
 		list_del(&bb->list);
-- 
2.40.1

