From e47e5dafcf66ecafda83d887f224995b01d58990 Mon Sep 17 00:00:00 2001
From: RajaniRanjan <rajani.ranjan@intel.com>
Date: Wed, 28 Jul 2021 13:59:25 +0530
Subject: [PATCH 13/14] Add input support in Landscape from Rotate operation

Tracked-On: OAM-97350
Signed-off-by: RajaniRanjan <rajani.ranjan@intel.com>
---
 client/CMakeLists.txt           |   2 -
 client/clipboards/X11/src/x11.c |  12 +--
 client/include/vInputClient.h   |  11 ++-
 client/src/config.c             |  20 -----
 client/src/main.c               | 144 ++++++--------------------------
 client/src/main.h               |   2 -
 client/src/vInputClient.c       |  87 +++++++++++--------
 7 files changed, 85 insertions(+), 193 deletions(-)

diff --git a/client/CMakeLists.txt b/client/CMakeLists.txt
index d40c737..6505cc7 100644
--- a/client/CMakeLists.txt
+++ b/client/CMakeLists.txt
@@ -59,7 +59,6 @@ find_package(GMP)
 add_definitions(-D BUILD_VERSION='"${BUILD_VERSION}"')
 add_definitions(-D ATOMIC_LOCKING)
 add_definitions(-D GL_GLEXT_PROTOTYPES)
-add_definitions(-D GUEST_ANDROID)
 get_filename_component(PROJECT_TOP "${PROJECT_SOURCE_DIR}/.." ABSOLUTE)
 
 include_directories(
@@ -84,7 +83,6 @@ set(SOURCES
 	src/ll.c
 	src/utils.c
 	src/vInputClient.c
-	src/vsock_clipboard.c
 )
 
 add_subdirectory("${PROJECT_TOP}/common" "${CMAKE_BINARY_DIR}/common")
diff --git a/client/clipboards/X11/src/x11.c b/client/clipboards/X11/src/x11.c
index 9a85fe6..d49c731 100644
--- a/client/clipboards/X11/src/x11.c
+++ b/client/clipboards/X11/src/x11.c
@@ -59,15 +59,6 @@ static const char * x11_cb_getName()
   return "X11";
 }
 
-
-static int x_error_handler(Display *disp, XErrorEvent *evnt) {
-  DEBUG_ERROR("X Error Failed request");
-  DEBUG_ERROR("Error code: %u", evnt->error_code);
-  DEBUG_ERROR("Major opcode: %u", evnt->request_code);
-  DEBUG_ERROR("Minor opcode: %u", evnt->minor_code);
-  return 0;
-}
-
 static bool x11_cb_init(
     SDL_SysWMinfo         * wminfo,
     LG_ClipboardReleaseFn   releaseFn,
@@ -121,7 +112,6 @@ static bool x11_cb_init(
 
   XFixesSelectSelectionInput(this->display, this->window, XA_PRIMARY      , XFixesSetSelectionOwnerNotifyMask);
   XFixesSelectSelectionInput(this->display, this->window, this->aSelection, XFixesSetSelectionOwnerNotifyMask);
-  XSetErrorHandler(x_error_handler);
 
   return true;
 }
@@ -366,4 +356,4 @@ const LG_Clipboard LGC_X11 =
   .notice  = x11_cb_notice,
   .release = x11_cb_release,
   .request = x11_cb_request
-};
+};
\ No newline at end of file
diff --git a/client/include/vInputClient.h b/client/include/vInputClient.h
index e7ca6d6..c31c3d2 100644
--- a/client/include/vInputClient.h
+++ b/client/include/vInputClient.h
@@ -1,6 +1,11 @@
+#define XRES_MAX 540.00
+#define YRES_MAX 960.00
+#define LTRB_Y   327.00
+typedef enum {PRESS, RELEASE, MOVE} action;
+//typedef enum {ROTATION_0, ROTATION_1} rotation;
+
 int initvInputClient(const char []);
 void send_sync_event();
 void send_event(int32_t type, int32_t code, int32_t value);
-bool vinput_mouse_position(uint32_t x, uint32_t y);
-bool vinput_touch_release(u_int32_t x, u_int32_t y);
-bool vinput_touch_press(u_int32_t x, u_int32_t y);
+bool vinput_touch(action a, u_int32_t x, u_int32_t y, int rotation);
+
diff --git a/client/src/config.c b/client/src/config.c
index 782b6f7..5735319 100644
--- a/client/src/config.c
+++ b/client/src/config.c
@@ -97,7 +97,6 @@ static struct Option options[] =
     .module        = "app",
     .name          = "framePollInterval",
     .description   = "How often to check for a frame update in microseconds",
-    .shortopt       = 'R',
     .type          = OPTION_TYPE_INT,
     .value.x_int   = 1000
   },
@@ -320,13 +319,6 @@ static struct Option options[] =
     .type           = OPTION_TYPE_BOOL,
     .value.x_bool   = true
   },
-  {
-    .module         = "guestClipboard",
-    .name           = "enable",
-    .description    = "Enable the built in guest clipboard support",
-    .type           = OPTION_TYPE_BOOL,
-    .value.x_bool   = false
-  },
   {0}
 };
 
@@ -434,18 +426,6 @@ bool config_load(int argc, char * argv[])
     params.scaleMouseInput = option_get_bool("spice", "scaleCursor");
   }
 
-  // By default we should use UI
-  params.useUI = true;
-  params.useGuestClipboard = option_get_bool("guestClipboard", "enable");
-  // Cannot use SpiceClipboard when using GuestClipboard
-  if (params.useGuestClipboard) {
-    params.useSpiceClipboard = false;
-    params.useSpiceInput = false;
-    params.useUI = false;
-    params.clipboardToVM    = option_get_bool("spice", "clipboardToVM"   );
-    params.clipboardToLocal = option_get_bool("spice", "clipboardToLocal");
-  }
-
   return true;
 }
 
diff --git a/client/src/main.c b/client/src/main.c
index c9fd25f..467e1e9 100644
--- a/client/src/main.c
+++ b/client/src/main.c
@@ -42,13 +42,12 @@ Place, Suite 330, Boston, MA 02111-1307 USA
 #include "utils.h"
 #include "kb.h"
 #include "ll.h"
-#include "vsock_clipboard.h"
+
 #ifdef USE_INTELVTOUCH
 #include "vInputClient.h"
 #endif
 
 static bool spice_running = true;
-static bool frame_ready = false;
 
 // forwards
 static int cursorThread(void * unused);
@@ -117,26 +116,9 @@ static int renderThread(void * unused)
 
   struct timespec time;
   clock_gettime(CLOCK_MONOTONIC, &time);
-  frame_ready = true;
 
   while(state.running)
   {
-    uint64_t nsec = time.tv_nsec + state.frameTime;
-    if(!frame_ready) {
-      if (nsec > 1e9)
-      {
-        time.tv_nsec = nsec - 1e9;
-        ++time.tv_sec;
-      }
-      else
-        time.tv_nsec = nsec;
-
-      clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &time, NULL);
-      continue;
-    }
-    else
-      frame_ready = false;
-
     if (state.lgrResize)
     {
       if (state.lgr)
@@ -166,6 +148,7 @@ static int renderThread(void * unused)
       }
     }
 
+    uint64_t nsec = time.tv_nsec + state.frameTime;
     if (nsec > 1e9)
     {
       time.tv_nsec = nsec - 1e9;
@@ -184,7 +167,6 @@ static int renderThread(void * unused)
 
 static int cursorThread(void * unused)
 {
-  return 0;
   KVMFRCursor         header;
   LG_RendererCursor   cursorType     = LG_CURSOR_COLOR;
   uint32_t            version        = 0;
@@ -318,7 +300,6 @@ static int frameThread(void * unused)
       usleep(params.framePollInterval);
       continue;
     }
-    frame_ready = true;
 
     // we must take a copy of the header to prevent the contained
     // arguments from being abused to overflow buffers.
@@ -442,30 +423,6 @@ int spiceThread(void * arg)
   return 0;
 }
 
-int guestClipboardThread(void * arg)
-{
-  vsock_connect();
-  while(state.running)
-    if (!vsock_process())
-    {
-      if (state.running)
-      {
-        if (vsock_connected()) {
-          DEBUG_ERROR("Failed to process guest messages.");
-	} else {
-	  sleep(1);
-	}
-	vsock_connect();
-        continue;
-      }
-      break;
-    }
-
-  state.running = false;
-  vsock_disconnect();
-  return 0;
-}
-
 static inline const uint32_t mapScancode(SDL_Scancode scancode)
 {
   uint32_t ps2;
@@ -512,11 +469,7 @@ void clipboardRelease()
   if (!params.clipboardToVM)
     return;
 
-  if (params.useGuestClipboard) {
-    guest_clipboard_release();
-  } else {
-    spice_clipboard_release();
-  }
+  spice_clipboard_release();
 }
 
 void clipboardNotify(const LG_ClipboardData type)
@@ -526,19 +479,11 @@ void clipboardNotify(const LG_ClipboardData type)
 
   if (type == LG_CLIPBOARD_DATA_NONE)
   {
-    if (params.useGuestClipboard) {
-      guest_clipboard_release();
-    } else {
-      spice_clipboard_release();
-    }
+    spice_clipboard_release();
     return;
   }
 
-  if (params.useGuestClipboard) {
-    guest_clipboard_grab(clipboard_type_to_spice_type(type));
-  } else {
-    spice_clipboard_grab(clipboard_type_to_spice_type(type));
-  }
+  spice_clipboard_grab(clipboard_type_to_spice_type(type));
 }
 
 void clipboardData(const LG_ClipboardData type, uint8_t * data, size_t size)
@@ -548,7 +493,6 @@ void clipboardData(const LG_ClipboardData type, uint8_t * data, size_t size)
 
   uint8_t * buffer = data;
 
-#ifndef GUEST_ANDROID
   // unix2dos
   if (type == LG_CLIPBOARD_DATA_TEXT)
   {
@@ -569,13 +513,8 @@ void clipboardData(const LG_ClipboardData type, uint8_t * data, size_t size)
     }
     size = newSize;
   }
-#endif
 
-  if(params.useGuestClipboard) {
-    guest_clipboard_data(clipboard_type_to_spice_type(type), buffer, (uint32_t)size);
-  } else {
-    spice_clipboard_data(clipboard_type_to_spice_type(type), buffer, (uint32_t)size);
-  }
+  spice_clipboard_data(clipboard_type_to_spice_type(type), buffer, (uint32_t)size);
   if (buffer != data)
     free(buffer);
 }
@@ -592,11 +531,7 @@ void clipboardRequest(const LG_ClipboardReplyFn replyFn, void * opaque)
   cbr->opaque  = opaque;
   ll_push(state.cbRequestList, cbr);
 
-  if (params.useGuestClipboard) {
-    guest_clipboard_request(state.cbType);
-  } else {
-    spice_clipboard_request(state.cbType);
-  }
+  spice_clipboard_request(state.cbType);
 }
 
 void spiceClipboardNotice(const SpiceDataType type)
@@ -698,8 +633,7 @@ int eventFilter(void * userdata, SDL_Event * event)
 
     case SDL_SYSWMEVENT:
     {
-      if ((params.useSpiceClipboard || params.useGuestClipboard) &&
-          state.lgc && state.lgc->wmevent)
+      if (params.useSpiceClipboard && state.lgc && state.lgc->wmevent)
         state.lgc->wmevent(event->syswm.msg);
       return 0;
     }
@@ -707,7 +641,7 @@ int eventFilter(void * userdata, SDL_Event * event)
     case SDL_MOUSEMOTION:
     {
 #ifdef USE_INTELVTOUCH
-      vinput_mouse_position(event->motion.x, event->motion.y);
+      vinput_touch(MOVE, event->button.x, event->button.y, state.rotate);
       if (realignGuest)
         realignGuest = false;
 #else
@@ -934,7 +868,7 @@ int eventFilter(void * userdata, SDL_Event * event)
 
     case SDL_MOUSEBUTTONDOWN:
 #ifdef USE_INTELVTOUCH
-      vinput_touch_press(event->button.x, event->button.y);
+      vinput_touch(PRESS, event->button.x, event->button.y, state.rotate);
 #else
       if (!spice_running)
       {
@@ -965,7 +899,7 @@ int eventFilter(void * userdata, SDL_Event * event)
 
     case SDL_MOUSEBUTTONUP:
 #ifdef USE_INTELVTOUCH
-      vinput_touch_release(event->button.x, event->button.y);
+      vinput_touch(RELEASE, event->button.x, event->button.y, state.rotate);
 #else
       if (!spice_running)
       {
@@ -1212,7 +1146,7 @@ int run()
   LG_RendererParams lgrParams;
   lgrParams.showFPS = params.showFPS;
   Uint32 sdlFlags;
-  if (params.useUI) {
+
   if (params.forceRenderer)
   {
     DEBUG_INFO("Trying forced renderer");
@@ -1243,7 +1177,7 @@ int run()
     DEBUG_INFO("Unable to find a suitable renderer");
     return -1;
   }
-  }
+
   state.window = SDL_CreateWindow(
     params.windowTitle,
     params.center ? SDL_WINDOWPOS_CENTERED : params.x,
@@ -1251,7 +1185,7 @@ int run()
     params.w,
     params.h,
     (
-      (params.useUI ? SDL_WINDOW_SHOWN : SDL_WINDOW_HIDDEN) |
+      SDL_WINDOW_SHOWN |
       (params.fullscreen  ? SDL_WINDOW_FULLSCREEN_DESKTOP : 0) |
       (params.allowResize ? SDL_WINDOW_RESIZABLE  : 0) |
       (params.borderless  ? SDL_WINDOW_BORDERLESS : 0) |
@@ -1366,32 +1300,27 @@ int run()
   }
 
   SDL_Thread *t_spice  = NULL;
-  SDL_Thread *t_guest  = NULL;
   SDL_Thread *t_frame  = NULL;
   SDL_Thread *t_render = NULL;
 
 #ifdef USE_INTELVTOUCH
-  if (params.useUI) {
-    initvInputClient(params.shmFile);
-  }
+  initvInputClient(params.shmFile);
 #endif
 
   while(1)
   {
-    if (params.useUI) {
-      state.shm = (struct KVMFRHeader *)map_memory();
-      if (!state.shm)
-      {
-        DEBUG_ERROR("Failed to map memory");
-        break;
-      }
+    state.shm = (struct KVMFRHeader *)map_memory();
+    if (!state.shm)
+    {
+      DEBUG_ERROR("Failed to map memory");
+      break;
+    }
 
-      // start the renderThread so we don't just display junk
-      if (!(t_render = SDL_CreateThread(renderThread, "renderThread", NULL)))
-      {
-        DEBUG_ERROR("render create thread failed");
-        break;
-      }
+    // start the renderThread so we don't just display junk
+    if (!(t_render = SDL_CreateThread(renderThread, "renderThread", NULL)))
+    {
+      DEBUG_ERROR("render create thread failed");
+      break;
     }
 
     if (params.useSpiceInput || params.useSpiceClipboard)
@@ -1421,29 +1350,12 @@ int run()
         DEBUG_ERROR("spice create thread failed");
         break;
       }
-    } else if (params.useGuestClipboard) {
-      DEBUG_ERROR("Using guest clipboard");
-      guest_set_clipboard_cb(
-          spiceClipboardNotice,
-	  spiceClipboardData,
-	  spiceClipboardRelease,
-	  spiceClipboardRequest);
-      if (!(t_guest = SDL_CreateThread(guestClipboardThread, "guestClipboardThread", NULL))) {
-        DEBUG_ERROR("Guest clipboard thread failed");
-	break;
-      }
     }
 
     // ensure mouse acceleration is identical in server mode
     SDL_SetHintWithPriority(SDL_HINT_MOUSE_RELATIVE_MODE_WARP, "1", SDL_HINT_OVERRIDE);
     SDL_SetEventFilter(eventFilter, NULL);
 
-    if (!params.useUI) {
-      while(state.running) {
-        SDL_WaitEventTimeout(NULL, 1000);
-      }
-      break;
-    }
     // flag the host that we are starting up this is important so that
     // the host wakes up if it is waiting on an interrupt, the host will
     // also send us the current mouse shape since we won't know it yet
@@ -1549,10 +1461,6 @@ int run()
     spice_disconnect();
   }
 
-  if (t_guest) {
-    SDL_WaitThread(t_guest, NULL);
-  }
-
   if (state.lgr)
     state.lgr->deinitialize(state.lgrData);
 
diff --git a/client/src/main.h b/client/src/main.h
index 9767579..8f26620 100644
--- a/client/src/main.h
+++ b/client/src/main.h
@@ -94,8 +94,6 @@ struct AppParams
   bool         showFPS;
   bool         useSpiceInput;
   bool         useSpiceClipboard;
-  bool         useGuestClipboard;
-  bool         useUI;
   const char * spiceHost;
   unsigned int spicePort;
   bool         clipboardToVM;
diff --git a/client/src/vInputClient.c b/client/src/vInputClient.c
index 0080acf..8f878bf 100644
--- a/client/src/vInputClient.c
+++ b/client/src/vInputClient.c
@@ -10,6 +10,7 @@
 #include <sys/ipc.h>
 #include <sys/msg.h>
 
+#include "vInputClient.h"
 #define MSGQ_FILE_PATH "/tmp/input-lg"
 
 static unsigned int tracking_id = 0;
@@ -68,43 +69,55 @@ void send_event(int32_t type, int32_t code, int32_t value) {
   msgsnd(mqId, &mD, sizeof(struct mQData), 0);
 }
 
-
-bool vinput_touch_press(u_int32_t x, u_int32_t y)
-{
-	send_event(EV_ABS, ABS_MT_SLOT, 0);
-	send_event(EV_ABS, ABS_MT_TRACKING_ID, tracking_id++);
-	send_event(EV_ABS, ABS_PRESSURE, 50);
-	send_event(EV_ABS, ABS_MT_PRESSURE, 50);
-	send_event(EV_ABS, ABS_MT_POSITION_X, x);
-	send_event(EV_ABS, ABS_MT_POSITION_Y, y);
-	send_event(EV_KEY, BTN_TOUCH, 1);
+bool vinput_touch(action a, u_int32_t x, u_int32_t y, int rotation) {
+
+	if (mqId == -1) {
+		return false;
+	}
+
+        switch (rotation) {
+	    case 1:
+	    case 3:
+	        x *= XRES_MAX/YRES_MAX;
+	        y *= XRES_MAX/YRES_MAX;
+	        y += LTRB_Y;
+                break;
+
+	    case 2:
+	        x *= XRES_MAX/YRES_MAX;
+	        y *= YRES_MAX/XRES_MAX;
+		break;
+
+	    case 0:
+	    default:
+		break;
+	}
+
+	switch (a) {
+		case PRESS:
+			send_event(EV_ABS, ABS_MT_SLOT, 0);
+			send_event(EV_ABS, ABS_MT_TRACKING_ID, tracking_id++);
+			send_event(EV_ABS, ABS_PRESSURE, 50);
+			send_event(EV_ABS, ABS_MT_PRESSURE, 50);
+			send_event(EV_ABS, ABS_MT_POSITION_X, x);
+			send_event(EV_ABS, ABS_MT_POSITION_Y, y);
+			send_event(EV_KEY, BTN_TOUCH, 1);
+			break;
+
+		case RELEASE:
+			send_event(EV_ABS, ABS_MT_SLOT, 0);
+			send_event(EV_ABS, ABS_PRESSURE, 0);
+			send_event(EV_ABS, ABS_MT_PRESSURE, 0);
+			send_event(EV_ABS, ABS_MT_TRACKING_ID, -1);
+			send_event(EV_KEY, BTN_TOUCH, 0);
+			break;
+		case MOVE:
+			send_event(EV_ABS, ABS_MT_POSITION_X, x);
+			send_event(EV_ABS, ABS_MT_POSITION_Y, y);
+			break;
+		default:
+			break;
+	}
 	send_event(EV_SYN, SYN_REPORT, 0);
 	return true;
 }
-
-bool vinput_touch_release(u_int32_t x, u_int32_t y)
-{
-	send_event(EV_ABS, ABS_MT_SLOT, 0);
-	send_event(EV_ABS, ABS_PRESSURE, 0);
-	send_event(EV_ABS, ABS_MT_PRESSURE, 0);
-	send_event(EV_ABS, ABS_MT_TRACKING_ID, -1);
-	send_event(EV_KEY, BTN_TOUCH, 0);
-	send_event(EV_SYN, SYN_REPORT, 0);
-	return true;
-}
-bool vinput_mouse_position(u_int32_t x, u_int32_t y)
-{
-  if (mqId == -1)
-  {
-    return false;
-  }
-
-  if (x)
-     send_event(EV_ABS, ABS_MT_POSITION_X, x);
-
-  if (y)
-     send_event(EV_ABS, ABS_MT_POSITION_Y, y);
-	
-  send_event(EV_SYN, SYN_REPORT, 0);
-  return true;
-}
-- 
2.25.1

