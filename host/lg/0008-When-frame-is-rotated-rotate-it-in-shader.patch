From 47342cb5ab365b7417fff3027061e7574996268c Mon Sep 17 00:00:00 2001
From: "Tang, Shaofeng" <shaofeng.tang@intel.com>
Date: Sat, 12 Jun 2021 05:29:21 +0800
Subject: [PATCH 08/14] When frame is rotated, rotate it in shader

Signed-off-by: Tang, Shaofeng <shaofeng.tang@intel.com>
---
 client/include/interface/renderer.h      |  3 ++-
 client/renderers/EGL/desktop.c           |  8 ++++++--
 client/renderers/EGL/desktop.h           |  2 +-
 client/renderers/EGL/egl.c               | 10 +++++++---
 client/renderers/EGL/shader/desktop.vert | 14 ++++++++++++--
 client/src/main.c                        |  2 ++
 common/include/common/KVMFR.h            |  3 ++-
 7 files changed, 32 insertions(+), 10 deletions(-)

diff --git a/client/include/interface/renderer.h b/client/include/interface/renderer.h
index d4ab929..6714c85 100644
--- a/client/include/interface/renderer.h
+++ b/client/include/interface/renderer.h
@@ -56,6 +56,7 @@ typedef struct LG_RendererFormat
   unsigned int stride;  // scanline width (zero if compresed)
   unsigned int pitch;   // scanline bytes (or compressed size)
   unsigned int bpp;     // bits per pixel (zero if compressed)
+  unsigned int rotate;  // rotation. 0 unchange, 1-90, 2-180, 3-270
 }
 LG_RendererFormat;
 
@@ -111,4 +112,4 @@ typedef struct LG_Renderer
   LG_RendererRender       render;
   LG_RendererUpdateFPS    update_fps;
 }
-LG_Renderer;
\ No newline at end of file
+LG_Renderer;
diff --git a/client/renderers/EGL/desktop.c b/client/renderers/EGL/desktop.c
index b684cca..843baee 100644
--- a/client/renderers/EGL/desktop.c
+++ b/client/renderers/EGL/desktop.c
@@ -28,6 +28,7 @@ Place, Suite 330, Boston, MA 02111-1307 USA
 
 #include <stdlib.h>
 #include <string.h>
+#include <math.h>
 
 #include "interface/app.h"
 
@@ -43,6 +44,7 @@ struct DesktopShader
   GLint uDesktopSize;
   GLint uNearest;
   GLint uNV, uNVGain;
+  GLint uRotate;
 };
 
 struct EGL_Desktop
@@ -93,6 +95,7 @@ static bool egl_init_desktop_shader(
   shader->uNearest     = egl_shader_get_uniform_location(shader->shader, "nearest" );
   shader->uNV          = egl_shader_get_uniform_location(shader->shader, "nv"      );
   shader->uNVGain      = egl_shader_get_uniform_location(shader->shader, "nvGain"  );
+  shader->uRotate      = egl_shader_get_uniform_location(shader->shader, "rotate"  );
 
   return true;
 }
@@ -257,7 +260,7 @@ void egl_desktop_perform_update(EGL_Desktop * desktop, const bool sourceChanged)
   }
 }
 
-bool egl_desktop_render(EGL_Desktop * desktop, const float x, const float y, const float scaleX, const float scaleY, const bool nearest)
+bool egl_desktop_render(EGL_Desktop * desktop, const float x, const float y, const float scaleX, const float scaleY, const bool nearest, const uint8_t rotate)
 {
   if (!desktop->shader)
     return false;
@@ -270,6 +273,7 @@ bool egl_desktop_render(EGL_Desktop * desktop, const float x, const float y, con
   glUniform4f(shader->uDesktopPos , x, y, scaleX, scaleY);
   glUniform1i(shader->uNearest    , nearest ? 1 : 0);
   glUniform2f(shader->uDesktopSize, desktop->width, desktop->height);
+  glUniform1f(shader->uRotate     , M_PI / 2.0 * rotate);
 
   if (desktop->nvGain)
   {
@@ -281,4 +285,4 @@ bool egl_desktop_render(EGL_Desktop * desktop, const float x, const float y, con
 
   egl_model_render(desktop->model);
   return true;
-}
\ No newline at end of file
+}
diff --git a/client/renderers/EGL/desktop.h b/client/renderers/EGL/desktop.h
index 4738539..53a55af 100644
--- a/client/renderers/EGL/desktop.h
+++ b/client/renderers/EGL/desktop.h
@@ -30,4 +30,4 @@ void egl_desktop_free(EGL_Desktop ** desktop);
 
 bool egl_desktop_prepare_update(EGL_Desktop * desktop, const bool sourceChanged, const LG_RendererFormat format, const uint8_t * data);
 void egl_desktop_perform_update(EGL_Desktop * desktop, const bool sourceChanged);
-bool egl_desktop_render(EGL_Desktop * desktop, const float x, const float y, const float scaleX, const float scaleY, const bool nearest);
\ No newline at end of file
+bool egl_desktop_render(EGL_Desktop * desktop, const float x, const float y, const float scaleX, const float scaleY, const bool nearest, const uint8_t rotate);
diff --git a/client/renderers/EGL/egl.c b/client/renderers/EGL/egl.c
index 27f0a1b..56e6a4f 100644
--- a/client/renderers/EGL/egl.c
+++ b/client/renderers/EGL/egl.c
@@ -84,6 +84,7 @@ struct Inst
   float splashRatio;
   float screenScaleX, screenScaleY;
   bool  useNearest;
+  uint8_t rotate;
 
   bool         cursorVisible;
   int          cursorX    , cursorY;
@@ -170,6 +171,7 @@ bool egl_create(void ** opaque, const LG_RendererParams params)
   this->scaleY       = 1.0f;
   this->screenScaleX = 1.0f;
   this->screenScaleY = 1.0f;
+  this->rotate       = 0;
 
   this->font = LG_Fonts[0];
   if (!this->font->create(&this->fontObj, NULL, 16))
@@ -304,13 +306,15 @@ bool egl_on_frame_event(void * opaque, const LG_RendererFormat format, const uin
     this->format.type   != format.type   ||
     this->format.width  != format.width  ||
     this->format.height != format.height ||
-    this->format.pitch  != format.pitch
+    this->format.pitch  != format.pitch  ||
+    this->format.rotate != format.rotate
   );
 
   if (this->sourceChanged)
     memcpy(&this->format, &format, sizeof(LG_RendererFormat));
 
   this->useNearest = this->width < format.width || this->height < format.height;
+  this->rotate = format.rotate;
 
   if (!egl_desktop_prepare_update(this->desktop, this->sourceChanged, format, data))
   {
@@ -490,7 +494,7 @@ bool egl_render(void * opaque, SDL_Window * window)
   glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
   glClear(GL_COLOR_BUFFER_BIT);
 
-  if (egl_desktop_render(this->desktop, this->translateX, this->translateY, this->scaleX, this->scaleY, this->useNearest))
+  if (egl_desktop_render(this->desktop, this->translateX, this->translateY, this->scaleX, this->scaleY, this->useNearest, this->rotate))
   {
     if (!this->waitFadeTime)
       this->waitFadeTime = microtime() + SPLASH_FADE_TIME;
@@ -566,4 +570,4 @@ struct LG_Renderer LGR_EGL =
   .render_startup = egl_render_startup,
   .render         = egl_render,
   .update_fps     = egl_update_fps
-};
\ No newline at end of file
+};
diff --git a/client/renderers/EGL/shader/desktop.vert b/client/renderers/EGL/shader/desktop.vert
index 3472a22..db6bcf9 100644
--- a/client/renderers/EGL/shader/desktop.vert
+++ b/client/renderers/EGL/shader/desktop.vert
@@ -4,13 +4,23 @@ layout(location = 0) in vec3 vertexPosition_modelspace;
 layout(location = 1) in vec2 vertexUV;
 
 uniform vec4 position;
+uniform float rotate;
 
 out highp vec2 uv;
 
 void main()
 {
-  gl_Position.xyz = vertexPosition_modelspace; 
-  gl_Position.w   = 1.0;
+  vec4 p = vec4(0.0, 0.0, 0.0, 1.0);
+  p.xyz = vertexPosition_modelspace;
+  mat4 scaleMatrix = mat4(1.0, 0.0, 0.0, 0.0,
+                        0.0, 1.0, 0.0, 0.0,
+                        0.0, 0.0, 1.0, 0.0,
+                        0.0, 0.0, 0.0, 1.0);
+  mat4 rotateMatrix = mat4(cos(rotate), sin(rotate), 0.0, 0.0,
+                         -sin(rotate), cos(rotate), 0.0, 0.0,
+                         0.0, 0.0, 1.0, 0.0,
+                         0.0, 0.0, 0.0, 1.0);
+  gl_Position = rotateMatrix * scaleMatrix * p;
   gl_Position.x  -= position.x;
   gl_Position.y  -= position.y;
   gl_Position.x  *= position.z;
diff --git a/client/src/main.c b/client/src/main.c
index 6d20601..960f7b1 100644
--- a/client/src/main.c
+++ b/client/src/main.c
@@ -335,6 +335,7 @@ static int frameThread(void * unused)
     lgrFormat.height = header.height;
     lgrFormat.stride = header.stride;
     lgrFormat.pitch  = header.pitch;
+    lgrFormat.rotate = header.rotate;
 
     size_t dataSize;
     switch(header.type)
@@ -379,6 +380,7 @@ static int frameThread(void * unused)
     }
 
     const uint8_t * data = (const uint8_t *)state.shm + header.dataPos;
+
     if (!state.lgr->on_frame_event(state.lgrData, lgrFormat, data))
     {
       DEBUG_ERROR("renderer on frame event returned failure");
diff --git a/common/include/common/KVMFR.h b/common/include/common/KVMFR.h
index c4c3d19..d9544d6 100644
--- a/common/include/common/KVMFR.h
+++ b/common/include/common/KVMFR.h
@@ -72,6 +72,7 @@ typedef struct KVMFRFrame
   uint32_t    stride;      // the row stride (zero if compressed data)
   uint32_t    pitch;       // the row pitch  (stride in bytes or the compressed frame size)
   uint64_t    dataPos;     // offset to the frame
+  uint8_t     rotate;      // the frame rotation
 }
 KVMFRFrame;
 
@@ -87,4 +88,4 @@ typedef struct KVMFRHeader
   KVMFRFrame  frame;       // the frame information
   KVMFRCursor cursor;      // the cursor information
 }
-KVMFRHeader;
\ No newline at end of file
+KVMFRHeader;
-- 
2.25.1

