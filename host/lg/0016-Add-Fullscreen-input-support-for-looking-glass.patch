From 9553d837b741d604c2db08983e44a1ad7736ff94 Mon Sep 17 00:00:00 2001
From: RajaniRanjan <rajani.ranjan@intel.com>
Date: Wed, 11 Aug 2021 14:55:59 +0530
Subject: [PATCH] Add input support in full screen window

Tracked-On:OAM-97454
---
 client/include/vInputClient.h |  2 +-
 client/src/main.c             | 10 +++---
 client/src/main.h             |  1 +
 client/src/vInputClient.c     | 65 +++++++++++++++++++++++++----------
 4 files changed, 54 insertions(+), 24 deletions(-)

diff --git a/client/include/vInputClient.h b/client/include/vInputClient.h
index c31c3d251..9bfd5c024 100644
--- a/client/include/vInputClient.h
+++ b/client/include/vInputClient.h
@@ -7,5 +7,5 @@ typedef enum {PRESS, RELEASE, MOVE} action;
 int initvInputClient(const char []);
 void send_sync_event();
 void send_event(int32_t type, int32_t code, int32_t value);
-bool vinput_touch(action a, u_int32_t x, u_int32_t y, int rotation);
+bool vinput_touch(action a,bool fullscreen, u_int32_t x, u_int32_t y, int rotation, u_int32_t dstRecth,u_int32_t dstRectw,u_int32_t dstRectx);
 
diff --git a/client/src/main.c b/client/src/main.c
index 34489884a..7b69a2fb0 100644
--- a/client/src/main.c
+++ b/client/src/main.c
@@ -70,6 +70,7 @@ static void updatePositionInfo()
       const float wndAspect = (float)state.windowH / (float)state.windowW;
       if (wndAspect < srcAspect)
       {
+        state.fullscreen=1;
         state.dstRect.w = (float)state.windowH / srcAspect;
         state.dstRect.h = state.windowH;
         state.dstRect.x = (state.windowW >> 1) - (state.dstRect.w >> 1);
@@ -77,6 +78,7 @@ static void updatePositionInfo()
       }
       else
       {
+        state.fullscreen =0;
         state.dstRect.w = state.windowW;
         state.dstRect.h = (float)state.windowW * srcAspect;
         state.dstRect.x = 0;
@@ -91,9 +93,9 @@ static void updatePositionInfo()
       state.dstRect.h = state.windowH;
     }
     state.dstRect.valid = true;
-
     state.scaleX = (float)state.srcSize.y / (float)state.dstRect.h;
     state.scaleY = (float)state.srcSize.x / (float)state.dstRect.w;
+
   }
 
   state.lgrResize = true;
@@ -707,7 +709,7 @@ int eventFilter(void * userdata, SDL_Event * event)
     case SDL_MOUSEMOTION:
     {
 #ifdef USE_INTELVTOUCH
-      vinput_touch(MOVE, event->button.x, event->button.y, state.rotate);
+      vinput_touch(MOVE,state.fullscreen, event->button.x, event->button.y, state.rotate, state.dstRect.h,state.dstRect.w,state.dstRect.x);
       if (realignGuest)
         realignGuest = false;
 #else
@@ -934,7 +936,7 @@ int eventFilter(void * userdata, SDL_Event * event)
 
     case SDL_MOUSEBUTTONDOWN:
 #ifdef USE_INTELVTOUCH
-      vinput_touch(PRESS, event->button.x, event->button.y, state.rotate);
+      vinput_touch(PRESS,state.fullscreen, event->button.x, event->button.y, state.rotate, state.dstRect.h,state.dstRect.w,state.dstRect.x);
 #else
       if (!spice_running)
       {
@@ -965,7 +967,7 @@ int eventFilter(void * userdata, SDL_Event * event)
 
     case SDL_MOUSEBUTTONUP:
 #ifdef USE_INTELVTOUCH
-      vinput_touch(RELEASE, event->button.x, event->button.y, state.rotate);
+      vinput_touch(RELEASE,state.fullscreen, event->button.x, event->button.y, state.rotate, state.dstRect.h,state.dstRect.w,state.dstRect.x);
 #else
       if (!spice_running)
       {
diff --git a/client/src/main.h b/client/src/main.h
index 976757971..cc1ed33f8 100644
--- a/client/src/main.h
+++ b/client/src/main.h
@@ -46,6 +46,7 @@ struct AppState
   float                accX, accY;
   uint8_t              rotate;
   bool                 isMax;
+  bool			fullscreen;
 
   const LG_Renderer  * lgr;
   void               * lgrData;
diff --git a/client/src/vInputClient.c b/client/src/vInputClient.c
index cd2f16f86..f9159ddaf 100644
--- a/client/src/vInputClient.c
+++ b/client/src/vInputClient.c
@@ -69,30 +69,57 @@ void send_event(int32_t type, int32_t code, int32_t value) {
   msgsnd(mqId, &mD, sizeof(struct mQData), 0);
 }
 
-bool vinput_touch(action a, u_int32_t x, u_int32_t y, int rotation) {
-
+bool vinput_touch(action a,bool fullscreen, u_int32_t x, u_int32_t y, int rotation, u_int32_t dstRecth,u_int32_t dstRectw,u_int32_t dstRectx) {
 	if (mqId == -1) {
 		return false;
 	}
 
-        switch (rotation) {
-	    case 1:
-	    case 3:
-	        x *= XRES_MAX/YRES_MAX;
-	        y *= XRES_MAX/YRES_MAX;
-	        y += LTRB_Y;
-                break;
-
-	    case 2:
-	        x *= XRES_MAX/YRES_MAX;
-	        y *= YRES_MAX/XRES_MAX;
-		break;
-
-	    case 0:
-	    default:
-		break;
-	}
+	if (fullscreen == 1)
+	{
+		switch (rotation) {
+		    case 1:
+		    case 3:
+			x -= dstRectx;
+			x *= XRES_MAX/dstRectw;
+			y *= XRES_MAX/dstRectw;
+			y += LTRB_Y;
+			break;
+
+		    case 2:
+			x -= dstRectx;
+			x *= XRES_MAX/dstRectw;
+			y *= YRES_MAX/dstRecth;
+			break;
+
+		    case 0:
+			x -= dstRectx;
+			x *= XRES_MAX/dstRectw;
+			y *= YRES_MAX/dstRecth;
 
+		    default:
+			break;
+		}
+	}
+	else
+        {
+                switch (rotation) {
+                    case 1:
+                    case 3:
+                        x *= XRES_MAX/YRES_MAX;
+                        y *= XRES_MAX/YRES_MAX;
+                        y += LTRB_Y;
+                        break;
+
+                    case 2:
+                        x *= XRES_MAX/YRES_MAX;
+                        y *= YRES_MAX/XRES_MAX;
+                        break;
+
+                    case 0:
+                    default:
+                        break;
+		}
+        }
 
 	switch (a) {
 		case PRESS:
