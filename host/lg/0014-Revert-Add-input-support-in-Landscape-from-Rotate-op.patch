From 7dfaf79bc2c94a5ce3c36296301e300d3fbc1440 Mon Sep 17 00:00:00 2001
From: RajaniRanjan <rajani.ranjan@intel.com>
Date: Thu, 29 Jul 2021 11:04:19 +0530
Subject: [PATCH 14/14] Revert "Add input support in Landscape from Rotate
 operation"

reverted the changes and again pushed input support landscape

This reverts commit e47e5dafcf66ecafda83d887f224995b01d58990.

Tracked-On: OAM-97946
---
 client/CMakeLists.txt           |   2 +
 client/clipboards/X11/src/x11.c |  12 ++-
 client/src/config.c             |  20 +++++
 client/src/main.c               | 138 ++++++++++++++++++++++++++------
 client/src/main.h               |   2 +
 client/src/vInputClient.c       |   2 +
 6 files changed, 152 insertions(+), 24 deletions(-)

diff --git a/client/CMakeLists.txt b/client/CMakeLists.txt
index 6505cc7..d40c737 100644
--- a/client/CMakeLists.txt
+++ b/client/CMakeLists.txt
@@ -59,6 +59,7 @@ find_package(GMP)
 add_definitions(-D BUILD_VERSION='"${BUILD_VERSION}"')
 add_definitions(-D ATOMIC_LOCKING)
 add_definitions(-D GL_GLEXT_PROTOTYPES)
+add_definitions(-D GUEST_ANDROID)
 get_filename_component(PROJECT_TOP "${PROJECT_SOURCE_DIR}/.." ABSOLUTE)
 
 include_directories(
@@ -83,6 +84,7 @@ set(SOURCES
 	src/ll.c
 	src/utils.c
 	src/vInputClient.c
+	src/vsock_clipboard.c
 )
 
 add_subdirectory("${PROJECT_TOP}/common" "${CMAKE_BINARY_DIR}/common")
diff --git a/client/clipboards/X11/src/x11.c b/client/clipboards/X11/src/x11.c
index d49c731..9a85fe6 100644
--- a/client/clipboards/X11/src/x11.c
+++ b/client/clipboards/X11/src/x11.c
@@ -59,6 +59,15 @@ static const char * x11_cb_getName()
   return "X11";
 }
 
+
+static int x_error_handler(Display *disp, XErrorEvent *evnt) {
+  DEBUG_ERROR("X Error Failed request");
+  DEBUG_ERROR("Error code: %u", evnt->error_code);
+  DEBUG_ERROR("Major opcode: %u", evnt->request_code);
+  DEBUG_ERROR("Minor opcode: %u", evnt->minor_code);
+  return 0;
+}
+
 static bool x11_cb_init(
     SDL_SysWMinfo         * wminfo,
     LG_ClipboardReleaseFn   releaseFn,
@@ -112,6 +121,7 @@ static bool x11_cb_init(
 
   XFixesSelectSelectionInput(this->display, this->window, XA_PRIMARY      , XFixesSetSelectionOwnerNotifyMask);
   XFixesSelectSelectionInput(this->display, this->window, this->aSelection, XFixesSetSelectionOwnerNotifyMask);
+  XSetErrorHandler(x_error_handler);
 
   return true;
 }
@@ -356,4 +366,4 @@ const LG_Clipboard LGC_X11 =
   .notice  = x11_cb_notice,
   .release = x11_cb_release,
   .request = x11_cb_request
-};
\ No newline at end of file
+};
diff --git a/client/src/config.c b/client/src/config.c
index 5735319..782b6f7 100644
--- a/client/src/config.c
+++ b/client/src/config.c
@@ -97,6 +97,7 @@ static struct Option options[] =
     .module        = "app",
     .name          = "framePollInterval",
     .description   = "How often to check for a frame update in microseconds",
+    .shortopt       = 'R',
     .type          = OPTION_TYPE_INT,
     .value.x_int   = 1000
   },
@@ -319,6 +320,13 @@ static struct Option options[] =
     .type           = OPTION_TYPE_BOOL,
     .value.x_bool   = true
   },
+  {
+    .module         = "guestClipboard",
+    .name           = "enable",
+    .description    = "Enable the built in guest clipboard support",
+    .type           = OPTION_TYPE_BOOL,
+    .value.x_bool   = false
+  },
   {0}
 };
 
@@ -426,6 +434,18 @@ bool config_load(int argc, char * argv[])
     params.scaleMouseInput = option_get_bool("spice", "scaleCursor");
   }
 
+  // By default we should use UI
+  params.useUI = true;
+  params.useGuestClipboard = option_get_bool("guestClipboard", "enable");
+  // Cannot use SpiceClipboard when using GuestClipboard
+  if (params.useGuestClipboard) {
+    params.useSpiceClipboard = false;
+    params.useSpiceInput = false;
+    params.useUI = false;
+    params.clipboardToVM    = option_get_bool("spice", "clipboardToVM"   );
+    params.clipboardToLocal = option_get_bool("spice", "clipboardToLocal");
+  }
+
   return true;
 }
 
diff --git a/client/src/main.c b/client/src/main.c
index 467e1e9..3448988 100644
--- a/client/src/main.c
+++ b/client/src/main.c
@@ -42,12 +42,13 @@ Place, Suite 330, Boston, MA 02111-1307 USA
 #include "utils.h"
 #include "kb.h"
 #include "ll.h"
-
+#include "vsock_clipboard.h"
 #ifdef USE_INTELVTOUCH
 #include "vInputClient.h"
 #endif
 
 static bool spice_running = true;
+static bool frame_ready = false;
 
 // forwards
 static int cursorThread(void * unused);
@@ -116,9 +117,26 @@ static int renderThread(void * unused)
 
   struct timespec time;
   clock_gettime(CLOCK_MONOTONIC, &time);
+  frame_ready = true;
 
   while(state.running)
   {
+    uint64_t nsec = time.tv_nsec + state.frameTime;
+    if(!frame_ready) {
+      if (nsec > 1e9)
+      {
+        time.tv_nsec = nsec - 1e9;
+        ++time.tv_sec;
+      }
+      else
+        time.tv_nsec = nsec;
+
+      clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &time, NULL);
+      continue;
+    }
+    else
+      frame_ready = false;
+
     if (state.lgrResize)
     {
       if (state.lgr)
@@ -148,7 +166,6 @@ static int renderThread(void * unused)
       }
     }
 
-    uint64_t nsec = time.tv_nsec + state.frameTime;
     if (nsec > 1e9)
     {
       time.tv_nsec = nsec - 1e9;
@@ -167,6 +184,7 @@ static int renderThread(void * unused)
 
 static int cursorThread(void * unused)
 {
+  return 0;
   KVMFRCursor         header;
   LG_RendererCursor   cursorType     = LG_CURSOR_COLOR;
   uint32_t            version        = 0;
@@ -300,6 +318,7 @@ static int frameThread(void * unused)
       usleep(params.framePollInterval);
       continue;
     }
+    frame_ready = true;
 
     // we must take a copy of the header to prevent the contained
     // arguments from being abused to overflow buffers.
@@ -423,6 +442,30 @@ int spiceThread(void * arg)
   return 0;
 }
 
+int guestClipboardThread(void * arg)
+{
+  vsock_connect();
+  while(state.running)
+    if (!vsock_process())
+    {
+      if (state.running)
+      {
+        if (vsock_connected()) {
+          DEBUG_ERROR("Failed to process guest messages.");
+	} else {
+	  sleep(1);
+	}
+	vsock_connect();
+        continue;
+      }
+      break;
+    }
+
+  state.running = false;
+  vsock_disconnect();
+  return 0;
+}
+
 static inline const uint32_t mapScancode(SDL_Scancode scancode)
 {
   uint32_t ps2;
@@ -469,7 +512,11 @@ void clipboardRelease()
   if (!params.clipboardToVM)
     return;
 
-  spice_clipboard_release();
+  if (params.useGuestClipboard) {
+    guest_clipboard_release();
+  } else {
+    spice_clipboard_release();
+  }
 }
 
 void clipboardNotify(const LG_ClipboardData type)
@@ -479,11 +526,19 @@ void clipboardNotify(const LG_ClipboardData type)
 
   if (type == LG_CLIPBOARD_DATA_NONE)
   {
-    spice_clipboard_release();
+    if (params.useGuestClipboard) {
+      guest_clipboard_release();
+    } else {
+      spice_clipboard_release();
+    }
     return;
   }
 
-  spice_clipboard_grab(clipboard_type_to_spice_type(type));
+  if (params.useGuestClipboard) {
+    guest_clipboard_grab(clipboard_type_to_spice_type(type));
+  } else {
+    spice_clipboard_grab(clipboard_type_to_spice_type(type));
+  }
 }
 
 void clipboardData(const LG_ClipboardData type, uint8_t * data, size_t size)
@@ -493,6 +548,7 @@ void clipboardData(const LG_ClipboardData type, uint8_t * data, size_t size)
 
   uint8_t * buffer = data;
 
+#ifndef GUEST_ANDROID
   // unix2dos
   if (type == LG_CLIPBOARD_DATA_TEXT)
   {
@@ -513,8 +569,13 @@ void clipboardData(const LG_ClipboardData type, uint8_t * data, size_t size)
     }
     size = newSize;
   }
+#endif
 
-  spice_clipboard_data(clipboard_type_to_spice_type(type), buffer, (uint32_t)size);
+  if(params.useGuestClipboard) {
+    guest_clipboard_data(clipboard_type_to_spice_type(type), buffer, (uint32_t)size);
+  } else {
+    spice_clipboard_data(clipboard_type_to_spice_type(type), buffer, (uint32_t)size);
+  }
   if (buffer != data)
     free(buffer);
 }
@@ -531,7 +592,11 @@ void clipboardRequest(const LG_ClipboardReplyFn replyFn, void * opaque)
   cbr->opaque  = opaque;
   ll_push(state.cbRequestList, cbr);
 
-  spice_clipboard_request(state.cbType);
+  if (params.useGuestClipboard) {
+    guest_clipboard_request(state.cbType);
+  } else {
+    spice_clipboard_request(state.cbType);
+  }
 }
 
 void spiceClipboardNotice(const SpiceDataType type)
@@ -633,7 +698,8 @@ int eventFilter(void * userdata, SDL_Event * event)
 
     case SDL_SYSWMEVENT:
     {
-      if (params.useSpiceClipboard && state.lgc && state.lgc->wmevent)
+      if ((params.useSpiceClipboard || params.useGuestClipboard) &&
+          state.lgc && state.lgc->wmevent)
         state.lgc->wmevent(event->syswm.msg);
       return 0;
     }
@@ -1146,7 +1212,7 @@ int run()
   LG_RendererParams lgrParams;
   lgrParams.showFPS = params.showFPS;
   Uint32 sdlFlags;
-
+  if (params.useUI) {
   if (params.forceRenderer)
   {
     DEBUG_INFO("Trying forced renderer");
@@ -1177,7 +1243,7 @@ int run()
     DEBUG_INFO("Unable to find a suitable renderer");
     return -1;
   }
-
+  }
   state.window = SDL_CreateWindow(
     params.windowTitle,
     params.center ? SDL_WINDOWPOS_CENTERED : params.x,
@@ -1185,7 +1251,7 @@ int run()
     params.w,
     params.h,
     (
-      SDL_WINDOW_SHOWN |
+      (params.useUI ? SDL_WINDOW_SHOWN : SDL_WINDOW_HIDDEN) |
       (params.fullscreen  ? SDL_WINDOW_FULLSCREEN_DESKTOP : 0) |
       (params.allowResize ? SDL_WINDOW_RESIZABLE  : 0) |
       (params.borderless  ? SDL_WINDOW_BORDERLESS : 0) |
@@ -1300,27 +1366,32 @@ int run()
   }
 
   SDL_Thread *t_spice  = NULL;
+  SDL_Thread *t_guest  = NULL;
   SDL_Thread *t_frame  = NULL;
   SDL_Thread *t_render = NULL;
 
 #ifdef USE_INTELVTOUCH
-  initvInputClient(params.shmFile);
+  if (params.useUI) {
+    initvInputClient(params.shmFile);
+  }
 #endif
 
   while(1)
   {
-    state.shm = (struct KVMFRHeader *)map_memory();
-    if (!state.shm)
-    {
-      DEBUG_ERROR("Failed to map memory");
-      break;
-    }
+    if (params.useUI) {
+      state.shm = (struct KVMFRHeader *)map_memory();
+      if (!state.shm)
+      {
+        DEBUG_ERROR("Failed to map memory");
+        break;
+      }
 
-    // start the renderThread so we don't just display junk
-    if (!(t_render = SDL_CreateThread(renderThread, "renderThread", NULL)))
-    {
-      DEBUG_ERROR("render create thread failed");
-      break;
+      // start the renderThread so we don't just display junk
+      if (!(t_render = SDL_CreateThread(renderThread, "renderThread", NULL)))
+      {
+        DEBUG_ERROR("render create thread failed");
+        break;
+      }
     }
 
     if (params.useSpiceInput || params.useSpiceClipboard)
@@ -1350,12 +1421,29 @@ int run()
         DEBUG_ERROR("spice create thread failed");
         break;
       }
+    } else if (params.useGuestClipboard) {
+      DEBUG_ERROR("Using guest clipboard");
+      guest_set_clipboard_cb(
+          spiceClipboardNotice,
+	  spiceClipboardData,
+	  spiceClipboardRelease,
+	  spiceClipboardRequest);
+      if (!(t_guest = SDL_CreateThread(guestClipboardThread, "guestClipboardThread", NULL))) {
+        DEBUG_ERROR("Guest clipboard thread failed");
+	break;
+      }
     }
 
     // ensure mouse acceleration is identical in server mode
     SDL_SetHintWithPriority(SDL_HINT_MOUSE_RELATIVE_MODE_WARP, "1", SDL_HINT_OVERRIDE);
     SDL_SetEventFilter(eventFilter, NULL);
 
+    if (!params.useUI) {
+      while(state.running) {
+        SDL_WaitEventTimeout(NULL, 1000);
+      }
+      break;
+    }
     // flag the host that we are starting up this is important so that
     // the host wakes up if it is waiting on an interrupt, the host will
     // also send us the current mouse shape since we won't know it yet
@@ -1461,6 +1549,10 @@ int run()
     spice_disconnect();
   }
 
+  if (t_guest) {
+    SDL_WaitThread(t_guest, NULL);
+  }
+
   if (state.lgr)
     state.lgr->deinitialize(state.lgrData);
 
diff --git a/client/src/main.h b/client/src/main.h
index 8f26620..9767579 100644
--- a/client/src/main.h
+++ b/client/src/main.h
@@ -94,6 +94,8 @@ struct AppParams
   bool         showFPS;
   bool         useSpiceInput;
   bool         useSpiceClipboard;
+  bool         useGuestClipboard;
+  bool         useUI;
   const char * spiceHost;
   unsigned int spicePort;
   bool         clipboardToVM;
diff --git a/client/src/vInputClient.c b/client/src/vInputClient.c
index 8f878bf..cd2f16f 100644
--- a/client/src/vInputClient.c
+++ b/client/src/vInputClient.c
@@ -93,6 +93,7 @@ bool vinput_touch(action a, u_int32_t x, u_int32_t y, int rotation) {
 		break;
 	}
 
+
 	switch (a) {
 		case PRESS:
 			send_event(EV_ABS, ABS_MT_SLOT, 0);
@@ -118,6 +119,7 @@ bool vinput_touch(action a, u_int32_t x, u_int32_t y, int rotation) {
 		default:
 			break;
 	}
+
 	send_event(EV_SYN, SYN_REPORT, 0);
 	return true;
 }
-- 
2.25.1

