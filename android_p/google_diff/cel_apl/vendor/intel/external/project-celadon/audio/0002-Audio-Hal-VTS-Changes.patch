From 82d62d3f1f667dc389474a2dbe8925996c05023d Mon Sep 17 00:00:00 2001
From: karanpat <karan.patidar@intel.com>
Date: Fri, 18 Jan 2019 04:06:54 +0530
Subject: [PATCH] Audio Hal VTS Changes

Tracked-On: OAM-75193
Signed-off-by: karanpat <karan.patidar@intel.com>
---
 audio_hw.c | 268 ++++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 193 insertions(+), 75 deletions(-)

diff --git a/audio_hw.c b/audio_hw.c
index 755b660..0c99e18 100644
--- a/audio_hw.c
+++ b/audio_hw.c
@@ -93,6 +93,7 @@ struct stream_out {
     pthread_mutex_t lock; /* see note below on mutex acquisition order */
     struct pcm *pcm;
     struct pcm_config *pcm_config;
+    struct audio_config req_config;
     bool unavailable;
     bool standby;
     uint64_t written;
@@ -105,6 +106,7 @@ struct stream_in {
     pthread_mutex_t lock; /* see note below on mutex acquisition order */
     struct pcm *pcm;
     struct pcm_config *pcm_config;
+    struct audio_config req_config;
     bool unavailable;
     bool standby;
 
@@ -138,17 +140,15 @@ static void select_devices(struct audio_device *adev)
     if (headphone_on)
         audio_route_apply_path(adev->ar, "headphone");
     if (main_mic_on)
-	audio_route_apply_path(adev->ar, "main-mic");
+        audio_route_apply_path(adev->ar, "main-mic");
     if (headset_mic_on)
-	audio_route_apply_path(adev->ar, "headset-mic");
+        audio_route_apply_path(adev->ar, "headset-mic");
 
     audio_route_update_mixer(adev->ar);
     
-    ALOGV("hp=%c speaker=%c main-mic=%c headset-mic=%c",
-	  headphone_on ? 'y' : 'n',
-          speaker_on ? 'y' : 'n',
-	  main_mic_on ? 'y' : 'n',
-	  headset_mic_on ? 'y' : 'n' );
+    ALOGV("%s : hp=%c speaker=%c main-mic=%c headset-mic=%c",__func__,
+      headphone_on ? 'y' : 'n', speaker_on ? 'y' : 'n',
+      main_mic_on ? 'y' : 'n', headset_mic_on ? 'y' : 'n' );
 }
 
 /* must be called with hw device and output stream mutexes locked */
@@ -202,14 +202,15 @@ static int start_output_stream(struct stream_out *out)
 {
     struct audio_device *adev = out->dev;
     int ret;
-    
-    ALOGV("start_output_stream");
+
+    ALOGV("%s : config : [rate %d format %d channels %d]",__func__,
+        out->pcm_config->rate, out->pcm_config->format, out->pcm_config->channels);
+
     if (out->unavailable) {
-	ALOGV("start_output_stream: output not available");
+        ALOGV("start_output_stream: output not available");
         return -ENODEV;
     }
 
-
     ret = system("ls /proc/asound/card0/pcm0p");
     if(!ret) {
        adev->card = PCM_CARD_DEFAULT;
@@ -222,12 +223,12 @@ static int start_output_stream(struct stream_out *out)
     out->pcm = pcm_open(adev->card, PCM_DEVICE, PCM_OUT | PCM_NORESTART | PCM_MONOTONIC, out->pcm_config);
 
     if (!out->pcm) {
-	ALOGE("pcm_open(out) failed: device not found");
+        ALOGE("pcm_open(out) failed: device not found");
         return -ENODEV;
     } else if (!pcm_is_ready(out->pcm)) {
         ALOGE("pcm_open(out) failed: %s", pcm_get_error(out->pcm));
         pcm_close(out->pcm);
-	out->unavailable = true;
+        out->unavailable = true;
         return -ENOMEM;
     }
 
@@ -243,7 +244,9 @@ static int start_output_stream(struct stream_out *out)
 static int start_input_stream(struct stream_in *in)
 {
     struct audio_device *adev = in->dev;
-    int ret;
+
+    ALOGV("%s : config : [rate %d format %d channels %d]",__func__,
+        in->pcm_config->rate, in->pcm_config->format, in->pcm_config->channels);
 
     in->pcm = pcm_open(PCM_CARD, PCM_DEVICE, PCM_IN, in->pcm_config);
     if (!in->pcm) {
@@ -264,10 +267,11 @@ static int start_input_stream(struct stream_in *in)
 
 /* API functions */
 
-static uint32_t out_get_sample_rate(const struct audio_stream *stream __unused)
+static uint32_t out_get_sample_rate(const struct audio_stream *stream)
 {
-    ALOGV("out_get_sample_rate");
-    return pcm_config_out.rate;
+    struct stream_out *out = (struct stream_out *)stream;
+    ALOGV("%s : rate %d",__func__, out->req_config.sample_rate);
+    return out->req_config.sample_rate;
 }
 
 static int out_set_sample_rate(struct audio_stream *stream __unused, uint32_t rate __unused)
@@ -283,14 +287,18 @@ static size_t out_get_buffer_size(const struct audio_stream *stream)
                audio_stream_out_frame_size((struct audio_stream_out *)stream);
 }
 
-static uint32_t out_get_channels(const struct audio_stream *stream __unused)
+static uint32_t out_get_channels(const struct audio_stream *stream)
 {
-    return AUDIO_CHANNEL_OUT_STEREO;
+    struct stream_out *out = (struct stream_out *)stream;
+    ALOGV("%s : channels %d",__func__,  popcount(out->req_config.channel_mask));
+    return out->req_config.channel_mask;
 }
 
-static audio_format_t out_get_format(const struct audio_stream *stream __unused)
+static audio_format_t out_get_format(const struct audio_stream *stream)
 {
-    return AUDIO_FORMAT_PCM_16_BIT;
+    ALOGV("%s",__func__);
+    struct stream_out *out = (struct stream_out *)stream;
+    return out->req_config.format;
 }
 
 static int out_set_format(struct audio_stream *stream __unused, audio_format_t format __unused)
@@ -320,12 +328,13 @@ static int out_dump(const struct audio_stream *stream __unused, int fd __unused)
 
 static int out_set_parameters(struct audio_stream *stream, const char *kvpairs)
 {
-    ALOGV("out_set_parameters");
+    ALOGV("%s : kvpairs : %s",__func__, kvpairs);
     struct stream_out *out = (struct stream_out *)stream;
     struct audio_device *adev = out->dev;
     struct str_parms *parms;
     char value[32];
     int ret;
+    int status = 0;
     unsigned int val;
 
     parms = str_parms_create_str(kvpairs);
@@ -354,20 +363,47 @@ static int out_set_parameters(struct audio_stream *stream, const char *kvpairs)
     pthread_mutex_unlock(&adev->lock);
     
     str_parms_destroy(parms);
-    return ret;
+    return status;
 }
 
-static char *out_get_parameters(const struct audio_stream *stream __unused, const char *keys __unused)
+static char *out_get_parameters(const struct audio_stream *stream, const char *keys)
 {
-    ALOGV("out_get_parameters");
-    return strdup("");
+    ALOGV("%s : keys : %s",__func__,keys);
+    struct stream_out *out = (struct stream_out *)stream;
+    struct str_parms *query = str_parms_create_str(keys);
+    char *str = NULL;
+    char value[256];
+    struct str_parms *reply = str_parms_create();
+    int ret;
+
+    ret = str_parms_get_str(query, AUDIO_PARAMETER_STREAM_SUP_FORMATS, value, sizeof(value));
+    if (ret >= 0) {
+        str_parms_add_str(reply, AUDIO_PARAMETER_STREAM_SUP_FORMATS, "AUDIO_FORMAT_PCM_16_BIT");
+        str = strdup(str_parms_to_str(reply));
+    }
+
+    ret = str_parms_get_str(query, AUDIO_PARAMETER_STREAM_SUP_SAMPLING_RATES, value, sizeof(value));
+    if (ret >= 0) {
+        str_parms_add_int(reply, AUDIO_PARAMETER_STREAM_SUP_SAMPLING_RATES, out->req_config.sample_rate);
+        str = strdup(str_parms_to_str(reply));
+    }
+
+    ret = str_parms_get_str(query, AUDIO_PARAMETER_STREAM_SUP_CHANNELS, value, sizeof(value));
+    if (ret >= 0) {
+        str_parms_add_str(reply, AUDIO_PARAMETER_STREAM_SUP_CHANNELS,
+            (out->req_config.channel_mask == AUDIO_CHANNEL_OUT_MONO ? "AUDIO_CHANNEL_OUT_MONO" : "AUDIO_CHANNEL_OUT_STEREO"));
+        str = strdup(str_parms_to_str(reply));
+    }
+
+    str_parms_destroy(query);
+    str_parms_destroy(reply);
+
+    ALOGV("%s : returning keyValuePair %s",__func__, str);
+    return str;
 }
 
-static uint32_t out_get_latency(const struct audio_stream_out *stream)
+static uint32_t out_get_latency(const struct audio_stream_out *stream __unused)
 {
-    struct stream_out *out = (struct stream_out *)stream;
-    struct audio_device *adev = out->dev;
-
     ALOGV("out_get_latency");
     return (pcm_config_out.period_size * OUT_PERIOD_COUNT * 1000) / pcm_config_out.rate;
 }
@@ -431,12 +467,13 @@ exit:
     return bytes;
 }
 
-static int out_get_render_position(const struct audio_stream_out *stream __unused,
+static int out_get_render_position(const struct audio_stream_out *stream,
                                    uint32_t *dsp_frames)
 {
-    *dsp_frames = 0;
-    ALOGV("out_get_render_position: dsp_frames: %p", dsp_frames);
-    return -EINVAL;
+    struct stream_out *out = (struct stream_out *)stream;
+    *dsp_frames = out->written;
+    ALOGV("%s : dsp_frames: %d",__func__, *dsp_frames);
+    return 0;
 }
 
 static int out_get_presentation_position(const struct audio_stream_out *stream,
@@ -446,17 +483,17 @@ static int out_get_presentation_position(const struct audio_stream_out *stream,
     int ret = -1;
 
     if (out->pcm) {
-	unsigned int avail;
-	if (pcm_get_htimestamp(out->pcm, &avail, timestamp) == 0) {
-	    unsigned int kernel_buffer_size = out->pcm_config->period_size * out->pcm_config->period_count;
-	    int64_t signed_frames = out->written - kernel_buffer_size + avail;
-	    if (signed_frames >= 0) {
-		*frames = signed_frames;
-		ret = 0;
-	    }
-	}
+        unsigned int avail;
+        if (pcm_get_htimestamp(out->pcm, &avail, timestamp) == 0) {
+            unsigned int kernel_buffer_size = out->pcm_config->period_size * out->pcm_config->period_count;
+            int64_t signed_frames = out->written - kernel_buffer_size + avail;
+            if (signed_frames >= 0) {
+            *frames = signed_frames;
+            ret = 0;
+            }
+        }
     }
-    
+
     return ret;
 }
 
@@ -475,16 +512,16 @@ static int out_remove_audio_effect(const struct audio_stream *stream __unused, e
 static int out_get_next_write_timestamp(const struct audio_stream_out *stream __unused,
                                         int64_t *timestamp __unused)
 {
-    *timestamp = 0;
-    ALOGV("out_get_next_write_timestamp: %ld", (long int)(*timestamp));
-    return -EINVAL;
+    ALOGV("%s",__func__);
+    return -ENOSYS;
 }
 
 /** audio_stream_in implementation **/
-static uint32_t in_get_sample_rate(const struct audio_stream *stream __unused)
+static uint32_t in_get_sample_rate(const struct audio_stream *stream)
 {
-     ALOGV("out_get_sample_rate");
-     return pcm_config_out.rate;
+    struct stream_in *in = (struct stream_in *)stream;
+    ALOGV("%s : req_config %d",__func__,in->req_config.sample_rate);
+    return in->req_config.sample_rate;
 }
 
 static int in_set_sample_rate(struct audio_stream *stream __unused, uint32_t rate __unused)
@@ -507,17 +544,24 @@ static size_t in_get_buffer_size(const struct audio_stream *stream)
             in->pcm_config->rate;
     size = ((size + 15) / 16) * 16;
 
-    return size * audio_stream_in_frame_size(&in->stream);
+    size *= audio_stream_in_frame_size(&in->stream);
+    ALOGV("%s : buffer_size : %d",__func__, size);
+    return size;
 }
 
-static uint32_t in_get_channels(const struct audio_stream *stream __unused)
+static uint32_t in_get_channels(const struct audio_stream *stream)
 {
-    return AUDIO_CHANNEL_IN_STEREO;
+    struct stream_in *in = (struct stream_in *)stream;
+
+    ALOGV("%s : channels %d",__func__, popcount(in->req_config.channel_mask));
+    return in->req_config.channel_mask;
 }
 
-static audio_format_t in_get_format(const struct audio_stream *stream __unused)
+static audio_format_t in_get_format(const struct audio_stream *stream)
 {
-    return AUDIO_FORMAT_PCM_16_BIT;
+    struct stream_in *in = (struct stream_in *)stream;
+    ALOGV("%s : req_config format %d",__func__, in->req_config.format);
+    return in->req_config.format;
 }
 
 static int in_set_format(struct audio_stream *stream __unused, audio_format_t format __unused)
@@ -550,6 +594,7 @@ static int in_set_parameters(struct audio_stream *stream, const char *kvpairs)
     struct str_parms *parms;
     char value[32];
     int ret;
+    int status = 0;
     unsigned int val;
 
     parms = str_parms_create_str(kvpairs);
@@ -567,13 +612,44 @@ static int in_set_parameters(struct audio_stream *stream, const char *kvpairs)
     pthread_mutex_unlock(&adev->lock);
 
     str_parms_destroy(parms);
-    return ret;
+    return status;
 }
 
-static char * in_get_parameters(const struct audio_stream *stream __unused,
-                                const char *keys __unused)
+static char * in_get_parameters(const struct audio_stream *stream,
+                                const char *keys)
 {
-    return strdup("");
+    ALOGV("%s : keys : %s",__func__,keys);
+    struct stream_in *in = (struct stream_in *)stream;
+    struct str_parms *query = str_parms_create_str(keys);
+    char *str = NULL;
+    char value[256];
+    struct str_parms *reply = str_parms_create();
+    int ret;
+
+    ret = str_parms_get_str(query, AUDIO_PARAMETER_STREAM_SUP_FORMATS, value, sizeof(value));
+    if (ret >= 0) {
+        str_parms_add_str(reply, AUDIO_PARAMETER_STREAM_SUP_FORMATS, "AUDIO_FORMAT_PCM_16_BIT");
+        str = strdup(str_parms_to_str(reply));
+    }
+
+    ret = str_parms_get_str(query, AUDIO_PARAMETER_STREAM_SUP_SAMPLING_RATES, value, sizeof(value));
+    if (ret >= 0) {
+        str_parms_add_int(reply, AUDIO_PARAMETER_STREAM_SUP_SAMPLING_RATES, in->req_config.sample_rate);
+        str = strdup(str_parms_to_str(reply));
+    }
+
+    ret = str_parms_get_str(query, AUDIO_PARAMETER_STREAM_SUP_CHANNELS, value, sizeof(value));
+    if (ret >= 0) {
+        str_parms_add_str(reply, AUDIO_PARAMETER_STREAM_SUP_CHANNELS,
+            (in->req_config.channel_mask == AUDIO_CHANNEL_IN_MONO ? "AUDIO_CHANNEL_IN_MONO" : "AUDIO_CHANNEL_IN_STEREO"));
+        str = strdup(str_parms_to_str(reply));
+    }
+
+    str_parms_destroy(query);
+    str_parms_destroy(reply);
+
+    ALOGV("%s : returning keyValuePair %s",__func__, str);
+    return str;
 }
 
 static int in_set_gain(struct audio_stream_in *stream __unused, float gain __unused)
@@ -653,11 +729,14 @@ static int adev_open_output_stream(struct audio_hw_device *dev,
                                    struct audio_stream_out **stream_out,
                                    const char *address __unused)
 {
+    ALOGV("%s : config : [rate %d format %d channels %d]",__func__,
+        config->sample_rate, config->format, popcount(config->channel_mask));
+
     struct audio_device *adev = (struct audio_device *)dev;
     struct stream_out *out;
     struct pcm_params *params;
 
-   int ret;
+    int ret;
 
     ret = system("ls /proc/asound/card0/pcm0p");
 
@@ -699,7 +778,11 @@ static int adev_open_output_stream(struct audio_hw_device *dev,
 
     out->pcm_config = &pcm_config_out;
     out->written = 0;
-    
+
+// VTS : Device doesn't support mono channel or sample_rate other than 48000
+//       make a copy of requested config to feed it back if requested.
+    memcpy(&out->req_config, config, sizeof(struct audio_config));
+
     out->dev = adev;
     out->standby = true;
     out->unavailable = false;
@@ -722,14 +805,29 @@ static void adev_close_output_stream(struct audio_hw_device *dev __unused,
 static int adev_set_parameters(struct audio_hw_device *dev __unused, const char *kvpairs __unused)
 {
     ALOGV("adev_set_parameters");
-    return -ENOSYS;
+    return 0;
 }
 
 static char * adev_get_parameters(const struct audio_hw_device *dev __unused,
-                                  const char *keys __unused)
+                                  const char *keys)
 {
-    ALOGV("adev_get_parameters");
-    return strdup("");
+    ALOGV("%s : keys : %s",__func__,keys);
+    struct str_parms *query = str_parms_create_str(keys);
+    char value[256];
+    int ret;
+
+    ret = str_parms_get_str(query, AUDIO_PARAMETER_STREAM_HW_AV_SYNC, value, sizeof(value));
+    if (ret >= 0) {
+        return NULL;
+    }
+
+    ret = str_parms_get_str(query, AUDIO_PARAMETER_KEY_TTY_MODE, value, sizeof(value));
+    if(ret >= 0) {
+        ALOGE("%s : no support of TTY",__func__);
+        return NULL;
+    }
+    str_parms_destroy(query);
+    return strdup(keys);
 }
 
 static int adev_init_check(const struct audio_hw_device *dev __unused)
@@ -738,10 +836,18 @@ static int adev_init_check(const struct audio_hw_device *dev __unused)
      return 0;
 }
 
-static int adev_set_voice_volume(struct audio_hw_device *dev __unused, float volume __unused)
+//Supported vol range [0:1], return OK for inrange volume request
+static int adev_set_voice_volume(struct audio_hw_device *dev __unused, float volume)
 {
-    ALOGV("adev_set_voice_volume: %f", volume);
-    return -ENOSYS;
+    ALOGV("adev_set_voice_volume: %f : This platform provides no such handling", volume);
+
+    int32_t ret = 0;
+
+    if(volume < 0.0f){
+        ret = -EINVAL;
+    }
+
+    return ret;
 }
 
 static int adev_set_master_volume(struct audio_hw_device *dev __unused, float volume __unused)
@@ -815,11 +921,11 @@ static int adev_open_input_stream(struct audio_hw_device *dev,
                                   audio_source_t source __unused)
 
 {
-    ALOGV("adev_open_input_stream...");
+    ALOGV("%s : config : [rate %d format %d channels %d]",__func__,
+        config->sample_rate, config->format, popcount(config->channel_mask));
 
     struct audio_device *adev = (struct audio_device *)dev;
     struct stream_in *in;
-    int ret;
 
     *stream_in = NULL;
 
@@ -842,12 +948,15 @@ static int adev_open_input_stream(struct audio_hw_device *dev,
     in->stream.set_gain = in_set_gain;
     in->stream.read = in_read;
     in->stream.get_input_frames_lost = in_get_input_frames_lost;
-    in->pcm_config = &pcm_config_in;
 
     in->dev = adev;
     in->standby = true;
     in->pcm_config = &pcm_config_in; /* default PCM config */
 
+// VTS : Device doesn't support mono channel or sample_rate other than 48000
+//       make a copy of requested config to feed it back if requested.
+    memcpy(&in->req_config, config, sizeof(struct audio_config));
+
     *stream_in = &in->stream;
     return 0;
 }
@@ -856,7 +965,6 @@ static void adev_close_input_stream(struct audio_hw_device *dev __unused,
                                    struct audio_stream_in *stream)
 {
     ALOGV("adev_close_input_stream...");
-    struct stream_in *in = (struct stream_in *)stream;
 
     in_standby(&stream->common);
     free(stream);
@@ -868,6 +976,16 @@ static int adev_dump(const audio_hw_device_t *device __unused, int fd __unused)
     return 0;
 }
 
+static int adev_get_microphones(const audio_hw_device_t *device __unused, struct audio_microphone_characteristic_t *mic_array, size_t *actual_mics)
+{
+    ALOGV("%s",__func__);
+    int32_t ret = 0;
+    *actual_mics = 1;
+    memset(&mic_array[0], 0, sizeof(mic_array[0]));
+
+    return ret;
+}
+
 static int adev_close(hw_device_t *device)
 {
     ALOGV("adev_close");
@@ -886,7 +1004,6 @@ static int adev_open(const hw_module_t* module, const char* name,
     ALOGV("adev_open: %s", name);
 
     struct audio_device *adev;
-    int ret;
     int card = 0;
     char mixer_path[PATH_MAX];
 
@@ -918,13 +1035,14 @@ static int adev_open(const hw_module_t* module, const char* name,
     adev->hw_device.open_input_stream = adev_open_input_stream;
     adev->hw_device.close_input_stream = adev_close_input_stream;
     adev->hw_device.dump = adev_dump;
+    adev->hw_device.get_microphones = adev_get_microphones;
 
     sprintf(mixer_path, "/system/etc/mixer_paths_%d.xml", card);
     adev->ar = audio_route_init(card, mixer_path);
     if (!adev->ar) {
         ALOGE("%s: Failed to init audio route controls for card %d, aborting.",
-	      __func__, card);
-	goto error;
+            __func__, card);
+        goto error;
     }
     
     adev->out_device = AUDIO_DEVICE_OUT_SPEAKER;
-- 
2.20.1

