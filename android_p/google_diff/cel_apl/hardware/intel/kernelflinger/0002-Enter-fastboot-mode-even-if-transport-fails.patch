From 80d57caa3d704f2c42868d45e9416784589b6d4b Mon Sep 17 00:00:00 2001
From: Ming Tan <ming.tan@intel.com>
Date: Thu, 15 Nov 2018 14:10:15 +0800
Subject: [PATCH 2/4] Enter fastboot mode even if transport fails

Then can use fastboot menu to enter other modes.

Jira: None.
Test: Test it on KBL NUC and Joule.

Change-Id: I27452271b7ab4bf9a2eea74503e3c3a9eaf9eecc
Signed-off-by: Zhou, Lihua <lihuax.zhou@intel.com>
Signed-off-by: Ming Tan <ming.tan@intel.com>
---
 kernelflinger.c        |  4 +---
 libefiusb/usb.c        | 12 ++++++++++++
 libfastboot/fastboot.c | 25 +++++++++++++++----------
 3 files changed, 28 insertions(+), 13 deletions(-)

diff --git a/kernelflinger.c b/kernelflinger.c
index 680083f..0ea0dee 100644
--- a/kernelflinger.c
+++ b/kernelflinger.c
@@ -1068,10 +1068,8 @@ static VOID enter_fastboot_mode(UINT8 boot_state)
                 target = UNKNOWN_TARGET;
 
                 ret = fastboot_start(&bootimage, &efiimage, &imagesize, &target);
-                if (EFI_ERROR(ret)) {
+                if (EFI_ERROR(ret))
                         efi_perror(ret, L"Fastboot mode failed");
-                        break;
-                }
 
                 if (bootimage) {
                         /* 'fastboot boot' case, only allowed on unlocked devices.
diff --git a/libefiusb/usb.c b/libefiusb/usb.c
index bd9f28e..3e52ec1 100644
--- a/libefiusb/usb.c
+++ b/libefiusb/usb.c
@@ -165,6 +165,9 @@ EFI_STATUS usb_write(void *buf, UINT32 size)
 	EFI_STATUS ret;
 	USB_DEVICE_IO_REQ ioReq;
 
+	if (usb_device == NULL)
+		return EFI_INVALID_PARAMETER;
+
 	ioReq.EndpointInfo.EndpointDesc = &config_descriptor.ep_in;
 	ioReq.EndpointInfo.EndpointCompDesc = NULL;
 	ioReq.IoInfo.Buffer = buf;
@@ -186,6 +189,9 @@ EFI_STATUS usb_read(void *buf, UINT32 size)
 	/* WA: usb device stack doesn't accept rx buffer not multiple of MaxPacketSize */
 	unsigned max_pkt_size = config_descriptor.ep_out.MaxPacketSize;
 
+	if (usb_device == NULL)
+		return EFI_INVALID_PARAMETER;
+
 	size = ALIGN(size, max_pkt_size);
 
 	ioReq.EndpointInfo.EndpointDesc = &config_descriptor.ep_out;
@@ -423,6 +429,9 @@ EFI_STATUS usb_stop(void)
 {
 	EFI_STATUS ret;
 
+	if (usb_device == NULL)
+		return EFI_SUCCESS;
+
 	ret = uefi_call_wrapper(usb_device->Stop, 1, usb_device);
 	if (EFI_ERROR(ret))
 		efi_perror(ret, L"Failed to Stop USB", ret);
@@ -448,5 +457,8 @@ EFI_STATUS usb_stop(void)
 
 EFI_STATUS usb_run(void)
 {
+	if (usb_device == NULL)
+		return EFI_INVALID_PARAMETER;
+
 	return uefi_call_wrapper(usb_device->Run, 2, usb_device, 1);
 }
diff --git a/libfastboot/fastboot.c b/libfastboot/fastboot.c
index ca6d0cb..c6a7991 100644
--- a/libfastboot/fastboot.c
+++ b/libfastboot/fastboot.c
@@ -1348,6 +1348,7 @@ EFI_STATUS fastboot_start(void **bootimage, void **efiimage, UINTN *imagesize,
 			  enum boot_target *target)
 {
 	EFI_STATUS ret;
+	BOOLEAN enable_transport = FALSE;
 #if defined(IOC_USE_SLCAN) || defined(IOC_USE_CBC)
 	EFI_TIME now;
 	UINT64 expiration_time = 0;
@@ -1377,10 +1378,10 @@ EFI_STATUS fastboot_start(void **bootimage, void **efiimage, UINTN *imagesize,
 	ret = transport_start(fastboot_start_callback,
 			      fastboot_process_rx,
 			      fastboot_process_tx);
-	if (EFI_ERROR(ret)) {
+	if (EFI_ERROR(ret))
 		efi_perror(ret, L"Failed to initialize transport layer");
-		goto exit;
-	}
+	else
+		enable_transport = TRUE;
 
 	for (;;) {
 #ifdef USE_UI
@@ -1406,10 +1407,12 @@ EFI_STATUS fastboot_start(void **bootimage, void **efiimage, UINTN *imagesize,
 		 * - retro-compatibility with previous USB device mode
 		 *   protocol implementation;
 		 * - the installer needs to be scheduled; */
-		ret = transport_run();
-		if (EFI_ERROR(ret) && ret != EFI_TIMEOUT) {
-			efi_perror(ret, L"Error occurred during transport run");
-			goto exit;
+		if (enable_transport) {
+			ret = transport_run();
+			if (EFI_ERROR(ret) && ret != EFI_TIMEOUT) {
+				efi_perror(ret, L"Error occurred during transport run");
+				goto exit;
+			}
 		}
 
 		fastboot_run_command();
@@ -1418,9 +1421,11 @@ EFI_STATUS fastboot_start(void **bootimage, void **efiimage, UINTN *imagesize,
 			break;
 	}
 
-	ret = transport_stop();
-	if (EFI_ERROR(ret))
-		goto exit;
+	if (enable_transport) {
+		ret = transport_stop();
+		if (EFI_ERROR(ret))
+			goto exit;
+	}
 
 	if (fastboot_target != UNKNOWN_TARGET)
 		*target = fastboot_target;
-- 
1.9.1

