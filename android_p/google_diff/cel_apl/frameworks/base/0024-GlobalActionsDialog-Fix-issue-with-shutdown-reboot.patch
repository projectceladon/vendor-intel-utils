From b281d19fa97aff0f4bbd4e8988465db494b5d95c Mon Sep 17 00:00:00 2001
From: saranya <saranya.gopal@intel.com>
Date: Thu, 25 Jul 2019 11:27:15 +0530
Subject: [PATCH] GlobalActionsDialog: Fix issue with shutdown/reboot

USB role should be switched back to host mode before
shutdown.

Jira: OAM-71244

Change-Id: I516978bec4e4a446ea6daddeff1bd47c768d6bbe
---
 .../globalactions/GlobalActionsDialog.java    | 23 +++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
index 3e850ddb7fe..1ac8dc788c5 100644
--- a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
@@ -94,6 +94,10 @@ import com.android.systemui.statusbar.phone.ScrimController;
 import com.android.systemui.util.EmergencyDialerConstants;
 import com.android.systemui.volume.SystemUIInterpolators.LogAccelerateInterpolator;
 
+import java.io.File;
+import java.io.FileWriter;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -129,6 +133,9 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
     private static final String GLOBAL_ACTION_KEY_LOGOUT = "logout";
     private static final String GLOBAL_ACTION_KEY_EMERGENCY = "emergency";
     private static final String GLOBAL_ACTION_KEY_SCREENSHOT = "screenshot";
+    private static final String ROLE_PATH =
+            "/sys/class/usb_role/intel_xhci_usb_sw-role-switch/role";
+    private static final String ROLE_HOST = "host";
 
     private final Context mContext;
     private final GlobalActionsManager mWindowManagerFuncs;
@@ -227,6 +234,18 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         mHandler.sendEmptyMessage(MESSAGE_DISMISS);
     }
 
+    public void writeSysfs(String path, String val) {
+        FileWriter fw = null;
+        try {
+            fw = new FileWriter(path);
+            fw.write(val);
+            fw.flush();
+            fw.close();
+        } catch (IOException e) {
+            Log.e(TAG, "writeSysfs failed exception:" + e);
+        }
+    }
+
     private void awakenIfNecessary() {
         if (mDreamManager != null) {
             try {
@@ -430,6 +449,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         public boolean onLongPress() {
             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
+                writeSysfs(ROLE_PATH, ROLE_HOST);
                 mWindowManagerFuncs.reboot(true);
                 return true;
             }
@@ -449,6 +469,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         @Override
         public void onPress() {
             // shutdown by making sure radio and power are handled accordingly.
+            writeSysfs(ROLE_PATH, ROLE_HOST);
             mWindowManagerFuncs.shutdown();
         }
     }
@@ -489,6 +510,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         public boolean onLongPress() {
             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
+                writeSysfs(ROLE_PATH, ROLE_HOST);
                 mWindowManagerFuncs.reboot(true);
                 return true;
             }
@@ -507,6 +529,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
 
         @Override
         public void onPress() {
+            writeSysfs(ROLE_PATH, ROLE_HOST);
             mWindowManagerFuncs.reboot(false);
         }
     }
-- 
2.22.0

