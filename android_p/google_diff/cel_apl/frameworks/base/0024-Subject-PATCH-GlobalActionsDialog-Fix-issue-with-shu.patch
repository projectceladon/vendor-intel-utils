From 4b59a4823a30410efe40c6e682d8727d7c2c8493 Mon Sep 17 00:00:00 2001
From: saranya <saranya.gopal@intel.com>
Date: Mon, 30 Sep 2019 18:27:17 +0530
Subject: [PATCH] GlobalActionsDialog: Fix issue with  shutdown/reboot

USB role should be switched back to host mode before
shutdown.

Tracked-On: OAM-86905
Signed-off-by: rnaidu <ramya.v.naidu@intel.com>
---
 .../globalactions/GlobalActionsDialog.java    | 24 +++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
index b117f96f359..1a6302b9a8a 100644
--- a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
@@ -97,6 +97,10 @@ import com.android.systemui.plugins.GlobalActions.GlobalActionsManager;
 import com.android.systemui.statusbar.phone.ScrimController;
 import com.android.systemui.volume.SystemUIInterpolators.LogAccelerateInterpolator;
 
+import java.io.File;
+import java.io.FileWriter;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -131,6 +135,10 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
     private static final String GLOBAL_ACTION_KEY_SLEEP = "sleep";
     private static final String GLOBAL_ACTION_KEY_LOGOUT = "logout";
     private static final String GLOBAL_ACTION_KEY_SCREENSHOT = "screenshot";
+    private static final String ROLE_PATH =
+            "/sys/class/usb_role/intel_xhci_usb_sw-role-switch/role";
+    private static final String ROLE_HOST = "host";
+
 
     private final Context mContext;
     private final GlobalActionsManager mWindowManagerFuncs;
@@ -227,6 +235,18 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         mHandler.removeMessages(MESSAGE_DISMISS);
         mHandler.sendEmptyMessage(MESSAGE_DISMISS);
     }
+    public void writeSysfs(String path, String val) {
+        FileWriter fw = null;
+        try {
+            fw = new FileWriter(path);
+            fw.write(val);
+            fw.flush();
+            fw.close();
+        } catch (IOException e) {
+            Log.e(TAG, "writeSysfs failed exception:" + e);
+        }
+    }
+
 
     private void awakenIfNecessary() {
         if (mDreamManager != null) {
@@ -423,6 +443,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         public boolean onLongPress() {
             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
+		writeSysfs(ROLE_PATH, ROLE_HOST);
                 mWindowManagerFuncs.reboot(true);
                 return true;
             }
@@ -442,6 +463,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         @Override
         public void onPress() {
             // shutdown by making sure radio and power are handled accordingly.
+            writeSysfs(ROLE_PATH, ROLE_HOST);
             mWindowManagerFuncs.shutdown();
         }
     }
@@ -455,6 +477,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
         public boolean onLongPress() {
             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
+		writeSysfs(ROLE_PATH, ROLE_HOST);
                 mWindowManagerFuncs.reboot(true);
                 return true;
             }
@@ -473,6 +496,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
 
         @Override
         public void onPress() {
+            writeSysfs(ROLE_PATH, ROLE_HOST);
             mWindowManagerFuncs.reboot(false);
         }
     }
-- 
2.22.0

