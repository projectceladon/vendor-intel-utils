From b205d5eb6a9599c700a27d75a379ae18251fbd8b Mon Sep 17 00:00:00 2001
From: Yan, Shaopu <shaopu.yan@intel.com>
Date: Fri, 27 Jul 2018 09:43:35 +0800
Subject: [PATCH] fix the issue of invalid type transfer for client_id

details:
from the caller in KeymasterPassthroughKey::formatted_key_material it pass
the client_id and app_data params as a reference for "KeymasterBlob" type,
which will always be a non-NULL pointer, then the unexpected behavior
happens in trusty, the keyblob will be parsed failed.

Change-Id: I9e8aee666081eaaddbcf65d48a73bd4e4d0c238c
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-67182
Signed-off-by: Yan, Shaopu <shaopu.yan@intel.com>
---

diff --git a/include/keymaster/legacy_support/keymaster_passthrough_engine.h b/include/keymaster/legacy_support/keymaster_passthrough_engine.h
index a986ffe..cba89f3 100644
--- a/include/keymaster/legacy_support/keymaster_passthrough_engine.h
+++ b/include/keymaster/legacy_support/keymaster_passthrough_engine.h
@@ -51,8 +51,8 @@
                                 AuthorizationSet* sw_enforced) const = 0;
     virtual keymaster_error_t ExportKey(keymaster_key_format_t format,
             const KeymasterKeyBlob& blob,
-            const KeymasterBlob& client_id,
-            const KeymasterBlob& app_data,
+            const KeymasterBlob* client_id,
+            const KeymasterBlob* app_data,
             KeymasterBlob* export_data) const = 0;
     virtual keymaster_error_t DeleteKey(const KeymasterKeyBlob& blob) const = 0;
     virtual keymaster_error_t DeleteAllKeys() const = 0;
diff --git a/legacy_support/keymaster_passthrough_engine.cpp b/legacy_support/keymaster_passthrough_engine.cpp
index 7aa8908..b384abb 100644
--- a/legacy_support/keymaster_passthrough_engine.cpp
+++ b/legacy_support/keymaster_passthrough_engine.cpp
@@ -93,12 +93,12 @@
                                 AuthorizationSet* sw_enforced) const override;
     keymaster_error_t ExportKey(keymaster_key_format_t format,
                                 const KeymasterKeyBlob& blob,
-                                const KeymasterBlob& client_id,
-                                const KeymasterBlob& app_data,
+                                const KeymasterBlob* client_id,
+                                const KeymasterBlob* app_data,
                                 KeymasterBlob* export_data) const override {
         keymaster_blob_t my_export_data = {};
-        keymaster_error_t error = km_device_->export_key(km_device_, format, &blob, &client_id,
-                                                         &app_data, &my_export_data);
+        keymaster_error_t error = km_device_->export_key(km_device_, format, &blob, client_id,
+                                                         app_data, &my_export_data);
         if (error != KM_ERROR_OK)
             return error;
         *export_data = KeymasterBlob(my_export_data.data, my_export_data.data_length);
diff --git a/legacy_support/keymaster_passthrough_key.cpp b/legacy_support/keymaster_passthrough_key.cpp
index f8d8f62..89d9f88 100644
--- a/legacy_support/keymaster_passthrough_key.cpp
+++ b/legacy_support/keymaster_passthrough_key.cpp
@@ -58,20 +58,22 @@
         return KM_ERROR_OUTPUT_PARAMETER_NULL;
     }
     keymaster_blob_t km_app_data = {};
-    KeymasterBlob app_data;
+    KeymasterBlob* app_data_ptr = nullptr;
     if (additional_parameters_.GetTagValue(TAG_APPLICATION_DATA, &km_app_data)) {
-        app_data = KeymasterBlob(km_app_data);
+        KeymasterBlob app_data = KeymasterBlob(km_app_data);
+        app_data_ptr = &app_data;
     }
 
     keymaster_blob_t km_client_id = {};
-    KeymasterBlob client_id;
+    KeymasterBlob* client_id_ptr = nullptr;
     if (additional_parameters_.GetTagValue(TAG_APPLICATION_ID, &km_client_id)) {
-        client_id = KeymasterBlob(km_client_id);
+        KeymasterBlob client_id = KeymasterBlob(km_client_id);
+        client_id_ptr = &client_id;
     }
 
     KeymasterBlob export_data;
 
-    keymaster_error_t error = engine_->ExportKey(format, key_material(), client_id, app_data,
+    keymaster_error_t error = engine_->ExportKey(format, key_material(), client_id_ptr, app_data_ptr,
                                                  &export_data);
     if (error == KM_ERROR_OK) {
         keymaster_blob_t export_blob = export_data.release();
