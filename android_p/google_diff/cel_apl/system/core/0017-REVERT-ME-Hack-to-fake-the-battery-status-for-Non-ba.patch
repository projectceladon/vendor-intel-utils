From 7626bdcfca7acb55ec91af2db779f21ecd31e843 Mon Sep 17 00:00:00 2001
From: ysiyer <yegnesh.s.iyer@intel.com>
Date: Thu, 8 Nov 2018 15:15:46 +0530
Subject: [PATCH] REVERT-ME: Hack to fake the battery status for Non-battery
 operated devices

Tracked-On:
Signed-off-by: ysiyer <yegnesh.s.iyer@intel.com>
---
 healthd/BatteryMonitor.cpp               | 166 ++++++++++++++++++-------------
 healthd/include/healthd/BatteryMonitor.h |   1 +
 2 files changed, 97 insertions(+), 70 deletions(-)

diff --git a/healthd/BatteryMonitor.cpp b/healthd/BatteryMonitor.cpp
index 80c5afe..68f5f7c 100644
--- a/healthd/BatteryMonitor.cpp
+++ b/healthd/BatteryMonitor.cpp
@@ -83,6 +83,7 @@ static void initBatteryProperties(BatteryProperties* props) {
 BatteryMonitor::BatteryMonitor()
     : mHealthdConfig(nullptr),
       mBatteryDevicePresent(false),
+      mAlwaysPluggedDevice(false),
       mBatteryFixedCapacity(0),
       mBatteryFixedTemperature(0) {
     initBatteryProperties(&props);
@@ -203,88 +204,108 @@ bool BatteryMonitor::update(void) {
 
     initBatteryProperties(&props);
 
-    if (!mHealthdConfig->batteryPresentPath.isEmpty())
-        props.batteryPresent = getBooleanField(mHealthdConfig->batteryPresentPath);
-    else
-        props.batteryPresent = mBatteryDevicePresent;
+    if (mAlwaysPluggedDevice) {
+        props.chargerAcOnline = true;
+        props.chargerUsbOnline = false;
+        props.chargerWirelessOnline = false;
+        props.maxChargingCurrent = 4000;
+        props.maxChargingVoltage = 19000;
+        props.batteryStatus = BATTERY_STATUS_CHARGING;
+        props.batteryHealth = BATTERY_HEALTH_GOOD;
+        props.batteryPresent = true;
+        props.batteryLevel = 100;
+        props.batteryVoltage = 19000;
+        props.batteryTemperature = 25;
+        props.batteryCurrent = 3000;
+        props.batteryCycleCount = 100;
+        props.batteryFullCharge = 4200;
+        props.batteryChargeCounter = 1000;
+        props.batteryTechnology = "Li-on";
+    } else {
 
-    props.batteryLevel = mBatteryFixedCapacity ?
-        mBatteryFixedCapacity :
-        getIntField(mHealthdConfig->batteryCapacityPath);
-    props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
+        if (!mHealthdConfig->batteryPresentPath.isEmpty())
+            props.batteryPresent = getBooleanField(mHealthdConfig->batteryPresentPath);
+        else
+            props.batteryPresent = mBatteryDevicePresent;
 
-    if (!mHealthdConfig->batteryCurrentNowPath.isEmpty())
-        props.batteryCurrent = getIntField(mHealthdConfig->batteryCurrentNowPath) / 1000;
+        props.batteryLevel = mBatteryFixedCapacity ?
+            mBatteryFixedCapacity :
+            getIntField(mHealthdConfig->batteryCapacityPath);
+        props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
 
-    if (!mHealthdConfig->batteryFullChargePath.isEmpty())
-        props.batteryFullCharge = getIntField(mHealthdConfig->batteryFullChargePath);
+        if (!mHealthdConfig->batteryCurrentNowPath.isEmpty())
+            props.batteryCurrent = getIntField(mHealthdConfig->batteryCurrentNowPath) / 1000;
 
-    if (!mHealthdConfig->batteryCycleCountPath.isEmpty())
-        props.batteryCycleCount = getIntField(mHealthdConfig->batteryCycleCountPath);
+        if (!mHealthdConfig->batteryFullChargePath.isEmpty())
+            props.batteryFullCharge = getIntField(mHealthdConfig->batteryFullChargePath);
 
-    if (!mHealthdConfig->batteryChargeCounterPath.isEmpty())
-        props.batteryChargeCounter = getIntField(mHealthdConfig->batteryChargeCounterPath);
+        if (!mHealthdConfig->batteryCycleCountPath.isEmpty())
+            props.batteryCycleCount = getIntField(mHealthdConfig->batteryCycleCountPath);
 
-    props.batteryTemperature = mBatteryFixedTemperature ?
-        mBatteryFixedTemperature :
-        getIntField(mHealthdConfig->batteryTemperaturePath);
+        if (!mHealthdConfig->batteryChargeCounterPath.isEmpty())
+            props.batteryChargeCounter = getIntField(mHealthdConfig->batteryChargeCounterPath);
 
-    std::string buf;
+        props.batteryTemperature = mBatteryFixedTemperature ?
+            mBatteryFixedTemperature :
+            getIntField(mHealthdConfig->batteryTemperaturePath);
 
-    if (readFromFile(mHealthdConfig->batteryStatusPath, &buf) > 0)
-        props.batteryStatus = getBatteryStatus(buf.c_str());
+        std::string buf;
 
-    if (readFromFile(mHealthdConfig->batteryHealthPath, &buf) > 0)
-        props.batteryHealth = getBatteryHealth(buf.c_str());
+        if (readFromFile(mHealthdConfig->batteryStatusPath, &buf) > 0)
+            props.batteryStatus = getBatteryStatus(buf.c_str());
 
-    if (readFromFile(mHealthdConfig->batteryTechnologyPath, &buf) > 0)
-        props.batteryTechnology = String8(buf.c_str());
+        if (readFromFile(mHealthdConfig->batteryHealthPath, &buf) > 0)
+            props.batteryHealth = getBatteryHealth(buf.c_str());
 
-    unsigned int i;
-    double MaxPower = 0;
+        if (readFromFile(mHealthdConfig->batteryTechnologyPath, &buf) > 0)
+            props.batteryTechnology = String8(buf.c_str());
 
-    for (i = 0; i < mChargerNames.size(); i++) {
-        String8 path;
-        path.appendFormat("%s/%s/online", POWER_SUPPLY_SYSFS_PATH,
-                          mChargerNames[i].string());
-        if (getIntField(path)) {
-            path.clear();
-            path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH,
-                              mChargerNames[i].string());
-            switch(readPowerSupplyType(path)) {
-            case ANDROID_POWER_SUPPLY_TYPE_AC:
-                props.chargerAcOnline = true;
-                break;
-            case ANDROID_POWER_SUPPLY_TYPE_USB:
-                props.chargerUsbOnline = true;
-                break;
-            case ANDROID_POWER_SUPPLY_TYPE_WIRELESS:
-                props.chargerWirelessOnline = true;
-                break;
-            default:
-                KLOG_WARNING(LOG_TAG, "%s: Unknown power supply type\n",
-                             mChargerNames[i].string());
-            }
-            path.clear();
-            path.appendFormat("%s/%s/current_max", POWER_SUPPLY_SYSFS_PATH,
-                              mChargerNames[i].string());
-            int ChargingCurrent =
-                    (access(path.string(), R_OK) == 0) ? getIntField(path) : 0;
+        unsigned int i;
+        double MaxPower = 0;
 
-            path.clear();
-            path.appendFormat("%s/%s/voltage_max", POWER_SUPPLY_SYSFS_PATH,
-                              mChargerNames[i].string());
-
-            int ChargingVoltage =
-                (access(path.string(), R_OK) == 0) ? getIntField(path) :
-                DEFAULT_VBUS_VOLTAGE;
-
-            double power = ((double)ChargingCurrent / MILLION) *
-                           ((double)ChargingVoltage / MILLION);
-            if (MaxPower < power) {
-                props.maxChargingCurrent = ChargingCurrent;
-                props.maxChargingVoltage = ChargingVoltage;
-                MaxPower = power;
+        for (i = 0; i < mChargerNames.size(); i++) {
+            String8 path;
+            path.appendFormat("%s/%s/online", POWER_SUPPLY_SYSFS_PATH,
+                                  mChargerNames[i].string());
+            if (getIntField(path)) {
+                path.clear();
+                path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH,
+                                      mChargerNames[i].string());
+                switch(readPowerSupplyType(path)) {
+                case ANDROID_POWER_SUPPLY_TYPE_AC:
+                    props.chargerAcOnline = true;
+                    break;
+                case ANDROID_POWER_SUPPLY_TYPE_USB:
+                    props.chargerUsbOnline = true;
+                    break;
+                case ANDROID_POWER_SUPPLY_TYPE_WIRELESS:
+                    props.chargerWirelessOnline = true;
+                    break;
+                default:
+                    KLOG_WARNING(LOG_TAG, "%s: Unknown power supply type\n",
+                                 mChargerNames[i].string());
+                }
+                path.clear();
+                path.appendFormat("%s/%s/current_max", POWER_SUPPLY_SYSFS_PATH,
+                                  mChargerNames[i].string());
+                int ChargingCurrent =
+                        (access(path.string(), R_OK) == 0) ? getIntField(path) : 0;
+
+                path.clear();
+                path.appendFormat("%s/%s/voltage_max", POWER_SUPPLY_SYSFS_PATH,
+                                  mChargerNames[i].string());
+
+                int ChargingVoltage =
+                    (access(path.string(), R_OK) == 0) ? getIntField(path) :
+                    DEFAULT_VBUS_VOLTAGE;
+
+                double power = ((double)ChargingCurrent / MILLION) *
+                               ((double)ChargingVoltage / MILLION);
+                if (MaxPower < power) {
+                    props.maxChargingCurrent = ChargingCurrent;
+                    props.maxChargingVoltage = ChargingVoltage;
+                    MaxPower = power;
+                }
             }
         }
     }
@@ -402,7 +423,11 @@ status_t BatteryMonitor::getProperty(int id, struct BatteryProperty *val) {
         break;
 
     case BATTERY_PROP_BATTERY_STATUS:
-        val->valueInt64 = getChargeStatus();
+        if (mAlwaysPluggedDevice) {
+            val->valueInt64 = BATTERY_STATUS_CHARGING;
+        } else {
+            val->valueInt64 = getChargeStatus();
+        }
         ret = NO_ERROR;
         break;
 
@@ -609,6 +634,7 @@ void BatteryMonitor::init(struct healthd_config *hc) {
         KLOG_WARNING(LOG_TAG, "No battery devices found\n");
         hc->periodic_chores_interval_fast = -1;
         hc->periodic_chores_interval_slow = -1;
+        mAlwaysPluggedDevice = true;
     } else {
         if (mHealthdConfig->batteryStatusPath.isEmpty())
             KLOG_WARNING(LOG_TAG, "BatteryStatusPath not found\n");
diff --git a/healthd/include/healthd/BatteryMonitor.h b/healthd/include/healthd/BatteryMonitor.h
index 4d1d53f..b6a1b66 100644
--- a/healthd/include/healthd/BatteryMonitor.h
+++ b/healthd/include/healthd/BatteryMonitor.h
@@ -48,6 +48,7 @@ class BatteryMonitor {
     struct healthd_config *mHealthdConfig;
     Vector<String8> mChargerNames;
     bool mBatteryDevicePresent;
+    bool mAlwaysPluggedDevice;
     int mBatteryFixedCapacity;
     int mBatteryFixedTemperature;
     struct BatteryProperties props;
-- 
2.7.4

