From c269df81c3e6099f9e873d664d8351e2052f0ce1 Mon Sep 17 00:00:00 2001
From: Balaji <m.balaji@intel.com>
Date: Tue, 20 Aug 2019 06:39:52 -0400
Subject: [PATCH] Fix for adb dbc offline issue

Adb daemon doesnt know about dbc disconnect and connect.hence offline
issue occurs when replug.Changes made usb device manager to receive
usb dbc event from kernel and restart adb daemon.

Tracked-On: OAM-84514
Signed-off-by: Balaji <m.balaji@intel.com>
---
 .../android/server/usb/UsbDeviceManager.java  | 23 ++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

diff --git a/services/usb/java/com/android/server/usb/UsbDeviceManager.java b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
index 2ce44222974..368dd4ceedc 100644
--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java
+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
@@ -119,6 +119,9 @@ public class UsbDeviceManager implements ActivityManagerInternal.ScreenObserver
      */
     private static final String NORMAL_BOOT = "normal";
 
+    private static final String USB_DBC_STATE_MATCH =
+            "SUBSYSTEM=pci";
+
     private static final String USB_STATE_MATCH =
             "DEVPATH=/devices/virtual/android_usb/android0";
     private static final String ACCESSORY_START_MATCH =
@@ -365,6 +368,7 @@ public class UsbDeviceManager implements ActivityManagerInternal.ScreenObserver
         mUEventObserver = new UsbUEventObserver();
         mUEventObserver.startObserving(USB_STATE_MATCH);
         mUEventObserver.startObserving(ACCESSORY_START_MATCH);
+	mUEventObserver.startObserving(USB_DBC_STATE_MATCH);
 
         // register observer to listen for settings changes
         mContentResolver.registerContentObserver(
@@ -460,6 +464,7 @@ public class UsbDeviceManager implements ActivityManagerInternal.ScreenObserver
 
         // current USB state
         private boolean mConnected;
+	private boolean mDbcConnected;
         private boolean mHostConnected;
         private boolean mSourcePower;
         private boolean mSinkPower;
@@ -596,6 +601,9 @@ public class UsbDeviceManager implements ActivityManagerInternal.ScreenObserver
             } else if ("CONFIGURED".equals(state)) {
                 connected = 1;
                 configured = 1;
+            } else if ("DBCCONNECTED".equals(state)) {
+                connected = 2;
+                configured = 1;
             } else {
                 Slog.e(TAG, "unknown state " + state);
                 return;
@@ -803,11 +811,19 @@ public class UsbDeviceManager implements ActivityManagerInternal.ScreenObserver
 
         @Override
         public void handleMessage(Message msg) {
+
+	final String ADBD = "adbd";
+	final String CTL_START = "ctl.start";
+	final String CTL_STOP = "ctl.stop";
+
             switch (msg.what) {
                 case MSG_UPDATE_STATE:
                     mConnected = (msg.arg1 == 1);
                     mConfigured = (msg.arg2 == 1);
-
+                    if (msg.arg1==2) {
+			mConnected = (msg.arg1==2);
+			mDbcConnected = (msg.arg1==2);
+		    }
                     updateUsbNotification(false);
                     updateAdbNotification(false);
                     if (mBootCompleted) {
@@ -831,6 +847,11 @@ public class UsbDeviceManager implements ActivityManagerInternal.ScreenObserver
                     } else {
                         mPendingBootBroadcast = true;
                     }
+                    if (mDbcConnected) {
+			setSystemProperty("sys.usb.controller","none");
+                        setSystemProperty(CTL_STOP, ADBD);
+			setSystemProperty(CTL_START, ADBD);
+		    }
                     break;
                 case MSG_UPDATE_PORT_STATE:
                     SomeArgs args = (SomeArgs) msg.obj;
-- 
2.17.1

