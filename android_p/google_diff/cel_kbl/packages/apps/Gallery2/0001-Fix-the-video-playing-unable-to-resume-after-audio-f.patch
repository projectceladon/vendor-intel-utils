From a89be29fe5ea0996f5ebf2657a8b84dc2f469147 Mon Sep 17 00:00:00 2001
From: "Yan, WalterX" <walterx.yan@intel.com>
Date: Wed, 16 Jan 2019 15:24:20 +0800
Subject: [PATCH] Fix the video playing unable to resume after audio focus
 lost.

Move the handling of audio focus from activity to player.

Change-Id: Iee2e000a55e0183795a629cec0772ca5afdea5d0
Tracked-On: OAM-75066
Signed-off-by: Yan, WalterX <walterx.yan@intel.com>
---
 src/com/android/gallery3d/app/MovieActivity.java |  6 -----
 src/com/android/gallery3d/app/MoviePlayer.java   | 34 +++++++++++++++++++++++-
 2 files changed, 33 insertions(+), 7 deletions(-)

diff --git a/src/com/android/gallery3d/app/MovieActivity.java b/src/com/android/gallery3d/app/MovieActivity.java
index 1547f6f..8c771b5 100644
--- a/src/com/android/gallery3d/app/MovieActivity.java
+++ b/src/com/android/gallery3d/app/MovieActivity.java
@@ -26,7 +26,6 @@ import android.content.pm.ActivityInfo;
 import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
-import android.media.AudioManager;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
@@ -212,16 +211,11 @@ public class MovieActivity extends Activity {
 
     @Override
     public void onStart() {
-        ((AudioManager) getSystemService(AUDIO_SERVICE))
-                .requestAudioFocus(null, AudioManager.STREAM_MUSIC,
-                AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);
         super.onStart();
     }
 
     @Override
     protected void onStop() {
-        ((AudioManager) getSystemService(AUDIO_SERVICE))
-                .abandonAudioFocus(null);
         super.onStop();
     }
 
diff --git a/src/com/android/gallery3d/app/MoviePlayer.java b/src/com/android/gallery3d/app/MoviePlayer.java
index f6bd367..84adcee 100644
--- a/src/com/android/gallery3d/app/MoviePlayer.java
+++ b/src/com/android/gallery3d/app/MoviePlayer.java
@@ -94,6 +94,7 @@ public class MoviePlayer implements
 
     // If the time bar is visible.
     private boolean mShowing;
+    private boolean mPrepared = false;
 
     private Virtualizer mVirtualizer;
 
@@ -121,6 +122,7 @@ public class MoviePlayer implements
         mContext = movieActivity.getApplicationContext();
         mRootView = rootView;
         mVideoView = (VideoView) rootView.findViewById(R.id.surface_view);
+        mVideoView.setAudioFocusRequest(AudioManager.AUDIOFOCUS_NONE);
         mBookmarker = new Bookmarker(movieActivity);
         mUri = videoUri;
 
@@ -154,6 +156,7 @@ public class MoviePlayer implements
         mVideoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
             @Override
             public void onPrepared(MediaPlayer player) {
+                mPrepared = true;
                 if (!mVideoView.canSeekForward() || !mVideoView.canSeekBackward()) {
                     mController.setSeekable(false);
                 } else {
@@ -277,14 +280,18 @@ public class MoviePlayer implements
     public void onPause() {
         mHasPaused = true;
         mHandler.removeCallbacksAndMessages(null);
-        mVideoPosition = mVideoView.getCurrentPosition();
+        if (mPrepared) {
+            mVideoPosition = mVideoView.getCurrentPosition();
+        }
         mBookmarker.setBookmark(mUri, mVideoPosition, mVideoView.getDuration());
         mVideoView.suspend();
+        mPrepared = false;
         mResumeableTime = System.currentTimeMillis() + RESUMEABLE_TIMEOUT;
     }
 
     public void onResume() {
         if (mHasPaused) {
+            requestAudioFocus();
             mVideoView.seekTo(mVideoPosition);
             mVideoView.resume();
 
@@ -303,6 +310,7 @@ public class MoviePlayer implements
         }
         mVideoView.stopPlayback();
         mAudioBecomingNoisyReceiver.unregister();
+        abandonAudioFocus();
     }
 
     // This updates the time bar display (if necessary). It is called every
@@ -319,6 +327,7 @@ public class MoviePlayer implements
     }
 
     private void startVideo() {
+        requestAudioFocus();
         // For streams that we expect to be slow to start up, show a
         // progress spinner until playback starts.
         String scheme = mUri.getScheme();
@@ -336,6 +345,7 @@ public class MoviePlayer implements
     }
 
     private void playVideo() {
+        requestAudioFocus();
         mVideoView.start();
         mController.showPlaying();
         setProgress();
@@ -476,6 +486,28 @@ public class MoviePlayer implements
             if (mVideoView.isPlaying()) pauseVideo();
         }
     }
+
+    private final AudioManager.OnAudioFocusChangeListener mAudioFocusListener =
+        new AudioManager.OnAudioFocusChangeListener() {
+            @Override
+            public void onAudioFocusChange(int focusChange) {
+                if (focusChange == AudioManager.AUDIOFOCUS_LOSS
+                        && mVideoView.isPlaying()) {
+                    pauseVideo();        
+                }
+            }
+    };
+
+    private void requestAudioFocus() {
+        ((AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE))
+                .requestAudioFocus(mAudioFocusListener, AudioManager.STREAM_MUSIC,
+                AudioManager.AUDIOFOCUS_GAIN);
+    }
+
+    private void abandonAudioFocus() {
+        ((AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE))
+                .abandonAudioFocus(mAudioFocusListener);
+    }
 }
 
 class Bookmarker {
-- 
1.9.1

