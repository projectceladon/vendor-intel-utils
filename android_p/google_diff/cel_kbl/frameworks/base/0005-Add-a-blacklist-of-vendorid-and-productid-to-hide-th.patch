From 6c0586c20bbd74673e88c3d44703db8f577d8a03 Mon Sep 17 00:00:00 2001
From: "Yan, WalterX" <walterx.yan@intel.com>
Date: Tue, 7 Aug 2018 12:55:01 +0530
Subject: [PATCH 5/6] Add a blacklist of vendorid and productid to hide the usb
 device

Hide the dedicated BT usb device to avoid apps reading it.

Tracked-On: None

Signed-off-by: Yan, WalterX <walterx.yan@intel.com>
Signed-off-by: Amrita Raju <amrita.raju@intel.com>
---
 .../android/server/usb/UsbHostManager.java    | 38 ++++++++++++++++---
 1 file changed, 33 insertions(+), 5 deletions(-)

diff --git a/services/usb/java/com/android/server/usb/UsbHostManager.java b/services/usb/java/com/android/server/usb/UsbHostManager.java
index 67ad0907..55f996e1 100644
--- a/services/usb/java/com/android/server/usb/UsbHostManager.java
+++ b/services/usb/java/com/android/server/usb/UsbHostManager.java
@@ -223,7 +223,19 @@ public class UsbHostManager {
             }
         }
     }
-
+    private static class VendorIdProductId {
+            public VendorIdProductId(int venderId, int productId) {
+                 VendorId  = venderId;
+                 ProductId = productId;
+           }
+           public int VendorId;
+           public int ProductId;
+     }
+    //TODO: move the ids to the config of platform
+    private VendorIdProductId[] mVidPidBlackList = {
+             new VendorIdProductId(0x8087,0x0a2b),
+             new VendorIdProductId(0x8087,0x0aa7), //dedicated for BT in Celadon
+    };
     /*
      * UsbHostManager
      */
@@ -278,14 +290,23 @@ public class UsbHostManager {
     }
 
     /* returns true if the USB device should not be accessible by applications */
-    private boolean isBlackListed(int clazz, int subClass) {
+    private boolean isBlackListed(int clazz, int subClass, int vendorID, int productID) {
         // blacklist hubs
         if (clazz == UsbConstants.USB_CLASS_HUB) return true;
 
         // blacklist HID boot devices (mouse and keyboard)
-        return clazz == UsbConstants.USB_CLASS_HID
-                && subClass == UsbConstants.USB_INTERFACE_SUBCLASS_BOOT;
+       if (clazz == UsbConstants.USB_CLASS_HID && subClass == UsbConstants.USB_INTERFACE_SUBCLASS_BOOT){
+         return true;
+       }
+        //blacklist vendor id & product id devices
+        for (VendorIdProductId id : mVidPidBlackList) {
+            if (id.VendorId == vendorID
+                    && id.ProductId == productID) {
+                return true;
+            }
 
+        }
+        return false;
     }
 
     private void addConnectionRecord(String deviceAddress, int mode, byte[] rawDescriptors) {
@@ -342,6 +363,8 @@ public class UsbHostManager {
     @SuppressWarnings("unused")
     private boolean usbDeviceAdded(String deviceAddress, int deviceClass, int deviceSubclass,
             byte[] descriptors) {
+        int vendorId = 0;
+        int productId = 0;
         if (DEBUG) {
             Slog.d(TAG, "usbDeviceAdded(" + deviceAddress + ") - start");
         }
@@ -355,7 +378,12 @@ public class UsbHostManager {
         UsbDescriptorParser parser = new UsbDescriptorParser(deviceAddress, descriptors);
         logUsbDevice(parser);
 
-        if (isBlackListed(deviceClass, deviceSubclass)) {
+        UsbDeviceDescriptor deviceDescriptor = parser.getDeviceDescriptor();
+        if (deviceDescriptor != null) {
+            vendorId  = deviceDescriptor.getVendorID();
+            productId = deviceDescriptor.getProductID();
+        }
+        if (isBlackListed(deviceClass, deviceSubclass, vendorId, productId)) {
             if (DEBUG) {
                 Slog.d(TAG, "device class is black listed");
             }
-- 
2.17.1

