From 7f2ddd732127ff4b3a9138f8fbe7674666cd5339 Mon Sep 17 00:00:00 2001
From: Prabhat Chand Pandey <prabhat.chand.pandey@intel.com>
Date: Fri, 21 Jun 2019 15:39:22 +0530
Subject: [PATCH] usb: dbc: adb root

Change-Id: I027be46329908be06cba1b8e6a4e53ad06e34ada
Tracked-On:
Signed-off-by: Prabhat Chand Pandey <prabhat.chand.pandey@intel.com>
---
 drivers/usb/host/xhci-dbgcap.c   | 15 +++++++++++++++
 drivers/usb/host/xhci-dbgcap.h   |  3 ++-
 drivers/usb/host/xhci-dbgraw.c   | 24 ++++++++++++++++++++++++
 include/linux/usb/xhcidbc.h      |  8 ++++++++
 include/uapi/linux/usb/xhcidbc.h | 11 +++++++++++
 5 files changed, 60 insertions(+), 1 deletion(-)
 create mode 100644 include/linux/usb/xhcidbc.h
 create mode 100644 include/uapi/linux/usb/xhcidbc.h

diff --git a/drivers/usb/host/xhci-dbgcap.c b/drivers/usb/host/xhci-dbgcap.c
index 08c31b4..41cd7dd 100644
--- a/drivers/usb/host/xhci-dbgcap.c
+++ b/drivers/usb/host/xhci-dbgcap.c
@@ -170,6 +170,8 @@ static void xhci_dbc_flush_single_request(struct dbc_request *req)
 {
 	union xhci_trb	*trb = req->trb;
 
+	printk("PRABHAT: %s\n",__func__);
+
 	trb->generic.field[0]	= 0;
 	trb->generic.field[1]	= 0;
 	trb->generic.field[2]	= 0;
@@ -219,6 +221,7 @@ void
 dbc_free_request(struct dbc_ep *dep, struct dbc_request *req)
 {
 	trace_xhci_dbc_free_request(req);
+	printk("PRABHAT: %s\n",__func__);
 
 	kfree(req);
 }
@@ -514,6 +517,7 @@ static int xhci_do_dbc_stop(struct xhci_hcd *xhci)
 {
 	struct xhci_dbc		*dbc = xhci->dbc;
 
+	printk("PRABHAT: %s\n",__func__);
 	if (dbc->state == DS_DISABLED)
 		return -1;
 
@@ -531,6 +535,7 @@ static int xhci_dbc_start(struct xhci_hcd *xhci)
 
 	WARN_ON(!dbc);
 
+	printk("PRABHAT: %s\n",__func__);
 	pm_runtime_get_sync(xhci_to_hcd(xhci)->self.controller);
 
 	spin_lock_irqsave(&dbc->lock, flags);
@@ -554,6 +559,7 @@ static void xhci_dbc_stop(struct xhci_hcd *xhci)
 
 	WARN_ON(!dbc);
 
+	printk("PRABHAT: %s\n",__func__);
 	cancel_delayed_work_sync(&dbc->event_work);
 
 	if (port->registered &&
@@ -662,6 +668,8 @@ static enum evtreturn xhci_dbc_do_handle_events(struct xhci_dbc *dbc)
 	struct xhci_hcd		*xhci = dbc->xhci;
 	bool			update_erdp = false;
 
+	printk("PRABHAT: DBC State : %d\n", dbc->state);
+
 	/* DbC state machine: */
 	switch (dbc->state) {
 	case DS_DISABLED:
@@ -695,6 +703,7 @@ static enum evtreturn xhci_dbc_do_handle_events(struct xhci_dbc *dbc)
 			xhci_info(xhci, "DbC cable unplugged\n");
 			dbc->state = DS_ENABLED;
 			xhci_dbc_flush_requests(dbc);
+			printk("PRABHAT: DbC cable unplugged\n");
 
 			return EVT_DISC;
 		}
@@ -705,6 +714,7 @@ static enum evtreturn xhci_dbc_do_handle_events(struct xhci_dbc *dbc)
 			writel(portsc, &dbc->regs->portsc);
 			dbc->state = DS_ENABLED;
 			xhci_dbc_flush_requests(dbc);
+			printk("PRABHAT: DbC port reset\n");
 
 			return EVT_DISC;
 		}
@@ -725,6 +735,7 @@ static enum evtreturn xhci_dbc_do_handle_events(struct xhci_dbc *dbc)
 				dep = get_out_ep(xhci);
 				xhci_dbc_flush_endpoint_requests(dep);
 			}
+			printk("PRABHAT: DbC Endpoint stall\n");
 
 			return EVT_DONE;
 		}
@@ -733,6 +744,7 @@ static enum evtreturn xhci_dbc_do_handle_events(struct xhci_dbc *dbc)
 		if (ctrl & DBC_CTRL_DBC_RUN_CHANGE) {
 			writel(ctrl, &dbc->regs->control);
 			ctrl = readl(&dbc->regs->control);
+			printk("PRABHAT: Clear DbC run change bit\n");
 		}
 
 		break;
@@ -797,6 +809,7 @@ static void xhci_dbc_handle_events(struct work_struct *work)
 	unsigned long		flags;
 	struct xhci_hcd		*xhci;
 
+	printk("PRABHAT: %s\n",__func__);
 	dbc = container_of(to_delayed_work(work), struct xhci_dbc, event_work);
 	xhci = dbc->xhci;
 
@@ -827,6 +840,7 @@ static void xhci_do_dbc_exit(struct xhci_hcd *xhci)
 {
 	unsigned long		flags;
 
+	printk("PRABHAT: %s\n",__func__);
 	spin_lock_irqsave(&xhci->lock, flags);
 	kfree(xhci->dbc);
 	xhci->dbc = NULL;
@@ -841,6 +855,7 @@ static int xhci_do_dbc_init(struct xhci_hcd *xhci)
 	void __iomem		*base;
 	int			dbc_cap_offs;
 
+	printk("PRABHAT: %s\n",__func__);
 	base = &xhci->cap_regs->hc_capbase;
 	dbc_cap_offs = xhci_find_next_ext_cap(base, 0, XHCI_EXT_CAPS_DEBUG);
 	if (!dbc_cap_offs)
diff --git a/drivers/usb/host/xhci-dbgcap.h b/drivers/usb/host/xhci-dbgcap.h
index 302e6ca..f2bd802 100644
--- a/drivers/usb/host/xhci-dbgcap.h
+++ b/drivers/usb/host/xhci-dbgcap.h
@@ -12,6 +12,7 @@
 #include <linux/tty.h>
 #include <linux/kfifo.h>
 #include <linux/kernel.h>
+#include <linux/ioctl.h>
 
 struct dbc_regs {
 	__le32	capability;
@@ -219,7 +220,7 @@ static inline struct dbc_ep *get_out_ep(struct xhci_hcd *xhci)
 int xhci_dbc_init(struct xhci_hcd *xhci);
 void xhci_dbc_exit(struct xhci_hcd *xhci);
 struct dbc_request *dbc_alloc_request(struct dbc_ep *dep, gfp_t gfp_flags);
-void xhci_dbc_flush_reqests(struct xhci_dbc *dbc);
+void xhci_dbc_flush_requests(struct xhci_dbc *dbc);
 void dbc_free_request(struct dbc_ep *dep, struct dbc_request *req);
 int dbc_ep_queue(struct dbc_ep *dep, struct dbc_request *req, gfp_t gfp_flags);
 int xhci_dbc_register_function(struct dbc_function *func);
diff --git a/drivers/usb/host/xhci-dbgraw.c b/drivers/usb/host/xhci-dbgraw.c
index b1445cc..4197b09 100644
--- a/drivers/usb/host/xhci-dbgraw.c
+++ b/drivers/usb/host/xhci-dbgraw.c
@@ -13,6 +13,7 @@
 #include <linux/sizes.h>
 #include <linux/slab.h>
 
+
 #include "xhci.h"
 #include "xhci-dbgcap.h"
 
@@ -43,6 +44,7 @@ struct dbc_dev {
 
 static void xhci_dbc_free_req(struct dbc_ep *dep, struct dbc_request *req)
 {
+	printk("PRABHAT: %s\n",__func__);
 	kfree(req->buf);
 	dbc_free_request(dep, req);
 }
@@ -52,6 +54,7 @@ struct dbc_request *xhci_dbc_alloc_requests(struct dbc_ep *dep,
 {
 	struct dbc_request *req;
 
+	printk("PRABHAT: %s\n",__func__);
 	req = dbc_alloc_request(dep, GFP_KERNEL);
 	if (!req)
 		return req;
@@ -217,6 +220,7 @@ static int dbc_open(struct inode *ip, struct file *fp)
 	struct xhci_dbc *dbc;
 	int r = 0;
 
+	printk("PRABHAT: %s\n",__func__);
 	dbc_dev = container_of(fp->private_data, struct dbc_dev, misc_dev);
 
 	mutex_lock(&dbc_dev->dev_excl);
@@ -242,11 +246,29 @@ static int dbc_open(struct inode *ip, struct file *fp)
 	return r;
 }
 
+static long dbc_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
+{
+//       struct xhci_hcd *xhci = g_xhci;
+//       struct xhci_dbc   *dbc = xhci->dbc;
+	struct dbc_dev *dev = (struct dbc_dev *) fp->private_data;
+        struct xhci_dbc *dbc = dev->dbc;
+
+       if (dbc == NULL)
+               return 0;
+
+       spin_lock(&dbc->lock);
+       xhci_dbc_flush_requests(dbc);
+       spin_unlock(&dbc->lock);
+
+       return 0;
+}
+
 static int dbc_release(struct inode *ip, struct file *fp)
 {
 	struct dbc_dev *dbc_dev = (struct dbc_dev *) fp->private_data;
 
 
+	printk("PRABHAT: %s\n",__func__);
 	mutex_lock(&dbc_dev->dev_excl);
 	dbc_dev->in_use = false;
 	fp->private_data = NULL;
@@ -260,6 +282,7 @@ static const struct file_operations dbc_fops = {
 	.read = dbc_read,
 	.write = dbc_write,
 	.open = dbc_open,
+	.unlocked_ioctl = dbc_ioctl,
 	.release = dbc_release,
 };
 
@@ -328,6 +351,7 @@ static int dbc_raw_run(struct xhci_dbc *dbc)
 
 static int dbc_raw_stop(struct xhci_dbc *dbc)
 {
+	printk("PRABHAT: %s\n",__func__);
 	dbc_raw_unregister_device(dbc->xhci);
 	return 0;
 }
diff --git a/include/linux/usb/xhcidbc.h b/include/linux/usb/xhcidbc.h
new file mode 100644
index 0000000..8b4c66c
--- /dev/null
+++ b/include/linux/usb/xhcidbc.h
@@ -0,0 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef __LINUX_XHCI_DBC_H
+#define __LINUX_XHCI_DBC_H
+
+#include <uapi/linux/usb/functionfs.h>
+
+#endif /* __LINUX_XHCI_DBC_H */
diff --git a/include/uapi/linux/usb/xhcidbc.h b/include/uapi/linux/usb/xhcidbc.h
new file mode 100644
index 0000000..4200ee6
--- /dev/null
+++ b/include/uapi/linux/usb/xhcidbc.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef _UAPI__LINUX_XHCI_DBC_H
+#define _UAPI__LINUX_XHCI_DBC_H
+
+#include <linux/types.h>
+#include <linux/ioctl.h>
+
+#define FLUSH_DBC_EP   _IO('f', 1)
+
+#endif /* _UAPI__LINUX_XHCI_DBC_H */
-- 
2.7.4

