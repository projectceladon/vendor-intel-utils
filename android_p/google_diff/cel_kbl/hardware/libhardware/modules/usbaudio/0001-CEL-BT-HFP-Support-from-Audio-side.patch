From f632b514a84ee3f8baabe5362756e6a289379549 Mon Sep 17 00:00:00 2001
From: Karan Patidar <karan.patidar@intel.com>
Date: Mon, 4 Mar 2019 21:07:23 +0530
Subject: [PATCH] BT-HFP Support from Audio side

IVI platforms required support for call.

Added changes in USB Audio Hal to read alsa card exposed
by BT Driver and implement a loopback mechanism between
usb card and bt card, thus enabling call path from audio
side when "hfp_enable" parameter is received.

Additionally sample-rate conversion and channel conversion is
handled in USB Audio Hal as BT Card works with 8k mono data whereas USB Card
support 48k stereo data.

Change-Id: I5dd3332d31189ff6d66751d5b06bdb9fdfbca2aa
Tracked-On:
Signed-off-by: Karan Patidar <karan.patidar@intel.com>
---
 modules/usbaudio/audio_hal.c | 598 ++++++++++++++++++++++++++++++++++-
 1 file changed, 593 insertions(+), 5 deletions(-)

diff --git a/modules/usbaudio/audio_hal.c b/modules/usbaudio/audio_hal.c
index 81c9fd61..668537cc 100644
--- a/modules/usbaudio/audio_hal.c
+++ b/modules/usbaudio/audio_hal.c
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "modules.usbaudio.audio_hal"
-/*#define LOG_NDEBUG 0*/
+//#define LOG_NDEBUG 0
 
 #include <errno.h>
 #include <inttypes.h>
@@ -38,12 +38,21 @@
 
 #include <tinyalsa/asoundlib.h>
 
-#include <audio_utils/channels.h>
-
 #include "alsa_device_profile.h"
 #include "alsa_device_proxy.h"
 #include "alsa_logging.h"
 
+//[ BT-HFP
+#include <audio_utils/channels.h>
+#include <audio_utils/resampler.h>
+
+#define AUDIO_PARAMETER_CARD         "card"
+#define AUDIO_PARAMETER_HFP_ENABLE   "hfp_enable"
+#define AUDIO_BT_DRIVER_NAME         "btaudiosource"
+//#define DEBUG_PCM_DUMP
+//#define DEBUG_DEVICE_INFO
+// BT-HFP ]
+
 /* Lock play & record samples rates at or above this threshold */
 #define RATELOCK_THRESHOLD 96000
 
@@ -68,6 +77,21 @@ struct audio_device {
 
     bool standby;
 
+//[ BT-HFP
+    int usbcard;
+    int btcard;
+
+    pthread_t sco_thread;
+    pthread_t usb_thread;
+    pthread_mutex_t param_thread_lock;
+
+    alsa_device_profile bt_out_profile, usb_in_profile;
+    alsa_device_proxy bt_out_proxy, usb_in_proxy;
+    alsa_device_profile bt_in_profile, usb_out_profile;
+    alsa_device_proxy bt_in_proxy, usb_out_proxy;
+
+    bool terminate_sco_loopback;
+// BT-HFP ]
     int32_t inputs_open; /* number of input streams currently open. */
 };
 
@@ -149,6 +173,59 @@ struct stream_in {
     size_t conversion_buffer_size;      /* in bytes */
 };
 
+//[ BT-HFP
+struct pcm_config bt_hfp_out_config = {
+    .channels = 1,
+    .rate = 8000,
+    .period_size = 80,
+    .period_count = 50,
+    .start_threshold = 0,
+    .stop_threshold = 0,
+    .silence_threshold = 0,
+    .silence_size = 0,
+    .avail_min = 0
+};
+
+struct pcm_config bt_hfp_in_config = {
+    .channels = 1,
+    .rate = 8000,
+    .period_size = 80,
+    .period_count = 50,
+    .start_threshold = 0,
+    .stop_threshold = 0,
+    .silence_threshold = 0,
+    .silence_size = 0,
+    .avail_min = 0
+};
+
+struct pcm_config usb_hfp_config = {
+    .channels = 2,
+    .rate = 48000,
+    .period_size = 480,
+    .period_count = 5,
+    .start_threshold = 0,
+    .stop_threshold = 0,
+    .silence_threshold = 0,
+    .silence_size = 0,
+    .avail_min = 0
+};
+
+static unsigned int round_to_16_mult(unsigned int size)
+{
+    return (size + 15) & ~15;   /* 0xFFFFFFF0; */
+}
+
+int is_bt_call_active(struct audio_device *adev) {
+    if(adev->sco_thread == 0 && adev->usb_thread == 0) {
+        //ALOGV("%s : not active",__func__);
+        return 0;
+    } else {
+        //ALOGV("%s : active",__func__);
+        return 1;
+    }
+}
+// BT-HFP ]
+
 /*
  * Locking Helpers
  */
@@ -341,7 +418,7 @@ static int out_set_format(struct audio_stream *stream, audio_format_t format)
 static int out_standby(struct audio_stream *stream)
 {
     struct stream_out *out = (struct stream_out *)stream;
-
+    ALOGV("%s",__func__);
     stream_lock(&out->lock);
     if (!out->standby) {
         device_lock(out->adev);
@@ -447,6 +524,13 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer, si
     struct stream_out *out = (struct stream_out *)stream;
 
     stream_lock(&out->lock);
+
+    if (is_bt_call_active(out->adev) == 1){
+        // Wont allow anything to write with normal playback if sco loopback is ON.
+        //ALOGD("%s : usb hal out_write called during sco_thread, skip and return.",__func__);
+        stream_unlock(&out->lock);
+        return bytes;
+    }
     if (out->standby) {
         device_lock(out->adev);
         ret = start_output_stream(out);
@@ -576,6 +660,11 @@ static int adev_open_output_stream(struct audio_hw_device *hw_dev,
     device_lock(out->adev);
     out->profile = &out->adev->out_profile;
 
+    if(out->adev != NULL && is_bt_call_active(out->adev) == 1) {
+        ALOGW("%s : bt_call_active, won't allow other outputs",__func__);
+        return -EINVAL;
+    }
+
     // build this to hand to the alsa_device_proxy
     struct pcm_config proxy_config;
     memset(&proxy_config, 0, sizeof(proxy_config));
@@ -743,7 +832,7 @@ static int in_set_format(struct audio_stream *stream, audio_format_t format)
 static int in_standby(struct audio_stream *stream)
 {
     struct stream_in *in = (struct stream_in *)stream;
-
+	ALOGD("%s",__func__);
     stream_lock(&in->lock);
     if (!in->standby) {
         device_lock(in->adev);
@@ -861,6 +950,13 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer, size_t byte
     struct stream_in * in = (struct stream_in *)stream;
 
     stream_lock(&in->lock);
+
+    if (is_bt_call_active(in->adev) == 1){
+        // Wont allow to read from normal input if SCO loopback is ON.
+        //ALOGD("%s : usb hal in_read called during sco_thread, skip and return.",__func__);
+        stream_unlock(&in->lock);
+        return bytes;
+    }
     if (in->standby) {
         device_lock(in->adev);
         ret = start_input_stream(in);
@@ -941,6 +1037,13 @@ static int adev_open_input_stream(struct audio_hw_device *hw_dev,
     ALOGV("adev_open_input_stream() rate:%" PRIu32 ", chanMask:0x%" PRIX32 ", fmt:%" PRIu8,
           config->sample_rate, config->channel_mask, config->format);
 
+    struct audio_device *dev = (struct audio_device *)hw_dev;
+
+    if(dev != NULL && is_bt_call_active(dev) == 1) {
+        ALOGW("%s : bt_call_active, won't allow other outputs",__func__);
+        return -EINVAL;
+    }
+
     /* Pull out the card/device pair */
     int32_t card, device;
     if (!parse_card_device_params(address, &card, &device)) {
@@ -1139,11 +1242,495 @@ static void adev_close_input_stream(struct audio_hw_device *hw_dev,
     free(stream);
 }
 
+// [ BT-HFP
+
+static void get_config_based_on_profile(alsa_device_profile* profile, struct pcm_config* default_config, struct pcm_config* config) {
+    ALOGV("%s",__func__);
+    // Here verify if the current profile supports default_config, if so, we will use default_config in config.
+    // Incase it doesn't, config is set to profile's default values and than based on the difference between default_config & config we need to make resampler, channel converter.
+
+    ALOGV("%s default rate %d channels %d",__func__, default_config->rate, default_config->channels);
+
+    //Rates
+    for(int i = 0; i < MAX_PROFILE_SAMPLE_RATES - 1; i++){
+        //ALOGV("%s profile rate %d. %d",__func__, i, profile->sample_rates[i]);
+        if(default_config->rate == profile->sample_rates[i]) {
+            //Found a common rate. Accept it.
+            config->rate = default_config->rate;
+            break;
+        }
+    }
+
+    //Channels
+    for(int i = 0; i < MAX_PROFILE_CHANNEL_COUNTS - 1; i++){
+        //ALOGV("%s profile channel %d. %d",__func__, i, profile->channel_counts[i]);
+        if(default_config->channels == profile->channel_counts[i]) {
+            //Found a common rate. Accept it.
+            config->channels = default_config->channels;
+            break;
+        }
+    }
+
+    ALOGV("%s : selected rate : %d channels : %d",__func__, config->rate, config->channels);
+}
+
+static void get_device_info(struct audio_device* adev, alsa_device_profile* profile, struct pcm_config* config, int card, int device, int direction) {
+
+    //Profile
+    profile->card = card;
+    profile->device = device;
+    profile->direction = direction;
+
+    // Read profile's default config
+    profile_read_device_info(profile);
+
+    ALOGD("%s : profile is valid : %d",__func__, profile->is_valid);
+
+#ifdef DEBUG_DEVICE_INFO
+    if(profile->is_valid) {
+        //Rates
+        for(int i = 0; i < MAX_PROFILE_SAMPLE_RATES - 1; i++){
+            ALOGV("%s : profile sample rate from hw_params : %d",__func__, profile->sample_rates[i]);
+        }
+
+        //Channel Counts
+        for(int i = 0; i < MAX_PROFILE_CHANNEL_COUNTS - 1; i++){
+            ALOGV("%s : profile channel count from hw_params : %d",__func__, profile->channel_counts[i]);
+        }
+
+        //Formats
+        for(int i = 0; i < MAX_PROFILE_FORMATS - 1; i++){
+            ALOGV("%s : profile format from hw_params : %d",__func__, profile->formats[i]);
+        }
+    }
+#endif
+
+    //Fill up config by defaults
+    config->rate = DEFAULT_SAMPLE_RATE;
+    config->format = DEFAULT_SAMPLE_FORMAT;
+    config->channels = DEFAULT_CHANNEL_COUNT;
+
+    if(card == adev->btcard) {
+        if(direction == PCM_IN)
+            get_config_based_on_profile(profile, &bt_hfp_in_config, config);
+        else
+            get_config_based_on_profile(profile, &bt_hfp_out_config, config);
+    } else if(card == adev->usbcard) {
+        get_config_based_on_profile(profile, &usb_hfp_config, config);
+    }
+}
+
+static int get_pcm_card(const char* name)
+{
+    char id_filepath[PATH_MAX] = {0};
+    char number_filepath[PATH_MAX] = {0};
+    ssize_t written;
+
+    snprintf(id_filepath, sizeof(id_filepath), "/proc/asound/%s", name);
+
+    written = readlink(id_filepath, number_filepath, sizeof(number_filepath));
+    if (written < 0) {
+        ALOGE("Sound card %s does not exist - setting default", name);
+            return 0;
+    } else if (written >= (ssize_t)sizeof(id_filepath)) {
+        ALOGE("Sound card %s name is too long - setting default", name);
+        return 0;
+    }
+
+    return atoi(number_filepath + 4);
+}
+
+void update_bt_card(struct audio_device *adev){
+    adev->btcard = get_pcm_card(AUDIO_BT_DRIVER_NAME); //update driver name if changed by BT Team.
+}
+
+void stop_existing_output_input(struct audio_device *adev){
+//BT-HFP loopback has priority over other playbacks.
+    ALOGV("%s", __func__);
+    struct listnode* node;
+
+    list_for_each(node, &adev->output_stream_list) {
+        struct audio_stream* stream = (struct audio_stream *)node_to_item(node, struct stream_out, list_node);
+        out_standby((struct audio_stream_out *)stream);
+    }
+
+    list_for_each(node, &adev->input_stream_list) {
+        struct audio_stream* stream = (struct audio_stream *)node_to_item(node, struct stream_in, list_node);
+        in_standby((struct audio_stream_in *)stream);
+    }
+}
+
+/*
+ *Will do pcm_open and pcm_prepare for all the dev nodes to be used.
+ *Use its return value to validate if loopback threads should be created or not.
+*/
+int prepare_loopback_parameters(struct audio_device *adev){
+    ALOGV("%s",__func__);
+
+    adev->sco_thread = 1;
+    adev->usb_thread = 1;
+    stop_existing_output_input(adev);
+
+    struct pcm_config config_bt;
+    struct pcm_config config_usb;
+    int proxy_ret = 0;
+
+//[ USB_IN -> BT_OUT
+    memset(&adev->bt_out_profile, 0, sizeof(adev->bt_out_profile));
+    memset(&adev->bt_out_proxy, 0, sizeof(adev->bt_out_proxy));
+    memset(&adev->usb_in_profile, 0, sizeof(adev->usb_in_profile));
+    memset(&adev->usb_in_proxy, 0, sizeof(adev->usb_in_proxy));
+    memset(&config_usb, 0, sizeof(config_usb));
+    memset(&config_bt, 0, sizeof(config_bt));
+
+//USB_IN
+    get_device_info(adev, &adev->usb_in_profile, &config_usb, adev->usbcard, 0, PCM_IN);
+    ALOGV("%s : config_usb in rate %d channels %d format %d", __func__, config_usb.rate, config_usb.channels, config_usb.format);
+
+    proxy_ret = proxy_prepare(&adev->usb_in_proxy, &adev->usb_in_profile, &config_usb);
+
+    if(proxy_ret != 0) {
+        ALOGV("%s : usb in proxy_prepare failure : Error : %d", __func__, proxy_ret);
+    }
+
+    adev->usb_in_proxy.alsa_config.period_size = usb_hfp_config.period_size;
+    adev->usb_in_proxy.alsa_config.period_count = usb_hfp_config.period_count;
+
+    proxy_ret = proxy_open(&adev->usb_in_proxy);
+
+    if(proxy_ret == 0) {
+        ALOGD("%s : usb_in proxy_open success",__func__);
+    } else {
+        ALOGE("%s : usb in failure : Error : %d", __func__, proxy_ret);
+        goto err;
+    }
+
+    proxy_ret = -1;
+
+//BT_OUT
+    get_device_info(adev, &adev->bt_out_profile, &config_bt, adev->btcard, 0, PCM_OUT);
+    ALOGV("%s : config_bt out rate %d channels %d format %d", __func__, config_bt.rate, config_bt.channels, config_bt.format);
+
+    proxy_ret = proxy_prepare(&adev->bt_out_proxy, &adev->bt_out_profile, &config_bt);
+
+    if(proxy_ret != 0) {
+        ALOGE("%s : bt_sco out proxy_prepare failure : Error : %d", __func__, proxy_ret);
+    }
+
+    adev->bt_out_proxy.alsa_config.period_size = bt_hfp_out_config.period_size;
+    adev->bt_out_proxy.alsa_config.period_count = bt_hfp_out_config.period_count;
+
+    proxy_ret = proxy_open(&adev->bt_out_proxy);
+
+    if(proxy_ret == 0) {
+        ALOGD("%s : bt_out proxy_open success",__func__);
+    } else {
+        ALOGE("%s : bt_sco out failure : Error : %d", __func__, proxy_ret);
+        goto err;
+    }
+
+// USB_IN -> BT_OUT ]
+    proxy_ret = -1;
+//[ BT_IN -> USB_OUT
+    memset(&adev->bt_in_profile, 0, sizeof(adev->bt_in_profile));
+    memset(&adev->bt_in_proxy, 0, sizeof(adev->bt_in_proxy));
+    memset(&config_bt, 0, sizeof(config_bt));
+    memset(&adev->usb_out_profile, 0, sizeof(adev->usb_out_profile));
+    memset(&adev->usb_out_proxy, 0, sizeof(adev->usb_out_proxy));
+    memset(&config_usb, 0, sizeof(config_usb));
+
+//BT_IN
+    get_device_info(adev, &adev->bt_in_profile, &config_bt, adev->btcard, 0, PCM_IN);
+
+    ALOGD("%s : config_bt in rate %d channels %d format %d",__func__, config_bt.rate, config_bt.channels, config_bt.format);
+
+    proxy_ret = proxy_prepare(&adev->bt_in_proxy, &adev->bt_in_profile, &config_bt);
+
+    if(proxy_ret != 0) {
+        ALOGE("%s : bt_sco in proxy_prepare done : Error : %d",__func__, proxy_ret);
+    }
+
+    adev->bt_in_proxy.alsa_config.period_size = bt_hfp_in_config.period_size;
+    adev->bt_in_proxy.alsa_config.period_count = bt_hfp_in_config.period_count;
+
+    proxy_ret = proxy_open(&adev->bt_in_proxy);
+
+    if(proxy_ret == 0) {
+        ALOGD("%s : bt_in proxy_open sucess : ret : %d",__func__, proxy_ret);
+    } else {
+        ALOGE("%s : bt_sco IN failure : Error : %d",__func__, proxy_ret);
+        goto err;
+    }
+
+    proxy_ret = -1;
+
+// USB_OUT
+    get_device_info(adev, &adev->usb_out_profile, &config_usb, adev->usbcard, 0, PCM_OUT);
+    ALOGD("%s : config_usb out rate %d channels %d format %d",__func__, config_usb.rate, config_usb.channels, config_usb.format);
+
+    proxy_ret = proxy_prepare(&adev->usb_out_proxy, &adev->usb_out_profile, &config_usb);
+
+    if(proxy_ret != 0) {
+        ALOGE("%s : usb_out proxy_prepare failed : Error : %d",__func__, proxy_ret);
+    }
+
+    adev->usb_out_proxy.alsa_config.period_size = usb_hfp_config.period_size;
+    adev->usb_out_proxy.alsa_config.period_count = usb_hfp_config.period_count;
+
+    proxy_ret = proxy_open(&adev->usb_out_proxy);
+
+    if(proxy_ret == 0) {
+        ALOGD("%s : usb_out proxy_open sucess : ret : %d",__func__, proxy_ret);
+    } else {
+        ALOGE("%s : usb out failure : Error : %d",__func__, proxy_ret);
+        goto err;
+    }
+// BT_IN -> USB_OUT ]
+    return 0;
+err:
+    ALOGE("%s : Error in loopback prepare",__func__);
+    return -1;
+}
+
+//Loopback api
+int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_config *out_config, alsa_device_proxy *in_proxy, alsa_device_proxy *out_proxy, const char* id) {
+    struct resampler_itfe *resampler = NULL;
+    bool need_resampler = false; // Use speex resampler
+    bool need_remapper = false; // Use audio_utils/channels.c
+    int32_t read_err = 0;
+    int32_t write_err = 0;
+    size_t adjusted_bytes = 0;
+    int16_t *buf_in;
+    int16_t *buf_out;
+    int16_t *buf_remapped;
+    size_t sample_size_in_bytes = 2; //16 bit format by default
+    size_t frames_in;
+    size_t frames_out;
+    size_t buf_size_in;
+    size_t buf_size_out;
+    size_t buf_size_remapped;
+
+#ifdef DEBUG_PCM_DUMP
+    char dump_path[PATH_MAX] = {0};
+    snprintf(dump_path, sizeof(dump_path), "/vendor/dump/loopback_read_%s.pcm", id);
+    FILE *loopback_read = fopen(dump_path, "a");
+    snprintf(dump_path, sizeof(dump_path), "/vendor/dump/loopback_remapped_%s.pcm", id);
+    FILE *loopback_remapped = fopen(dump_path, "a");
+    snprintf(dump_path, sizeof(dump_path), "/vendor/dump/loopback_write_%s.pcm", id);
+    FILE *loopback_write = fopen(dump_path, "a");
+#endif
+
+    ALOGV("%s : Input rate : %d Output rate : %d", __func__, in_config->rate, out_config->rate);
+
+    if(in_config->rate != out_config->rate)
+        need_resampler = true;
+
+    if(in_config->channels != out_config->channels)
+        need_remapper = true;
+
+    frames_out = round_to_16_mult(out_config->period_size);
+    frames_in = round_to_16_mult(in_config->period_size);
+    buf_size_out = out_config->channels * frames_out * sample_size_in_bytes;
+    buf_size_in = in_config->channels * frames_in * sample_size_in_bytes;
+    buf_size_remapped = out_config->channels * frames_in * sample_size_in_bytes;
+    buf_out = (int16_t *) malloc (buf_size_out);
+    buf_in = (int16_t *) malloc (buf_size_in);
+    buf_remapped = (int16_t *) malloc (buf_size_remapped);
+
+    ALOGV("%s : frames_in %zu frames_out %zu",__func__, frames_in, frames_out);
+    ALOGV("%s : size_in %zu size_out %zu size_remapped %zu", __func__, buf_size_in, buf_size_out, buf_size_remapped);
+
+    if(buf_size_in != buf_size_out) {
+        if(need_resampler) {
+            int ret = create_resampler(in_config->rate /*src rate*/, out_config->rate /*dst rate*/, out_config->channels /*channels*/,
+                        RESAMPLER_QUALITY_DEFAULT, NULL, &resampler);
+            if (ret != 0) {
+                resampler = NULL;
+                ALOGE("%s : Failure to create upsampler %d", __func__, ret);
+                goto resamp_err;
+            }
+        }
+
+        //start loopback
+        while(!adev->terminate_sco_loopback){
+            memset(buf_in, 0 ,buf_size_in);
+            memset(buf_out, 0, buf_size_out);
+            memset(buf_remapped, 0, buf_size_remapped);
+
+            read_err = proxy_read(in_proxy, buf_in, buf_size_in);
+
+            if(read_err != 0) {
+                ALOGE("%s : proxy_read failure %d", __func__, read_err);
+            } else {
+                ALOGV("%s : read %zu from bt_in",__func__, buf_size_in);
+            }
+
+#ifdef DEBUG_PCM_DUMP
+            if(loopback_read != NULL) {
+                fwrite(buf_in, 1, buf_size_in, loopback_read);
+            }
+#endif
+
+            if(need_remapper) {
+                adjusted_bytes = adjust_channels(buf_in, in_config->channels, buf_remapped, out_config->channels, 
+                                        sample_size_in_bytes, buf_size_in);
+                ALOGV("%s : remapping [%d -> %d], adjusted bytes : %zu",__func__, in_config->channels, out_config->channels, adjusted_bytes);
+            } else {
+                //Just copy content of buf_remapped as no channel adjustment is required.
+                ALOGV("%s : no remapping required.",__func__);
+                memcpy(buf_remapped, buf_in, buf_size_remapped);
+            }
+
+#ifdef DEBUG_PCM_DUMP
+            if(loopback_remapped != NULL) {
+                fwrite(buf_remapped, 1, buf_size_remapped, loopback_remapped);
+            }
+#endif
+
+            //Check if resampling is required.
+            if(resampler != NULL) {
+                resampler->resample_from_input(resampler, (int16_t *)buf_remapped, (size_t *)&frames_in, (int16_t *) buf_out, (size_t *)&frames_out);
+                ALOGV("%s : upsampling [%d -> %d]",__func__, in_config->rate, out_config->rate);
+            } else {
+                ALOGV("%s : no resampling required.",__func__);
+                memcpy(buf_out, buf_remapped, buf_size_out);
+            }
+
+#ifdef DEBUG_PCM_DUMP
+            if(loopback_write != NULL) {
+                fwrite(buf_out, 1, buf_size_out, loopback_write);
+            }
+#endif
+
+            write_err = proxy_write(out_proxy, buf_out, buf_size_out);
+
+            if(write_err != 0) {
+                ALOGE("%s : proxy_write failure %d", __func__, write_err);
+            } else {
+                ALOGV("%s : written %zu to usb_out",__func__, buf_size_out);
+            }
+        }
+    } else {
+        //No conversion required, read from bt_in and directly write to usb_out
+        while(!adev->terminate_sco_loopback){
+            memset(buf_in, 0 ,buf_size_in);
+            memset(buf_out, 0, buf_size_out);
+
+            read_err = proxy_read(in_proxy, buf_in, buf_size_in);
+
+            if(read_err != 0) {
+                ALOGE("%s : proxy_read failure %d", __func__, read_err);
+            } else {
+                ALOGV("%s : read %zu from usb_in",__func__, buf_size_out);
+            }
+
+            memcpy(buf_out, buf_in, buf_size_in);
+
+            write_err = proxy_write(out_proxy, buf_out, buf_size_out);
+
+            if(write_err != 0) {
+                ALOGE("%s : proxy_write failure %d", __func__, write_err);
+            } else {
+                ALOGV("%s : written %zu to usb_out",__func__, buf_size_out);
+            }
+        }
+    }
+
+#ifdef DEBUG_PCM_DUMP
+    if(loopback_read != NULL)
+        fclose(loopback_read);
+    if(loopback_remapped != NULL)
+        fclose(loopback_remapped);
+    if(loopback_write != NULL)
+        fclose(loopback_write);
+#endif
+
+    ALOGD("%s --", __func__);
+    return 0;
+
+resamp_err:
+    return -1;
+}
+
+void* run_usb_bt_loopback(void * args) {
+    struct audio_device * adev = (struct audio_device *)args;
+    adev->usb_thread = 1;
+
+    ALOGV("%s : thread opening looper",__func__);
+    looper(adev, &usb_hfp_config, &bt_hfp_out_config, &adev->usb_in_proxy, &adev->bt_out_proxy, "usb_to_bt");
+
+    proxy_close(&adev->usb_in_proxy);
+    proxy_close(&adev->bt_out_proxy);
+    adev->usb_thread = 0;
+    ALOGV("%s : thread closed returning",__func__);
+    return NULL;
+}
+
+void* run_bt_usb_loopback(void * args) {
+    struct audio_device * adev = (struct audio_device *)args;
+    adev->sco_thread = 1;
+
+    ALOGV("%s : thread opening looper",__func__);
+    looper(adev, &bt_hfp_in_config, &usb_hfp_config, &adev->bt_in_proxy, &adev->usb_out_proxy, "bt_to_usb");
+
+    proxy_close(&adev->bt_in_proxy);
+    proxy_close(&adev->usb_out_proxy);
+    adev->sco_thread = 0;
+    ALOGV("%s : thread closed returning",__func__);
+    return NULL;
+}
+// BT-HFP Loopback ]
+
 /*
  * ADEV Functions
  */
 static int adev_set_parameters(struct audio_hw_device *hw_dev, const char *kvpairs)
 {
+    ALOGD("%s : kvpairs: %s", __func__, kvpairs);
+
+    struct audio_device * adev = (struct audio_device *)hw_dev;
+    char value[32];
+    int ret, val = 0;
+    struct str_parms *parms;
+
+    parms = str_parms_create_str(kvpairs);
+
+    ret = str_parms_get_str(parms, AUDIO_PARAMETER_CARD, value, sizeof(value));
+    if (ret >= 0) {
+        val = atoi(value);
+        adev->usbcard = val;
+        update_bt_card(adev);
+        ALOGD("%s : usb_card : %d bt_card : %d",__func__, adev->usbcard, adev->btcard);
+    }
+
+    ret = str_parms_get_str(parms, AUDIO_PARAMETER_HFP_ENABLE, value, sizeof(value));
+    if (ret >= 0) {
+        ALOGD("%s : hfp_enable : %s ",__func__, value);
+        update_bt_card(adev);
+        ALOGD("%s : updated bt_card : %d",__func__, adev->btcard);
+        pthread_mutex_lock(&adev->param_thread_lock);
+        if (strcmp(value, "true") == 0){
+            //Open and prepare pcm devices before the thread starts read and write.
+            int prep_status = prepare_loopback_parameters(adev);
+            if(prep_status == 0){
+                adev->terminate_sco_loopback = false;
+                pthread_create(&adev->usb_thread, NULL, &run_usb_bt_loopback, adev);
+
+                adev->terminate_sco_loopback = false;
+                pthread_create(&adev->sco_thread, NULL, &run_bt_usb_loopback, adev);
+            } else {
+                ALOGE("%s : prep failed, no loopback.",__func__);
+                adev->sco_thread = 0;
+                adev->usb_thread = 0;
+            }
+        } else {
+            if (adev->usb_thread != 0 || adev->sco_thread != 0) {
+                adev->terminate_sco_loopback = true;
+            }
+        }
+        pthread_mutex_unlock(&adev->param_thread_lock);
+    }
+
     return 0;
 }
 
@@ -1242,6 +1829,7 @@ static int adev_close(hw_device_t *device)
 
 static int adev_open(const hw_module_t* module, const char* name, hw_device_t** device)
 {
+    ALOGD("%s",__func__);
     if (strcmp(name, AUDIO_HARDWARE_INTERFACE) != 0)
         return -EINVAL;
 
-- 
2.20.1

