From 09b57f3bf9a4fa9a45d066c61ab72294546d634c Mon Sep 17 00:00:00 2001
From: Karan Patidar <karan.patidar@intel.com>
Date: Mon, 1 Jul 2019 12:18:43 +0530
Subject: [PATCH] [CEL_KBL] Avoid klocwork errors

Avoid possible null pointer dereferences and memory leaks
detected by klocwork.

Tracked-On: OAM-83539
Signed-off-by: Karan Patidar <karan.patidar@intel.com>
---
 modules/usbaudio/audio_hal.c | 41 ++++++++++++++++++++++++++++++------
 1 file changed, 35 insertions(+), 6 deletions(-)

diff --git a/modules/usbaudio/audio_hal.c b/modules/usbaudio/audio_hal.c
index 668537cc..b9d361e2 100644
--- a/modules/usbaudio/audio_hal.c
+++ b/modules/usbaudio/audio_hal.c
@@ -654,17 +654,26 @@ static int adev_open_output_stream(struct audio_hw_device *hw_dev,
     out->stream.get_presentation_position = out_get_presentation_position;
     out->stream.get_next_write_timestamp = out_get_next_write_timestamp;
 
-    stream_lock_init(&out->lock);
-
     out->adev = (struct audio_device *)hw_dev;
+
+    if(out->adev == NULL) {
+        ALOGE("%s : hw_dev is NULL.",__func__);
+        free(out);
+        *stream_out = NULL;
+        return -EINVAL;
+    }
+
     device_lock(out->adev);
     out->profile = &out->adev->out_profile;
 
     if(out->adev != NULL && is_bt_call_active(out->adev) == 1) {
         ALOGW("%s : bt_call_active, won't allow other outputs",__func__);
+        free(out);
+        *stream_out = NULL;
         return -EINVAL;
     }
 
+    stream_lock_init(&out->lock);
     // build this to hand to the alsa_device_proxy
     struct pcm_config proxy_config;
     memset(&proxy_config, 0, sizeof(proxy_config));
@@ -1076,9 +1085,15 @@ static int adev_open_input_stream(struct audio_hw_device *hw_dev,
     in->stream.read = in_read;
     in->stream.get_input_frames_lost = in_get_input_frames_lost;
 
-    stream_lock_init(&in->lock);
-
     in->adev = (struct audio_device *)hw_dev;
+
+    if(in->adev == NULL) {
+        ALOGE("%s : hw_dev is NULL.", __func__);
+        free(in);
+        *stream_in = NULL;
+        return -EINVAL;
+    }
+
     device_lock(in->adev);
 
     in->profile = &in->adev->in_profile;
@@ -1213,6 +1228,8 @@ static int adev_open_input_stream(struct audio_hw_device *hw_dev,
         free(in);
     }
 
+    stream_lock_init(&in->lock);
+
     device_lock(in->adev);
     ++in->adev->inputs_open;
     device_unlock(in->adev);
@@ -1547,6 +1564,9 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
             if (ret != 0) {
                 resampler = NULL;
                 ALOGE("%s : Failure to create upsampler %d", __func__, ret);
+                free(buf_out);
+                free(buf_in);
+                free(buf_remapped);
                 goto resamp_err;
             }
         }
@@ -1645,6 +1665,10 @@ int looper(struct audio_device *adev, struct pcm_config *in_config, struct pcm_c
         fclose(loopback_write);
 #endif
 
+
+    free(buf_out);
+    free(buf_in);
+    free(buf_remapped);
     ALOGD("%s --", __func__);
     return 0;
 
@@ -1695,6 +1719,10 @@ static int adev_set_parameters(struct audio_hw_device *hw_dev, const char *kvpai
 
     parms = str_parms_create_str(kvpairs);
 
+    if(parms == NULL) {
+        return 0;
+    }
+
     ret = str_parms_get_str(parms, AUDIO_PARAMETER_CARD, value, sizeof(value));
     if (ret >= 0) {
         val = atoi(value);
@@ -1715,13 +1743,12 @@ static int adev_set_parameters(struct audio_hw_device *hw_dev, const char *kvpai
             if(prep_status == 0){
                 adev->terminate_sco_loopback = false;
                 pthread_create(&adev->usb_thread, NULL, &run_usb_bt_loopback, adev);
-
-                adev->terminate_sco_loopback = false;
                 pthread_create(&adev->sco_thread, NULL, &run_bt_usb_loopback, adev);
             } else {
                 ALOGE("%s : prep failed, no loopback.",__func__);
                 adev->sco_thread = 0;
                 adev->usb_thread = 0;
+                adev->terminate_sco_loopback = true;
             }
         } else {
             if (adev->usb_thread != 0 || adev->sco_thread != 0) {
@@ -1731,6 +1758,8 @@ static int adev_set_parameters(struct audio_hw_device *hw_dev, const char *kvpai
         pthread_mutex_unlock(&adev->param_thread_lock);
     }
 
+    str_parms_destroy(parms);
+
     return 0;
 }
 
-- 
2.20.1

