From c6067380fcd8de3d2f29be5198a60d4afa4bc964 Mon Sep 17 00:00:00 2001
From: xianhaox <xianhaox.qing@intel.com>
Date: Tue, 12 Dec 2017 15:22:52 +0800
Subject: [PATCH] Add channel for notifications in Deskclock

Google change the API since 8.0. They create default channel for
notifications in 8.0. And they make it mandatory in 8.1 release. It
will result in the notification setting in Alarm, Timer and StopWatch
crash.

Test steps:
    * Open DeskClock app
    * Set an Alarm, start the Timer, and start StopWatch
    * There should be no Toast warning about channel is null.
    * Waiting for the Alarm ringing, the DeskClock should not crash.
    * Then goto Settings
    * There should be no Toast prompt about the channel null.

This change squashed these 2 changes.
    605958/1
    607177/2

Change-Id: I9574027b6de7a1f2b0d6576cc2ec85150df1ce9f
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-52464
Signed-off-by: xianhaox <xianhaox.qing@intel.com>
---
 .../deskclock/alarms/AlarmNotifications.java       | 47 ++++++++++++++++++----
 .../data/StopwatchNotificationBuilder.java         | 17 ++++++++
 .../deskclock/data/TimerNotificationBuilder.java   | 35 ++++++++++++----
 3 files changed, 84 insertions(+), 15 deletions(-)

diff --git a/src/com/android/deskclock/alarms/AlarmNotifications.java b/src/com/android/deskclock/alarms/AlarmNotifications.java
index df711d2..10735e4 100644
--- a/src/com/android/deskclock/alarms/AlarmNotifications.java
+++ b/src/com/android/deskclock/alarms/AlarmNotifications.java
@@ -28,6 +28,8 @@ import android.service.notification.StatusBarNotification;
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
 import android.support.v4.content.ContextCompat;
+import android.app.NotificationChannel;
+import android.support.v4.os.BuildCompat;
 
 import com.android.deskclock.AlarmClockFragment;
 import com.android.deskclock.AlarmUtils;
@@ -82,11 +84,14 @@ final class AlarmNotifications {
      */
     private static final int ALARM_FIRING_NOTIFICATION_ID = Integer.MAX_VALUE - 7;
 
+    private static final String CHANNEL_ID_ALARM = "alarm";
+
     static synchronized void showLowPriorityNotification(Context context,
             AlarmInstance instance) {
         LogUtils.v("Displaying low priority notification for alarm instance: " + instance.mId);
 
-        NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
+        createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_LOW);
+        Notification.Builder builder = new Notification.Builder(context)
                 .setShowWhen(false)
                 .setContentTitle(context.getString(
                         R.string.alarm_alert_predismiss_title))
@@ -98,6 +103,7 @@ final class AlarmNotifications {
                 .setPriority(NotificationCompat.PRIORITY_DEFAULT)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);
 
         if (Utils.isNOrLater()) {
@@ -135,7 +141,8 @@ final class AlarmNotifications {
             AlarmInstance instance) {
         LogUtils.v("Displaying high priority notification for alarm instance: " + instance.mId);
 
-        NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
+        createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_HIGH);
+        Notification.Builder builder = new Notification.Builder(context)
                 .setShowWhen(false)
                 .setContentTitle(context.getString(R.string.alarm_alert_predismiss_title))
                 .setContentText(AlarmUtils.getAlarmText(context, instance, true /* includeLabel */))
@@ -146,6 +153,7 @@ final class AlarmNotifications {
                 .setPriority(NotificationCompat.PRIORITY_HIGH)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);
 
         if (Utils.isNOrLater()) {
@@ -243,7 +251,9 @@ final class AlarmNotifications {
         Notification summary = getActiveGroupSummaryNotification(context, UPCOMING_GROUP_KEY);
         if (summary == null
                 || !Objects.equals(summary.contentIntent, firstUpcoming.contentIntent)) {
-            summary = new NotificationCompat.Builder(context)
+
+            createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_LOW);
+            summary = new Notification.Builder(context)
                     .setShowWhen(false)
                     .setContentIntent(firstUpcoming.contentIntent)
                     .setColor(ContextCompat.getColor(context, R.color.default_background))
@@ -253,6 +263,7 @@ final class AlarmNotifications {
                     .setPriority(NotificationCompat.PRIORITY_HIGH)
                     .setCategory(NotificationCompat.CATEGORY_ALARM)
                     .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                    .setChannelId(CHANNEL_ID_ALARM)
                     .setLocalOnly(true)
                     .build();
             nm.notify(ALARM_GROUP_NOTIFICATION_ID, summary);
@@ -277,7 +288,9 @@ final class AlarmNotifications {
         Notification summary = getActiveGroupSummaryNotification(context, MISSED_GROUP_KEY);
         if (summary == null
                 || !Objects.equals(summary.contentIntent, firstMissed.contentIntent)) {
-            summary = new NotificationCompat.Builder(context)
+
+            createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_LOW);
+            summary = new Notification.Builder(context)
                     .setShowWhen(false)
                     .setContentIntent(firstMissed.contentIntent)
                     .setColor(ContextCompat.getColor(context, R.color.default_background))
@@ -287,6 +300,7 @@ final class AlarmNotifications {
                     .setPriority(NotificationCompat.PRIORITY_HIGH)
                     .setCategory(NotificationCompat.CATEGORY_ALARM)
                     .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                    .setChannelId(CHANNEL_ID_ALARM)
                     .setLocalOnly(true)
                     .build();
             nm.notify(ALARM_GROUP_MISSED_NOTIFICATION_ID, summary);
@@ -297,7 +311,8 @@ final class AlarmNotifications {
             AlarmInstance instance) {
         LogUtils.v("Displaying snoozed notification for alarm instance: " + instance.mId);
 
-        NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
+        createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_LOW);
+        Notification.Builder builder = new Notification.Builder(context)
                 .setShowWhen(false)
                 .setContentTitle(instance.getLabelOrDefault(context))
                 .setContentText(context.getString(R.string.alarm_alert_snooze_until,
@@ -309,6 +324,7 @@ final class AlarmNotifications {
                 .setPriority(NotificationCompat.PRIORITY_MAX)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);
 
         if (Utils.isNOrLater()) {
@@ -341,7 +357,9 @@ final class AlarmNotifications {
 
         String label = instance.mLabel;
         String alarmTime = AlarmUtils.getFormattedTime(context, instance.getAlarmTime());
-        NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
+
+        createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_LOW);
+        Notification.Builder builder = new Notification.Builder(context)
                 .setShowWhen(false)
                 .setContentTitle(context.getString(R.string.alarm_missed_title))
                 .setContentText(instance.mLabel.isEmpty() ? alarmTime :
@@ -352,6 +370,7 @@ final class AlarmNotifications {
                 .setPriority(NotificationCompat.PRIORITY_HIGH)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);
 
         if (Utils.isNOrLater()) {
@@ -384,7 +403,9 @@ final class AlarmNotifications {
         LogUtils.v("Displaying alarm notification for alarm instance: " + instance.mId);
 
         Resources resources = service.getResources();
-        NotificationCompat.Builder notification = new NotificationCompat.Builder(service)
+
+        createNotificationAlarmChannel(service, NotificationManager.IMPORTANCE_HIGH);
+        Notification.Builder notification = new Notification.Builder(service)
                 .setContentTitle(instance.getLabelOrDefault(service))
                 .setContentText(AlarmUtils.getFormattedTime(service, instance.getAlarmTime()))
                 .setColor(ContextCompat.getColor(service, R.color.default_background))
@@ -395,6 +416,7 @@ final class AlarmNotifications {
                 .setWhen(0)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);
 
         // Setup Snooze Action
@@ -489,4 +511,15 @@ final class AlarmNotifications {
         final boolean missedAlarm = instance.mAlarmState == AlarmInstance.MISSED_STATE;
         return missedAlarm ? ("MISSED " + timeKey) : timeKey;
     }
+
+    private static void createNotificationAlarmChannel(Context context, int important) {
+        if (!BuildCompat.isAtLeastO()) {
+            return;
+        }
+        final NotificationManager nm = context.getSystemService(NotificationManager.class);
+        final NotificationChannel channel = new NotificationChannel(CHANNEL_ID_ALARM,
+            context.getString(R.string.default_label),
+            important);
+            nm.createNotificationChannel(channel);
+    }
 }
diff --git a/src/com/android/deskclock/data/StopwatchNotificationBuilder.java b/src/com/android/deskclock/data/StopwatchNotificationBuilder.java
index 6e62f06..0418fdc 100644
--- a/src/com/android/deskclock/data/StopwatchNotificationBuilder.java
+++ b/src/com/android/deskclock/data/StopwatchNotificationBuilder.java
@@ -17,6 +17,8 @@
 package com.android.deskclock.data;
 
 import android.app.Notification;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
@@ -28,6 +30,7 @@ import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationCompat.Action;
 import android.support.v4.app.NotificationCompat.Builder;
 import android.support.v4.content.ContextCompat;
+import android.support.v4.os.BuildCompat;
 import android.widget.RemoteViews;
 
 import com.android.deskclock.R;
@@ -46,6 +49,7 @@ import static android.view.View.VISIBLE;
  */
 class StopwatchNotificationBuilder {
 
+    static final String CHANNEL_ID = "StopwatchNotification";
     public Notification build(Context context, NotificationModel nm, Stopwatch stopwatch) {
         @StringRes final int eventLabel = R.string.label_notification;
 
@@ -127,7 +131,9 @@ class StopwatchNotificationBuilder {
             content.setViewVisibility(R.id.state, VISIBLE);
         }
 
+        createNotificationStopwatchChannel(context, NotificationManager.IMPORTANCE_LOW);
         final Builder notification = new NotificationCompat.Builder(context)
+                .setChannelId(CHANNEL_ID)
                 .setLocalOnly(true)
                 .setOngoing(running)
                 .setCustomContentView(content)
@@ -148,4 +154,15 @@ class StopwatchNotificationBuilder {
 
         return notification.build();
     }
+
+    private static void createNotificationStopwatchChannel(Context context, int important) {
+        if (!BuildCompat.isAtLeastO()) {
+            return;
+        }
+        final NotificationManager nm = context.getSystemService(NotificationManager.class);
+        final NotificationChannel channel = new NotificationChannel(CHANNEL_ID,
+            context.getString(R.string.default_label),
+            important);
+            nm.createNotificationChannel(channel);
+    }
 }
diff --git a/src/com/android/deskclock/data/TimerNotificationBuilder.java b/src/com/android/deskclock/data/TimerNotificationBuilder.java
index 2119869..79c7be6 100644
--- a/src/com/android/deskclock/data/TimerNotificationBuilder.java
+++ b/src/com/android/deskclock/data/TimerNotificationBuilder.java
@@ -30,6 +30,11 @@ import android.support.v4.app.NotificationCompat;
 import android.support.v4.content.ContextCompat;
 import android.text.TextUtils;
 import android.widget.RemoteViews;
+import android.app.NotificationChannel;
+import android.app.Notification.Action;
+import android.app.NotificationManager;
+import android.support.v4.os.BuildCompat;
+import android.support.v4.app.NotificationManagerCompat;
 
 import com.android.deskclock.AlarmUtils;
 import com.android.deskclock.R;
@@ -41,8 +46,6 @@ import com.android.deskclock.timer.TimerService;
 import java.util.ArrayList;
 import java.util.List;
 
-import static android.support.v4.app.NotificationCompat.Action;
-import static android.support.v4.app.NotificationCompat.Builder;
 import static android.text.format.DateUtils.MINUTE_IN_MILLIS;
 import static android.text.format.DateUtils.SECOND_IN_MILLIS;
 
@@ -54,6 +57,8 @@ class TimerNotificationBuilder {
     private static final int REQUEST_CODE_UPCOMING = 0;
     private static final int REQUEST_CODE_MISSING = 1;
 
+    private static final String CHANNEL_ID_TIMER = "timer";
+
     public Notification build(Context context, NotificationModel nm, List<Timer> unexpired) {
         final Timer timer = unexpired.get(0);
         final int count = unexpired.size();
@@ -148,7 +153,8 @@ class TimerNotificationBuilder {
                 PendingIntent.getService(context, REQUEST_CODE_UPCOMING, showApp,
                         PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_UPDATE_CURRENT);
 
-        final Builder notification = new NotificationCompat.Builder(context)
+        createNotificationTimerChannel(context, NotificationManager.IMPORTANCE_HIGH);
+        Notification.Builder notification = new Notification.Builder(context)
                 .setOngoing(true)
                 .setLocalOnly(true)
                 .setShowWhen(false)
@@ -159,7 +165,7 @@ class TimerNotificationBuilder {
                 .setSmallIcon(R.drawable.stat_notify_timer)
                 .setSortKey(nm.getTimerNotificationSortKey())
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
-                .setStyle(new NotificationCompat.DecoratedCustomViewStyle())
+                .setChannelId(CHANNEL_ID_TIMER)
                 .setColor(ContextCompat.getColor(context, R.color.default_background));
 
         for (Action action : actions) {
@@ -261,7 +267,8 @@ class TimerNotificationBuilder {
                 .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_USER_ACTION);
         final PendingIntent pendingFullScreen = Utils.pendingActivityIntent(context, fullScreen);
 
-        final Builder notification = new NotificationCompat.Builder(context)
+        createNotificationTimerChannel(context, NotificationManager.IMPORTANCE_HIGH);
+        Notification.Builder notification = new Notification.Builder(context)
                 .setOngoing(true)
                 .setLocalOnly(true)
                 .setShowWhen(false)
@@ -271,7 +278,7 @@ class TimerNotificationBuilder {
                 .setDefaults(Notification.DEFAULT_LIGHTS)
                 .setSmallIcon(R.drawable.stat_notify_timer)
                 .setFullScreenIntent(pendingFullScreen, true)
-                .setStyle(new NotificationCompat.DecoratedCustomViewStyle())
+                .setChannelId(CHANNEL_ID_TIMER)
                 .setColor(ContextCompat.getColor(context, R.color.default_background));
 
         for (Action action : actions) {
@@ -344,7 +351,8 @@ class TimerNotificationBuilder {
                 PendingIntent.getService(context, REQUEST_CODE_MISSING, showApp,
                         PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_UPDATE_CURRENT);
 
-        final Builder notification = new NotificationCompat.Builder(context)
+        createNotificationTimerChannel(context, NotificationManager.IMPORTANCE_HIGH);
+        Notification.Builder notification = new Notification.Builder(context)
                 .setLocalOnly(true)
                 .setShowWhen(false)
                 .setAutoCancel(false)
@@ -354,8 +362,8 @@ class TimerNotificationBuilder {
                 .setSmallIcon(R.drawable.stat_notify_timer)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                 .setSortKey(nm.getTimerNotificationMissedSortKey())
-                .setStyle(new NotificationCompat.DecoratedCustomViewStyle())
                 .addAction(action)
+                .setChannelId(CHANNEL_ID_TIMER)
                 .setColor(ContextCompat.getColor(context, R.color.default_background));
 
         if (Utils.isNOrLater()) {
@@ -393,4 +401,15 @@ class TimerNotificationBuilder {
         content.setTextViewText(R.id.state, stateText);
         return content;
     }
+
+    private static void createNotificationTimerChannel(Context context, int important) {
+        if (!BuildCompat.isAtLeastO()) {
+            return;
+        }
+        final NotificationManager nm = context.getSystemService(NotificationManager.class);
+        final NotificationChannel channel = new NotificationChannel(CHANNEL_ID_TIMER,
+            context.getString(R.string.default_label),
+            important);
+            nm.createNotificationChannel(channel);
+    }
 }
-- 
1.9.1

