From 75fe6f1347d72f8e453cedf15c505c94b9fbc608 Mon Sep 17 00:00:00 2001
From: "Huang, Yang" <yang.huang@intel.com>
Date: Fri, 4 Aug 2017 08:09:20 +0800
Subject: [PATCH 06/17] Rpmb simulation in secure storage proxy

It's used only when real RPMB key is not programmed.

Jira: None
Test: Device boots to home screen.
Change-Id: Ieb2c93543c1a500c12579f3d24d0a7dfe0a7aa67
Signed-off-by: Huang, Yang <yang.huang@intel.com>
---
 trusty/storage/proxy/Android.bp |   2 +
 trusty/storage/proxy/proxy.c    |  35 ++-
 trusty/storage/proxy/rpmb-sim.c | 641 ++++++++++++++++++++++++++++++++++++++++
 trusty/storage/proxy/rpmb-sim.h |  25 ++
 trusty/storage/proxy/storage.c  |   4 +-
 trusty/storage/proxy/storage.h  |   4 +
 6 files changed, 699 insertions(+), 12 deletions(-)
 create mode 100644 trusty/storage/proxy/rpmb-sim.c
 create mode 100644 trusty/storage/proxy/rpmb-sim.h

diff --git a/trusty/storage/proxy/Android.bp b/trusty/storage/proxy/Android.bp
index da8542d..77c8503 100644
--- a/trusty/storage/proxy/Android.bp
+++ b/trusty/storage/proxy/Android.bp
@@ -21,8 +21,10 @@ cc_binary {
     srcs: [
         "ipc.c",
         "rpmb.c",
+        "rpmb-dev.c",
         "storage.c",
         "proxy.c",
+        "rpmb-sim.c",
     ],
 
     shared_libs: ["liblog"],
diff --git a/trusty/storage/proxy/proxy.c b/trusty/storage/proxy/proxy.c
index bfabd5e..f4b1f24 100644
--- a/trusty/storage/proxy/proxy.c
+++ b/trusty/storage/proxy/proxy.c
@@ -34,11 +34,17 @@
 #include "log.h"
 #include "rpmb.h"
 #include "rpmb-dev.h"
+#include "rpmb-sim.h"
 #include "storage.h"
 
 #define REQ_BUFFER_SIZE 4096
+/* /dev/block/mmcblk1p13 */
+#define RPMB_SIM_DEV_NAME       "/dev/block/by-name/teedata"
+
 static uint8_t req_buffer[REQ_BUFFER_SIZE + 1];
 
+static unsigned int rpmb_sim;
+
 static const char *ss_data_root;
 static const char *trusty_devname;
 static const char *rpmb_devname;
@@ -53,8 +59,6 @@ static const struct option _lopts[] =  {
     {0, 0, 0, 0}
 };
 
-static unsigned int rpmb_major;
-
 static void show_usage_and_exit(int code)
 {
     ALOGE("usage: storageproxyd -d <trusty_dev> -p <data_path> -r <rpmb_dev>\n");
@@ -155,8 +159,8 @@ static int handle_req(struct storage_msg *msg, const void *req, size_t req_len)
         break;
 
     case STORAGE_RPMB_SEND:
-        if (rpmb_major == MMC_BLOCK_MAJOR)
-            rc = rpmb_send(msg, req, req_len);
+        if (rpmb_sim)
+            rc = rpmb_sim_send(msg, req, req_len);
         else
             rc = rpmb_dev_send(msg, req, req_len);
         break;
@@ -242,6 +246,17 @@ int main(int argc, char *argv[])
     uint retry_cnt;
     struct stat st;
 
+    rc = rpmb_sim_open(RPMB_SIM_DEV_NAME);
+    if (rc < 0)
+        rpmb_sim = 0;
+    else
+        rpmb_sim = is_use_sim_rpmb();
+
+    if (rpmb_sim)
+        ALOGI("storage use simulation rpmb.\n");
+    else
+        ALOGI("storage use physical rpmb.\n");
+
     /*service is enabled with system rather than root privelege,
     so that drop_privs() is not required. This usage is more secure
     than enableing with root preveledge and dropping redundant privs.
@@ -263,12 +278,11 @@ int main(int argc, char *argv[])
     rc = lstat(rpmb_devname, &st);
     if (rc < 0)
         return EXIT_FAILURE;
-    rpmb_major = major(st.st_dev);
 
-    if (rpmb_major == MMC_BLOCK_MAJOR)
-        rc = rpmb_open(rpmb_devname);
-    else
+    if (!rpmb_sim) {
+        rpmb_sim_close();
         rc = rpmb_dev_open(rpmb_devname);
+    }
 
     if (rc < 0)
         return EXIT_FAILURE;
@@ -283,8 +297,9 @@ int main(int argc, char *argv[])
     ALOGE("exiting proxy loop with status (%d)\n", rc);
 
     ipc_disconnect();
-    if (rpmb_major == MMC_BLOCK_MAJOR)
-        rpmb_close();
+
+    if (rpmb_sim)
+        rpmb_sim_close();
     else
         rpmb_dev_close();
 
diff --git a/trusty/storage/proxy/rpmb-sim.c b/trusty/storage/proxy/rpmb-sim.c
new file mode 100644
index 0000000..88f3f4b
--- /dev/null
+++ b/trusty/storage/proxy/rpmb-sim.c
@@ -0,0 +1,641 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ * Copyright (C) 2017 Intel Corporation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <ctype.h>
+#include <errno.h>
+#include <stdbool.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+
+#include <fcntl.h>
+#include <inttypes.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+#include <openssl/hmac.h>
+
+#include "ipc.h"
+#include "storage.h"
+#include "log.h"
+
+struct rpmb_packet {
+    uint8_t              pad[196];
+    uint8_t              key_mac[32];
+    uint8_t              data[256];
+    uint8_t              nonce[16];
+    uint32_t             write_counter;
+    uint16_t             address;
+    uint16_t             block_count;
+    uint16_t             result;
+    uint16_t             req_resp;
+};
+
+enum rpmb_request {
+    RPMB_REQ_PROGRAM_KEY                = 0x0001,
+    RPMB_REQ_GET_COUNTER                = 0x0002,
+    RPMB_REQ_DATA_WRITE                 = 0x0003,
+    RPMB_REQ_DATA_READ                  = 0x0004,
+    RPMB_REQ_RESULT_READ                = 0x0005,
+};
+
+enum rpmb_response {
+    RPMB_RESP_PROGRAM_KEY               = 0x0100,
+    RPMB_RESP_GET_COUNTER               = 0x0200,
+    RPMB_RESP_DATA_WRITE                = 0x0300,
+    RPMB_RESP_DATA_READ                 = 0x0400,
+};
+
+enum rpmb_result {
+    RPMB_RES_OK                         = 0x0000,
+    RPMB_RES_GENERAL_FAILURE            = 0x0001,
+    RPMB_RES_AUTH_FAILURE               = 0x0002,
+    RPMB_RES_COUNT_FAILURE              = 0x0003,
+    RPMB_RES_ADDR_FAILURE               = 0x0004,
+    RPMB_RES_WRITE_FAILURE              = 0x0005,
+    RPMB_RES_READ_FAILURE               = 0x0006,
+    RPMB_RES_NO_AUTH_KEY                = 0x0007,
+
+    RPMB_RES_WRITE_COUNTER_EXPIRED      = 0x0080,
+};
+
+
+#define RPMB_FRAME_SIZE  512
+
+static int rpmb_fd = -1;
+static uint8_t read_buf[4096];
+
+/*
+ * 0~6 is magic
+ * 7~38 is rpmb key
+ * 39~41 is write counter
+ */
+#define KEY_MAGIC		"key_sim"
+#define KEY_MAGIC_ADDR		0
+#define KEY_MAGIC_LENGTH	7
+
+#define KEY_ADDR		7
+#define KEY_LENGTH		32
+
+#define WRITER_COUNTER_ADDR	39
+
+/* teedata size is 32M. But here only 256K~4M are available to use. */
+#define TEEDATA_SIZE		(4*1024*1024) //4M
+#define TEEDATA_BLOCK_COUNT	(TEEDATA_SIZE/256)
+
+
+inline uint32_t swap32(uint32_t val)
+{
+	return ((val & (uint32_t)0x000000ffUL) << 24)
+		| ((val & (uint32_t)0x0000ff00UL) <<  8)
+		| ((val & (uint32_t)0x00ff0000UL) >>  8)
+		| ((val & (uint32_t)0xff000000UL) >> 24);
+}
+
+inline uint16_t swap16(uint16_t val)
+{
+	return ((val & (uint16_t)0x00ffU) << 8)
+		| ((val & (uint16_t)0xff00U) >> 8);
+}
+
+static int rpmb_sim_operations(const void *rel_write_data,
+                        size_t rel_write_size, const void *write_data,
+                        size_t write_size, void *read_buf, size_t read_size);
+
+/*
+ * Executes the RPMB request at @r, sends response to storage service.
+ *
+ * @msg:     address of storage message header
+ * @r:       address of storage message request
+ * @req_len: length of resp in bytes
+ */
+int rpmb_sim_send(struct storage_msg *msg, const void *r,
+                             size_t req_len)
+{
+    int rc;
+    size_t exp_len;
+    const void *write_data = NULL;
+    const void *rel_write_data = NULL;
+    const struct storage_rpmb_send_req *req = r;
+
+    if (req_len < sizeof(req)) {
+        msg->result = STORAGE_ERR_NOT_VALID;
+        goto err_response;
+    }
+
+    exp_len = sizeof(*req) + req->reliable_write_size + req->write_size;
+    if (req_len != exp_len) {
+        ALOGE("%s: malformed rpmb request: invalid length (%zu != %zu)\n",
+                __func__, req_len, exp_len);
+        msg->result = STORAGE_ERR_NOT_VALID;
+        goto err_response;
+    }
+
+    if (req->reliable_write_size) {
+        if ((req->reliable_write_size % RPMB_FRAME_SIZE) != 0) {
+            ALOGE("%s: invalid reliable write size %u\n", __func__,
+                         req->reliable_write_size);
+            msg->result = STORAGE_ERR_NOT_VALID;
+            goto err_response;
+        }
+        rel_write_data = req->payload;
+    }
+
+    if (req->write_size) {
+        if ((req->write_size % RPMB_FRAME_SIZE) != 0) {
+            ALOGE("%s: invalid write size %u\n", __func__,
+                         req->write_size);
+            msg->result = STORAGE_ERR_NOT_VALID;
+            goto err_response;
+        }
+        write_data = req->payload + req->reliable_write_size;
+    }
+
+    if (req->read_size) {
+        if (req->read_size % RPMB_FRAME_SIZE != 0 ||
+            req->read_size > sizeof(read_buf)) {
+            ALOGE("%s: invalid read size %u\n", __func__,
+                         req->read_size);
+            msg->result = STORAGE_ERR_NOT_VALID;
+            goto err_response;
+        }
+    }
+
+    /* execute rpmb command */
+    rc = rpmb_sim_operations(rel_write_data, req->reliable_write_size,
+                             write_data, req->write_size,
+                             read_buf, req->read_size);
+    if (rc) {
+        ALOGE("%s: rpmb_storage_send failed: %d\n", __func__, rc);
+        msg->result = STORAGE_ERR_GENERIC;
+        goto err_response;
+    }
+
+    if (msg->flags & STORAGE_MSG_FLAG_POST_COMMIT) {
+        /*
+         * Nothing todo for post msg commit request as MMC_IOC_MULTI_CMD
+         * is fully synchronous in this implementation.
+         */
+    }
+
+    msg->result = STORAGE_NO_ERROR;
+    return ipc_respond(msg, read_buf, req->read_size);
+
+err_response:
+    return ipc_respond(msg, NULL, 0);
+}
+
+int rpmb_sim_open(const char *rpmb_devname)
+{
+    int rc;
+
+    rc = open(rpmb_devname, O_RDWR, 0);
+    if (rc < 0) {
+        ALOGE("%s: unable (%d) to open rpmb device '%s': %s\n",
+              __func__, errno, rpmb_devname, strerror(errno));
+        return rc;
+    }
+    rpmb_fd = rc;
+    return 0;
+}
+
+void rpmb_sim_close(void)
+{
+    close(rpmb_fd);
+    rpmb_fd = -1;
+}
+
+static int get_counter(uint32_t *counter)
+{
+    int rc = 0;
+
+    rc = read_with_retry(rpmb_fd, counter, sizeof(*counter), WRITER_COUNTER_ADDR);
+    if (rc < 0)
+    {
+        ALOGE("%s failed.\n", __func__);
+        return -1;
+    }
+
+    swap32(*counter);
+
+    return 0;
+}
+
+static int set_counter(const uint32_t *counter)
+{
+    int rc = 0;
+    uint32_t cnt = *counter;
+
+    swap32(cnt);
+    rc = write_with_retry(rpmb_fd, &cnt, sizeof(cnt), WRITER_COUNTER_ADDR);
+    if (rc < 0)
+    {
+        ALOGE("%s failed.\n", __func__);
+        return -1;
+    }
+
+    return 0;
+}
+
+static int is_key_programmed(void)
+{
+    int rc = 0;
+    uint8_t magic[KEY_MAGIC_LENGTH] = {0};
+
+    rc = read_with_retry(rpmb_fd, magic, KEY_MAGIC_LENGTH, KEY_MAGIC_ADDR);
+    if (rc < 0)
+    {
+        ALOGE("%s read magic failed.\n", __func__);
+        return 0;
+    }
+
+    if (memcmp(KEY_MAGIC, magic, KEY_MAGIC_LENGTH))
+        return 0;
+
+    return 1;
+}
+
+int is_use_sim_rpmb(void)
+{
+    return is_key_programmed();
+}
+
+static int get_key(uint8_t *key)
+{
+    int rc = 0;
+
+    rc = read_with_retry(rpmb_fd, key, 32, KEY_ADDR);
+    if (rc < 0)
+    {
+        ALOGE("%s failed.\n", __func__);
+        return -1;
+    }
+
+    return 0;
+}
+
+static int program_key(const uint8_t *key)
+{
+    int rc = 0;
+
+    rc = write_with_retry(rpmb_fd, key, 32, KEY_ADDR);
+    if (rc < 0)
+    {
+        ALOGE("%s failed at set key.\n", __func__);
+        return -1;
+    }
+
+    rc = write_with_retry(rpmb_fd, KEY_MAGIC, KEY_MAGIC_LENGTH, KEY_MAGIC_ADDR);
+    if (rc < 0)
+    {
+        ALOGE("%s failed at set magic.\n", __func__);
+        return -1;
+    }
+
+    return 0;
+}
+
+static int rpmb_mac(uint8_t *key, const struct rpmb_packet *packet,
+                    int packet_count, uint8_t *mac)
+{
+    int i;
+    int hmac_ret;
+    unsigned int md_len;
+    HMAC_CTX hmac_ctx;
+
+    HMAC_CTX_init(&hmac_ctx);
+    hmac_ret = HMAC_Init_ex(&hmac_ctx, key, 32, EVP_sha256(), NULL);
+    if (!hmac_ret) {
+        ALOGE("HMAC_Init_ex failed\n");
+        goto err;
+    }
+
+    for (i = 0; i < packet_count; i++) {
+        hmac_ret = HMAC_Update(&hmac_ctx, packet[i].data, 284);
+        if (!hmac_ret) {
+            ALOGE("HMAC_Update failed\n");
+            goto err;
+        }
+    }
+
+    hmac_ret = HMAC_Final(&hmac_ctx, mac, &md_len);
+    if (md_len != 32) {
+        ALOGE("bad md_len %d != %zd\n", md_len, 32);
+        exit(1);
+    }
+
+    if (!hmac_ret) {
+        ALOGE("HMAC_Final failed\n");
+        goto err;
+    }
+
+err:
+    HMAC_CTX_cleanup(&hmac_ctx);
+
+    return hmac_ret ? 0 : -1;
+}
+
+static int rpmb_program_key(const struct rpmb_packet* in_frame, uint32_t in_cnt,
+                            struct rpmb_packet* out_frame, uint32_t out_cnt)
+{
+    int ret = 0;
+    int err = RPMB_RES_WRITE_FAILURE;
+    uint32_t counter = 0;
+
+    if (in_cnt == 0  || in_frame == NULL)
+        return -EINVAL;
+
+    if (is_key_programmed())
+        err = RPMB_RES_GENERAL_FAILURE;
+    else
+        ret = program_key(in_frame->key_mac);
+
+    if (ret)
+        goto out;
+
+    ret = set_counter(&counter);
+    if (ret)
+        goto out;
+
+    err = RPMB_RES_OK;
+
+out:
+    if (out_frame) {
+        memset(out_frame, 0, out_cnt*sizeof(*out_frame));
+        out_frame->req_resp = swap16(RPMB_RESP_PROGRAM_KEY);
+        out_frame->result = swap16(err);
+    }
+
+    return ret;
+}
+
+static int rpmb_write(const struct rpmb_packet* in_frame, uint32_t in_cnt,
+                      struct rpmb_packet* out_frame, uint32_t out_cnt)
+{
+    int ret = 0;
+    int err = RPMB_RES_WRITE_FAILURE;
+    uint32_t i;
+    uint8_t key[32];
+    uint8_t mac[32];
+    uint32_t counter;
+    uint16_t addr;
+    uint16_t block_count;
+    uint8_t data[256*in_cnt];
+
+    if (in_cnt == 0  || in_frame == NULL)
+        return -EINVAL;
+
+    if (in_frame[0].req_resp != swap16(RPMB_REQ_DATA_WRITE))
+        return -EINVAL;
+
+    if (in_cnt > 2) {
+        err = RPMB_RES_GENERAL_FAILURE;
+        goto out;
+    }
+
+    addr = swap16(in_frame[0].address);
+    block_count = swap16(in_frame[0].block_count);
+
+    if (addr >= TEEDATA_BLOCK_COUNT) {
+        err = RPMB_RES_ADDR_FAILURE;
+        goto out;
+    }
+
+    if (addr + block_count > TEEDATA_BLOCK_COUNT)
+        goto out;
+
+    if (block_count == 0 || block_count > in_cnt) {
+        ret = -EINVAL;
+        err = RPMB_RES_GENERAL_FAILURE;
+        goto out;
+    }
+
+    if (!is_key_programmed()) {
+        err = RPMB_RES_NO_AUTH_KEY;
+        goto out;
+    }
+
+    if (get_counter(&counter))
+        goto out;
+
+    if (counter == 0xFFFFFFFF) {
+        err = RPMB_RES_WRITE_COUNTER_EXPIRED;
+        goto out;
+    }
+
+    if (counter != swap32(in_frame[0].write_counter)) {
+        err = RPMB_RES_COUNT_FAILURE;
+        goto out;
+    }
+
+    if (get_key(key)) {
+        err = RPMB_RES_GENERAL_FAILURE;
+        goto out;
+    }
+
+    if (rpmb_mac(key, in_frame, in_cnt, mac)) {
+        err = RPMB_RES_GENERAL_FAILURE;
+        goto out;
+    }
+
+    if (memcmp(in_frame[in_cnt - 1].key_mac, mac, 32)) {
+        ALOGE("%s wrong mac.\n", __func__);
+        err = RPMB_RES_AUTH_FAILURE;
+        goto out;
+    }
+
+    for (i = 0; i < in_cnt; i++)
+        memcpy(data + i * 256, in_frame[i].data, 256);
+
+    if (write_with_retry(rpmb_fd, data, sizeof(data), 256 * addr) < 0) {
+        ALOGE("%s write_with_retry failed.\n", __func__);
+        goto out;
+    }
+
+    ++counter;
+    if (set_counter(&counter)) {
+        ALOGE("%s set_counter failed.\n", __func__);
+        goto out;
+    }
+
+    err = RPMB_RES_OK;
+
+out:
+    if (out_frame) {
+        memset(out_frame, 0, out_cnt*sizeof(*out_frame));
+        out_frame->req_resp = swap16(RPMB_RESP_DATA_WRITE);
+        out_frame->result = swap16(err);
+        if (err == RPMB_RES_OK) {
+            out_frame->address = swap16(addr);
+            out_frame->write_counter = swap32(counter);
+            rpmb_mac(key, out_frame, 1, out_frame->key_mac);
+        }
+    }
+
+    return ret;
+}
+
+static int rpmb_read(const struct rpmb_packet* in_frame, uint32_t in_cnt,
+                     struct rpmb_packet* out_frame, uint32_t out_cnt)
+{
+    int ret = 0;
+    uint32_t i;
+    int err = RPMB_RES_READ_FAILURE;
+    uint8_t key[32];
+    uint8_t mac[32];
+    uint16_t addr;
+    uint8_t data[256*out_cnt];
+
+    if (in_cnt != 1 || in_frame == NULL)
+        return -EINVAL;
+
+    if (in_frame->req_resp != swap16(RPMB_REQ_DATA_READ))
+        return -EINVAL;
+
+    addr = swap16(in_frame->address);
+
+    if (addr >= TEEDATA_BLOCK_COUNT) {
+        err = RPMB_RES_ADDR_FAILURE;
+        goto out;
+    }
+
+    if (addr + out_cnt > TEEDATA_BLOCK_COUNT)
+        goto out;
+
+    if (!is_key_programmed()) {
+        err = RPMB_RES_NO_AUTH_KEY;
+        goto out;
+    }
+
+    if (read_with_retry(rpmb_fd, data, sizeof(data), 256 * addr) < 0) {
+        ALOGE("%s read_with_retry failed.\n", __func__);
+        goto out;
+    }
+
+    err = RPMB_RES_OK;
+
+out:
+    if (out_frame) {
+        memset(out_frame, 0, out_cnt*sizeof(*out_frame));
+        for (i = 0; i < out_cnt; i++) {
+            memcpy(out_frame[i].nonce, in_frame[0].nonce, sizeof(in_frame[0].nonce));
+            out_frame[i].req_resp = swap16(RPMB_RESP_DATA_READ);
+            out_frame[i].block_count = swap16(out_cnt);
+            out_frame[i].address = in_frame[0].address;
+            memcpy(out_frame[i].data, data+256*i, 256);
+        }
+        if (get_key(key))
+            ALOGE("%s, get_key failed.\n", __func__);
+
+        out_frame[out_cnt - 1].result = swap16(err);
+        rpmb_mac(key, out_frame, out_cnt, mac);
+        memcpy(out_frame[out_cnt - 1].key_mac, mac, sizeof(mac));
+    }
+
+    return ret;
+}
+
+static int rpmb_get_counter(const struct rpmb_packet* in_frame, uint32_t in_cnt,
+                            struct rpmb_packet* out_frame, uint32_t out_cnt)
+{
+    int ret = 0;
+    int err = RPMB_RES_COUNT_FAILURE;
+    uint8_t key[32];
+    uint32_t counter;
+
+    if (in_cnt != 1 || in_frame == NULL)
+        return -EINVAL;
+
+    if (in_frame->req_resp != swap16(RPMB_REQ_GET_COUNTER))
+        return -EINVAL;
+
+    if (!is_key_programmed()) {
+        err = RPMB_RES_NO_AUTH_KEY;
+        goto out;
+    }
+
+    if (get_key(key))
+        goto out;
+
+    if (get_counter(&counter))
+        goto out;
+
+     err = RPMB_RES_OK;
+
+out:
+    if (out_frame) {
+        memset(out_frame, 0, sizeof(*out_frame)*out_cnt);
+        out_frame->result = swap16(err);
+        out_frame->req_resp = swap16(RPMB_RESP_GET_COUNTER);
+        memcpy(out_frame->nonce, in_frame[0].nonce, sizeof(in_frame[0].nonce));
+
+        if (err == RPMB_RES_OK) {
+            out_frame->write_counter = swap32(counter);
+            rpmb_mac(key, out_frame, out_cnt, out_frame->key_mac);
+        }
+    }
+
+    return ret;
+}
+
+/*
+ *                rel_write       write      read
+ * RPMB_READ          0             1        1~N
+ * RPMB_WRITE        1~N            1         1
+ * GET_COUNTER        0             1         1
+ * PROGRAM_KEY        1             1         1
+ */
+static int rpmb_sim_operations(const void *rel_write_data, size_t rel_write_size,
+                        const void *write_data, size_t write_size,
+                        void *read_buf, size_t read_size)
+{
+    int ret = -1;
+
+    if (rel_write_size) {
+        int nframe = rel_write_size/RPMB_FRAME_SIZE;
+        struct rpmb_packet rel_write_frame[nframe];
+        memcpy(rel_write_frame, rel_write_data, sizeof(rel_write_frame));
+        if (rel_write_frame[0].req_resp == swap16(RPMB_REQ_DATA_WRITE))  {
+            if (write_size/RPMB_FRAME_SIZE &&
+                   ((struct rpmb_packet*)write_data)->req_resp == swap16(RPMB_REQ_RESULT_READ))
+                ret = rpmb_write(rel_write_frame, nframe, read_buf, read_size/RPMB_FRAME_SIZE);
+            else
+                ret = rpmb_write(rel_write_frame, nframe, NULL, 0);
+        }
+        else if (rel_write_frame[0].req_resp == swap16(RPMB_REQ_PROGRAM_KEY)) {
+            if (write_size/RPMB_FRAME_SIZE &&
+                   ((struct rpmb_packet*)write_data)->req_resp == swap16(RPMB_REQ_RESULT_READ))
+                ret = rpmb_program_key(rel_write_frame, 1, read_buf, read_size/RPMB_FRAME_SIZE);
+            else
+                ret = rpmb_program_key(rel_write_frame, 1, NULL, 0);
+        }
+    }
+    else if (write_size) {
+        struct rpmb_packet write_frame[write_size/RPMB_FRAME_SIZE];
+        memcpy(write_frame, write_data, sizeof(write_frame));
+        if (write_frame[0].req_resp == swap16(RPMB_REQ_DATA_READ)) {
+            ret = rpmb_read(write_frame, 1, read_buf, read_size/RPMB_FRAME_SIZE);
+        }
+        else if (write_frame[0].req_resp == swap16(RPMB_REQ_GET_COUNTER)) {
+            ret = rpmb_get_counter(write_frame, 1, read_buf, 1);
+        }
+    }
+
+    return ret;
+}
+
diff --git a/trusty/storage/proxy/rpmb-sim.h b/trusty/storage/proxy/rpmb-sim.h
new file mode 100644
index 0000000..68ac4cd
--- /dev/null
+++ b/trusty/storage/proxy/rpmb-sim.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ * Copyright (C) 2017 Intel Corporation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#pragma once
+
+#include <stdint.h>
+#include <trusty/interface/storage.h>
+
+int rpmb_sim_open(const char *rpmb_devname);
+int rpmb_sim_send(struct storage_msg *msg, const void *r, size_t req_len);
+void rpmb_sim_close(void);
+int is_use_sim_rpmb(void);
diff --git a/trusty/storage/proxy/storage.c b/trusty/storage/proxy/storage.c
index 05d004f..7e6c4a4 100644
--- a/trusty/storage/proxy/storage.c
+++ b/trusty/storage/proxy/storage.c
@@ -123,7 +123,7 @@ static enum storage_err translate_errno(int error)
     return result;
 }
 
-static ssize_t write_with_retry(int fd, const void *buf_, size_t size, off_t offset)
+ssize_t write_with_retry(int fd, const void *buf_, size_t size, off_t offset)
 {
     ssize_t rc;
     const uint8_t *buf = buf_;
@@ -139,7 +139,7 @@ static ssize_t write_with_retry(int fd, const void *buf_, size_t size, off_t off
     return 0;
 }
 
-static ssize_t read_with_retry(int fd, void *buf_, size_t size, off_t offset)
+ssize_t read_with_retry(int fd, void *buf_, size_t size, off_t offset)
 {
     ssize_t rc;
     size_t  rcnt = 0;
diff --git a/trusty/storage/proxy/storage.h b/trusty/storage/proxy/storage.h
index 5a670d4..4d659b1 100644
--- a/trusty/storage/proxy/storage.h
+++ b/trusty/storage/proxy/storage.h
@@ -43,3 +43,7 @@ int storage_init(const char *dirname);
 
 int storage_sync_checkpoint(void);
 
+ssize_t write_with_retry(int fd, const void *buf_, size_t size, off_t offset);
+
+ssize_t read_with_retry(int fd, void *buf_, size_t size, off_t offset);
+
-- 
2.7.4

