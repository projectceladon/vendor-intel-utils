From 30fba0efe0805a5aa3ebc549056a7162017cb2d8 Mon Sep 17 00:00:00 2001
From: Sen Jiang <senj@google.com>
Date: Tue, 17 Apr 2018 16:32:29 -0700
Subject: Check if FileDeltaProcessor succeeded.

Bug: None
Test: brillo_update_payload generate
Change-Id: Idd9015170370bcffeb9515506fcccff9794a1659

diff --git a/payload_generator/delta_diff_utils.cc b/payload_generator/delta_diff_utils.cc
index c0962bf..4d869b0 100644
--- a/payload_generator/delta_diff_utils.cc
+++ b/payload_generator/delta_diff_utils.cc
@@ -218,7 +218,7 @@ class FileDeltaProcessor : public base::DelegateSimpleThread::Delegate {
   void Run() override;
 
   // Merge each file processor's ops list to aops.
-  void MergeOperation(vector<AnnotatedOperation>* aops);
+  bool MergeOperation(vector<AnnotatedOperation>* aops);
 
  private:
   const string& old_part_;  // NOLINT(runtime/member_string_references)
@@ -239,6 +239,8 @@ class FileDeltaProcessor : public base::DelegateSimpleThread::Delegate {
   // The list of ops to reach the new file from the old file.
   vector<AnnotatedOperation> file_aops_;
 
+  bool failed_ = false;
+
   DISALLOW_COPY_AND_ASSIGN(FileDeltaProcessor);
 };
 
@@ -259,6 +261,17 @@ void FileDeltaProcessor::Run() {
                      blob_file_)) {
     LOG(ERROR) << "Failed to generate delta for " << name_ << " ("
                << new_extents_blocks_ << " blocks)";
+    failed_ = true;
+    return;
+  }
+
+  if (!version_.InplaceUpdate()) {
+    if (!ABGenerator::FragmentOperations(
+            version_, &file_aops_, new_part_, blob_file_)) {
+      LOG(ERROR) << "Failed to fragment operations for " << name_;
+      failed_ = true;
+      return;
+    }
   }
 
   LOG(INFO) << "Encoded file " << name_ << " (" << new_extents_blocks_
@@ -266,9 +279,12 @@ void FileDeltaProcessor::Run() {
             << " seconds.";
 }
 
-void FileDeltaProcessor::MergeOperation(vector<AnnotatedOperation>* aops) {
+bool FileDeltaProcessor::MergeOperation(vector<AnnotatedOperation>* aops) {
+  if (failed_)
+    return false;
   aops->reserve(aops->size() + file_aops_.size());
   std::move(file_aops_.begin(), file_aops_.end(), std::back_inserter(*aops));
+  return true;
 }
 
 bool DeltaReadPartition(vector<AnnotatedOperation>* aops,
@@ -401,7 +417,7 @@ bool DeltaReadPartition(vector<AnnotatedOperation>* aops,
   thread_pool.JoinAll();
 
   for (auto& processor : file_delta_processors) {
-    processor.MergeOperation(aops);
+    TEST_AND_RETURN_FALSE(processor.MergeOperation(aops));
   }
 
   return true;
