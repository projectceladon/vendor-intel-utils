From 4403e1e02210cdc871be73ff630ac43b65c00f4d Mon Sep 17 00:00:00 2001
From: Harish Krupo <harish.krupo.kps@intel.com>
Date: Sat, 3 Feb 2018 13:32:18 +0530
Subject: [PATCH 3/4] vars.c: Generate serial number when not available.

Generate a serial number when a serial number is not available
on the device. This is accomplished by appending a generated
random number which matches the regex [A-Z0-9] to the string
"00badbios0". This number is then stored in an EFI var to be used
on subsequent reboots.

Jira: None
Test: None

Change-Id: I40d59444a9ef1b7ea3aa9a0fd2f553e5cf118600
Signed-off-by: Harish Krupo <harish.krupo.kps@intel.com>
---
 libkernelflinger/vars.c | 41 ++++++++++++++++++++++++++++++++++-------
 1 file changed, 34 insertions(+), 7 deletions(-)

diff --git a/libkernelflinger/vars.c b/libkernelflinger/vars.c
index 44e82af..8d73f8a 100644
--- a/libkernelflinger/vars.c
+++ b/libkernelflinger/vars.c
@@ -765,6 +765,28 @@ char *get_serialno_var()
 	return (char *)data;
 }
 
+/**
+ * Generate a random serial number of length len which matches
+ * the regex [A-Z0-9]
+ */
+void generate_random_serial_number(CHAR8* string, int len) {
+	int i, ret;
+
+	ret = generate_random_numbers(string, len);
+	if (EFI_ERROR(ret))
+		efi_perror(ret, L"Failed to generate random number");
+
+	for (i = 0; i < len; i++) {
+		CHAR8 curr = string[i];
+		curr = curr % 36;
+		if (curr < 26)
+			string[i] = curr + 'A';
+		else
+			string[i] = curr - 26 + '0';
+	}
+}
+
+
 /* Per Android CDD, the value must be 7-bit ASCII and match the regex
  * ^[a-zA-Z0-9](6,20)$  */
 char *get_serial_number(void)
@@ -774,6 +796,7 @@ char *get_serial_number(void)
 	char *pos;
 	unsigned int zeroes = 0;
 	UINTN len;
+	int ret;
 
 	if (serialno[0] != '\0')
 		return serialno;
@@ -829,19 +852,23 @@ char *get_serial_number(void)
 
 	return serialno;
 bad:
-#ifdef BUILD_ANDROID_THINGS
 	pos = get_serialno_var();
+
 	if (pos == NULL) {
-		error(L"SERIAL number is NULL\n");
-		strncpy((CHAR8 *)serialno, (CHAR8 *)"00badbios00badbios00", SERIALNO_MAX_SIZE);
+		CHAR8 gen_string[12] = "";
+		generate_random_serial_number(gen_string, 10);
+
+		efi_snprintf((CHAR8*)serialno, SERIALNO_MAX_SIZE + 1, (CHAR8*) "00badbios0%a", gen_string);
+		ret = set_efi_variable(&loader_guid, SERIAL_NUM_VAR, SERIALNO_MAX_SIZE + 1, (VOID *)serialno, TRUE, FALSE);
+		if (EFI_ERROR(ret))
+			efi_perror(ret, L"Failed to set the uefi variable");
+
 	} else {
-		error(L"Valid serial number read from EFI vars\n");
+		error(L"Serial number read from EFI var\n");
 		strncpy((CHAR8 *)serialno, (CHAR8 *)pos, SERIALNO_MAX_SIZE);
 		FreePool(pos);
 	}
-#else
-	strncpy((CHAR8 *)serialno, (CHAR8 *)"00badbios00badbios00", SERIALNO_MAX_SIZE);
-#endif
+
 	return serialno;
 }
 
-- 
1.9.1

