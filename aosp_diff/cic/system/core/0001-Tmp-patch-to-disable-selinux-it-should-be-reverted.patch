From ac01e54cc4c0aca5b676835329e9f1638fde39a4 Mon Sep 17 00:00:00 2001
From: Xie Chao <chao.xie@intel.com>
Date: Fri, 9 Aug 2019 13:32:48 +0800
Subject: [PATCH 1/8] Tmp patch to disable selinux, it should be reverted

Change-Id: Ia0e0849b133135038ea36ea1c4e372d83af385ab
Tracked-On:
Signed-off-by: Xie Chao <chao.xie@intel.com>
---
 adb/daemon/main.cpp       |  2 ++
 init/builtins.cpp         |  6 ++++--
 init/devices.cpp          |  6 ++++++
 init/init.cpp             |  5 ++++-
 init/property_service.cpp | 21 ++++++++++++++++++++-
 init/selinux.cpp          |  2 ++
 init/service.cpp          |  6 ++++++
 init/subcontext.cpp       |  2 ++
 init/util.cpp             | 14 ++++++++++++++
 9 files changed, 60 insertions(+), 4 deletions(-)

diff --git a/adb/daemon/main.cpp b/adb/daemon/main.cpp
index e5a49171b..6d4a26db9 100644
--- a/adb/daemon/main.cpp
+++ b/adb/daemon/main.cpp
@@ -165,9 +165,11 @@ static void drop_privileges(int server_port) {
         minijail_enter(jail.get());
 
         if (root_seclabel != nullptr) {
+#ifndef _DISALBE_SELINUX_
             if (selinux_android_setcon(root_seclabel) < 0) {
                 LOG(FATAL) << "Could not set SELinux context";
             }
+#endif
         }
         std::string error;
         std::string local_name =
diff --git a/init/builtins.cpp b/init/builtins.cpp
index 25f324ce5..6d9a53402 100644
--- a/init/builtins.cpp
+++ b/init/builtins.cpp
@@ -741,20 +741,22 @@ static Result<Success> do_trigger(const BuiltinArguments& args) {
 }
 
 static int MakeSymlink(const std::string& target, const std::string& linkpath) {
+#ifndef _DISALBE_SELINUX_
     std::string secontext;
     // Passing 0 for mode should work.
     if (SelabelLookupFileContext(linkpath, 0, &secontext) && !secontext.empty()) {
         setfscreatecon(secontext.c_str());
     }
-
+#endif
     int rc = symlink(target.c_str(), linkpath.c_str());
 
+#ifndef _DISALBE_SELINUX_
     if (!secontext.empty()) {
         int save_errno = errno;
         setfscreatecon(nullptr);
         errno = save_errno;
     }
-
+#endif
     return rc;
 }
 
diff --git a/init/devices.cpp b/init/devices.cpp
index 159c75e03..95cb99d6d 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -260,6 +260,7 @@ void DeviceHandler::MakeDevice(const std::string& path, bool block, int major, i
     mode |= (block ? S_IFBLK : S_IFCHR);
 
     std::string secontext;
+#ifndef _DISALBE_SELINUX_
     if (!SelabelLookupFileContextBestMatch(path, links, mode, &secontext)) {
         PLOG(ERROR) << "Device '" << path << "' not created; cannot find SELinux label";
         return;
@@ -267,6 +268,7 @@ void DeviceHandler::MakeDevice(const std::string& path, bool block, int major, i
     if (!secontext.empty()) {
         setfscreatecon(secontext.c_str());
     }
+#endif
 
     dev_t dev = makedev(major, minor);
     /* Temporarily change egid to avoid race condition setting the gid of the
@@ -281,6 +283,7 @@ void DeviceHandler::MakeDevice(const std::string& path, bool block, int major, i
     /* If the node already exists update its SELinux label to handle cases when
      * it was created with the wrong context during coldboot procedure. */
     if (mknod(path.c_str(), mode, dev) && (errno == EEXIST) && !secontext.empty()) {
+#ifndef _DISALBE_SELINUX_
         char* fcon = nullptr;
         int rc = lgetfilecon(path.c_str(), &fcon);
         if (rc < 0) {
@@ -295,6 +298,7 @@ void DeviceHandler::MakeDevice(const std::string& path, bool block, int major, i
             PLOG(ERROR) << "Cannot set '" << secontext << "' SELinux label on '" << path
                         << "' device";
         }
+#endif
     }
 
 out:
@@ -303,9 +307,11 @@ out:
         PLOG(FATAL) << "setegid(AID_ROOT) failed";
     }
 
+#ifndef _DISALBE_SELINUX_
     if (!secontext.empty()) {
         setfscreatecon(nullptr);
     }
+#endif
 }
 
 // replaces any unacceptable characters with '_', the
diff --git a/init/init.cpp b/init/init.cpp
index 6b03bc94d..efbb02af4 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -653,8 +653,9 @@ int SecondStageMain(int argc, char** argv) {
 
     // Make the time that init started available for bootstat to log.
     property_set("ro.boottime.init", getenv("INIT_STARTED_AT"));
+#ifndef _DISALBE_SELINUX_
     property_set("ro.boottime.init.selinux", getenv("INIT_SELINUX_TOOK"));
-
+#endif
     // Set libavb version for Framework-only OTA match in Treble build.
     const char* avb_version = getenv("INIT_AVB_VERSION");
     if (avb_version) property_set("ro.boot.avb_version", avb_version);
@@ -672,9 +673,11 @@ int SecondStageMain(int argc, char** argv) {
     unsetenv("INIT_FORCE_DEBUGGABLE");
 
     // Now set up SELinux for second stage.
+#ifndef _DISALBE_SELINUX_
     SelinuxSetupKernelLogging();
     SelabelInitialize();
     SelinuxRestoreContext();
+#endif
 
     Epoll epoll;
     if (auto result = epoll.Open(); !result) {
diff --git a/init/property_service.cpp b/init/property_service.cpp
index f2c7462ab..b29864de6 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -128,6 +128,7 @@ bool CanReadProperty(const std::string& source_context, const std::string& name)
 
 static bool CheckMacPerms(const std::string& name, const char* target_context,
                           const char* source_context, const ucred& cr) {
+#ifndef _DISALBE_SELINUX_
     if (!target_context || !source_context) {
         return false;
     }
@@ -139,7 +140,9 @@ static bool CheckMacPerms(const std::string& name, const char* target_context,
 
     bool has_access = (selinux_check_access(source_context, target_context, "property_service",
                                             "set", &audit_data) == 0);
-
+#else
+    bool has_access = true;
+#endif
     return has_access;
 }
 
@@ -334,10 +337,14 @@ class SocketConnection {
     const ucred& cred() { return cred_; }
 
     std::string source_context() const {
+#ifndef _DISALBE_SELINUX_
         char* source_context = nullptr;
         getpeercon(socket_, &source_context);
         std::string result = source_context;
         freecon(source_context);
+#else
+	std::string result;
+#endif
         return result;
     }
 
@@ -429,7 +436,11 @@ bool CheckControlPropertyPerms(const std::string& name, const std::string& value
         property_info_area->GetPropertyInfo(control_string_legacy.c_str(), &target_context_legacy,
                                             &type_legacy);
 
+#ifndef _DISALBE_SELINUX_
         if (CheckMacPerms(control_string_legacy, target_context_legacy, source_context.c_str(), cr)) {
+#else
+        if (CheckMacPerms(control_string_legacy, target_context_legacy, NULL, cr)) {
+#endif
             return true;
         }
     }
@@ -440,7 +451,11 @@ bool CheckControlPropertyPerms(const std::string& name, const std::string& value
     property_info_area->GetPropertyInfo(control_string_full.c_str(), &target_context_full,
                                         &type_full);
 
+#ifndef _DISALBE_SELINUX_
     return CheckMacPerms(control_string_full, target_context_full, source_context.c_str(), cr);
+#else
+    return CheckMacPerms(control_string_full, target_context_full, NULL, cr);
+#endif
 }
 
 // This returns one of the enum of PROP_SUCCESS or PROP_ERROR*.
@@ -465,7 +480,11 @@ uint32_t CheckPermissions(const std::string& name, const std::string& value,
     const char* type = nullptr;
     property_info_area->GetPropertyInfo(name.c_str(), &target_context, &type);
 
+#ifndef _DISALBE_SELINUX_
     if (!CheckMacPerms(name, target_context, source_context.c_str(), cr)) {
+#else
+    if (!CheckMacPerms(name, target_context, NULL, cr)) {
+#endif
         *error = "SELinux permission check failed";
         return PROP_ERROR_PERMISSION_DENIED;
     }
diff --git a/init/selinux.cpp b/init/selinux.cpp
index 86238b430..e156b0f30 100644
--- a/init/selinux.cpp
+++ b/init/selinux.cpp
@@ -523,9 +523,11 @@ int SetupSelinux(char** argv) {
         InstallRebootSignalHandlers();
     }
 
+#ifndef _DISALBE_SELINUX_
     // Set up SELinux, loading the SELinux policy.
     SelinuxSetupKernelLogging();
     SelinuxInitialize();
+#endif
 
     // We're in the kernel domain and want to transition to the init domain.  File systems that
     // store SELabels in their xattrs, such as ext4 do not need an explicit restorecon here,
diff --git a/init/service.cpp b/init/service.cpp
index ccc37b70c..07ecde1ee 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -70,6 +70,7 @@ using android::base::WriteStringToFile;
 namespace android {
 namespace init {
 
+#ifndef _DISALBE_SELINUX_
 static Result<std::string> ComputeContextFromExecutable(const std::string& service_path) {
     std::string computed_context;
 
@@ -105,6 +106,7 @@ static Result<std::string> ComputeContextFromExecutable(const std::string& servi
     }
     return computed_context;
 }
+#endif
 
 Result<Success> Service::SetUpMountNamespace() const {
     constexpr unsigned int kSafeFlags = MS_NODEV | MS_NOEXEC | MS_NOSUID;
@@ -317,11 +319,13 @@ void Service::SetProcessAttributes() {
             PLOG(FATAL) << "setuid failed for " << name_;
         }
     }
+#ifndef _DISALBE_SELINUX_
     if (!seclabel_.empty()) {
         if (setexeccon(seclabel_.c_str()) < 0) {
             PLOG(FATAL) << "cannot setexeccon('" << seclabel_ << "') for " << name_;
         }
     }
+#endif
     if (priority_ != 0) {
         if (setpriority(PRIO_PROCESS, 0, priority_) != 0) {
             PLOG(FATAL) << "setpriority failed for " << name_;
@@ -933,6 +937,7 @@ Result<Success> Service::Start() {
     }
 
     std::string scon;
+#ifndef _DISALBE_SELINUX_
     if (!seclabel_.empty()) {
         scon = seclabel_;
     } else {
@@ -942,6 +947,7 @@ Result<Success> Service::Start() {
         }
         scon = *result;
     }
+#endif
 
     if (!IsRuntimeApexReady() && !pre_apexd_) {
         // If this service is started before the runtime APEX gets available,
diff --git a/init/subcontext.cpp b/init/subcontext.cpp
index 092c51ceb..11451bac5 100644
--- a/init/subcontext.cpp
+++ b/init/subcontext.cpp
@@ -250,9 +250,11 @@ void Subcontext::Fork() {
             PLOG(FATAL) << "Could not dup child_fd";
         }
 
+#ifndef _DISALBE_SELINUX_
         if (setexeccon(context_.c_str()) < 0) {
             PLOG(FATAL) << "Could not set execcon for '" << context_ << "'";
         }
+#endif
 
         auto init_path = GetExecutablePath();
         auto child_fd_string = std::to_string(child_fd);
diff --git a/init/util.cpp b/init/util.cpp
index 63d2d4442..a87c9d7ed 100644
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -83,12 +83,14 @@ Result<uid_t> DecodeUid(const std::string& name) {
  */
 int CreateSocket(const char* name, int type, bool passcred, mode_t perm, uid_t uid, gid_t gid,
                  const char* socketcon) {
+#ifndef _DISALBE_SELINUX_
     if (socketcon) {
         if (setsockcreatecon(socketcon) == -1) {
             PLOG(ERROR) << "setsockcreatecon(\"" << socketcon << "\") failed";
             return -1;
         }
     }
+#endif
 
     android::base::unique_fd fd(socket(PF_UNIX, type, 0));
     if (fd < 0) {
@@ -96,7 +98,9 @@ int CreateSocket(const char* name, int type, bool passcred, mode_t perm, uid_t u
         return -1;
     }
 
+#ifndef _DISALBE_SELINUX_
     if (socketcon) setsockcreatecon(NULL);
+#endif
 
     struct sockaddr_un addr;
     memset(&addr, 0 , sizeof(addr));
@@ -125,9 +129,11 @@ int CreateSocket(const char* name, int type, bool passcred, mode_t perm, uid_t u
     int ret = bind(fd, (struct sockaddr *) &addr, sizeof (addr));
     int savederrno = errno;
 
+#ifndef _DISALBE_SELINUX_
     if (!secontext.empty()) {
         setfscreatecon(nullptr);
     }
+#endif
 
     if (ret) {
         errno = savederrno;
@@ -181,18 +187,22 @@ Result<std::string> ReadFile(const std::string& path) {
 }
 
 static int OpenFile(const std::string& path, int flags, mode_t mode) {
+#ifndef _DISALBE_SELINUX_
     std::string secontext;
     if (SelabelLookupFileContext(path, mode, &secontext) && !secontext.empty()) {
         setfscreatecon(secontext.c_str());
     }
+#endif
 
     int rc = open(path.c_str(), flags, mode);
 
+#ifndef _DISALBE_SELINUX_
     if (!secontext.empty()) {
         int save_errno = errno;
         setfscreatecon(nullptr);
         errno = save_errno;
     }
+#endif
 
     return rc;
 }
@@ -252,18 +262,22 @@ void import_kernel_cmdline(bool in_qemu,
 }
 
 bool make_dir(const std::string& path, mode_t mode) {
+#ifndef _DISALBE_SELINUX_
     std::string secontext;
     if (SelabelLookupFileContext(path, mode, &secontext) && !secontext.empty()) {
         setfscreatecon(secontext.c_str());
     }
+#endif
 
     int rc = mkdir(path.c_str(), mode);
 
+#ifndef _DISALBE_SELINUX_
     if (!secontext.empty()) {
         int save_errno = errno;
         setfscreatecon(nullptr);
         errno = save_errno;
     }
+#endif
 
     return rc == 0;
 }
-- 
2.21.0

