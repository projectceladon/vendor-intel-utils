From 0b42496595bb91b667ba8b80f0ddb4ab03b62f6b Mon Sep 17 00:00:00 2001
From: Xie Chao <chao.xie@intel.com>
Date: Fri, 19 Jul 2019 11:38:37 +0800
Subject: [PATCH 2/8] this patch is used to deal with multiple input device,

It will be reverted later

Change-Id: I891864ff39a6d038353ed47a6f550bc867bdca88
Tracked-On:
Signed-off-by: Xie Chao <chao.xie@intel.com>
---
 init/devices.cpp | 37 +++++++++++++++++++++++++++++++++++++
 init/devices.h   |  1 +
 2 files changed, 38 insertions(+)

diff --git a/init/devices.cpp b/init/devices.cpp
index 95cb99d6d..6194bc269 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -32,6 +32,7 @@
 #include <android-base/logging.h>
 #include <android-base/stringprintf.h>
 #include <android-base/strings.h>
+#include <cutils/properties.h>
 #include <private/android_filesystem_config.h>
 #include <selinux/android.h>
 #include <selinux/selinux.h>
@@ -421,6 +422,39 @@ void DeviceHandler::HandleDevice(const std::string& action, const std::string& d
     }
 }
 
+bool DeviceHandler::is_filtered(const std::string path) {
+    int id = property_get_int32("ro.container.id", 0);
+    char conf_file_path[32];
+    memset(conf_file_path, 0 , 32);
+    sprintf(conf_file_path,"/ipc/config/input/input%d", id);
+    LOG(VERBOSE) << "INPUT-FILTER: check path: " << path;
+    FILE* fp = fopen(conf_file_path, "r");
+    if (fp == NULL) {
+        LOG(ERROR) << "cannot open input config file %s\n" << conf_file_path;
+        return true;
+    }
+    char* line = NULL;
+    size_t len = 0;
+    ssize_t read;
+    while ((read = getline(&line, &len, fp)) != -1) {
+        line[strlen(line) - 1] = 0;
+        if (strstr(path.c_str(), line)) {
+            LOG(VERBOSE) << "INPUT-FILTER: path: %s was not filtered.\n" << path;
+            fclose(fp);
+            if (line) {
+                free(line);
+            }
+            return false;
+        }
+    }
+    fclose(fp);
+    if (line) {
+        free(line);
+    }
+    LOG(VERBOSE) << "INPUT-FILTER: path: %s was filtered!\n" << path;
+    return true;
+}
+
 void DeviceHandler::HandleUevent(const Uevent& uevent) {
     if (uevent.action == "add" || uevent.action == "change" || uevent.action == "online") {
         FixupSysPermissions(uevent.path, uevent.subsystem);
@@ -428,6 +462,9 @@ void DeviceHandler::HandleUevent(const Uevent& uevent) {
 
     // if it's not a /dev device, nothing to do
     if (uevent.major < 0 || uevent.minor < 0) return;
+    if(uevent.subsystem == "input" && is_filtered(uevent.path)) {
+        return;
+    }
 
     std::string devpath;
     std::vector<std::string> links;
diff --git a/init/devices.h b/init/devices.h
index 9d39eaace..bc039c476 100644
--- a/init/devices.h
+++ b/init/devices.h
@@ -125,6 +125,7 @@ class DeviceHandler : public UeventHandler {
     bool FindPlatformDevice(std::string path, std::string* platform_device_path) const;
     std::tuple<mode_t, uid_t, gid_t> GetDevicePermissions(
         const std::string& path, const std::vector<std::string>& links) const;
+    bool is_filtered(const std::string path);
     void MakeDevice(const std::string& path, bool block, int major, int minor,
                     const std::vector<std::string>& links) const;
     void HandleDevice(const std::string& action, const std::string& devpath, bool block, int major,
-- 
2.21.0

