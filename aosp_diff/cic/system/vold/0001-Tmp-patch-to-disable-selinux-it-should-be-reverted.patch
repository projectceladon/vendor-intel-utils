From 930807be6b447395704ecff8481490c522b78d29 Mon Sep 17 00:00:00 2001
From: Xie Chao <chao.xie@intel.com>
Date: Fri, 19 Jul 2019 11:31:32 +0800
Subject: [PATCH] Tmp patch to disable selinux, it should be reverted

Change-Id: I22a1a4dd78d0e3f0ab61c5ab504bed91737ec393
Tracked-On:
Signed-off-by: Xie Chao <chao.xie@intel.com>
---
 MetadataCrypt.cpp        |  4 ++++
 Utils.cpp                | 12 +++++++++++-
 cryptfs.cpp              | 10 ++++++++--
 vold_prepare_subdirs.cpp |  4 ++++
 4 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/MetadataCrypt.cpp b/MetadataCrypt.cpp
index 35cf3e2..3247c2b 100644
--- a/MetadataCrypt.cpp
+++ b/MetadataCrypt.cpp
@@ -61,17 +61,21 @@ static const char* kFn_keymaster_key_blob_upgraded = "keymaster_key_blob_upgrade
 static bool mount_via_fs_mgr(const char* mount_point, const char* blk_device) {
     // fs_mgr_do_mount runs fsck. Use setexeccon to run trusted
     // partitions in the fsck domain.
+#ifndef _DISALBE_SELINUX_
     if (setexeccon(android::vold::sFsckContext)) {
         PLOG(ERROR) << "Failed to setexeccon";
         return false;
     }
+#endif
     auto mount_rc = fs_mgr_do_mount(&fstab_default, const_cast<char*>(mount_point),
                                     const_cast<char*>(blk_device), nullptr,
                                     android::vold::cp_needsCheckpoint());
+#ifndef _DISALBE_SELINUX_
     if (setexeccon(nullptr)) {
         PLOG(ERROR) << "Failed to clear setexeccon";
         return false;
     }
+#endif
     if (mount_rc != 0) {
         LOG(ERROR) << "fs_mgr_do_mount failed with rc " << mount_rc;
         return false;
diff --git a/Utils.cpp b/Utils.cpp
index df50658..3b31c01 100644
--- a/Utils.cpp
+++ b/Utils.cpp
@@ -80,12 +80,14 @@ status_t CreateDeviceNode(const std::string& path, dev_t dev) {
     const char* cpath = path.c_str();
     status_t res = 0;
 
+#ifndef _DISALBE_SELINUX_
     char* secontext = nullptr;
     if (sehandle) {
         if (!selabel_lookup(sehandle, &secontext, cpath, S_IFBLK)) {
             setfscreatecon(secontext);
         }
     }
+#endif
 
     mode_t mode = 0660 | S_IFBLK;
     if (mknod(cpath, mode, dev) < 0) {
@@ -96,10 +98,12 @@ status_t CreateDeviceNode(const std::string& path, dev_t dev) {
         }
     }
 
+#ifndef _DISALBE_SELINUX_
     if (secontext) {
         setfscreatecon(nullptr);
         freecon(secontext);
     }
+#endif
 
     return res;
 }
@@ -117,19 +121,23 @@ status_t PrepareDir(const std::string& path, mode_t mode, uid_t uid, gid_t gid)
     std::lock_guard<std::mutex> lock(kSecurityLock);
     const char* cpath = path.c_str();
 
+#ifndef _DISALBE_SELINUX_
     char* secontext = nullptr;
     if (sehandle) {
         if (!selabel_lookup(sehandle, &secontext, cpath, S_IFDIR)) {
             setfscreatecon(secontext);
         }
     }
+#endif
 
     int res = fs_prepare_dir(cpath, mode, uid, gid);
 
+#ifndef _DISALBE_SELINUX_
     if (secontext) {
         setfscreatecon(nullptr);
         freecon(secontext);
     }
+#endif
 
     if (res == 0) {
         return OK;
@@ -351,13 +359,15 @@ status_t ForkExecvp(const std::vector<std::string>& args, std::vector<std::strin
 
     pid_t pid = fork();
     if (pid == 0) {
+#ifndef _DISALBE_SELINUX_
         if (context) {
             if (setexeccon(context)) {
                 LOG(ERROR) << "Failed to setexeccon in ForkExecvp";
                 abort();
             }
         }
-        pipe_read.reset();
+#endif
+	pipe_read.reset();
         if (dup2(pipe_write.get(), STDOUT_FILENO) == -1) {
             PLOG(ERROR) << "dup2 in ForkExecvp";
             _exit(EXIT_FAILURE);
diff --git a/cryptfs.cpp b/cryptfs.cpp
index 07617e9..4b464cb 100644
--- a/cryptfs.cpp
+++ b/cryptfs.cpp
@@ -1639,11 +1639,13 @@ static int cryptfs_restart_internal(int restart_main) {
          * fs_mgr_do_mount runs fsck. Use setexeccon to run trusted
          * partitions in the fsck domain.
          */
+#ifndef _DISALBE_SELINUX_
         if (setexeccon(android::vold::sFsckContext)) {
             SLOGE("Failed to setexeccon");
             return -1;
         }
-        bool needs_cp = android::vold::cp_needsCheckpoint();
+#endif
+	bool needs_cp = android::vold::cp_needsCheckpoint();
         while ((mount_rc = fs_mgr_do_mount(&fstab_default, DATA_MNT_POINT, crypto_blkdev, 0,
                                            needs_cp)) != 0) {
             if (mount_rc == FS_MGR_DOMNT_BUSY) {
@@ -1663,16 +1665,20 @@ static int cryptfs_restart_internal(int restart_main) {
                 cryptfs_set_corrupt();
                 cryptfs_trigger_restart_min_framework();
                 SLOGI("Started framework to offer wipe");
+#ifndef _DISALBE_SELINUX_
                 if (setexeccon(NULL)) {
                     SLOGE("Failed to setexeccon");
                 }
-                return -1;
+#endif
+		return -1;
             }
         }
+#ifndef _DISALBE_SELINUX_
         if (setexeccon(NULL)) {
             SLOGE("Failed to setexeccon");
             return -1;
         }
+#endif
 
         /* Create necessary paths on /data */
         prep_data_fs();
diff --git a/vold_prepare_subdirs.cpp b/vold_prepare_subdirs.cpp
index a620edd..ad2552b 100644
--- a/vold_prepare_subdirs.cpp
+++ b/vold_prepare_subdirs.cpp
@@ -56,6 +56,7 @@ static bool valid_uuid(const std::string& s) {
 
 static bool prepare_dir(struct selabel_handle* sehandle, mode_t mode, uid_t uid, gid_t gid,
                         const std::string& path) {
+#ifndef _DISALBE_SELINUX_
     auto clearfscreatecon = android::base::make_scope_guard([] { setfscreatecon(nullptr); });
     auto secontext = std::unique_ptr<char, void (*)(char*)>(nullptr, freecon);
     char* tmp_secontext;
@@ -71,9 +72,11 @@ static bool prepare_dir(struct selabel_handle* sehandle, mode_t mode, uid_t uid,
             return false;
         }
     }
+#endif
     if (fs_prepare_dir(path.c_str(), mode, uid, gid) != 0) {
         return false;
     }
+#ifndef _DISALBE_SELINUX_
     if (secontext) {
         char* tmp_oldsecontext = nullptr;
         if (lgetfilecon(path.c_str(), &tmp_oldsecontext) < 0) {
@@ -90,6 +93,7 @@ static bool prepare_dir(struct selabel_handle* sehandle, mode_t mode, uid_t uid,
             }
         }
     }
+#endif
     return true;
 }
 
-- 
2.21.0

