From 8ec97e4e11e57e76e0efb69fc94df59f7766eb47 Mon Sep 17 00:00:00 2001
From: Xie Chao <chao.xie@intel.com>
Date: Fri, 19 Jul 2019 10:52:26 +0800
Subject: [PATCH] Tmp patch to disable selinux, it should be reverted

Change-Id: If8432a886050dc84feafab02abc9d8878715e79f
Tracked-On:
Signed-off-by: Xie Chao <chao.xie@intel.com>
---
 cmds/installd/InstalldNativeService.cpp | 24 +++++++++++++++++++--
 cmds/servicemanager/service_manager.c   | 28 ++++++++++++++++++++++++-
 2 files changed, 49 insertions(+), 3 deletions(-)

diff --git a/cmds/installd/InstalldNativeService.cpp b/cmds/installd/InstalldNativeService.cpp
index caac2e89a..2a1eecb0f 100644
--- a/cmds/installd/InstalldNativeService.cpp
+++ b/cmds/installd/InstalldNativeService.cpp
@@ -305,6 +305,12 @@ status_t InstalldNativeService::dump(int fd, const Vector<String16> & /* args */
 static int restorecon_app_data_lazy(const std::string& path, const std::string& seInfo, uid_t uid,
         bool existing) {
     int res = 0;
+#ifdef _DISALBE_SELINUX_
+    (void) path;
+    (void) seInfo;
+    (void) uid;
+    (void) existing;
+#else
     char* before = nullptr;
     char* after = nullptr;
 
@@ -344,6 +350,7 @@ fail:
 done:
     free(before);
     free(after);
+#endif
     return res;
 }
 
@@ -1095,11 +1102,12 @@ binder::Status InstalldNativeService::moveCompleteApp(const std::unique_ptr<std:
             res = error(rc, "Failed copying " + from + " to " + to);
             goto fail;
         }
-
+#ifndef _DISALBE_SELINUX_
         if (selinux_android_restorecon(to.c_str(), SELINUX_ANDROID_RESTORECON_RECURSE) != 0) {
             res = error("Failed to restorecon " + to);
             goto fail;
         }
+#endif
     }
 
     // Copy private data for all known users
@@ -2457,25 +2465,35 @@ binder::Status InstalldNativeService::restoreconAppData(const std::unique_ptr<st
     std::lock_guard<std::recursive_mutex> lock(mLock);
 
     binder::Status res = ok();
-
+#ifdef _DISALBE_SELINUX_
+    (void) appId;
+    (void) seInfo;
+#else
     // SELINUX_ANDROID_RESTORECON_DATADATA flag is set by libselinux. Not needed here.
     unsigned int seflags = SELINUX_ANDROID_RESTORECON_RECURSE;
+#endif
     const char* uuid_ = uuid ? uuid->c_str() : nullptr;
     const char* pkgName = packageName.c_str();
+#ifndef _DISALBE_SELINUX_
     const char* seinfo = seInfo.c_str();
 
     uid_t uid = multiuser_get_uid(userId, appId);
+#endif
     if (flags & FLAG_STORAGE_CE) {
         auto path = create_data_user_ce_package_path(uuid_, userId, pkgName);
+#ifndef _DISALBE_SELINUX_
         if (selinux_android_restorecon_pkgdir(path.c_str(), seinfo, uid, seflags) < 0) {
             res = error("restorecon failed for " + path);
         }
+#endif
     }
     if (flags & FLAG_STORAGE_DE) {
         auto path = create_data_user_de_package_path(uuid_, userId, pkgName);
+#ifndef _DISALBE_SELINUX_
         if (selinux_android_restorecon_pkgdir(path.c_str(), seinfo, uid, seflags) < 0) {
             res = error("restorecon failed for " + path);
         }
+#endif
     }
     return res;
 }
@@ -2496,9 +2514,11 @@ binder::Status InstalldNativeService::createOatDir(const std::string& oatDir,
     if (fs_prepare_dir(oat_dir, S_IRWXU | S_IRWXG | S_IXOTH, AID_SYSTEM, AID_INSTALL)) {
         return error("Failed to prepare " + oatDir);
     }
+#ifndef _DISALBE_SELINUX_
     if (selinux_android_restorecon(oat_dir, 0)) {
         return error("Failed to restorecon " + oatDir);
     }
+#endif
     snprintf(oat_instr_dir, PKG_PATH_MAX, "%s/%s", oat_dir, instruction_set);
     if (fs_prepare_dir(oat_instr_dir, S_IRWXU | S_IRWXG | S_IXOTH, AID_SYSTEM, AID_INSTALL)) {
         return error(StringPrintf("Failed to prepare %s", oat_instr_dir));
diff --git a/cmds/servicemanager/service_manager.c b/cmds/servicemanager/service_manager.c
index ec3fac538..f08bfa6c9 100644
--- a/cmds/servicemanager/service_manager.c
+++ b/cmds/servicemanager/service_manager.c
@@ -58,9 +58,12 @@ int str16eq(const uint16_t *a, const char *b)
     return 1;
 }
 
+#ifndef _DISALBE_SELINUX_
 static char *service_manager_context;
+#endif
 static struct selabel_handle* sehandle;
 
+#ifndef _DISALBE_SELINUX_
 static bool check_mac_perms(pid_t spid, const char* sid, uid_t uid, const char *tctx, const char *perm, const char *name)
 {
     char *lookup_sid = NULL;
@@ -87,15 +90,25 @@ static bool check_mac_perms(pid_t spid, const char* sid, uid_t uid, const char *
     freecon(lookup_sid);
     return allowed;
 }
+#endif
 
 static bool check_mac_perms_from_getcon(pid_t spid, const char* sid, uid_t uid, const char *perm)
 {
+#ifndef _DISALBE_SELINUX_
     return check_mac_perms(spid, sid, uid, service_manager_context, perm, NULL);
+#else
+    (void) spid;
+    (void) sid;
+    (void) uid;
+    (void)perm;
+    return true;
+#endif
 }
 
 static bool check_mac_perms_from_lookup(pid_t spid, const char* sid, uid_t uid, const char *perm, const char *name)
 {
     bool allowed;
+#ifndef _DISALBE_SELINUX_
     char *tctx = NULL;
 
     if (!sehandle) {
@@ -110,6 +123,14 @@ static bool check_mac_perms_from_lookup(pid_t spid, const char* sid, uid_t uid,
 
     allowed = check_mac_perms(spid, sid, uid, tctx, perm, name);
     freecon(tctx);
+#else
+    (void) spid;
+    (void) sid;
+    (void) uid;
+    (void)perm;
+    (void)name;
+    allowed = true;
+#endif
     return allowed;
 }
 
@@ -366,6 +387,7 @@ int svcmgr_handler(struct binder_state *bs,
 }
 
 
+#ifndef _DISALBE_SELINUX_
 static int audit_callback(void *data, __unused security_class_t cls, char *buf, size_t len)
 {
     struct audit_data *ad = (struct audit_data *)data;
@@ -378,11 +400,14 @@ static int audit_callback(void *data, __unused security_class_t cls, char *buf,
     snprintf(buf, len, "service=%s pid=%d uid=%d", ad->name, ad->pid, ad->uid);
     return 0;
 }
+#endif
 
 int main(int argc, char** argv)
 {
     struct binder_state *bs;
+#ifndef _DISALBE_SELINUX_
     union selinux_callback cb;
+#endif
     char *driver;
 
     if (argc > 1) {
@@ -409,6 +434,7 @@ int main(int argc, char** argv)
         return -1;
     }
 
+#ifndef _DISALBE_SELINUX_
     cb.func_audit = audit_callback;
     selinux_set_callback(SELINUX_CB_AUDIT, cb);
 #ifdef VENDORSERVICEMANAGER
@@ -434,7 +460,7 @@ int main(int argc, char** argv)
         ALOGE("SELinux: Failed to acquire service_manager context. Aborting.\n");
         abort();
     }
-
+#endif
 
     binder_loop(bs, svcmgr_handler);
 
-- 
2.21.0

