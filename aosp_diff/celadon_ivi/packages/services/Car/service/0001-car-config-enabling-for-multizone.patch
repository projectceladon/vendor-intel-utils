From c18777789434009fd235a5538605ad9714321450 Mon Sep 17 00:00:00 2001
From: gkdeepa <g.k.deepa@intel.com>
Date: Fri, 23 Sep 2022 20:11:12 +0530
Subject: [PATCH] car config enabling for multizone

Tracked-On:
---
 .../frameworks/base/core/res/res/values/config.xml |  4 ++--
 service/res/values/config.xml                      |  9 ++++++---
 .../com/android/car/CarOccupantZoneService.java    | 14 +++++++++++++-
 3 files changed, 21 insertions(+), 6 deletions(-)

diff --git a/car_product/overlay/frameworks/base/core/res/res/values/config.xml b/car_product/overlay/frameworks/base/core/res/res/values/config.xml
index d7c566c2a..6726c031a 100644
--- a/car_product/overlay/frameworks/base/core/res/res/values/config.xml
+++ b/car_product/overlay/frameworks/base/core/res/res/values/config.xml
@@ -23,12 +23,12 @@
     <!-- Enable multi-user. -->
     <bool name="config_enableMultiUserUI">true</bool>
     <!--  Maximum number of supported users -->
-    <integer name="config_multiuserMaximumUsers">4</integer>
+    <integer name="config_multiuserMaximumUsers">9</integer>
     <!-- Maximum number of users we allow to be running at a time.
          For automotive, background user will be immediately stopped upon user switching but
          up to this many users can be running in garage mode.
          3 = headless user 0 + two primary users or 1 primary + 1 guest -->
-    <integer name="config_multiuserMaxRunningUsers">3</integer>
+    <integer name="config_multiuserMaxRunningUsers">9</integer>
     <!-- Show multiuser switcher by default, unless the user specifically disables it. -->
     <bool name="config_showUserSwitcherByDefault">true</bool>
     <!-- Flag specifying whether user-switch operations have custom UI. When false, user-switch
diff --git a/service/res/values/config.xml b/service/res/values/config.xml
index f0c611ce3..fc2d00853 100644
--- a/service/res/values/config.xml
+++ b/service/res/values/config.xml
@@ -24,7 +24,7 @@
     <!--  Configuration to enable usage of dynamic audio routing. If this is set to false,
           dynamic audio routing is disabled and audio works in legacy mode. It may be useful
           during initial development where audio hal does not support bus based addressing yet. -->
-    <bool name="audioUseDynamicRouting">false</bool>
+    <bool name="audioUseDynamicRouting">true</bool>
 
     <!--  Configuration to enable muting of individual volume groups. If this is set to
           false, muting of individual volume groups is disabled, instead muting will toggle master
@@ -284,6 +284,7 @@
     -->
     <string-array translatable="false" name="config_occupant_zones">
         <item>occupantZoneId=0,occupantType=DRIVER,seatRow=1,seatSide=driver</item>
+        <item>occupantZoneId=1,occupantType=FRONT_PASSENGER,seatRow=1,seatSide=oppositeDriver</item>
     </string-array>
     <!--
         Specifies configuration of displays in system telling its usage / type and assigned
@@ -308,6 +309,8 @@
 
     -->
     <string-array translatable="false" name="config_occupant_display_mapping">
+        <item>displayPort=0,displayType=MAIN,occupantZoneId=0</item>
+        <item>displayPort=1,displayType=MAIN,occupantZoneId=1</item>
     </string-array>
 
     <!--
@@ -374,7 +377,7 @@
     <!-- Configuration to enable passenger support.
          If this is set to true and there is a passenger display, a user can login to the passenger
          display and use it as a normal Android user. -->
-    <bool name="enablePassengerSupport">false</bool>
+    <bool name="enablePassengerSupport">true</bool>
 
     <!-- Class name of the custom country detector to be used. Override the default value in the
          device specific config file.  -->
@@ -391,7 +394,7 @@
 
     <!-- Enable profile user assignment per each CarOccupantZone for per display android user
          assignments. This feature is still experimental. -->
-    <bool name="enableProfileUserAssignmentForMultiDisplay" translatable="false">false</bool>
+    <bool name="enableProfileUserAssignmentForMultiDisplay" translatable="false">true</bool>
 
     <!-- The ComponentName of the media source that will be selected as the default -->
     <string name="config_defaultMediaSource">com.android.bluetooth/com.android.bluetooth.avrcpcontroller.BluetoothMediaBrowserService</string>
diff --git a/service/src/com/android/car/CarOccupantZoneService.java b/service/src/com/android/car/CarOccupantZoneService.java
index 7ba69291d..7c17d0a49 100644
--- a/service/src/com/android/car/CarOccupantZoneService.java
+++ b/service/src/com/android/car/CarOccupantZoneService.java
@@ -301,6 +301,8 @@ public final class CarOccupantZoneService extends ICarOccupantZone.Stub
                         Slogf.w(TAG, "cannot find the zone(%d)", zoneId);
                         return false;
                     }
+                     
+                    Slogf.w(TAG, "befor zone user check zone config user id (%d) userId (%d)", zoneConfig.userId,userId);
                     if (zoneConfig.userId != UserHandle.USER_NULL && zoneConfig.userId != userId) {
                         Slogf.w(TAG, "other user already occupies the zone(%d)", zoneId);
                         return false;
@@ -326,10 +328,12 @@ public final class CarOccupantZoneService extends ICarOccupantZone.Stub
 
             @Override
             public boolean isPassengerDisplayAvailable() {
+                    Slogf.w(TAG, "isPassengerDisplayAvailable ");
                 for (OccupantZoneInfo ozi : getAllOccupantZones()) {
                     if (getDisplayForOccupant(ozi.zoneId,
                             CarOccupantZoneManager.DISPLAY_TYPE_MAIN) != Display.INVALID_DISPLAY
                             && ozi.occupantType != CarOccupantZoneManager.OCCUPANT_TYPE_DRIVER) {
+                    Slogf.w(TAG, "isPassengerDisplayAvailable (%d) passenger is true", ozi.zoneId);
                         return true;
                     }
                 }
@@ -420,6 +424,7 @@ public final class CarOccupantZoneService extends ICarOccupantZone.Stub
             writer.println("**mAudioZoneIdToOccupantZoneIdMapping**");
             for (int index = 0; index < mAudioZoneIdToOccupantZoneIdMapping.size(); index++) {
                 int audioZoneId = mAudioZoneIdToOccupantZoneIdMapping.keyAt(index);
+                    Slogf.w(TAG, "mAudioZoneIdToOccupantZoneIdMapping (%d) occupant mAudioZoneIdToOccupantZoneIdMapping.valueAt(index) (%d)",audioZoneId,mAudioZoneIdToOccupantZoneIdMapping.valueAt(index));
                 writer.println(" audioZoneId=" + Integer.toHexString(audioZoneId)
                         + " zoneId=" + mAudioZoneIdToOccupantZoneIdMapping.valueAt(index));
             }
@@ -544,6 +549,8 @@ public final class CarOccupantZoneService extends ICarOccupantZone.Stub
         for (int index = 0; index < mAudioZoneIdToOccupantZoneIdMapping.size(); index++) {
             int audioZoneId = mAudioZoneIdToOccupantZoneIdMapping.keyAt(index);
             if (occupantZoneId == mAudioZoneIdToOccupantZoneIdMapping.get(audioZoneId)) {
+
+                    Slogf.w(TAG, "getAudioZoneIdForOccupantLocked (%d) occupantZoneId (%d)", audioZoneId,occupantZoneId );
                 return audioZoneId;
             }
         }
@@ -557,6 +564,7 @@ public final class CarOccupantZoneService extends ICarOccupantZone.Stub
             int occupantZoneId = mAudioZoneIdToOccupantZoneIdMapping.get(audioZoneId,
                     OccupantZoneInfo.INVALID_ZONE_ID);
             if (occupantZoneId == OccupantZoneInfo.INVALID_ZONE_ID) {
+                    Slogf.w(TAG, "invalid case");
                 return null;
             }
             // To support headless zones return the occupant configuration.
@@ -1142,13 +1150,17 @@ public final class CarOccupantZoneService extends ICarOccupantZone.Stub
 
         for (int i = 0; i < mActiveOccupantConfigs.size(); ++i) {
             int zoneId = mActiveOccupantConfigs.keyAt(i);
+	    OccupantZoneInfo zConfig = mOccupantsConfig.get(zoneId);
             OccupantConfig config = mActiveOccupantConfigs.valueAt(i);
             // mProfileUsers empty if not supported
             if (mProfileUsers.contains(config.userId)) {
                 Slogf.i(TAG, "Profile user:%d already assigned for occupant zone:%d",
                         config.userId, zoneId);
             } else {
-                config.userId = driverUserId;
+                //config.userId = driverUserId;
+                if(zConfig.occupantType == CarOccupantZoneManager.OCCUPANT_TYPE_DRIVER) {
+                    config.userId = driverUserId;
+                }
             }
         }
     }
-- 
2.17.1

