From bbc44880bd8d6f4aac040c62b53cbba3e0b0c066 Mon Sep 17 00:00:00 2001
From: Ankit Agrawal <ankit.agarwal@intel.com>
Date: Mon, 24 Apr 2023 15:03:01 +0530
Subject: [PATCH] Volume Control Management Based on Audio Zone.

Currently, if user change the volume level for any user
(driver or passenger), it same refelects in other users as
well.

Adding support of volume control based on ZoneId.

Tracked-On: OAM-108945
Signed-off-by: Ankit Agrawal <ankit.agarwal@intel.com>
---
 .../VolumeSettingsPreferenceController.java   | 25 +++++++++++++------
 1 file changed, 18 insertions(+), 7 deletions(-)

diff --git a/src/com/android/car/settings/sound/VolumeSettingsPreferenceController.java b/src/com/android/car/settings/sound/VolumeSettingsPreferenceController.java
index 5ea34a5a7..508e3f04f 100644
--- a/src/com/android/car/settings/sound/VolumeSettingsPreferenceController.java
+++ b/src/com/android/car/settings/sound/VolumeSettingsPreferenceController.java
@@ -23,6 +23,8 @@ import android.car.CarNotConnectedException;
 import android.car.drivingstate.CarUxRestrictions;
 import android.car.media.CarAudioManager;
 import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
@@ -61,6 +63,7 @@ public class VolumeSettingsPreferenceController extends PreferenceController<Pre
     private final VolumeSettingsRingtoneManager mRingtoneManager;
 
     private final Handler mUiHandler;
+    private int mZoneId;
 
     @VisibleForTesting
     final CarAudioManager.CarVolumeCallback mVolumeChangeCallback =
@@ -68,7 +71,9 @@ public class VolumeSettingsPreferenceController extends PreferenceController<Pre
                 @Override
                 public void onGroupVolumeChanged(int zoneId, int groupId, int flags) {
                     if (mCarAudioManager != null) {
-                        int value = mCarAudioManager.getGroupVolume(groupId);
+			if(mZoneId != zoneId)
+                            return;
+                        int value = mCarAudioManager.getGroupVolume(zoneId, groupId);
 
                         for (SeekBarPreference volumePreference : mVolumePreferences) {
                             Bundle extras = volumePreference.getExtras();
@@ -119,12 +124,18 @@ public class VolumeSettingsPreferenceController extends PreferenceController<Pre
 
         mCarAudioManager = (CarAudioManager) mCar.getCarManager(Car.AUDIO_SERVICE);
         if (mCarAudioManager != null) {
-            int volumeGroupCount = mCarAudioManager.getVolumeGroupCount();
+            try {
+                ApplicationInfo info = context.getPackageManager().getApplicationInfo(context.getPackageName(), 0);
+                mZoneId = mCarAudioManager.getZoneIdForUid(info.uid);
+            } catch (PackageManager.NameNotFoundException e) {
+                LOG.e("getZoneIdForUid Failed to find zoneId: " , e);
+            }
+            int volumeGroupCount = mCarAudioManager.getVolumeGroupCount(mZoneId);
             cleanUpVolumePreferences();
             // Populates volume slider items from volume groups to UI.
             for (int groupId = 0; groupId < volumeGroupCount; groupId++) {
                 VolumeItem volumeItem = getVolumeItemForUsages(
-                        mCarAudioManager.getUsagesForVolumeGroupId(groupId));
+                        mCarAudioManager.getUsagesForVolumeGroupId(mZoneId, groupId));
                 SeekBarPreference volumePreference = createVolumeSeekBarPreference(
                         groupId, volumeItem.getUsage(), volumeItem.getIcon(),
                         volumeItem.getTitle());
@@ -171,9 +182,9 @@ public class VolumeSettingsPreferenceController extends PreferenceController<Pre
         preference.getIcon().setTintList(
                 Themes.getAttrColorStateList(getContext(), R.attr.iconColor));
         try {
-            preference.setValue(mCarAudioManager.getGroupVolume(volumeGroupId));
-            preference.setMin(mCarAudioManager.getGroupMinVolume(volumeGroupId));
-            preference.setMax(mCarAudioManager.getGroupMaxVolume(volumeGroupId));
+            preference.setValue(mCarAudioManager.getGroupVolume(mZoneId, volumeGroupId));
+            preference.setMin(mCarAudioManager.getGroupMinVolume(mZoneId, volumeGroupId));
+            preference.setMax(mCarAudioManager.getGroupMaxVolume(mZoneId, volumeGroupId));
         } catch (CarNotConnectedException e) {
             LOG.e("Car is not connected!", e);
         }
@@ -195,7 +206,7 @@ public class VolumeSettingsPreferenceController extends PreferenceController<Pre
 
     private void setGroupVolume(int volumeGroupId, int newVolume) {
         try {
-            mCarAudioManager.setGroupVolume(volumeGroupId, newVolume, /* flags= */ 0);
+            mCarAudioManager.setGroupVolume(mZoneId, volumeGroupId, newVolume, /* flags= */ 0);
         } catch (CarNotConnectedException e) {
             LOG.w("Ignoring volume change event because the car isn't connected", e);
         }
-- 
2.17.1

