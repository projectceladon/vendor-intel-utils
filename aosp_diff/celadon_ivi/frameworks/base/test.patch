From 472da644d8a6f8d35a5d6aeb061507d7550d0200 Mon Sep 17 00:00:00 2001
From: Zhen Han <zhen.han@intel.com>
Date: Wed, 11 Sep 2019 17:50:26 +0800
Subject: [PATCH] debug log for power usage

Change-Id: Iea06af5f9b937958004fe8c65b5a5cc5bd098af1
Tracked-On:
---

diff --git a/core/java/com/android/internal/os/BatteryStatsHelper.java b/core/java/com/android/internal/os/BatteryStatsHelper.java
index e85508e..ae272e8 100644
--- a/core/java/com/android/internal/os/BatteryStatsHelper.java
+++ b/core/java/com/android/internal/os/BatteryStatsHelper.java
@@ -64,7 +64,8 @@
  * onAttach() for Fragment), call create() in onCreate() and call destroy() in onDestroy().
  */
 public class BatteryStatsHelper {
-    static final boolean DEBUG = false;
+    private final Object mLock = new Object();
+    static final boolean DEBUG = true;
 
     private static final String TAG = BatteryStatsHelper.class.getSimpleName();
 
@@ -265,6 +266,7 @@
 
     @UnsupportedAppUsage
     public BatteryStats getStats() {
+        Log.w(TAG, "sun_getStats() " + mStats);
         if (mStats == null) {
             load();
         }
@@ -290,6 +292,8 @@
 
     @UnsupportedAppUsage
     public void create(Bundle icicle) {
+        Log.w(TAG, "sun_create() icicle");
+        Log.w(TAG, "sun_create() sStatsXfer " + sStatsXfer + " sBatteryBroadcastXfer " + sBatteryBroadcastXfer);
         if (icicle != null) {
             mStats = sStatsXfer;
             mBatteryBroadcast = sBatteryBroadcastXfer;
@@ -297,6 +301,7 @@
         mBatteryInfo = IBatteryStats.Stub.asInterface(
                 ServiceManager.getService(BatteryStats.SERVICE_NAME));
         mPowerProfile = new PowerProfile(mContext);
+        Log.w(TAG, "sun_create() mBatteryInfo " + mBatteryInfo + " mPowerProfile " + mPowerProfile);
     }
 
     @UnsupportedAppUsage
@@ -348,6 +353,7 @@
      */
     @UnsupportedAppUsage
     public void refreshStats(int statsType, List<UserHandle> asUsers) {
+        Log.w(TAG, "sun_refreshStats1");
         final int n = asUsers.size();
         SparseArray<UserHandle> users = new SparseArray<>(n);
         for (int i = 0; i < n; ++i) {
@@ -362,17 +368,20 @@
      */
     @UnsupportedAppUsage
     public void refreshStats(int statsType, SparseArray<UserHandle> asUsers) {
+        Log.w(TAG, "sun_refreshStats2");
         refreshStats(statsType, asUsers, SystemClock.elapsedRealtime() * 1000,
                 SystemClock.uptimeMillis() * 1000);
     }
 
     public void refreshStats(int statsType, SparseArray<UserHandle> asUsers, long rawRealtimeUs,
             long rawUptimeUs) {
+        synchronized (mLock) {
         if (statsType != BatteryStats.STATS_SINCE_CHARGED) {
             Log.w(TAG, "refreshStats called for statsType " + statsType + " but only "
                     + "STATS_SINCE_CHARGED is supported. Using STATS_SINCE_CHARGED instead.");
         }
 
+        Log.w(TAG, "sun_refreshStats " + mStats);
         // Initialize mStats if necessary.
         getStats();
 
@@ -387,6 +396,7 @@
         mUserSippers.clear();
         mMobilemsppList.clear();
 
+        Log.w(TAG, "sun_refreshStats " + mStats);
         if (mStats == null) {
             return;
         }
@@ -474,6 +484,7 @@
         mMaxDrainedPower = (mStats.getHighDischargeAmountSinceCharge()
                 * mPowerProfile.getBatteryCapacity()) / 100;
 
+        Log.w(TAG, "sun_refreshStats processAppUsage");
         processAppUsage(asUsers);
 
         // Before aggregating apps in to users, collect all apps to sort by their ms per packet.
@@ -563,6 +574,7 @@
                 }
             }
         }
+        }
     }
 
     private void processAppUsage(SparseArray<UserHandle> asUsers) {
@@ -572,6 +584,7 @@
         BatterySipper osSipper = null;
         final SparseArray<? extends Uid> uidStats = mStats.getUidStats();
         final int NU = uidStats.size();
+        Log.d(TAG, String.format("sun_ uidStats.size %d", NU));
         for (int iu = 0; iu < NU; iu++) {
             final Uid u = uidStats.valueAt(iu);
             final BatterySipper app = new BatterySipper(BatterySipper.DrainType.APP, u, 0);
@@ -589,11 +602,14 @@
                     mStatsType);
             mMediaPowerCalculator.calculateApp(app, u, mRawRealtimeUs, mRawUptimeUs, mStatsType);
 
-            final double totalPower = app.sumPower();
-            if (DEBUG && totalPower != 0) {
+            double totalPower = app.sumPower();
+            //if (totalPower == 0) {
+            //    totalPower = 10000;
+            //}
+            //if (DEBUG && totalPower != 0) {
                 Log.d(TAG, String.format("UID %d: total power=%s", u.getUid(),
                         makemAh(totalPower)));
-            }
+            //}
 
             // Add the app to the list if it is consuming power.
             if (totalPower != 0 || u.getUid() == 0) {
@@ -609,6 +625,7 @@
                 } else if (!forAllUsers && asUsers.get(userId) == null
                         && UserHandle.getAppId(uid) >= Process.FIRST_APPLICATION_UID) {
                     // We are told to just report this user's apps as one large entry.
+                Log.d(TAG, "processAppUsage");
                     List<BatterySipper> list = mUserSippers.get(userId);
                     if (list == null) {
                         list = new ArrayList<>();
@@ -616,6 +633,7 @@
                     }
                     list.add(app);
                 } else {
+                Log.d(TAG, "processAppUsage2 app.getUid" + app.getUid() + " userId " + app.userId);
                     mUsageList.add(app);
                 }
 
@@ -806,6 +824,12 @@
 
     @UnsupportedAppUsage
     public List<BatterySipper> getUsageList() {
+        Log.d(TAG, "sun_getUsageList");
+            final int usageListCount = mUsageList.size();
+            for (int i = 0; i < usageListCount; i++) {
+                Log.d(TAG, "sun_getUsageList " +  mUsageList.get(i).getUid());
+                Log.d(TAG, "sun_getUsageList " +  mUsageList.get(i).userId + " " +  mUsageList.get(i).totalPowerMah);
+            }
         return mUsageList;
     }
 
@@ -1043,6 +1067,7 @@
 
     @UnsupportedAppUsage
     private void load() {
+        Log.w(TAG, "sun_load mBatteryInfo " + mBatteryInfo);
         if (mBatteryInfo == null) {
             return;
         }
@@ -1054,6 +1079,7 @@
     }
 
     private static BatteryStatsImpl getStats(IBatteryStats service) {
+        Log.w(TAG, "sun_getStats() service " + service);
         try {
             ParcelFileDescriptor pfd = service.getStatisticsStream();
             if (pfd != null) {
@@ -1066,8 +1092,10 @@
                     Parcel parcel = Parcel.obtain();
                     parcel.unmarshall(data, 0, data.length);
                     parcel.setDataPosition(0);
+                    Log.w(TAG, "sun_getStats() createFromParcel");
                     BatteryStatsImpl stats = com.android.internal.os.BatteryStatsImpl.CREATOR
                             .createFromParcel(parcel);
+                    Log.w(TAG, "sun_getStats() createFromParcel stats" + stats);
                     return stats;
                 } catch (IOException e) {
                     Log.w(TAG, "Unable to read statistics stream", e);
