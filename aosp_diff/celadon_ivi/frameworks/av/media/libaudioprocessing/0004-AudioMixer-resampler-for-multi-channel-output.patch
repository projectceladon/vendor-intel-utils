From 693b1e2d22384a14c119e4096f30c2776d2d48f3 Mon Sep 17 00:00:00 2001
From: "Martin, Chen" <haochuan.z.chen@intel.com>
Date: Mon, 17 Jul 2023 18:05:56 -0400
Subject: [PATCH] AudioMixer resampler for multi-channel output

Tracked-On: OAM-111211
Signed-off-by: Martin, Chen <haochuan.z.chen@intel.com>
---
 media/libaudioprocessing/AudioMixerBase.cpp | 46 +++++++++++++++++----
 1 file changed, 39 insertions(+), 7 deletions(-)

diff --git a/media/libaudioprocessing/AudioMixerBase.cpp b/media/libaudioprocessing/AudioMixerBase.cpp
index a56fc9060a..3241e1cbfd 100644
--- a/media/libaudioprocessing/AudioMixerBase.cpp
+++ b/media/libaudioprocessing/AudioMixerBase.cpp
@@ -490,7 +490,29 @@ bool AudioMixerBase::TrackBase::setResampler(uint32_t trackSampleRate, uint32_t
 
                 // TODO: Remove MONO_HACK. Resampler sees #channels after the downmixer
                 // but if none exists, it is the channel count (1 for mono).
-                const int resamplerChannelCount = getOutputChannelCount();
+                /* This maybe android native bug. The correct setting for resampler's
+                 * ChannelCount should be mixerChannelCount, which is also AudioMixer's
+                 * output channel, as resampler is last stage of AudioMixer.
+                 * AdjustChannelsBufferProvider(BufferProviders.cpp) already expand buffer
+                 * from input channel to mixer channel. So, resampler should use setting
+                 * with mixerChannelCount.
+                 * For android native, mixer channel is only verified with stereo setting.
+                 * When playing stereo source, getOutputChannelCount is equal to
+                 * mixerChannelCount, but when playing mono source it goes wrong, and
+                 * google use MONO_HACK to fix this case, Please also check MONO_HACK
+                 * in process__validate.
+                 */
+                //const int resamplerChannelCount = getOutputChannelCount();
+                int reqChannel = 0;
+                uint32_t mixerChannelCount = getMixerChannelCount();
+                uint32_t outChannelCount = getOutputChannelCount();
+                if (mixerChannelCount > FCC_2) {
+                    reqChannel = mixerChannelCount;
+		} else {
+                    reqChannel = outChannelCount;
+		}
+
+                const int resamplerChannelCount = reqChannel;
                 ALOGVV("Creating resampler:"
                         " format(%#x) channels(%d) devSampleRate(%u) quality(%d)\n",
                         mMixerInFormat, resamplerChannelCount, devSampleRate, quality);
@@ -1630,13 +1652,23 @@ AudioMixerBase::hook_t AudioMixerBase::TrackBase::getTrackHook(int trackType, ui
     case TRACKTYPE_RESAMPLEMONO:
         switch (mixerInFormat) {
         case AUDIO_FORMAT_PCM_FLOAT:
-            return (AudioMixerBase::hook_t) &TrackBase::track__Resample<
-                    MIXTYPE_STEREOEXPAND, float /*TO*/, float /*TI*/,
-                    TYPE_AUX>;
+            if (channelCount == FCC_2) {
+                return (AudioMixerBase::hook_t) &TrackBase::track__Resample<
+                        MIXTYPE_STEREOEXPAND, float /*TO*/, float /*TI*/,
+                        TYPE_AUX>;
+            } else {
+                return (AudioMixerBase::hook_t) &TrackBase::track__Resample<
+                        MIXTYPE_MULTI, float /*TO*/, float /*TI*/, TYPE_AUX>;
+            }
         case AUDIO_FORMAT_PCM_16_BIT:
-            return (AudioMixerBase::hook_t) &TrackBase::track__Resample<
-                    MIXTYPE_STEREOEXPAND, int32_t /*TO*/, int16_t /*TI*/,
-                    TYPE_AUX>;
+            if (channelCount == FCC_2) {
+                return (AudioMixerBase::hook_t) &TrackBase::track__Resample<
+                        MIXTYPE_STEREOEXPAND, int32_t /*TO*/, int16_t /*TI*/,
+                        TYPE_AUX>;
+            } else {
+                return (AudioMixerBase::hook_t) &TrackBase::track__Resample<
+                        MIXTYPE_MULTI, int32_t /*TO*/, int16_t /*TI*/, TYPE_AUX>;
+            }
         default:
             LOG_ALWAYS_FATAL("bad mixerInFormat: %#x", mixerInFormat);
             break;
-- 
2.17.1

