From aa74b2ab3fc89131646bdd698c1302ebae367321 Mon Sep 17 00:00:00 2001
From: "Martin, Chen" <haochuan.z.chen@intel.com>
Date: Tue, 4 Jul 2023 19:41:16 -0400
Subject: [PATCH] AudioMixer: fix multi-channel track

When playback mono audio source file, in case audio hal expose
multi channel ability, audio mixer will copy mono data to all
channels. This default behavior is only reasonable or mono
upmixing to stereo, which is android's default validation case.
Update mono audio source's channel expand behavior for multi
channel audio output.

Tracked-On: OAM-111131
Signed-off-by: Martin, Chen <haochuan.z.chen@intel.com>
---
 media/libaudioprocessing/AudioMixer.cpp     |  1 +
 media/libaudioprocessing/AudioMixerBase.cpp | 18 ++++++++++++++----
 2 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/media/libaudioprocessing/AudioMixer.cpp b/media/libaudioprocessing/AudioMixer.cpp
index e6fdb1de58..7d4b9eb675 100644
--- a/media/libaudioprocessing/AudioMixer.cpp
+++ b/media/libaudioprocessing/AudioMixer.cpp
@@ -164,6 +164,7 @@ status_t AudioMixer::Track::prepareForDownmix()
     // are not the same and not handled internally, as mono for channel position masks is.
     if (channelMask == mMixerChannelMask
             || (channelMask == AUDIO_CHANNEL_OUT_MONO
+                    && mMixerChannelMask == AUDIO_CHANNEL_OUT_STEREO
                     && isAudioChannelPositionMask(mMixerChannelMask))) {
         return NO_ERROR;
     }
diff --git a/media/libaudioprocessing/AudioMixerBase.cpp b/media/libaudioprocessing/AudioMixerBase.cpp
index f30eb54d55..a56fc9060a 100644
--- a/media/libaudioprocessing/AudioMixerBase.cpp
+++ b/media/libaudioprocessing/AudioMixerBase.cpp
@@ -1645,11 +1645,21 @@ AudioMixerBase::hook_t AudioMixerBase::TrackBase::getTrackHook(int trackType, ui
     case TRACKTYPE_NORESAMPLEMONO:
         switch (mixerInFormat) {
         case AUDIO_FORMAT_PCM_FLOAT:
-            return (AudioMixerBase::hook_t) &TrackBase::track__NoResample<
-                            MIXTYPE_MONOEXPAND, float /*TO*/, float /*TI*/, TYPE_AUX>;
+            if (channelCount == FCC_2) {
+                return (AudioMixerBase::hook_t) &TrackBase::track__NoResample<
+                        MIXTYPE_MONOEXPAND, float /*TO*/, float /*TI*/, TYPE_AUX>;
+	    } else {
+                return (AudioMixerBase::hook_t) &TrackBase::track__NoResample<
+                        MIXTYPE_MULTI_SAVEONLY_MONOVOL, float /*TO*/, float /*TI*/, TYPE_AUX>;
+	    }
         case AUDIO_FORMAT_PCM_16_BIT:
-            return (AudioMixerBase::hook_t) &TrackBase::track__NoResample<
-                            MIXTYPE_MONOEXPAND, int32_t /*TO*/, int16_t /*TI*/, TYPE_AUX>;
+	    if (channelCount == FCC_2) {
+                return (AudioMixerBase::hook_t) &TrackBase::track__NoResample<
+                        MIXTYPE_MONOEXPAND, int32_t /*TO*/, int16_t /*TI*/, TYPE_AUX>;
+	    } else {
+                return (AudioMixerBase::hook_t) &TrackBase::track__NoResample<
+                        MIXTYPE_MULTI_SAVEONLY_MONOVOL, int32_t /*TO*/, int16_t /*TI*/, TYPE_AUX>;
+            }
         default:
             LOG_ALWAYS_FATAL("bad mixerInFormat: %#x", mixerInFormat);
             break;
-- 
2.17.1

