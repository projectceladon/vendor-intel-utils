From cd55ca16fd0e224daa6d7875f04989bce4a9302b Mon Sep 17 00:00:00 2001
From: ahs <amrita.h.s@intel.com>
Date: Mon, 4 Nov 2019 13:23:36 +0530
Subject: [PATCH] Inferenced FMA Intrinsics for RS Resize module

Tracked-On:
Signed-off-by: ahs <amrita.h.s@intel.com>
---
 cpu_ref/Android.bp               | 13 +++---
 cpu_ref/rsCpuIntrinsicResize.cpp | 85 ++++++++++++++++++++++++++++++++++------
 2 files changed, 78 insertions(+), 20 deletions(-)

diff --git a/cpu_ref/Android.bp b/cpu_ref/Android.bp
index e929a9c..c409989 100644
--- a/cpu_ref/Android.bp
+++ b/cpu_ref/Android.bp
@@ -73,15 +73,14 @@ cc_library_shared {
         },
 
         x86: {
-            ssse3: {
-                cflags: ["-DARCH_X86_HAVE_SSSE3"],
-                srcs: ["rsCpuIntrinsics_x86.cpp"],
-            },
+            cflags: ["-DARCH_X86_HAVE_SSSE3"],
+            srcs: ["rsCpuIntrinsics_x86.cpp"],
         },
         x86_64: {
-            ssse3: {
-                cflags: ["-DARCH_X86_HAVE_SSSE3"],
-                srcs: ["rsCpuIntrinsics_x86.cpp"],
+            cflags: ["-DARCH_X86_HAVE_SSSE3"],
+            srcs: ["rsCpuIntrinsics_x86.cpp"],
+	    avx2: {
+                cflags: ["-DARCH_X86_HAVE_AVX2", "-mavx2", "-mfma"],
             },
         },
     },
diff --git a/cpu_ref/rsCpuIntrinsicResize.cpp b/cpu_ref/rsCpuIntrinsicResize.cpp
index ff42d79..8354bf5 100644
--- a/cpu_ref/rsCpuIntrinsicResize.cpp
+++ b/cpu_ref/rsCpuIntrinsicResize.cpp
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-
+#include <stdint.h>
+#include <x86intrin.h>
+#include <xmmintrin.h>
 #include "rsCpuIntrinsic.h"
 #include "rsCpuIntrinsicInlines.h"
 
@@ -78,10 +80,19 @@ static float2 cubicInterpolate(float2 p0,float2 p1,float2 p2,float2 p3, float x)
             + x * (3.f * (p1 - p2) + p3 - p0)));
 }
 
+#if defined(ARCH_X86_HAVE_AVX2)
+static float cubicInterpolate(float p0,float p1,float p2,float p3 , float x) {
+   return p1 + 0.5f * x * (p2 - p0 + x * (2.f * p0 - 5.f * p1 +
+           _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(4.f), _mm_set1_ps(p2),_mm_set1_ps(p3)))
+           + x * (_mm_cvtss_f32(_mm_fmadd_ss (_mm_set1_ps(3.f),_mm_set1_ps(p1 - p2),_mm_set1_ps(p3 - p0))))));
+
+}
+#else
 static float cubicInterpolate(float p0,float p1,float p2,float p3 , float x) {
     return p1 + 0.5f * x * (p2 - p0 + x * (2.f * p0 - 5.f * p1 + 4.f * p2 - p3
             + x * (3.f * (p1 - p2) + p3 - p0)));
 }
+#endif
 
 static uchar4 OneBiCubic(const uchar4 *yp0, const uchar4 *yp1, const uchar4 *yp2, const uchar4 *yp3,
                          float xf, float yf, int width) {
@@ -317,7 +328,11 @@ void RsdCpuScriptIntrinsicResize::kernelU4(const RsExpandKernelDriverInfo *info,
     const int srcWidth = cp->mAlloc->mHal.drvState.lod[0].dimX;
     const size_t stride = cp->mAlloc->mHal.drvState.lod[0].stride;
 
-    float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #if defined(ARCH_X86_HAVE_AVX2)
+       float yf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(info->current.y + 0.5f),_mm_set1_ps(cp->scaleY), _mm_set1_ps(0.5f)));
+    #else
+       float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #endif
     int starty = (int) floor(yf - 1);
     yf = yf - floor(yf);
     int maxy = srcHeight - 1;
@@ -363,7 +378,11 @@ void RsdCpuScriptIntrinsicResize::kernelU4(const RsExpandKernelDriverInfo *info,
 #endif
 
     while(x1 < x2) {
-        float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #if defined(ARCH_X86_HAVE_AVX2)
+          float xf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(x1 + 0.5f) , _mm_set1_ps(cp->scaleX) , _mm_set1_ps(0.5f)));
+        #else
+          float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #endif
         *out = OneBiCubic(yp0, yp1, yp2, yp3, xf, yf, srcWidth);
         out++;
         x1++;
@@ -384,7 +403,11 @@ void RsdCpuScriptIntrinsicResize::kernelU2(const RsExpandKernelDriverInfo *info,
     const int srcWidth = cp->mAlloc->mHal.drvState.lod[0].dimX;
     const size_t stride = cp->mAlloc->mHal.drvState.lod[0].stride;
 
-    float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #if defined(ARCH_X86_HAVE_AVX2)
+      float yf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(info->current.y + 0.5f),_mm_set1_ps(cp->scaleY), _mm_set1_ps(0.5f)));
+    #else
+      float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #endif
     int starty = (int) floor(yf - 1);
     yf = yf - floor(yf);
     int maxy = srcHeight - 1;
@@ -430,7 +453,11 @@ void RsdCpuScriptIntrinsicResize::kernelU2(const RsExpandKernelDriverInfo *info,
 #endif
 
     while(x1 < x2) {
-        float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #if defined(ARCH_X86_HAVE_AVX2)
+          float xf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(x1 + 0.5f) , _mm_set1_ps(cp->scaleX) , _mm_set1_ps(0.5f)));
+        #else
+          float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #endif
         *out = OneBiCubic(yp0, yp1, yp2, yp3, xf, yf, srcWidth);
         out++;
         x1++;
@@ -451,7 +478,11 @@ void RsdCpuScriptIntrinsicResize::kernelU1(const RsExpandKernelDriverInfo *info,
     const int srcWidth = cp->mAlloc->mHal.drvState.lod[0].dimX;
     const size_t stride = cp->mAlloc->mHal.drvState.lod[0].stride;
 
-    float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #if defined(ARCH_X86_HAVE_AVX2)
+      float yf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(info->current.y + 0.5f),_mm_set1_ps(cp->scaleY), _mm_set1_ps(0.5f)));
+    #else
+      float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #endif
     int starty = (int) floor(yf - 1);
     yf = yf - floor(yf);
     int maxy = srcHeight - 1;
@@ -497,7 +528,11 @@ void RsdCpuScriptIntrinsicResize::kernelU1(const RsExpandKernelDriverInfo *info,
 #endif
 
     while(x1 < x2) {
-        float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #if defined(ARCH_X86_HAVE_AVX2)
+          float xf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(x1 + 0.5f) , _mm_set1_ps(cp->scaleX) , _mm_set1_ps(0.5f)));
+        #else
+          float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #endif
         *out = OneBiCubic(yp0, yp1, yp2, yp3, xf, yf, srcWidth);
         out++;
         x1++;
@@ -518,7 +553,11 @@ void RsdCpuScriptIntrinsicResize::kernelF4(const RsExpandKernelDriverInfo *info,
     const int srcWidth = cp->mAlloc->mHal.drvState.lod[0].dimX;
     const size_t stride = cp->mAlloc->mHal.drvState.lod[0].stride;
 
-    float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #if defined(ARCH_X86_HAVE_AVX2)
+      float yf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(info->current.y + 0.5f),_mm_set1_ps(cp->scaleY), _mm_set1_ps(0.5f)));
+    #else
+      float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #endif
     int starty = (int) floor(yf - 1);
     yf = yf - floor(yf);
     int maxy = srcHeight - 1;
@@ -537,7 +576,11 @@ void RsdCpuScriptIntrinsicResize::kernelF4(const RsExpandKernelDriverInfo *info,
     uint32_t x2 = xend;
 
     while(x1 < x2) {
-        float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #if defined(ARCH_X86_HAVE_AVX2)
+          float xf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(x1 + 0.5f) , _mm_set1_ps(cp->scaleX) , _mm_set1_ps(0.5f)));
+        #else
+          float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #endif
         *out = OneBiCubic(yp0, yp1, yp2, yp3, xf, yf, srcWidth);
         out++;
         x1++;
@@ -558,7 +601,11 @@ void RsdCpuScriptIntrinsicResize::kernelF2(const RsExpandKernelDriverInfo *info,
     const int srcWidth = cp->mAlloc->mHal.drvState.lod[0].dimX;
     const size_t stride = cp->mAlloc->mHal.drvState.lod[0].stride;
 
-    float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #if defined(ARCH_X86_HAVE_AVX2)
+      float yf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(info->current.y + 0.5f),_mm_set1_ps(cp->scaleY), _mm_set1_ps(0.5f)));
+    #else
+      float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #endif
     int starty = (int) floor(yf - 1);
     yf = yf - floor(yf);
     int maxy = srcHeight - 1;
@@ -577,7 +624,11 @@ void RsdCpuScriptIntrinsicResize::kernelF2(const RsExpandKernelDriverInfo *info,
     uint32_t x2 = xend;
 
     while(x1 < x2) {
-        float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #if defined(ARCH_X86_HAVE_AVX2)
+          float xf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(x1 + 0.5f) , _mm_set1_ps(cp->scaleX) , _mm_set1_ps(0.5f)));
+        #else
+          float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #endif
         *out = OneBiCubic(yp0, yp1, yp2, yp3, xf, yf, srcWidth);
         out++;
         x1++;
@@ -598,7 +649,11 @@ void RsdCpuScriptIntrinsicResize::kernelF1(const RsExpandKernelDriverInfo *info,
     const int srcWidth = cp->mAlloc->mHal.drvState.lod[0].dimX;
     const size_t stride = cp->mAlloc->mHal.drvState.lod[0].stride;
 
-    float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #if defined(ARCH_X86_HAVE_AVX2)
+      float yf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(info->current.y + 0.5f),_mm_set1_ps(cp->scaleY), _mm_set1_ps(0.5f)));
+    #else
+      float yf = (info->current.y + 0.5f) * cp->scaleY - 0.5f;
+    #endif
     int starty = (int) floor(yf - 1);
     yf = yf - floor(yf);
     int maxy = srcHeight - 1;
@@ -617,7 +672,11 @@ void RsdCpuScriptIntrinsicResize::kernelF1(const RsExpandKernelDriverInfo *info,
     uint32_t x2 = xend;
 
     while(x1 < x2) {
-        float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #if defined(ARCH_X86_HAVE_AVX2)
+          float xf = _mm_cvtss_f32(_mm_fmsub_ss(_mm_set1_ps(x1 + 0.5f) , _mm_set1_ps(cp->scaleX) , _mm_set1_ps(0.5f)));
+        #else
+          float xf = (x1 + 0.5f) * cp->scaleX - 0.5f;
+        #endif
         *out = OneBiCubic(yp0, yp1, yp2, yp3, xf, yf, srcWidth);
         out++;
         x1++;
-- 
1.9.1

