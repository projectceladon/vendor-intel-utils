From b834d716cc22aaf610e47c346aac2ac988faf084 Mon Sep 17 00:00:00 2001
From: gkdeepa <g.k.deepa@intel.com>
Date: Tue, 17 Nov 2020 19:37:05 +0530
Subject: [PATCH] Revert "Add last connected device concept"

This reverts commit 0845152be4781710082f2453b4600810204fea45.
---
 services/audiopolicy/engine/common/Android.bp |  1 -
 .../engine/common/include/EngineBase.h        | 16 ++--
 .../include/LastRemovableMediaDevices.h       | 52 -------------
 .../engine/common/src/EngineBase.cpp          | 11 ---
 .../common/src/LastRemovableMediaDevices.cpp  | 78 -------------------
 .../engineconfigurable/src/Engine.cpp         |  2 +-
 .../audiopolicy/enginedefault/src/Engine.cpp  | 24 +++---
 7 files changed, 19 insertions(+), 165 deletions(-)
 mode change 100755 => 100644 services/audiopolicy/engine/common/Android.bp
 mode change 100755 => 100644 services/audiopolicy/engine/common/include/EngineBase.h
 delete mode 100755 services/audiopolicy/engine/common/include/LastRemovableMediaDevices.h
 delete mode 100755 services/audiopolicy/engine/common/src/LastRemovableMediaDevices.cpp
 mode change 100755 => 100644 services/audiopolicy/enginedefault/src/Engine.cpp

diff --git a/services/audiopolicy/engine/common/Android.bp b/services/audiopolicy/engine/common/Android.bp
old mode 100755
new mode 100644
index a1c69f23a5..b87c71de1d
--- a/services/audiopolicy/engine/common/Android.bp
+++ b/services/audiopolicy/engine/common/Android.bp
@@ -25,7 +25,6 @@ cc_library_static {
         "src/ProductStrategy.cpp",
         "src/VolumeCurve.cpp",
         "src/VolumeGroup.cpp",
-        "src/LastRemovableMediaDevices.cpp",
     ],
     cflags: [
         "-Wall",
diff --git a/services/audiopolicy/engine/common/include/EngineBase.h b/services/audiopolicy/engine/common/include/EngineBase.h
old mode 100755
new mode 100644
index 4cf0b904c2..fca9a60603
--- a/services/audiopolicy/engine/common/include/EngineBase.h
+++ b/services/audiopolicy/engine/common/include/EngineBase.h
@@ -20,7 +20,6 @@
 #include <EngineInterface.h>
 #include <ProductStrategy.h>
 #include <VolumeGroup.h>
-#include <LastRemovableMediaDevices.h>
 
 namespace android {
 namespace audio_policy {
@@ -50,8 +49,10 @@ public:
         return mForceUse[usage];
     }
     android::status_t setDeviceConnectionState(const sp<DeviceDescriptor> /*devDesc*/,
-                                               audio_policy_dev_state_t /*state*/) override;
-
+                                               audio_policy_dev_state_t /*state*/) override
+    {
+        return NO_ERROR;
+    }
     product_strategy_t getProductStrategyForAttributes(
             const audio_attributes_t &attr) const override;
 
@@ -85,12 +86,6 @@ public:
 
     status_t listAudioVolumeGroups(AudioVolumeGroupVector &groups) const override;
 
-    std::vector<audio_devices_t> getLastRemovableMediaDevices(
-            device_out_group_t group = GROUP_NONE) const
-    {
-        return mLastRemovableMediaDevices.getLastRemovableMediaDevices(group);
-    }
-
     void dump(String8 *dst) const override;
 
 
@@ -120,12 +115,11 @@ public:
 
     status_t restoreOriginVolumeCurve(audio_stream_type_t stream);
 
-private:
+ private:
     AudioPolicyManagerObserver *mApmObserver = nullptr;
 
     ProductStrategyMap mProductStrategies;
     VolumeGroupMap mVolumeGroups;
-    LastRemovableMediaDevices mLastRemovableMediaDevices;
     audio_mode_t mPhoneState = AUDIO_MODE_NORMAL;  /**< current phone state. */
 
     /** current forced use configuration. */
diff --git a/services/audiopolicy/engine/common/include/LastRemovableMediaDevices.h b/services/audiopolicy/engine/common/include/LastRemovableMediaDevices.h
deleted file mode 100755
index 88ac7a1ca3..0000000000
--- a/services/audiopolicy/engine/common/include/LastRemovableMediaDevices.h
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2019 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef ANDROID_LAST_REMOVABLE_MEDIA_DEVICES_H
-#define ANDROID_LAST_REMOVABLE_MEDIA_DEVICES_H
-
-#include <vector>
-#include <HwModule.h>
-#include <system/audio_policy.h>
-
-namespace android {
-
-typedef enum {
-    GROUP_NONE = -1,
-    GROUP_WIRED,
-    GROUP_BT_A2DP,
-    NUM_GROUP
-} device_out_group_t;
-
-class LastRemovableMediaDevices
-{
-public:
-    void setRemovableMediaDevices(sp<DeviceDescriptor> desc, audio_policy_dev_state_t state);
-    std::vector<audio_devices_t> getLastRemovableMediaDevices(
-            device_out_group_t group = GROUP_NONE) const;
-
-private:
-    struct DeviceGroupDescriptor {
-        sp<DeviceDescriptor> desc;
-        device_out_group_t group;
-    };
-    std::vector<DeviceGroupDescriptor> mMediaDevices;
-
-    device_out_group_t getDeviceOutGroup(audio_devices_t device) const;
-};
-
-} // namespace android
-
-#endif // ANDROID_LAST_REMOVABLE_MEDIA_DEVICES_H
\ No newline at end of file
diff --git a/services/audiopolicy/engine/common/src/EngineBase.cpp b/services/audiopolicy/engine/common/src/EngineBase.cpp
index 45c43d8387..840eb3409e 100644
--- a/services/audiopolicy/engine/common/src/EngineBase.cpp
+++ b/services/audiopolicy/engine/common/src/EngineBase.cpp
@@ -63,17 +63,6 @@ status_t EngineBase::setPhoneState(audio_mode_t state)
     return NO_ERROR;
 }
 
-status_t EngineBase::setDeviceConnectionState(const sp<DeviceDescriptor> devDesc,
-                                              audio_policy_dev_state_t state)
-{
-    audio_devices_t deviceType = devDesc->type();
-    if ((deviceType != AUDIO_DEVICE_NONE) && audio_is_output_device(deviceType)) {
-        mLastRemovableMediaDevices.setRemovableMediaDevices(devDesc, state);
-    }
-
-    return NO_ERROR;
-}
-
 product_strategy_t EngineBase::getProductStrategyForAttributes(const audio_attributes_t &attr) const
 {
     return mProductStrategies.getProductStrategyForAttributes(attr);
diff --git a/services/audiopolicy/engine/common/src/LastRemovableMediaDevices.cpp b/services/audiopolicy/engine/common/src/LastRemovableMediaDevices.cpp
deleted file mode 100755
index 0eb22cee9d..0000000000
--- a/services/audiopolicy/engine/common/src/LastRemovableMediaDevices.cpp
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (C) 2019 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#define LOG_TAG "APM::AudioPolicyEngine/LastRemovableMediaDevices"
-//#define LOG_NDEBUG 0
-
-#include "LastRemovableMediaDevices.h"
-#include <log/log.h>
-
-namespace android {
-
-void LastRemovableMediaDevices::setRemovableMediaDevices(sp<DeviceDescriptor> desc,
-                                                         audio_policy_dev_state_t state)
-{
-    if (desc == nullptr) {
-        return;
-    } else {
-        if ((state == AUDIO_POLICY_DEVICE_STATE_AVAILABLE) &&
-                (getDeviceOutGroup(desc->type()) != GROUP_NONE)) {
-            setRemovableMediaDevices(desc, AUDIO_POLICY_DEVICE_STATE_UNAVAILABLE);
-            mMediaDevices.insert(mMediaDevices.begin(), {desc, getDeviceOutGroup(desc->type())});
-        } else if (state == AUDIO_POLICY_DEVICE_STATE_UNAVAILABLE) {
-            for (auto iter = mMediaDevices.begin(); iter != mMediaDevices.end(); ++iter) {
-                if ((iter->desc)->equals(desc)) {
-                    mMediaDevices.erase(iter);
-                    break;
-                }
-            }
-        }
-    }
-}
-
-std::vector<audio_devices_t> LastRemovableMediaDevices::getLastRemovableMediaDevices(
-        device_out_group_t group) const
-{
-    std::vector<audio_devices_t> ret;
-    for (auto iter = mMediaDevices.begin(); iter != mMediaDevices.end(); ++iter) {
-        if ((group == GROUP_NONE) || (group == getDeviceOutGroup((iter->desc)->type()))) {
-            ret.push_back((iter->desc)->type());
-        }
-    }
-    return ret;
-}
-
-device_out_group_t LastRemovableMediaDevices::getDeviceOutGroup(audio_devices_t device) const
-{
-    switch (device) {
-    case AUDIO_DEVICE_OUT_WIRED_HEADPHONE:
-    case AUDIO_DEVICE_OUT_LINE:
-    case AUDIO_DEVICE_OUT_WIRED_HEADSET:
-    case AUDIO_DEVICE_OUT_USB_HEADSET:
-    case AUDIO_DEVICE_OUT_USB_ACCESSORY:
-    case AUDIO_DEVICE_OUT_USB_DEVICE:
-    case AUDIO_DEVICE_OUT_DGTL_DOCK_HEADSET:
-        return GROUP_WIRED;
-    case AUDIO_DEVICE_OUT_BLUETOOTH_A2DP:
-    case AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES:
-    case AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER:
-        return GROUP_BT_A2DP;
-    default:
-        return GROUP_NONE;
-    }
-}
-
-} // namespace android
\ No newline at end of file
diff --git a/services/audiopolicy/engineconfigurable/src/Engine.cpp b/services/audiopolicy/engineconfigurable/src/Engine.cpp
index 752ba9270e..0a8868508b 100644
--- a/services/audiopolicy/engineconfigurable/src/Engine.cpp
+++ b/services/audiopolicy/engineconfigurable/src/Engine.cpp
@@ -176,7 +176,7 @@ status_t Engine::setDeviceConnectionState(const sp<DeviceDescriptor> devDesc,
         return mPolicyParameterMgr->setAvailableInputDevices(
                     deviceTypesToBitMask(getApmObserver()->getAvailableInputDevices().types()));
     }
-    return EngineBase::setDeviceConnectionState(devDesc, state);
+    return BAD_TYPE;
 }
 
 status_t Engine::loadAudioPolicyEngineConfig()
diff --git a/services/audiopolicy/enginedefault/src/Engine.cpp b/services/audiopolicy/enginedefault/src/Engine.cpp
old mode 100755
new mode 100644
index de7e7cea3d..9dc0d64758
--- a/services/audiopolicy/enginedefault/src/Engine.cpp
+++ b/services/audiopolicy/enginedefault/src/Engine.cpp
@@ -385,21 +385,23 @@ DeviceVector Engine::getDevicesForStrategyInt(legacy_strategy strategy,
                 (getForceUse(AUDIO_POLICY_FORCE_FOR_MEDIA) != AUDIO_POLICY_FORCE_NO_BT_A2DP)) {
             devices2 = availableOutputDevices.getDevicesFromType(AUDIO_DEVICE_OUT_HEARING_AID);
         }
+        if ((devices2.isEmpty()) &&
+                (getForceUse(AUDIO_POLICY_FORCE_FOR_MEDIA) != AUDIO_POLICY_FORCE_NO_BT_A2DP) &&
+                 outputs.isA2dpSupported()) {
+            devices2 = availableOutputDevices.getFirstDevicesFromTypes({
+                    AUDIO_DEVICE_OUT_BLUETOOTH_A2DP, AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES,
+                    AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER});
+        }
         if ((devices2.isEmpty()) &&
             (getForceUse(AUDIO_POLICY_FORCE_FOR_MEDIA) == AUDIO_POLICY_FORCE_SPEAKER)) {
             devices2 = availableOutputDevices.getDevicesFromType(AUDIO_DEVICE_OUT_SPEAKER);
         }
-        if (devices2.isEmpty() && (getLastRemovableMediaDevices().size() > 0)) {
-            if ((getForceUse(AUDIO_POLICY_FORCE_FOR_MEDIA) != AUDIO_POLICY_FORCE_NO_BT_A2DP) &&
-                    outputs.isA2dpSupported()) {
-                // Get the last connected device of wired and bluetooth a2dp
-                devices2 = availableOutputDevices.getFirstDevicesFromTypes(
-                        getLastRemovableMediaDevices());
-            } else {
-                // Get the last connected device of wired except bluetooth a2dp
-                devices2 = availableOutputDevices.getFirstDevicesFromTypes(
-                        getLastRemovableMediaDevices(GROUP_WIRED));
-            }
+        if (devices2.isEmpty()) {
+            devices2 = availableOutputDevices.getFirstDevicesFromTypes({
+                    AUDIO_DEVICE_OUT_WIRED_HEADPHONE, AUDIO_DEVICE_OUT_LINE,
+                    AUDIO_DEVICE_OUT_WIRED_HEADSET, AUDIO_DEVICE_OUT_USB_HEADSET,
+                    AUDIO_DEVICE_OUT_USB_ACCESSORY, AUDIO_DEVICE_OUT_USB_DEVICE,
+                    AUDIO_DEVICE_OUT_DGTL_DOCK_HEADSET});
         }
         if ((devices2.isEmpty()) && (strategy != STRATEGY_SONIFICATION)) {
             // no sonification on aux digital (e.g. HDMI)
-- 
2.17.1

