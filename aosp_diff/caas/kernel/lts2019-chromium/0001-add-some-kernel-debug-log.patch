From 6e192fcecc98660c950044b1651ac2271d2d2132 Mon Sep 17 00:00:00 2001
From: "Chen, Yu" <yu.y.chen@intel.com>
Date: Sat, 10 Oct 2020 18:58:55 +0800
Subject: [PATCH] add some kernel debug log

---
 fs/xattr.c          | 26 +++++++++++++++++++++++---
 security/security.c |  9 +++++++--
 2 files changed, 30 insertions(+), 5 deletions(-)

diff --git a/fs/xattr.c b/fs/xattr.c
index 6b45eea77482..87de92a8ad57 100644
--- a/fs/xattr.c
+++ b/fs/xattr.c
@@ -10,6 +10,8 @@
  */
 #include <linux/fs.h>
 #include <linux/slab.h>
+#include <linux/kernel.h>
+#include <linux/printk.h>
 #include <linux/file.h>
 #include <linux/xattr.h>
 #include <linux/mount.h>
@@ -179,6 +181,9 @@ int __vfs_setxattr_noperm(struct dentry *dentry, const char *name,
 		inode->i_flags &= ~S_NOSEC;
 	if (inode->i_opflags & IOP_XATTR) {
 		error = __vfs_setxattr(dentry, inode, name, value, size, flags);
+		if (error) {
+			printk(KERN_ERR "__vfs_setxattr error!!!!!!!!!!\n");
+		}
 		if (!error) {
 			fsnotify_xattr(dentry);
 			security_inode_post_setxattr(dentry, name, value,
@@ -190,12 +195,18 @@ int __vfs_setxattr_noperm(struct dentry *dentry, const char *name,
 	}
 	if (error == -EAGAIN) {
 		error = -EOPNOTSUPP;
+		if (error) {
+			printk(KERN_ERR "EAGAIN error!!!!!!!!!!\n");
+		}
 
 		if (issec) {
 			const char *suffix = name + XATTR_SECURITY_PREFIX_LEN;
 
 			error = security_inode_setsecurity(inode, suffix, value,
 							   size, flags);
+			if (error) {
+				printk(KERN_ERR "security_inode_setsecurity error!!!!!!!!!!\n");
+			}
 			if (!error)
 				fsnotify_xattr(dentry);
 		}
@@ -225,18 +236,27 @@ __vfs_setxattr_locked(struct dentry *dentry, const char *name,
 	int error;
 
 	error = xattr_permission(inode, name, MAY_WRITE);
-	if (error)
+	if (error) {
+		printk(KERN_ERR "xattr_permission error!!!!!!!!!!!!!!\n");
 		return error;
+	}
 
 	error = security_inode_setxattr(dentry, name, value, size, flags);
-	if (error)
+	if (error) {
+		printk(KERN_ERR "security_inode_setxattr error!!!!!!!!!!!!!!\n");
 		goto out;
+	}
 
 	error = try_break_deleg(inode, delegated_inode);
-	if (error)
+	if (error) {
+		printk(KERN_ERR "try_break_deleg error!!!!!!!!!!!!!!\n");
 		goto out;
+	}
 
 	error = __vfs_setxattr_noperm(dentry, name, value, size, flags);
+	if (error) {
+		printk(KERN_ERR "__vfs_setxattr_noperm error!!!!!!!!!!!!!!\n");
+	}
 
 out:
 	return error;
diff --git a/security/security.c b/security/security.c
index ab1a1a10c671..c13bc8e02ef6 100644
--- a/security/security.c
+++ b/security/security.c
@@ -16,6 +16,7 @@
 #include <linux/export.h>
 #include <linux/init.h>
 #include <linux/kernel.h>
+#include <linux/printk.h>
 #include <linux/lsm_hooks.h>
 #include <linux/integrity.h>
 #include <linux/ima.h>
@@ -1239,11 +1240,15 @@ int security_inode_setxattr(struct dentry *dentry, const char *name,
 
 	if (ret == 1)
 		ret = cap_inode_setxattr(dentry, name, value, size, flags);
-	if (ret)
+	if (ret) {
+		printk(KERN_ERR "security_inode_setxattr error!!!!!!!\n");
 		return ret;
+	}
 	ret = ima_inode_setxattr(dentry, name, value, size);
-	if (ret)
+	if (ret) {
+		printk(KERN_ERR "ima_inode_setxattr error!!!!!!!\n");
 		return ret;
+	}
 	return evm_inode_setxattr(dentry, name, value, size);
 }
 
-- 
2.28.0

