From dbada66f69d70142d7162319dabf2440f795ba7b Mon Sep 17 00:00:00 2001
From: Gaganpreet kaur <gaganpreetx.kaur@intel.com>
Date: Fri, 2 Aug 2019 16:59:02 +0530
Subject: [PATCH] Fix for Call Swap Issue

Issue: Call swap functionality is not working during HFP call

Description: When Pixel device is connected to DUT over BT and
receives 2 calls from different numbers such that 1 call is in
active state and another in held state. When user tries to swap
calls from Car Dialer App UI on DUT, active call will go to
held state for a second and then again comes back to active
state.

Root Cause: This is happening due to two requests sent from Car
Dialer app i.e. to unhold secondaryCall (held call) and to hold
primaryCall (active call). But as per HFP specification, if
active call is put on hold either by AG or HF, such that AG has
both an active and held call, then AG with indicate HF with
callHeld indicator value of "1". Due to which calls will be
automatically swapped. There is no need to expecility issue
requests for unhold and hold from Car Dialer app.

Fix: Removing unhold request for secondary call from Car Dialer
App from "swapCalls()" Function.

Change-Id: I74ac23cd373f6950bfaba17234462c03d29c1543
Tracked-On: 
Signed-off-by: Gaganpreet kaur <gaganpreetx.kaur@intel.com>

---
 .../car/dialer/ui/activecall/OnHoldCallUserProfileFragment.java      | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/src/com/android/car/dialer/ui/activecall/OnHoldCallUserProfileFragment.java b/src/com/android/car/dialer/ui/activecall/OnHoldCallUserProfileFragment.java
index 7740392..bc68ed4 100644
--- a/src/com/android/car/dialer/ui/activecall/OnHoldCallUserProfileFragment.java
+++ b/src/com/android/car/dialer/ui/activecall/OnHoldCallUserProfileFragment.java
@@ -85,11 +85,6 @@ public class OnHoldCallUserProfileFragment extends Fragment {
     }
 
     private void swapCalls() {
-        // Unholds onhold call
-        if (mSecondaryCallLiveData.getValue() != null) {
-            mSecondaryCallLiveData.getValue().unhold();
-        }
-
         // hold primary call
         if (mPrimaryCallLiveData.getValue().getState() != Call.STATE_HOLDING) {
             mPrimaryCallLiveData.getValue().hold();
-- 
2.7.4

