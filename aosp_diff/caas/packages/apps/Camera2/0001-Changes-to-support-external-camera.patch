From 5c0e1e71278b4e3e5bbc5ff718be9daf426fd347 Mon Sep 17 00:00:00 2001
From: "Nikumbh, Mayur NimbaX" <mayur.nimbax.nikumbh@intel.com>
Date: Tue, 12 Nov 2019 11:00:57 +0530
Subject: [PATCH] Changes to support external camera

- Remove DisableCameraReceiver as it disables all camera
activities if camera is not plugged in during first boot.
- If camera device path has /, replace it with _ as / is
not allowed in file uri path.
- If no front camera found, return external camera facing
id.

Tracked-On: OAM-88591
Signed-off-by: Nikumbh, Mayur NimbaX <mayur.nimbax.nikumbh@intel.com>
---
 AndroidManifest.xml                                       | 6 ------
 src/com/android/camera/PermissionsActivity.java           | 4 ++--
 .../camera/one/v2/Camera2OneCameraManagerImpl.java        | 7 +++++--
 .../processing/imagebackend/TaskCompressImageToJpeg.java  | 8 +++++++-
 src/com/android/camera/settings/SettingsManager.java      | 1 +
 5 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 1f13e3e80..2a006b109 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -151,12 +151,6 @@
             android:theme="@style/Theme.CameraSettings"
             android:configChanges="keyboardHidden|orientation|screenSize">
         </activity>
-
-        <receiver android:name="com.android.camera.DisableCameraReceiver">
-            <intent-filter>
-                <action android:name="android.intent.action.BOOT_COMPLETED" />
-            </intent-filter>
-        </receiver>
     </application>
 
 </manifest>
diff --git a/src/com/android/camera/PermissionsActivity.java b/src/com/android/camera/PermissionsActivity.java
index 3fda04abb..765b1406b 100644
--- a/src/com/android/camera/PermissionsActivity.java
+++ b/src/com/android/camera/PermissionsActivity.java
@@ -113,7 +113,7 @@ public class PermissionsActivity extends QuickActivity {
             mFlagHasMicrophonePermission = true;
         }
 
-        if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE)
+        if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
                 != PackageManager.PERMISSION_GRANTED) {
             mNumPermissionsToRequest++;
             mShouldRequestStoragePermission = true;
@@ -156,7 +156,7 @@ public class PermissionsActivity extends QuickActivity {
             permissionsRequestIndex++;
         }
         if (mShouldRequestStoragePermission) {
-            permissionsToRequest[permissionsRequestIndex] = Manifest.permission.READ_EXTERNAL_STORAGE;
+            permissionsToRequest[permissionsRequestIndex] = Manifest.permission.WRITE_EXTERNAL_STORAGE;
             mIndexPermissionRequestStorage = permissionsRequestIndex;
             permissionsRequestIndex++;
         }
diff --git a/src/com/android/camera/one/v2/Camera2OneCameraManagerImpl.java b/src/com/android/camera/one/v2/Camera2OneCameraManagerImpl.java
index 031c6103d..a6aa31390 100644
--- a/src/com/android/camera/one/v2/Camera2OneCameraManagerImpl.java
+++ b/src/com/android/camera/one/v2/Camera2OneCameraManagerImpl.java
@@ -145,7 +145,9 @@ public class Camera2OneCameraManagerImpl implements OneCameraManager {
             id = findFirstBackCameraId();
         }
 
-        mCameraFacingCache.put(facing, id);
+        if (id != null) {
+            mCameraFacingCache.put(facing, id);
+        }
         return id;
     }
 
@@ -165,6 +167,7 @@ public class Camera2OneCameraManagerImpl implements OneCameraManager {
         String cameraId = findFirstCameraIdFacing(CameraCharacteristics.LENS_FACING_FRONT);
         if (cameraId == null) {
             Log.w(TAG, "No front-facing camera found.");
+            cameraId = findFirstCameraIdFacing(CameraCharacteristics.LENS_FACING_EXTERNAL);
         }
         return cameraId;
     }
@@ -187,4 +190,4 @@ public class Camera2OneCameraManagerImpl implements OneCameraManager {
         return null;
     }
 
-}
\ No newline at end of file
+}
diff --git a/src/com/android/camera/processing/imagebackend/TaskCompressImageToJpeg.java b/src/com/android/camera/processing/imagebackend/TaskCompressImageToJpeg.java
index 2e5976c46..d9a6e6365 100644
--- a/src/com/android/camera/processing/imagebackend/TaskCompressImageToJpeg.java
+++ b/src/com/android/camera/processing/imagebackend/TaskCompressImageToJpeg.java
@@ -420,7 +420,13 @@ public class TaskCompressImageToJpeg extends TaskJpegEncode {
      * @return Quality level to use for JPEG compression.
      */
     protected int getJpegCompressionQuality () {
-        return CameraProfile.getJpegEncodingQualityParameter(CameraProfile.QUALITY_HIGH);
+        /* Media framework doesn't support query of EXTERNAL camera quality,
+         * It will return the BACK facing camera's quality. Set quality to 90 as WA.
+         */
+        int quality = CameraProfile.getJpegEncodingQualityParameter(CameraProfile.QUALITY_HIGH);
+        if (quality == 0)
+            return 90;
+        return quality;
     }
 
     /**
diff --git a/src/com/android/camera/settings/SettingsManager.java b/src/com/android/camera/settings/SettingsManager.java
index c5c494ea8..807d3cdbf 100644
--- a/src/com/android/camera/settings/SettingsManager.java
+++ b/src/com/android/camera/settings/SettingsManager.java
@@ -157,6 +157,7 @@ public class SettingsManager {
     }
 
     public static String getCameraSettingScope(String cameraIdValue) {
+        cameraIdValue = cameraIdValue.replaceAll("/", "_");
         return CAMERA_SCOPE_PREFIX + cameraIdValue;
     }
 
-- 
2.17.1

