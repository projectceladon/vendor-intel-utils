From 92aa22521186e133d9f2c87dcb87cb27ae03dbbb Mon Sep 17 00:00:00 2001
From: "Chen, Yu" <yu.y.chen@intel.com>
Date: Fri, 9 Oct 2020 22:59:20 +0800
Subject: [PATCH] add some logs

---
 libselinux/src/android/android_platform.c | 31 +++++++++++++++++++----
 1 file changed, 26 insertions(+), 5 deletions(-)

diff --git a/libselinux/src/android/android_platform.c b/libselinux/src/android/android_platform.c
index 20bb4a98..e0e08765 100644
--- a/libselinux/src/android/android_platform.c
+++ b/libselinux/src/android/android_platform.c
@@ -1363,6 +1363,8 @@ static int selinux_android_restorecon_common(const char* pathname_orig,
                                              uid_t uid,
                                              unsigned int flags)
 {
+    selinux_log(SELINUX_ERROR,
+		"SELinux:  Enter into restorecon!!!!!!!!!");
     bool nochange = (flags & SELINUX_ANDROID_RESTORECON_NOCHANGE) ? true : false;
     bool verbose = (flags & SELINUX_ANDROID_RESTORECON_VERBOSE) ? true : false;
     bool recurse = (flags & SELINUX_ANDROID_RESTORECON_RECURSE) ? true : false;
@@ -1402,8 +1404,11 @@ static int selinux_android_restorecon_common(const char* pathname_orig,
     pathbname = basename(pathname_orig);
     if (!strcmp(pathbname, "/") || !strcmp(pathbname, ".") || !strcmp(pathbname, "..")) {
         pathname = realpath(pathname_orig, NULL);
-        if (!pathname)
+        if (!pathname) {
+    selinux_log(SELINUX_ERROR,
+		"SELinux:  1!!!!!!!!!");
             goto realpatherr;
+	}
     } else {
         pathdname = dirname(pathname_orig);
         pathdnamer = realpath(pathdname, NULL);
@@ -1411,10 +1416,14 @@ static int selinux_android_restorecon_common(const char* pathname_orig,
             goto realpatherr;
         if (!strcmp(pathdnamer, "/"))
             error = asprintf(&pathname, "/%s", pathbname);
-        else
+        else {
             error = asprintf(&pathname, "%s/%s", pathdnamer, pathbname);
-        if (error < 0)
-            goto oom;
+		if (error < 0) {
+	    selinux_log(SELINUX_ERROR,
+			"SELinux:  2!!!!!!!!");
+		    goto oom;
+		}
+	}
     }
 
     paths[0] = pathname;
@@ -1424,10 +1433,14 @@ static int selinux_android_restorecon_common(const char* pathname_orig,
     if (!recurse) {
         if (lstat(pathname, &sb) < 0) {
             error = -1;
+	    selinux_log(SELINUX_ERROR,
+			"SELinux:  3h!!!!!!!");
             goto cleanup;
         }
 
         error = restorecon_sb(pathname, &sb, nochange, verbose, seinfo, uid);
+	    selinux_log(SELINUX_ERROR,
+			"SELinux:  4!!!!!!!!");
         goto cleanup;
     }
 
@@ -1457,6 +1470,8 @@ static int selinux_android_restorecon_common(const char* pathname_orig,
     fts = fts_open(paths, ftsflags, NULL);
     if (!fts) {
         error = -1;
+	    selinux_log(SELINUX_ERROR,
+			"SELinux:  5!!!!!!!!");
         goto cleanup;
     }
 
@@ -1468,6 +1483,8 @@ static int selinux_android_restorecon_common(const char* pathname_orig,
                         "SELinux:  Directory cycle on %s.\n", ftsent->fts_path);
             errno = ELOOP;
             error = -1;
+	    selinux_log(SELINUX_ERROR,
+			"SELinux:  6!!!!!!!!");
             goto out;
         case FTS_DP:
             continue;
@@ -1571,9 +1588,11 @@ cleanup:
     return error;
 oom:
     sverrno = errno;
-    selinux_log(SELINUX_ERROR, "%s:  Out of memory\n", __FUNCTION__);
+    selinux_log(SELINUX_ERROR, "SELinux: %s:  Out of memory\n", __FUNCTION__);
     errno = sverrno;
     error = -1;
+	    selinux_log(SELINUX_ERROR,
+			"SELinux:  7!!!!!!!!");
     goto cleanup;
 realpatherr:
     sverrno = errno;
@@ -1582,6 +1601,8 @@ realpatherr:
     errno = sverrno;
     error = -1;
     goto cleanup;
+	    selinux_log(SELINUX_ERROR,
+			"SELinux:  8!!!!!!!!");
 }
 
 int selinux_android_restorecon(const char *file, unsigned int flags)
-- 
2.28.0

