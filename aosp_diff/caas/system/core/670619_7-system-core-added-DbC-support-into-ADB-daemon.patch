From 63a1051f9df603b21bd25e79e1feba114c82469f Mon Sep 17 00:00:00 2001
From: revatipx <revatix.prasad@intel.com>
Date: Thu, 30 May 2019 00:04:42 +0530
Subject: [PATCH] system: core: added DbC support into ADB daemon

Added the adb-over-dbc support into adb daemon.

Change-Id: I34456acf397676dcfae1e03a1927bb9b8169cbe7
Tracked-On: https://jira.devtools.intel.com/browse/OAM-81060
Signed-off-by: Prabhat Chand Pandey <prabhat.chand.pandey@intel.com>
---
 adb/adb.h                     |   5 ++
 adb/client/commandline.cpp    |  10 +--
 adb/client/usb_linux.cpp      |  45 ++++++++++++
 adb/daemon/include/adbd/usb.h |   2 +
 adb/daemon/main.cpp           |   3 +-
 adb/daemon/usb_legacy.cpp     | 128 +++++++++++++++++++++++++++++++++-
 adb/transport_usb.cpp         |  11 ++-
 7 files changed, 195 insertions(+), 9 deletions(-)

diff --git a/adb/adb.h b/adb/adb.h
index 9324ceec5..a7009d2a7 100644
--- a/adb/adb.h
+++ b/adb/adb.h
@@ -200,6 +200,10 @@ void put_apacket(apacket* p);
 #define ADB_SUBCLASS 0x42
 #define ADB_PROTOCOL 0x1
 
+#define ADB_DBC_CLASS 0xDC
+#define ADB_DBC_SUBCLASS 0x2
+#define ADB_DBC_PROTOCOL 0x1
+
 void local_init(int port);
 bool local_connect(int port);
 int local_connect_arbitrary_ports(int console_port, int adb_port, std::string* error);
@@ -220,6 +224,7 @@ extern const char* adb_device_banner;
 #define USB_FFS_ADB_EP0 USB_FFS_ADB_EP(ep0)
 #define USB_FFS_ADB_OUT USB_FFS_ADB_EP(ep1)
 #define USB_FFS_ADB_IN USB_FFS_ADB_EP(ep2)
+#define USB_DBC_ADB_PATH  "/dev/dbc_raw0"
 #endif
 
 enum class HostRequestResult {
diff --git a/adb/client/commandline.cpp b/adb/client/commandline.cpp
index e2a17c553..2dfe75102 100644
--- a/adb/client/commandline.cpp
+++ b/adb/client/commandline.cpp
@@ -1103,7 +1103,7 @@ static bool adb_root(const char* command) {
     }
 
     // Figure out whether we actually did anything.
-    char buf[256];
+/*    char buf[256];
     char* cur = buf;
     ssize_t bytes_left = sizeof(buf);
     while (bytes_left > 0) {
@@ -1128,6 +1128,7 @@ static bool adb_root(const char* command) {
     if (cur != buf && strstr(buf, "restarting") == nullptr) {
         return true;
     }
+*/
 
     // Wait for the device to go away.
     TransportType previous_type;
@@ -1135,8 +1136,9 @@ static bool adb_root(const char* command) {
     TransportId previous_id;
     adb_get_transport(&previous_type, &previous_serial, &previous_id);
 
-    adb_set_transport(kTransportAny, nullptr, transport_id);
-    wait_for_device("wait-for-disconnect");
+   // adb_set_transport(kTransportAny, nullptr, transport_id);
+    //wait_for_device("wait-for-disconnect");
+    std::this_thread::sleep_for(1s);
 
     // Wait for the device to come back.
     // If we were using a specific transport ID, there's nothing we can wait for.
@@ -1713,7 +1715,7 @@ int adb_commandline(int argc, const char** argv) {
         }
         return adb_connect_command(command);
     } else if (!strcmp(argv[0], "root") || !strcmp(argv[0], "unroot")) {
-        return adb_root(argv[0]) ? 0 : 1;
+	return adb_root(argv[0]) ? adb_query_command(format_host_command("reconnect")) : 1;
     } else if (!strcmp(argv[0], "bugreport")) {
         Bugreport bugreport;
         return bugreport.DoIt(argc, argv);
diff --git a/adb/client/usb_linux.cpp b/adb/client/usb_linux.cpp
index 81b830643..13c1a9e1b 100644
--- a/adb/client/usb_linux.cpp
+++ b/adb/client/usb_linux.cpp
@@ -352,6 +352,9 @@ static int usb_bulk_read(usb_handle* h, void* data, int len) {
     urb->buffer = data;
     urb->buffer_length = len;
 
+    usbdevfs_ctrltransfer ufs;
+    unsigned short int ufsdata;
+
     if (h->dead) {
         errno = EINVAL;
         return -1;
@@ -366,13 +369,55 @@ static int usb_bulk_read(usb_handle* h, void* data, int len) {
         D("[ reap urb - wait ]");
         h->reaper_thread = pthread_self();
         int fd = h->fd;
+
+        ufsdata = 0;
+        ufs.bRequestType = 0x82;
+        ufs.bRequest = USB_REQ_GET_STATUS;
+        ufs.wValue = 0x0000;
+        ufs.wIndex = h->ep_in;
+        ufs.wLength = 0x0002;
+        ufs.data = &ufsdata;
+
+        if(TEMP_FAILURE_RETRY(ioctl(h->fd,USBDEVFS_CONTROL,&ufs))== -1)
+        {
+            D("clear_halt read failed");}
+        else
+        {
+            D("clear_halt read successful %d",ufsdata);
+        }
+
+        if(ufsdata)
+        {
+            ufs.bRequestType = 0x02;
+            ufs.bRequest = USB_REQ_CLEAR_FEATURE;
+            ufs.wValue = 0x0000;
+            ufs.wIndex = h->ep_out;
+            ufs.wLength = 0x0000;
+            ufs.data = NULL;
+
+            if(TEMP_FAILURE_RETRY(ioctl(h->fd,USBDEVFS_CONTROL,&ufs))== -1)
+            {
+                D("clear_halt read2 failed");
+            }
+            else
+            {
+                D("clear_halt read2 successful ");
+            }
+        errno = ETIMEDOUT;
+        return -1;
+        }
+
         lock.unlock();
 
         // This ioctl must not have TEMP_FAILURE_RETRY because we send SIGALRM to break out.
+
         usbdevfs_urb* out = nullptr;
+        D("before reap urb");
+
         int res = ioctl(fd, USBDEVFS_REAPURB, &out);
         int saved_errno = errno;
 
+        D("after reap urb");
         lock.lock();
         h->reaper_thread = 0;
         if (h->dead) {
diff --git a/adb/daemon/include/adbd/usb.h b/adb/daemon/include/adbd/usb.h
index fca3c58e8..cc6b087c2 100644
--- a/adb/daemon/include/adbd/usb.h
+++ b/adb/daemon/include/adbd/usb.h
@@ -64,3 +64,5 @@ struct usb_handle {
 usb_handle *create_usb_handle(unsigned num_bufs, unsigned io_size);
 bool open_functionfs(android::base::unique_fd* control, android::base::unique_fd* bulk_out,
                      android::base::unique_fd* bulk_in);
+usb_handle *create_usb_dbc_handle(unsigned num_bufs, unsigned io_size);
+
diff --git a/adb/daemon/main.cpp b/adb/daemon/main.cpp
index e5a49171b..b7160a8df 100644
--- a/adb/daemon/main.cpp
+++ b/adb/daemon/main.cpp
@@ -31,6 +31,7 @@
 #include <sys/capability.h>
 #include <sys/prctl.h>
 
+#include <stdio.h>
 #include <memory>
 
 #include <android-base/logging.h>
@@ -233,7 +234,7 @@ int adbd_main(int server_port) {
     bool is_usb = false;
 
 #if defined(__ANDROID__)
-    if (access(USB_FFS_ADB_EP0, F_OK) == 0) {
+    if ( (access(USB_FFS_ADB_EP0, F_OK) == 0) || (access(USB_DBC_ADB_PATH,F_OK) == 0) ) {
         // Listen on USB.
         usb_init();
         is_usb = true;
diff --git a/adb/daemon/usb_legacy.cpp b/adb/daemon/usb_legacy.cpp
index fe80e7d59..7afdb3c2c 100644
--- a/adb/daemon/usb_legacy.cpp
+++ b/adb/daemon/usb_legacy.cpp
@@ -51,10 +51,12 @@ using namespace std::chrono_literals;
 #define MAX_PACKET_SIZE_HS 512
 #define MAX_PACKET_SIZE_SS 1024
 
-#define USB_FFS_BULK_SIZE 16384
+#define USB_FFS_BULK_SIZE (64*1024)
+#define USB_DBC_BULK_SIZE (64*1024)
 
 // Number of buffers needed to fit MAX_PAYLOAD, with an extra for ZLPs.
 #define USB_FFS_NUM_BUFS ((4 * MAX_PAYLOAD / USB_FFS_BULK_SIZE) + 1)
+#define USB_DBC_NUM_BUFS ((4 * MAX_PAYLOAD / USB_DBC_BULK_SIZE) + 1)
 
 static unique_fd& dummy_fd = *new unique_fd();
 
@@ -276,6 +278,112 @@ static void usb_ffs_close(usb_handle* h) {
     h->notify.notify_one();
 }
 
+bool init_dbc_raw(struct usb_handle* h) {
+    LOG(INFO) << "init_dbc_raw called\n";
+
+    h->bulk_out.reset(adb_open(USB_DBC_ADB_PATH, O_RDWR));
+    if (h->bulk_out < 0) {
+        D("[ %s: cannot open bulk-out ep: errno=%d ]", USB_DBC_ADB_PATH, errno);
+        goto err;
+    }
+    h->bulk_in.reset(h->bulk_out.get());
+    h->control.reset(h->bulk_out.get());
+
+    return true;
+
+err:
+    h->bulk_out.reset();
+    h->bulk_in.reset();
+    h->control.reset();
+
+    return false;
+}
+
+static void usb_dbc_open_thread(void* x) {
+    struct usb_handle* usb = (struct usb_handle*)x;
+    adb_thread_setname("usb dbc open");
+    LOG(INFO) << "dbc_open_thread called\n";
+    while (true) {
+        // wait until the USB device needs opening
+        std::unique_lock<std::mutex> lock(usb->lock);
+        while (!usb->open_new_connection) {
+            usb->notify.wait(lock);
+        }
+        usb->open_new_connection = false;
+        lock.unlock();
+
+        while (true) {
+            if (init_dbc_raw(usb)) {
+                break;
+            }
+            std::this_thread::sleep_for(1s);
+        }
+
+        LOG(INFO) << "register usb transport\n";
+        register_usb_transport(usb, 0, 0, 1);
+    }
+
+    // never gets here
+    abort();
+}
+
+static int usb_dbc_write(usb_handle* h, const void* data, int len) {
+    D("about to write (fd=%d, len=%d)", h->bulk_in.get(), len);
+
+    const char* buf = static_cast<const char*>(data);
+    int orig_len = len;
+    while (len > 0) {
+        int write_len = std::min(USB_DBC_BULK_SIZE, len);
+        int n = adb_write(h->bulk_in, buf, write_len);
+        if (n < 0) {
+            D("ERROR: fd = %d, n = %d: %s", h->bulk_in.get(), n, strerror(errno));
+            return -1;
+        }
+        buf += n;
+        len -= n;
+    }
+
+    D("[ done fd=%d ]", h->bulk_in.get());
+    return orig_len;
+}
+
+static int usb_dbc_read(usb_handle* h, void* data, int len, bool allow_partial) {
+    D("about to read (fd=%d, len=%d)", h->bulk_out.get(), len);
+
+    char* buf = static_cast<char*>(data);
+    int orig_len = len;
+    while (len > 0) {
+        int read_len = std::min(USB_DBC_BULK_SIZE, len);
+        int n = adb_read(h->bulk_out, buf, read_len);
+        if (n < 0) {
+            D("ERROR: fd = %d, n = %d: %s", h->bulk_out.get(), n, strerror(errno));
+            return -1;
+        }
+        buf += n;
+        len -= n;
+    }
+
+    D("[ done fd=%d ]", h->bulk_out.get());
+    return orig_len;
+}
+
+static void usb_dbc_kick(usb_handle* h) {
+    D("usb_dbc_kick called\n");
+
+    h->kicked = true;
+}
+
+static void usb_dbc_close(usb_handle* h) {
+    h->kicked = false;
+		D("usb_dbc_close called\n");
+    adb_close(h->bulk_out.get());
+    // Notify usb_adb_open_thread to open a new connection.
+    h->lock.lock();
+    h->open_new_connection = true;
+    h->lock.unlock();
+    h->notify.notify_one();
+}
+
 usb_handle* create_usb_handle(unsigned num_bufs, unsigned io_size) {
     usb_handle* h = new usb_handle();
 
@@ -296,12 +404,28 @@ usb_handle* create_usb_handle(unsigned num_bufs, unsigned io_size) {
     return h;
 }
 
+usb_handle* create_usb_dbc_handle(unsigned num_bufs, unsigned io_size) {
+    D("[ usb_init - using dbc ]");
+
+    usb_handle* h = new usb_handle();
+
+    h->write = usb_dbc_write;
+    h->read = usb_dbc_read;
+    h->kick = usb_dbc_kick;
+    h->close = usb_dbc_close;
+    return h;
+}
+
 void usb_init_legacy() {
     D("[ usb_init - using legacy FunctionFS ]");
     dummy_fd.reset(adb_open("/dev/null", O_WRONLY | O_CLOEXEC));
     CHECK_NE(-1, dummy_fd.get());
 
-    std::thread(usb_legacy_ffs_open_thread, create_usb_handle(USB_FFS_NUM_BUFS, USB_FFS_BULK_SIZE))
+    if (access(USB_DBC_ADB_PATH,F_OK) == 0)
+	std::thread(usb_dbc_open_thread, create_usb_dbc_handle(USB_DBC_NUM_BUFS, USB_DBC_BULK_SIZE))
+            .detach();
+    else
+	std::thread(usb_legacy_ffs_open_thread, create_usb_handle(USB_FFS_NUM_BUFS, USB_FFS_BULK_SIZE))
             .detach();
 }
 
diff --git a/adb/transport_usb.cpp b/adb/transport_usb.cpp
index 3e87522e5..849466bc3 100644
--- a/adb/transport_usb.cpp
+++ b/adb/transport_usb.cpp
@@ -188,8 +188,15 @@ void init_usb_transport(atransport* t, usb_handle* h) {
     t->SetUsbHandle(h);
 }
 
-int is_adb_interface(int usb_class, int usb_subclass, int usb_protocol) {
-    return (usb_class == ADB_CLASS && usb_subclass == ADB_SUBCLASS && usb_protocol == ADB_PROTOCOL);
+int is_adb_interface(int usb_class, int usb_subclass, int usb_protocol)
+{
+
+    if ( (usb_class == ADB_CLASS && usb_subclass == ADB_SUBCLASS && usb_protocol == ADB_PROTOCOL) ||
+     (usb_class == ADB_DBC_CLASS && usb_subclass == ADB_DBC_SUBCLASS && usb_protocol == ADB_DBC_PROTOCOL))
+        return true;
+    else
+        return false;
+
 }
 
 bool should_use_libusb() {
-- 
2.21.0

