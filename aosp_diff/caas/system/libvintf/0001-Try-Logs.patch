From 263c2c1b0cb79275e087f5b4614b9db1f51d5231 Mon Sep 17 00:00:00 2001
From: Tanuj Tekriwal <tanuj.tekriwal@intel.com>
Date: Mon, 5 Oct 2020 14:44:21 +0530
Subject: [PATCH] Try Logs

Change-Id: I44c8addf12e7b9b2def1dcdd918e5a130a2b9f8f
Tracked-On: NA
Signed-off-by: Tanuj Tekriwal <tanuj.tekriwal@intel.com>
---
 VintfObject.cpp | 17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

diff --git a/VintfObject.cpp b/VintfObject.cpp
index 13e2f5c..e74cbb0 100644
--- a/VintfObject.cpp
+++ b/VintfObject.cpp
@@ -544,40 +544,51 @@ int32_t VintfObject::checkCompatibility(std::string* error, CheckFlags::Type fla
     status_t status = OK;
     // null checks for files and runtime info
     if (getFrameworkHalManifest() == nullptr) {
+    	LOG(ERROR) << "TANUJ getFrameworkHalManifest\n";
         appendLine(error, "No framework manifest file from device or from update package");
         status = NO_INIT;
     }
     if (getDeviceHalManifest() == nullptr) {
+    	LOG(ERROR) << "TANUJ getDeviceHalManifest\n";
         appendLine(error, "No device manifest file from device or from update package");
         status = NO_INIT;
     }
     if (getFrameworkCompatibilityMatrix() == nullptr) {
+    	LOG(ERROR) << "TANUJ getFrameworkComMatrix\n";
         appendLine(error, "No framework matrix file from device or from update package");
         status = NO_INIT;
     }
     if (getDeviceCompatibilityMatrix() == nullptr) {
+    	LOG(ERROR) << "TANUJ getDeviceComMatrix\n";
         appendLine(error, "No device matrix file from device or from update package");
         status = NO_INIT;
     }
 
     if (flags.isRuntimeInfoEnabled()) {
         if (getRuntimeInfo() == nullptr) {
+    	    LOG(ERROR) << "TANUJ isRuntimeInfoEnabled\n";
             appendLine(error, "No runtime info from device");
             status = NO_INIT;
         }
     }
-    if (status != OK) return status;
-
+    if (status != OK) {
+    	LOG(ERROR) << "TANUJ status != OK\n";
+    	return status;
+    }
     // compatiblity check.
     if (!getDeviceHalManifest()->checkCompatibility(*getFrameworkCompatibilityMatrix(), error)) {
+	    LOG(ERROR) << "TANUJ isDeviceHalManifest->checkCom\n";
         if (error) {
+	    LOG(ERROR) << "TANUJ isDeviceHalManifest->checkCom\n";
             error->insert(0,
                           "Device manifest and framework compatibility matrix are incompatible: ");
         }
         return INCOMPATIBLE;
     }
     if (!getFrameworkHalManifest()->checkCompatibility(*getDeviceCompatibilityMatrix(), error)) {
+	    LOG(ERROR) << "TANUJ isFrameworkHalManifest->checkCom\n";
         if (error) {
+	    LOG(ERROR) << "TANUJ isFrameworkHalManifest->checkCom\n";
             error->insert(0,
                           "Framework manifest and device compatibility matrix are incompatible: ");
         }
@@ -587,7 +598,9 @@ int32_t VintfObject::checkCompatibility(std::string* error, CheckFlags::Type fla
     if (flags.isRuntimeInfoEnabled()) {
         if (!getRuntimeInfo()->checkCompatibility(*getFrameworkCompatibilityMatrix(), error,
                                                   flags)) {
+	    	LOG(ERROR) << "TANUJ isRuntimeInfoEnabled->checkCom\n";
             if (error) {
+	    	LOG(ERROR) << "TANUJ isRuntimeInfoEnabled->checkCom\n";
                 error->insert(0,
                               "Runtime info and framework compatibility matrix are incompatible: ");
             }
-- 
2.7.4

