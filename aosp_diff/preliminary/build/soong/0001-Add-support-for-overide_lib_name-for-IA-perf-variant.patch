From 0e4c60a532ab3d4761cac733a2dfd8885274d2ea Mon Sep 17 00:00:00 2001
From: bodapati <shalini.salomi.bodapati@intel.com>
Date: Mon, 10 Jun 2024 13:46:24 +0530
Subject: [PATCH] Add support for overide_lib_name for IA perf variants of a 
 library

Signed-off-by: bodapati <shalini.salomi.bodapati@intel.com>
---
 android/module.go | 5 +++++
 cc/cc.go          | 5 +++++
 cc/library.go     | 6 ++++++
 3 files changed, 16 insertions(+)

diff --git a/android/module.go b/android/module.go
index dc585d295..7306af0a9 100644
--- a/android/module.go
+++ b/android/module.go
@@ -277,6 +277,7 @@ func (c *soongConfigTrace) hash() string {
 type nameProperties struct {
 	// The name of the module.  Must be unique across all modules.
 	Name *string
+	Override_lib_name *string
 }
 
 type commonProperties struct {
@@ -1205,6 +1206,10 @@ func (m *ModuleBase) BaseModuleName() string {
 	return String(m.nameProperties.Name)
 }
 
+func (m *ModuleBase) OverrideLibraryName() string {
+	return String(m.nameProperties.Override_lib_name)
+}
+
 func (m *ModuleBase) base() *ModuleBase {
 	return m
 }
diff --git a/cc/cc.go b/cc/cc.go
index df0aa6d68..f8aaf2c4b 100644
--- a/cc/cc.go
+++ b/cc/cc.go
@@ -515,6 +515,7 @@ type ModuleContextIntf interface {
 	InVendorOrProduct() bool
 	selectedStl() string
 	baseModuleName() string
+	overrideLibraryName() string
 	isAfdoCompile(ctx ModuleContext) bool
 	isOrderfileCompile() bool
 	isCfi() bool
@@ -1678,6 +1679,10 @@ func (ctx *moduleContextImpl) baseModuleName() string {
 	return ctx.mod.BaseModuleName()
 }
 
+func (ctx *moduleContextImpl) overrideLibraryName() string {
+	return ctx.mod.ModuleBase.OverrideLibraryName()
+}
+
 func (ctx *moduleContextImpl) isForPlatform() bool {
 	apexInfo, _ := android.ModuleProvider(ctx.ctx, android.ApexInfoProvider)
 	return apexInfo.IsForPlatform()
diff --git a/cc/library.go b/cc/library.go
index e49f50cc0..79b951a8a 100644
--- a/cc/library.go
+++ b/cc/library.go
@@ -749,6 +749,12 @@ func (library *libraryDecorator) getLibNameHelper(baseModuleName string, inVendo
 // getLibName returns the actual canonical name of the library (the name which
 // should be passed to the linker via linker flags).
 func (library *libraryDecorator) getLibName(ctx BaseModuleContext) string {
+
+	// If an overrideLibraryName exists => this is a proxy library
+	// We must use the overrideLibraryName
+	if ctx.overrideLibraryName() != "" {
+		library.libName = ctx.overrideLibraryName()
+	}
 	name := library.getLibNameHelper(ctx.baseModuleName(), ctx.inVendor(), ctx.inProduct())
 
 	if ctx.Host() && Bool(library.Properties.Unique_host_soname) {
-- 
2.34.1

