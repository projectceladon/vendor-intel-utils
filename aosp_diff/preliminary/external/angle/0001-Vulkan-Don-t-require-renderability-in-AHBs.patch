From 12b891360e655ca41f823baedb46dcff28b6c3d3 Mon Sep 17 00:00:00 2001
From: Shahbaz Youssefi <syoussefi@chromium.org>
Date: Mon, 23 Sep 2024 23:30:10 -0400
Subject: [PATCH] Vulkan: Don't require renderability in AHBs

If the AHB usage includes GPU_FRAMEBUFFER, in practice it should be
impossible for the corresponding Vulkan format to not be renderable.
However, to guard against potential driver bugs, renderability is still
checked if the AHB usage includes that bit.

Bug: b/368429977
Change-Id: Iae23432c369cd933f14c143f67c08720d76009fc
Reviewed-on: https://chromium-review.googlesource.com/c/angle/angle/+/5881904
Reviewed-by: mohan maiya <m.maiya@samsung.com>
Reviewed-by: Charlie Lao <cclao@google.com>
Commit-Queue: Shahbaz Youssefi <syoussefi@chromium.org>
---
 .../HardwareBufferImageSiblingVkAndroid.cpp   | 21 ++++++++++++-------
 1 file changed, 13 insertions(+), 8 deletions(-)

diff --git a/src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp b/src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp
index c652d00b3b..3c28935a39 100644
--- a/src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp
+++ b/src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp
@@ -177,6 +177,14 @@ egl::Error HardwareBufferImageSiblingVkAndroid::ValidateHardwareBuffer(
         return egl::EglBadParameter() << "Failed to query AHardwareBuffer properties";
     }
 
+    int width       = 0;
+    int height      = 0;
+    int depth       = 0;
+    int pixelFormat = 0;
+    uint64_t usage  = 0;
+    angle::android::GetANativeWindowBufferProperties(windowBuffer, &width, &height, &depth,
+                                                     &pixelFormat, &usage);
+
     if (bufferFormatProperties.format == VK_FORMAT_UNDEFINED)
     {
         ASSERT(bufferFormatProperties.externalFormat != 0);
@@ -191,7 +199,11 @@ egl::Error HardwareBufferImageSiblingVkAndroid::ValidateHardwareBuffer(
     else
     {
         angle::FormatID formatID = vk::GetFormatIDFromVkFormat(bufferFormatProperties.format);
-        if (!HasFullTextureFormatSupport(renderer, formatID))
+        const bool hasNecessaryFormatSupport =
+            (usage & AHARDWAREBUFFER_USAGE_GPU_FRAMEBUFFER) != 0
+                ? HasFullTextureFormatSupport(renderer, formatID)
+                : HasNonRenderableTextureFormatSupport(renderer, formatID);
+        if (!hasNecessaryFormatSupport)
         {
             return egl::EglBadParameter()
                    << "AHardwareBuffer format " << bufferFormatProperties.format
@@ -201,13 +213,6 @@ egl::Error HardwareBufferImageSiblingVkAndroid::ValidateHardwareBuffer(
 
     if (attribs.getAsInt(EGL_PROTECTED_CONTENT_EXT, EGL_FALSE) == EGL_TRUE)
     {
-        int width       = 0;
-        int height      = 0;
-        int depth       = 0;
-        int pixelFormat = 0;
-        uint64_t usage  = 0;
-        angle::android::GetANativeWindowBufferProperties(windowBuffer, &width, &height, &depth,
-                                                         &pixelFormat, &usage);
         if ((usage & AHARDWAREBUFFER_USAGE_PROTECTED_CONTENT) == 0)
         {
             return egl::EglBadAccess()
-- 
2.34.1

