From fc2ebb312c5898486776df981a51c2bb90e3756d Mon Sep 17 00:00:00 2001
From: Noelle Scobie <nscobie@google.com>
Date: Wed, 22 Jan 2025 14:52:19 -0800
Subject: [PATCH] [bmp] Fix swizzler initialization

We only decode via an intermediate color xform buffer when
xformOnDecode() is true (see decodeRows).

The swizzler selection should use the same heuristic to match the actual
dest buffer type.

Cherrypick of https://skia-review.googlesource.com/c/skia/+/937497

Bug: 388480622
(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:c58deb210e62cf57de91b0eb8844b782fc774135)
Merged-In: Iaf240852a9bcf0be02cda84f0e44576da8100dec
Change-Id: Iaf240852a9bcf0be02cda84f0e44576da8100dec
---
 resources/images/bmp-size-32x32-8bpp.bmp | Bin 0 -> 2102 bytes
 src/codec/SkBmpStandardCodec.cpp         |   2 +-
 tests/CodecTest.cpp                      |  24 +++++++++++++++++++++++
 3 files changed, 25 insertions(+), 1 deletion(-)
 create mode 100644 resources/images/bmp-size-32x32-8bpp.bmp

diff --git a/resources/images/bmp-size-32x32-8bpp.bmp b/resources/images/bmp-size-32x32-8bpp.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..d2f800d673d9b8ed54ee53682689c7fa62c4c243
GIT binary patch
literal 2102
zcmZ|Nu}>pM6vy$2F0oSK3a&ZlMzU^+L}AI6*8+qYMGDt&Zb%wPF(!@e>i7?ygwjA7
zUz+2pL5lKs%w19d73nChm_Om#Gm*%5X4d9HbZ`CfTl{-7%i8<hi}Gugs{B%^Z#mPI
zFH{xq`Cm&}8eF`IQoNK%ZoG4<y!Xn#_v*vdA8ck|L7*Kxf>K67gA-#RaPSC9Sp^LP
z{;&cEk5FA#(+w;H4jw@%PL<Ozun;(S1pY|{4Fd~-gGW$`mkJsN76J#4pp4?*R2uQH
z5IA^*d}~_M4J-r>9wFbh(R2d~frCfLUy0Rp0}FwJN6257Xu5%gz`-NruhMC{frY@q
zBjm5yYr27jz`-M=pTGo7H?R;mcmyTfzbK7(=N9pB@CZt@f`);Gz`-NrpUr5xfrY@q
zBjlgdYPx}iz`-NrpPP$_7+44#JVJgHoTeLC2pl{@eoVZk8(0V&JVJVeBxt&Ug}}ih
zD9`<SrD0$paEM39kCxVS0}FwJN63$z(R2d~frCfLkEGRf0}FwJN63$>Xu5%gz`-Nr
zN7-q*frY@qBjm^2Yr27jz^M<ncj|ZMg#DDdOD}bI7tg>EKjQ5p_5AtH&d&GLFJDo|
z$H#xZqu###hg#%u;6WY-$m{j`V6ZcILH$ado}Qk(ySlo%yu7@KIdOeyFi83CZq83m
zQqDk3$r*_2tNe74U)1Z5Q@&K?yK#T=lequo#l_=PODiiYKT<zXzfrHKzp3l%oD(lE
zSNUF!Url3tpQnMiey<vsrh&zJ^5wYy9+mc=PN&y5*H2S@LoGKNji0E!gM))N)b#A^
z?B?b^CvH3;CqCFGCq8@qFlQj;45a+^Vtvtg)_6iy`F@qJrYfjs)FbL=>Tv&Xe|Ua=
zUaS2-ZxT~O@>;FdYOS{74C{-uyxDA4`7q~9q`WBN?!?VCmQRMm;W(`)@5S{+QO@(V
zwZjPmV+LBSUR+<SmT7%AE~h4w@nkp}kH@`Us~4*%%d*>j)a`aUopyVzO+Frt#-kMS
zMogY!a*DMhYM#e||Kv;@9UYB&+Z?@KzbyOZR@vR`Y<4;u?KZFW%kj&jQH-~F^<%!(
z-Rf*IvO&Ji0JU9Jzu(`AwMlJI>#<^fdq0pSKFt|;5Xa^B>)GO#iaW6XeEA}u&DLk1
Y<n!yt%ctwlsF;6lgL(e>{b#d(0n96$Q2+n{

literal 0
HcmV?d00001

diff --git a/src/codec/SkBmpStandardCodec.cpp b/src/codec/SkBmpStandardCodec.cpp
index 08921203eb..67cf9cf433 100644
--- a/src/codec/SkBmpStandardCodec.cpp
+++ b/src/codec/SkBmpStandardCodec.cpp
@@ -191,7 +191,7 @@ void SkBmpStandardCodec::initializeSwizzler(const SkImageInfo& dstInfo, const Op
 
     SkImageInfo swizzlerInfo = dstInfo;
     SkCodec::Options swizzlerOptions = opts;
-    if (this->colorXform()) {
+    if (this->xformOnDecode()) {
         swizzlerInfo = swizzlerInfo.makeColorType(kXformSrcColorType);
         if (kPremul_SkAlphaType == dstInfo.alphaType()) {
             swizzlerInfo = swizzlerInfo.makeAlphaType(kUnpremul_SkAlphaType);
diff --git a/tests/CodecTest.cpp b/tests/CodecTest.cpp
index 4496bf7b9e..61143b65db 100644
--- a/tests/CodecTest.cpp
+++ b/tests/CodecTest.cpp
@@ -38,6 +38,7 @@
 #include "src/base/SkAutoMalloc.h"
 #include "src/base/SkRandom.h"
 #include "src/codec/SkCodecImageGenerator.h"
+#include "src/core/SkAutoPixmapStorage.h"
 #include "src/core/SkColorSpacePriv.h"
 #include "src/core/SkMD5.h"
 #include "src/core/SkStreamPriv.h"
@@ -1957,3 +1958,26 @@ DEF_TEST(Codec_kBGR_101010x_XR_SkColorType_supported, r) {
     bool success = codec->getPixels(dstInfo, dstBm.getPixels(), dstBm.rowBytes());
     REPORTER_ASSERT(r, SkCodec::kSuccess == success);
 }
+
+DEF_TEST(Codec_bmp_indexed_colorxform, r) {
+    constexpr char path[] = "images/bmp-size-32x32-8bpp.bmp";
+    std::unique_ptr<SkStream> stream(GetResourceAsStream(path));
+    if (!stream) {
+        SkDebugf("Missing resource '%s'\n", path);
+        return;
+    }
+
+    std::unique_ptr<SkCodec> codec = SkCodec::MakeFromStream(std::move(stream));
+    REPORTER_ASSERT(r, codec);
+
+    // decode to a < 32bpp buffer with a color transform
+    const SkImageInfo decodeInfo = codec->getInfo().makeColorType(kRGB_565_SkColorType)
+                                                   .makeColorSpace(SkColorSpace::MakeSRGBLinear());
+    SkAutoPixmapStorage aps;
+    aps.alloc(decodeInfo);
+
+    // should not crash
+    auto res = codec->getPixels(aps);
+
+    REPORTER_ASSERT(r, res == SkCodec::kSuccess);
+}
-- 
2.48.1.262.g85cc9f2d1e-goog

