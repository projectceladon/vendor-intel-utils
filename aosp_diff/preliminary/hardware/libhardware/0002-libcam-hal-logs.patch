From 04b9bd88eee5c2fb6c129bc661eb20a954415bd7 Mon Sep 17 00:00:00 2001
From: user189 <shiva.kumara.rudrappa@intel.com>
Date: Mon, 22 Mar 2021 13:33:25 +0530
Subject: [PATCH] libcam hal logs

---
 modules/camera/3_4/camera.cpp                  | 14 +++++++-------
 modules/camera/3_4/format_metadata_factory.cpp | 12 ++++++------
 modules/camera/3_4/request_tracker.cpp         |  2 +-
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/modules/camera/3_4/camera.cpp b/modules/camera/3_4/camera.cpp
index 7636cbab..49e80871 100644
--- a/modules/camera/3_4/camera.cpp
+++ b/modules/camera/3_4/camera.cpp
@@ -70,7 +70,7 @@ Camera::~Camera()
 
 int Camera::openDevice(const hw_module_t *module, hw_device_t **device)
 {
-    ALOGI("%s:%d: Opening camera device", __func__, mId);
+    ALOGE("%s:%d: Opening camera device", __func__, mId);
     ATRACE_CALL();
     android::Mutex::Autolock dl(mDeviceLock);
 
@@ -137,7 +137,7 @@ int Camera::loadStaticInfo() {
 
 int Camera::close()
 {
-    ALOGI("%s:%d: Closing camera device", __func__, mId);
+    ALOGE("%s:%d: Closing camera device", __func__, mId);
     ATRACE_CALL();
     android::Mutex::Autolock dl(mDeviceLock);
 
@@ -156,7 +156,7 @@ int Camera::initialize(const camera3_callback_ops_t *callback_ops)
 {
     int res;
 
-    ALOGV("%s:%d: callback_ops=%p", __func__, mId, callback_ops);
+    ALOGE("%s:%d: callback_ops=%p", __func__, mId, callback_ops);
     mCallbackOps = callback_ops;
     // per-device specific initialization
     res = initDevice();
@@ -172,7 +172,7 @@ int Camera::configureStreams(camera3_stream_configuration_t *stream_config)
     android::Mutex::Autolock dl(mDeviceLock);
     android::Mutex::Autolock tl(mInFlightTrackerLock);
 
-    ALOGV("%s:%d: stream_config=%p", __func__, mId, stream_config);
+    ALOGE("%s:%d: stream_config=%p", __func__, mId, stream_config);
     ATRACE_CALL();
 
     // Check that there are no in-flight requests.
@@ -260,7 +260,7 @@ bool Camera::isValidTemplateType(int type)
 
 const camera_metadata_t* Camera::constructDefaultRequestSettings(int type)
 {
-    ALOGV("%s:%d: type=%d", __func__, mId, type);
+    ALOGE("%s:%d: type=%d", __func__, mId, type);
 
     if (!isValidTemplateType(type)) {
         ALOGE("%s:%d: Invalid template request type: %d", __func__, mId, type);
@@ -312,7 +312,7 @@ int Camera::processCaptureRequest(camera3_capture_request_t *temp_request)
     // past the end of this method.
     std::shared_ptr<CaptureRequest> request = std::make_shared<CaptureRequest>(temp_request);
 
-    ALOGV("%s:%d: frame: %d", __func__, mId, request->frame_number);
+    ALOGE("%s:%d: frame: %d", __func__, mId, request->frame_number);
 
     if (!mInFlightTracker->CanAddRequest(*request)) {
         // Streams are full or frame number is not unique.
@@ -331,7 +331,7 @@ int Camera::processCaptureRequest(camera3_capture_request_t *temp_request)
         ALOGV("%s:%d: Reprocessing input buffer %p", __func__, mId,
               request->input_buffer.get());
     } else {
-        ALOGV("%s:%d: Capturing new frame.", __func__, mId);
+        ALOGE("%s:%d: Capturing new frame.", __func__, mId);
     }
 
     if (!isValidRequestSettings(request->settings)) {
diff --git a/modules/camera/3_4/format_metadata_factory.cpp b/modules/camera/3_4/format_metadata_factory.cpp
index 3469b069..b02a552e 100644
--- a/modules/camera/3_4/format_metadata_factory.cpp
+++ b/modules/camera/3_4/format_metadata_factory.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 #define LOG_TAG "FormatMetadataFactory"
 
 #include "format_metadata_factory.h"
@@ -78,13 +78,13 @@ int AddFormatComponents(
 
   std::set<int32_t> unsupported_hal_formats;
   if (hal_formats.find(HAL_PIXEL_FORMAT_YCbCr_420_888) == hal_formats.end()) {
-    HAL_LOGW("YCbCr_420_888 (0x%x) not directly supported by device.",
+    HAL_LOGE("YCbCr_420_888 (0x%x) not directly supported by device.",
              HAL_PIXEL_FORMAT_YCbCr_420_888);
     hal_formats.insert(HAL_PIXEL_FORMAT_YCbCr_420_888);
     unsupported_hal_formats.insert(HAL_PIXEL_FORMAT_YCbCr_420_888);
   }
   if (hal_formats.find(HAL_PIXEL_FORMAT_BLOB) == hal_formats.end()) {
-    HAL_LOGW("JPEG (0x%x) not directly supported by device.",
+    HAL_LOGE("JPEG (0x%x) not directly supported by device.",
              HAL_PIXEL_FORMAT_BLOB);
     hal_formats.insert(HAL_PIXEL_FORMAT_BLOB);
     unsupported_hal_formats.insert(HAL_PIXEL_FORMAT_BLOB);
@@ -108,7 +108,7 @@ int AddFormatComponents(
     return res;
   }
 
-  HAL_LOGI("Supports %zu qualified formats.", qualified_formats.size());
+  HAL_LOGE("Supports %zu qualified formats.", qualified_formats.size());
 
   // Find sizes and frame/stall durations for all formats.
   // We also want to find the smallest max frame duration amongst all formats,
@@ -143,7 +143,7 @@ int AddFormatComponents(
           // defined is not the only unsupported format, then other unsupported
           // formats will throw an error.
         }
-        HAL_LOGW(
+        HAL_LOGE(
             "Implementation-defined format is set to V4L2 pixel format 0x%x",
             v4l2_format);
       } else if (qualified_formats.size() == 0) {
@@ -162,7 +162,7 @@ int AddFormatComponents(
         return -ENODEV;
       } else {
         v4l2_format = qualified_formats[0];
-        HAL_LOGW(
+        HAL_LOGE(
             "Hal format 0x%x will be converted from V4L2 pixel format 0x%x",
             hal_format, v4l2_format);
       }
diff --git a/modules/camera/3_4/request_tracker.cpp b/modules/camera/3_4/request_tracker.cpp
index f92d2544..e0bd6344 100644
--- a/modules/camera/3_4/request_tracker.cpp
+++ b/modules/camera/3_4/request_tracker.cpp
@@ -141,7 +141,7 @@ bool RequestTracker::StreamFull(const camera3_stream_t* handle) const {
   const auto it = buffers_in_flight_.find(handle);
   if (it == buffers_in_flight_.end()) {
     // Unconfigured streams are implicitly full.
-    ALOGV("%s: Stream %p is not a configured stream.", __func__, handle);
+    ALOGE("%s: Stream %p is not a configured stream.", __func__, handle);
     return true;
   } else {
     return it->second >= it->first->max_buffers;
-- 
2.17.1

