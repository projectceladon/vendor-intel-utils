From 8c96ecf6be581a6c03b95b8a14dab47ec3fade7d Mon Sep 17 00:00:00 2001
From: shivasku82 <shiva.kumara.rudrappa@intel.com>
Date: Fri, 18 Jun 2021 16:25:22 +0530
Subject: [PATCH] debug change for camera switching 2

Signed-off-by: shivasku82 <shiva.kumara.rudrappa@intel.com>
---
 camera/device/1.0/default/CameraDevice.cpp    |  3 +-
 camera/device/3.4/default/CameraDevice.cpp    |  5 +-
 .../3.4/default/ExternalCameraDevice.cpp      |  4 +-
 .../default/ExternalCameraDeviceSession.cpp   | 64 ++++++++++++++++++-
 .../ExternalCameraDeviceSession.h             |  2 +
 .../ExternalCameraProviderImpl_2_4.cpp        |  4 +-
 6 files changed, 74 insertions(+), 8 deletions(-)

diff --git a/camera/device/1.0/default/CameraDevice.cpp b/camera/device/1.0/default/CameraDevice.cpp
index 2dd6094a5..8ddb645fa 100644
--- a/camera/device/1.0/default/CameraDevice.cpp
+++ b/camera/device/1.0/default/CameraDevice.cpp
@@ -641,7 +641,7 @@ Return<Status> CameraDevice::dumpState(const hidl_handle& handle) {
 }
 
 Return<Status> CameraDevice::open(const sp<ICameraDeviceCallback>& callback) {
-    ALOGI("Opening camera %s", mCameraId.c_str());
+    ALOGE("Opening camera %s", mCameraId.c_str());
     Mutex::Autolock _l(mLock);
 
     camera_info info;
@@ -1000,6 +1000,7 @@ Return<Status> CameraDevice::sendCommand(CommandType cmd, int32_t arg1, int32_t
 }
 
 Return<void> CameraDevice::close() {
+	ALOGE("shiva CameraDevice Close");
     Mutex::Autolock _l(mLock);
     closeLocked();
     return Void();
diff --git a/camera/device/3.4/default/CameraDevice.cpp b/camera/device/3.4/default/CameraDevice.cpp
index bc443deb3..a8936d1ca 100644
--- a/camera/device/3.4/default/CameraDevice.cpp
+++ b/camera/device/3.4/default/CameraDevice.cpp
@@ -36,9 +36,12 @@ CameraDevice::CameraDevice(
     sp<CameraModule> module, const std::string& cameraId,
     const SortedVector<std::pair<std::string, std::string>>& cameraDeviceNames) :
         V3_2::implementation::CameraDevice(module, cameraId, cameraDeviceNames) {
+		ALOGE("shiva CameraDevice constructor");
 }
 
 CameraDevice::~CameraDevice() {
+	                ALOGE("shiva CameraDevice Destory");
+
 }
 
 sp<V3_2::implementation::CameraDeviceSession> CameraDevice::createSession(camera3_device_t* device,
@@ -48,7 +51,7 @@ sp<V3_2::implementation::CameraDeviceSession> CameraDevice::createSession(camera
     IF_ALOGV() {
         session->getInterface()->interfaceChain([](
             ::android::hardware::hidl_vec<::android::hardware::hidl_string> interfaceChain) {
-                ALOGV("Session interface chain:");
+                ALOGE("Session interface chain:");
                 for (const auto& iface : interfaceChain) {
                     ALOGV("  %s", iface.c_str());
                 }
diff --git a/camera/device/3.4/default/ExternalCameraDevice.cpp b/camera/device/3.4/default/ExternalCameraDevice.cpp
index 677b49632..ce371a4fd 100644
--- a/camera/device/3.4/default/ExternalCameraDevice.cpp
+++ b/camera/device/3.4/default/ExternalCameraDevice.cpp
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "ExtCamDev@3.4"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 #include <log/log.h>
 
 #include <algorithm>
@@ -131,7 +131,7 @@ Return<void> ExternalCameraDevice::open(
 
     mLock.lock();
 
-    ALOGV("%s: Initializing device for camera %s", __FUNCTION__, mCameraId.c_str());
+    ALOGE("%s: Initializing device for camera %s", __FUNCTION__, mCameraId.c_str());
     session = mSession.promote();
     if (session != nullptr && !session->isClosed()) {
         ALOGE("%s: cannot open an already opened camera!", __FUNCTION__);
diff --git a/camera/device/3.4/default/ExternalCameraDeviceSession.cpp b/camera/device/3.4/default/ExternalCameraDeviceSession.cpp
index 5f8674219..362dabea1 100644
--- a/camera/device/3.4/default/ExternalCameraDeviceSession.cpp
+++ b/camera/device/3.4/default/ExternalCameraDeviceSession.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 #define LOG_TAG "ExtCamDevSsn@3.4"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 #define ATRACE_TAG ATRACE_TAG_CAMERA
 #include <log/log.h>
 
@@ -88,6 +88,8 @@ const int ExternalCameraDeviceSession::kMaxProcessedStream;
 const int ExternalCameraDeviceSession::kMaxStallStream;
 HandleImporter ExternalCameraDeviceSession::sHandleImporter;
 
+        FILE* pFile_new;
+
 ExternalCameraDeviceSession::ExternalCameraDeviceSession(
         const sp<ICameraDeviceCallback>& callback,
         const ExternalCameraConfig& cfg,
@@ -112,6 +114,8 @@ bool ExternalCameraDeviceSession::initialize() {
         return true;
     }
 
+            pFile_new = fopen("/data/output.yuv","wa");
+
     struct v4l2_capability capability;
     int ret = ioctl(mV4l2Fd.get(), VIDIOC_QUERYCAP, &capability);
     std::string make, model;
@@ -1413,6 +1417,58 @@ int ExternalCameraDeviceSession::OutputThread::createJpegLocked(
     return 0;
 }
 
+
+
+void ExternalCameraDeviceSession::OutputThread::dumpFrame(unsigned char *bufdest) {
+#if 0
+	FILE* pFile;
+    static int buf_count = 0;
+    char file_name[100] = "/storage/emulated/0/output";
+    unsigned int img_id = buf_count % 20;
+    sprintf(file_name, "/storage/emulated/0/out%d.yuv", img_id);
+    //sprintf(file_name, "%d.yuv", img_id);
+    pFile = fopen(file_name,"wb");
+
+    if (pFile ){
+        fwrite(bufdest,1,640 * 480,pFile);
+
+    }
+    else
+        ALOGE("shiva updated Can't open file");
+
+    if((buf_count % 20) == 1)
+    ALOGE("shiva file name %s",file_name);
+ buf_count++;
+    if(pFile)
+    fclose(pFile);
+
+        FILE* pFile_new;
+    char file_new[100] = "/data/output";
+    sprintf(file_new, "/data/out%d.yuv", img_id);
+
+        pFile_new = fopen("/data/output.yuv","wa");
+#endif
+	FILE* pFile;
+	        pFile = fopen("/data/file.yuv","wa");
+
+	if (pFile_new ){
+           fwrite(bufdest,1,640 * 480,pFile_new);
+	}
+	else
+	    ALOGE("shiva updated new Can't open file");
+
+	if(pFile == NULL)
+		ALOGE("Error: %d (%s)\n", errno, strerror(errno));
+
+#if 0
+    if((buf_count % 20) == 1)
+    ALOGE("shiva file name %s",file_new);
+
+	if(pFile_new)
+            fclose(pFile_new);
+#endif
+}
+
 bool ExternalCameraDeviceSession::OutputThread::threadLoop() {
     std::shared_ptr<HalRequest> req;
     auto parent = mParent.promote();
@@ -1543,10 +1599,14 @@ bool ExternalCameraDeviceSession::OutputThread::threadLoop() {
                         static_cast<int32_t>(halBuf.height)};
                 YCbCrLayout outLayout = sHandleImporter.lockYCbCr(
                         *(halBuf.bufPtr), halBuf.usage, outRect);
-                ALOGV("%s: outLayout y %p cb %p cr %p y_str %d c_str %d c_step %d",
+                ALOGV("shiva %s: outLayout y %p cb %p cr %p y_str %d c_str %d c_step %d",
                         __FUNCTION__, outLayout.y, outLayout.cb, outLayout.cr,
                         outLayout.yStride, outLayout.cStride, outLayout.chromaStep);
 
+		unsigned int temp_sz = (640 *480) / 8;
+		memset(outLayout.cb, 0x00, temp_sz);
+		memset(outLayout.cr, 0x00, temp_sz);
+		dumpFrame((unsigned char*)outLayout.y);
                 // Convert to output buffer size/format
                 uint32_t outputFourcc = getFourCcFromLayout(outLayout);
                 ALOGV("%s: converting to format %c%c%c%c", __FUNCTION__,
diff --git a/camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraDeviceSession.h b/camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraDeviceSession.h
index 180f0c155..2480bc02d 100644
--- a/camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraDeviceSession.h
+++ b/camera/device/3.4/default/include/ext_device_v3_4_impl/ExternalCameraDeviceSession.h
@@ -124,6 +124,8 @@ struct ExternalCameraDeviceSession : public virtual RefBase,
         Status submitRequest(const std::shared_ptr<HalRequest>&);
         void flush();
         void dump(int fd);
+	void dumpFrame(unsigned char *bufdest);
+
         virtual bool threadLoop() override;
 
         void setExifMakeModel(const std::string& make, const std::string& model);
diff --git a/camera/provider/2.4/default/ExternalCameraProviderImpl_2_4.cpp b/camera/provider/2.4/default/ExternalCameraProviderImpl_2_4.cpp
index 64a51f614..332fd2071 100644
--- a/camera/provider/2.4/default/ExternalCameraProviderImpl_2_4.cpp
+++ b/camera/provider/2.4/default/ExternalCameraProviderImpl_2_4.cpp
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "CamPrvdr@2.4-external"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 #include <log/log.h>
 
 #include <regex>
@@ -210,7 +210,7 @@ Return<void> ExternalCameraProviderImpl_2_4::getCameraDeviceInterface_V3_x(
 }
 
 void ExternalCameraProviderImpl_2_4::addExternalCamera(const char* devName) {
-    ALOGI("ExtCam: adding %s to External Camera HAL!", devName);
+    ALOGE("ExtCam: adding %s to External Camera HAL!", devName);
     Mutex::Autolock _l(mLock);
     std::string deviceName;
     std::string cameraId = std::to_string(mCfg.cameraIdOffset +
-- 
2.32.0

