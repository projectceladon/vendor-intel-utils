From 0380bd3bc2eb73f5c32c4f17a5c5a514c1e01648 Mon Sep 17 00:00:00 2001
From: pmandri <padmasree.mandri@intel.com>
Date: Thu, 25 Feb 2021 22:32:33 +0530
Subject: [PATCH] [DRAFT] enable logs

Tracked-On:
Signed-off-by: pmandri <padmasree.mandri@intel.com>
---
 adb/daemon/main.cpp    |  4 ++-
 adb/daemon/usb.cpp     | 26 ++++++++++++++--
 adb/daemon/usb_ffs.cpp | 67 ++++++++++++++++++++++++++++++++++++++++++
 adb/daemon/usb_ffs.h   |  1 +
 4 files changed, 95 insertions(+), 3 deletions(-)

diff --git a/adb/daemon/main.cpp b/adb/daemon/main.cpp
index 7a0f7ffcd..ea4053e95 100644
--- a/adb/daemon/main.cpp
+++ b/adb/daemon/main.cpp
@@ -239,8 +239,10 @@ int adbd_main(int server_port) {
     bool is_usb = false;
 
 #if defined(__ANDROID__)
-    if (access(USB_FFS_ADB_EP0, F_OK) == 0) {
+    if ((access(USB_FFS_ADB_EP0, F_OK) == 0) || (access(USB_DBC_ADB_PATH,F_OK) == 0)) {
         // Listen on USB.
+	
+        LOG(INFO) << "Padma: Inside adb main";
         usb_init();
         is_usb = true;
     }
diff --git a/adb/daemon/usb.cpp b/adb/daemon/usb.cpp
index 50d73644d..e5fb6603c 100644
--- a/adb/daemon/usb.cpp
+++ b/adb/daemon/usb.cpp
@@ -178,7 +178,7 @@ struct UsbFfsConnection : public Connection {
           control_fd_(std::move(control)),
           read_fd_(std::move(read)),
           write_fd_(std::move(write)) {
-        LOG(INFO) << "UsbFfsConnection constructed";
+        LOG(INFO) << "Padma: UsbFfsConnection constructed";
         worker_event_fd_.reset(eventfd(0, EFD_CLOEXEC));
         if (worker_event_fd_ == -1) {
             PLOG(FATAL) << "failed to create eventfd";
@@ -737,6 +737,22 @@ struct UsbFfsConnection : public Connection {
     static constexpr int kInterruptionSignal = SIGUSR1;
 };
 
+static void usb_dbc_open_thread() {
+    adb_thread_setname("usb dbc open");
+
+    while (true) {
+        unique_fd bulk_out;
+        unique_fd bulk_in;
+
+        if (!open_dbc(&bulk_out, &bulk_in)) {
+            std::this_thread::sleep_for(1s);
+            continue;
+        }
+
+        register_dbc_transport(std::move(bulk_out), std::move(bulk_in), "UsbDbC");
+    }
+}
+
 static void usb_ffs_open_thread() {
     adb_thread_setname("usb ffs open");
 
@@ -762,5 +778,11 @@ static void usb_ffs_open_thread() {
 }
 
 void usb_init() {
-    std::thread(usb_ffs_open_thread).detach();
+    int err;
+    err = access(USB_DBC_ADB_PATH,F_OK);
+    LOG(INFO) << "Padma : dbc path access error no : " << err;
+    if(1)
+	std::thread(usb_dbc_open_thread).detach();
+    else
+        std::thread(usb_ffs_open_thread).detach();
 }
diff --git a/adb/daemon/usb_ffs.cpp b/adb/daemon/usb_ffs.cpp
index e538ca885..8cb83c07a 100644
--- a/adb/daemon/usb_ffs.cpp
+++ b/adb/daemon/usb_ffs.cpp
@@ -27,6 +27,8 @@
 #include <android-base/properties.h>
 #include <android-base/unique_fd.h>
 
+#include <termios.h>
+
 #include "adb.h"
 
 #define MAX_PACKET_SIZE_FS 64
@@ -249,6 +251,71 @@ static const struct {
 };
 // clang-format on
 
+bool open_dbc(android::base::unique_fd* out_bulk_out, android::base::unique_fd* out_bulk_in) {
+    unique_fd bulk_out, bulk_in;
+    struct termios SerialPortSettings;
+
+    // BULK OUT
+    if (out_bulk_out->get() < 0) {  // might have already done this before
+        LOG(INFO) << "opening DbC BULK OUT endpoint " << USB_DBC_ADB_PATH;
+        bulk_out.reset(adb_open(USB_DBC_ADB_PATH, O_RDWR));
+        if (bulk_out < 0) {
+            PLOG(ERROR) << "cannot open DbC BULK OUT endpoint " << USB_DBC_ADB_PATH;
+            return false;
+        }
+        tcgetattr(bulk_out.get(), &SerialPortSettings);
+
+        cfsetispeed(&SerialPortSettings,B9600);
+        cfsetospeed(&SerialPortSettings,B9600);
+
+        SerialPortSettings.c_cflag &= ~PARENB;
+        SerialPortSettings.c_cflag &= ~CSTOPB;
+        SerialPortSettings.c_cflag &= ~CSIZE;
+        SerialPortSettings.c_cflag &= CS8;
+        SerialPortSettings.c_cflag &= ~CRTSCTS;
+        SerialPortSettings.c_cflag &= CREAD | CLOCAL;
+        SerialPortSettings.c_lflag &= ~(ICANON | ECHO | IEXTEN | ISIG);
+        SerialPortSettings.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
+        SerialPortSettings.c_oflag &= ~OPOST;
+        SerialPortSettings.c_cc[VMIN] = 10;
+        SerialPortSettings.c_cc[VTIME] = 10;
+
+        tcsetattr(bulk_out.get(), TCSANOW, &SerialPortSettings);
+    }
+
+    // Bulk IN
+    if (out_bulk_in->get() < 0) {  // might have already done this before
+        LOG(INFO) << "opening DbC BULK IN endpoint " << USB_DBC_ADB_PATH;
+        bulk_in.reset(adb_open(USB_DBC_ADB_PATH, O_RDWR));
+        if (bulk_in < 0) {
+            PLOG(ERROR) << "cannot open DbC BULK IN endpoint " << USB_DBC_ADB_PATH;
+            return false;
+        }
+        tcgetattr(bulk_in.get(), &SerialPortSettings);
+
+        cfsetispeed(&SerialPortSettings,B9600);
+        cfsetospeed(&SerialPortSettings,B9600);
+
+        SerialPortSettings.c_cflag &= ~PARENB;
+        SerialPortSettings.c_cflag &= ~CSTOPB;
+        SerialPortSettings.c_cflag &= ~CSIZE;
+        SerialPortSettings.c_cflag &= CS8;
+        SerialPortSettings.c_cflag &= ~CRTSCTS;
+        SerialPortSettings.c_cflag &= CREAD | CLOCAL;
+        SerialPortSettings.c_lflag &= ~(ICANON | ECHO | IEXTEN | ISIG);
+        SerialPortSettings.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
+        SerialPortSettings.c_oflag &= ~OPOST;
+        SerialPortSettings.c_cc[VMIN] = 10;
+        SerialPortSettings.c_cc[VTIME] = 10;
+
+        tcsetattr(bulk_in.get(), TCSANOW, &SerialPortSettings);
+    }
+
+    *out_bulk_out = std::move(bulk_out);
+    *out_bulk_in = std::move(bulk_in);
+    return true;
+}
+
 bool open_functionfs(android::base::unique_fd* out_control, android::base::unique_fd* out_bulk_out,
                      android::base::unique_fd* out_bulk_in) {
     unique_fd control, bulk_out, bulk_in;
diff --git a/adb/daemon/usb_ffs.h b/adb/daemon/usb_ffs.h
index a19d7ccce..485798a8f 100644
--- a/adb/daemon/usb_ffs.h
+++ b/adb/daemon/usb_ffs.h
@@ -18,5 +18,6 @@
 
 #include <android-base/unique_fd.h>
 
+bool open_dbc(android::base::unique_fd* bulk_out, android::base::unique_fd* bulk_in);
 bool open_functionfs(android::base::unique_fd* control, android::base::unique_fd* bulk_out,
                      android::base::unique_fd* bulk_in);
-- 
2.17.1

