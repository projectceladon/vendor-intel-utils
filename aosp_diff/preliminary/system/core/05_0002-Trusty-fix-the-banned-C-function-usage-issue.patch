From 0f8cc2bc802bfed1f591f8bbe2a9ad844ab9f558 Mon Sep 17 00:00:00 2001
From: sheng wei <w.sheng@intel.com>
Date: Tue, 23 Jul 2019 10:58:51 +0800
Subject: [PATCH 2/3] Trusty: fix the banned C function usage issue

check the return value of memcpy_s()

Change-Id: If4fe39a80e1588ea18fa4eaa47d2de57c2df17c0
Tracked-On:
Signed-off-by: Zhang, Qi <qi1.zhang@intel.com>
Signed-off-by: sheng wei <w.sheng@intel.com>
---
 trusty/storage/proxy/rpmb-sim.c | 60 ++++++++++++++++++++++++++++-----
 1 file changed, 51 insertions(+), 9 deletions(-)

diff --git a/trusty/storage/proxy/rpmb-sim.c b/trusty/storage/proxy/rpmb-sim.c
index eb2ce9f9c..4c75bdb16 100644
--- a/trusty/storage/proxy/rpmb-sim.c
+++ b/trusty/storage/proxy/rpmb-sim.c
@@ -27,6 +27,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <assert.h>
 
 #include <openssl/hmac.h>
 
@@ -113,6 +114,15 @@ inline uint16_t swap16(uint16_t val)
 		| ((val & (uint16_t)0xff00U) >> 8);
 }
 
+static inline int memcpy_s(void *dst, size_t dst_size, const void *src, size_t count)
+{
+    if (!dst || !src || dst_size < count)
+        return -1;
+
+    memcpy(dst, src, count);
+    return 0;
+}
+
 static int rpmb_sim_operations(const void *rel_write_data,
                         size_t rel_write_size, const void *write_data,
                         size_t write_size, void *read_buf, size_t read_size);
@@ -477,8 +487,13 @@ static int rpmb_write(const struct rpmb_packet* in_frame, uint32_t in_cnt,
         goto out;
     }
 
-    for (i = 0; i < in_cnt; i++)
-        memcpy(data + i * 256, in_frame[i].data, 256);
+    for (i = 0; i < in_cnt; i++) {
+        ret = memcpy_s(data + i * 256, 256, in_frame[i].data, 256);
+        if(ret) {
+            err = RPMB_RES_GENERAL_FAILURE;
+            goto out;
+        }
+    }
 
     if (fwrite_with_retry(rpmb_fd, data, sizeof(data), 256 * addr) < 0) {
         ALOGE("%s fwrite_with_retry failed.\n", __func__);
@@ -551,18 +566,32 @@ out:
     if (out_frame) {
         memset(out_frame, 0, out_cnt*sizeof(*out_frame));
         for (i = 0; i < out_cnt; i++) {
-            memcpy(out_frame[i].nonce, in_frame[0].nonce, sizeof(in_frame[0].nonce));
+            ret = memcpy_s(out_frame[i].nonce, sizeof(out_frame[i].nonce),
+                     in_frame[0].nonce, sizeof(in_frame[0].nonce));
+            if(ret) {
+                ALOGE("%s: %d: memcpy_s failed.\n", __func__, __LINE__);
+                return ret;
+            }
             out_frame[i].req_resp = swap16(RPMB_RESP_DATA_READ);
             out_frame[i].block_count = swap16(out_cnt);
             out_frame[i].address = in_frame[0].address;
-            memcpy(out_frame[i].data, data+256*i, 256);
+            ret = memcpy_s(out_frame[i].data, 256, data+256*i, 256);
+            if(ret) {
+                ALOGE("%s: %d: memcpy_s failed.\n", __func__, __LINE__);
+                return ret;
+            }
         }
         if (get_key(key))
             ALOGE("%s, get_key failed.\n", __func__);
 
         out_frame[out_cnt - 1].result = swap16(err);
         rpmb_mac(key, out_frame, out_cnt, mac);
-        memcpy(out_frame[out_cnt - 1].key_mac, mac, sizeof(mac));
+        ret = memcpy_s(out_frame[out_cnt - 1].key_mac, sizeof(out_frame[out_cnt - 1].key_mac),
+                 mac, sizeof(mac));
+        if(ret) {
+            ALOGE("%s: %d: memcpy_s failed.\n", __func__, __LINE__);
+            return ret;
+        }
     }
 
     return ret;
@@ -600,8 +629,12 @@ out:
         memset(out_frame, 0, sizeof(*out_frame)*out_cnt);
         out_frame->result = swap16(err);
         out_frame->req_resp = swap16(RPMB_RESP_GET_COUNTER);
-        memcpy(out_frame->nonce, in_frame[0].nonce, sizeof(in_frame[0].nonce));
-
+        ret = memcpy_s(out_frame->nonce, sizeof(out_frame->nonce),
+               in_frame[0].nonce, sizeof(in_frame[0].nonce));
+        if(ret){
+            ALOGE("%s: %d: memcpy_s failed.\n", __func__, __LINE__);
+            return ret;
+        }
         if (err == RPMB_RES_OK) {
             out_frame->write_counter = swap32(counter);
             rpmb_mac(key, out_frame, out_cnt, out_frame->key_mac);
@@ -627,7 +660,12 @@ static int rpmb_sim_operations(const void *rel_write_data, size_t rel_write_size
     if (rel_write_size) {
         int nframe = rel_write_size/RPMB_FRAME_SIZE;
         struct rpmb_packet rel_write_frame[nframe];
-        memcpy(rel_write_frame, rel_write_data, sizeof(rel_write_frame));
+        ret = memcpy_s(rel_write_frame, sizeof(rel_write_frame),
+                 rel_write_data, rel_write_size);
+        if(ret){
+            ALOGE("%s: %d: memcpy_s failed.\n", __func__, __LINE__);
+            return ret;
+        }
         if (rel_write_frame[0].req_resp == swap16(RPMB_REQ_DATA_WRITE))  {
             if (write_size/RPMB_FRAME_SIZE &&
                    ((struct rpmb_packet*)write_data)->req_resp == swap16(RPMB_REQ_RESULT_READ))
@@ -645,7 +683,11 @@ static int rpmb_sim_operations(const void *rel_write_data, size_t rel_write_size
     }
     else if (write_size) {
         struct rpmb_packet write_frame[write_size/RPMB_FRAME_SIZE];
-        memcpy(write_frame, write_data, sizeof(write_frame));
+        ret = memcpy_s(write_frame, sizeof(write_frame), write_data, write_size);
+        if(ret){
+            ALOGE("%s: %d: memcpy_s failed.\n", __func__, __LINE__);
+            return ret;
+        }
         if (write_frame[0].req_resp == swap16(RPMB_REQ_DATA_READ)) {
             ret = rpmb_read(write_frame, 1, read_buf, read_size/RPMB_FRAME_SIZE);
         }
-- 
2.22.0

