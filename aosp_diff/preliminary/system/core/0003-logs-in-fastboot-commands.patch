From 6e3833d13d0a285622031ea380f154d784756bda Mon Sep 17 00:00:00 2001
From: anuvarsh <anuvarshini.bc@intel.com>
Date: Wed, 17 Feb 2021 02:11:17 +0530
Subject: [PATCH 2/2] logs in fastboot commands

Change-Id: I2c676a924fd703135bfc1b0bbf244a37bb9f8a25
Tracked-On:
Signed-off-by: anuvarsh <anuvarshini.bc@intel.com>
---
 fastboot/device/commands.cpp | 21 +++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff --git a/fastboot/device/commands.cpp b/fastboot/device/commands.cpp
index efa5ed1ee..87e3f0d33 100644
--- a/fastboot/device/commands.cpp
+++ b/fastboot/device/commands.cpp
@@ -15,7 +15,7 @@
  */
 
 #include "commands.h"
-
+#include <iostream>
 #include <sys/socket.h>
 #include <sys/un.h>
 
@@ -456,38 +456,55 @@ bool PartitionBuilder::Write() {
 }
 
 bool CreatePartitionHandler(FastbootDevice* device, const std::vector<std::string>& args) {
+    std::cout<<"Anu:Invalid partition name and size";	
     if (args.size() < 3) {
+        std::cout<<"Anu:Invalid partition name and size:Inside";	
         return device->WriteFail("Invalid partition name and size");
     }
-
+    
+    std::cout<<"Anu:Command not available on locked devices";	
     if (GetDeviceLockStatus()) {
+        std::cout<<"Anu:Command not available on locked devices:Inside";	
         return device->WriteStatus(FastbootResult::FAIL, "Command not available on locked devices");
     }
 
     uint64_t partition_size;
     std::string partition_name = args[1];
+    std::cout<<"Anu:Invalid partition size";	
     if (!android::base::ParseUint(args[2].c_str(), &partition_size)) {
+        std::cout<<"Anu:Invalid partition size:Inside";	
         return device->WriteFail("Invalid partition size");
     }
 
     PartitionBuilder builder(device, partition_name);
+    std::cout<<"Anu:Could not open super partition";	
     if (!builder.Valid()) {
+        std::cout<<"Anu:Could not open super partition:Inside";	
         return device->WriteFail("Could not open super partition");
     }
     // TODO(112433293) Disallow if the name is in the physical table as well.
+    std::cout<<"Anu:Partition already exists";	
     if (builder->FindPartition(partition_name)) {
+        std::cout<<"Anu:Partition already exists:Inside";	
         return device->WriteFail("Partition already exists");
     }
 
     auto partition = builder->AddPartition(partition_name, 0);
+    std::cout<<"Anu:Failed to add partition";	
     if (!partition) {
+        std::cout<<"Anu:Failed to add partition:Inside";	
         return device->WriteFail("Failed to add partition");
     }
     if (!builder->ResizePartition(partition, partition_size)) {
+        std::cout<<"Anu:Not enough space for partition";	
         builder->RemovePartition(partition_name);
+        std::cout<<"Anu:Not enough space for partition:Inside";	
         return device->WriteFail("Not enough space for partition");
     }
+
+    std::cout<<"Anu:Failed to write partition table";	
     if (!builder.Write()) {
+        std::cout<<"Anu:Failed to write partition table:Inside";	
         return device->WriteFail("Failed to write partition table");
     }
     return device->WriteOkay("Partition created");
-- 
2.17.1

