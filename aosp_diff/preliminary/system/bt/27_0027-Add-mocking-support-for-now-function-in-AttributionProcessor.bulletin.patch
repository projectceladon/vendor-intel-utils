From edc8ffa7dc8503fb57f7044b14c9f2985befc117 Mon Sep 17 00:00:00 2001
From: Hui Peng <phui@google.com>
Date: Fri, 2 Dec 2022 02:11:31 +0000
Subject: [PATCH] Add mocking support for now function in AttributionProcessor

The triggering of the code we want to test depends on  the return
value of std::chrono::system_clock::now(). To facilicate testing,
in this patch we add a now_func_ field in
AttributionProcessor and make it call it instead of
std::chrono::system_clock::now(). Mocking `now` is made possible
by passing a custom function to the constructor of AttributionProcessor.

Note:
1. This is a manual cherrypick of I7dd3a0e665f72c27e4d1844f45ec15a8dd1ddb53

Bug: 254774758
Test: refactoring, existing tests still pass
Ignore-AOSP-First: security
Change-Id: I1526d794ddd86f53a189f3ff226bddbff7a487e5
(cherry picked from commit 7378585e68bdccd53e2b713d474229310f0672d0)
Merged-In: I1526d794ddd86f53a189f3ff226bddbff7a487e5
---
 gd/btaa/attribution_processor.h                | 13 +++++++++++++
 gd/btaa/linux_generic/attribution_processor.cc |  2 +-
 2 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/gd/btaa/attribution_processor.h b/gd/btaa/attribution_processor.h
index 11bbc9cc4..37c7e72c2 100644
--- a/gd/btaa/attribution_processor.h
+++ b/gd/btaa/attribution_processor.h
@@ -58,7 +58,20 @@ class AttributionProcessor {
   void Dump(
       std::promise<flatbuffers::Offset<ActivityAttributionData>> promise, flatbuffers::FlatBufferBuilder* fb_builder);
 
+  using ClockType = std::chrono::time_point<std::chrono::system_clock>;
+  using NowFunc = ClockType (*)();
+
+  // by default, we use the std::chrono::system_clock::now implementation to
+  // get the current timestamp
+  AttributionProcessor() : now_func_(std::chrono::system_clock::now) {}
+  // in other cases, we may need to use different implementation
+  // e.g., for testing purposes
+  AttributionProcessor(NowFunc func) : now_func_(func) {}
+
  private:
+  // this function is added for testing support in
+  // OnWakelockReleased
+  NowFunc now_func_ = std::chrono::system_clock::now;
   bool wakeup_ = false;
   std::unordered_map<AddressActivityKey, BtaaAggregationEntry, AddressActivityKeyHasher> btaa_aggregator_;
   std::unordered_map<AddressActivityKey, BtaaAggregationEntry, AddressActivityKeyHasher> wakelock_duration_aggregator_;
diff --git a/gd/btaa/linux_generic/attribution_processor.cc b/gd/btaa/linux_generic/attribution_processor.cc
index a55243a06..b38bb3a8b 100644
--- a/gd/btaa/linux_generic/attribution_processor.cc
+++ b/gd/btaa/linux_generic/attribution_processor.cc
@@ -64,7 +64,7 @@ void AttributionProcessor::OnWakelockReleased(uint32_t duration_ms) {
   }
 
   ms_per_byte = duration_ms / total_byte_count;
-  auto cur_time = std::chrono::system_clock::now();
+  auto cur_time = now_func_();
   for (auto& it : wakelock_duration_aggregator_) {
     it.second.wakelock_duration_ms = ms_per_byte * it.second.byte_count;
     if (btaa_aggregator_.find(it.first) == btaa_aggregator_.end()) {
-- 
2.39.1.456.gfc5497dd1b-goog

