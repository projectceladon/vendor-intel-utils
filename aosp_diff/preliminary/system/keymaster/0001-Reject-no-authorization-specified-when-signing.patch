From 90174bd22cabb013a409fdf2f8fb537e59cab12a Mon Sep 17 00:00:00 2001
From: Matthew Maurer <mmaurer@google.com>
Date: Fri, 10 May 2019 16:31:00 -0700
Subject: [PATCH] Reject no-authorization-specified when signing

GetAndValidateDigest treated no digest specified as Digest::NONE for
purposes of implementing the legacy keymaster interface. However, on new
Keymaster interface we need to return UNSUPPORTED_DIGEST in some cases
when no digest is specified (as exactly 1 is mandated).

Previously in these case, we would return INCOMPATIBLE_DIGEST. This
change brings the reference implementation in line with the spec and
VTS.

Bug: 129294086
Test: VTS 3, VTS 4 against reference
Change-Id: Ib658fb6fc3384320c90989669824e5270e025937
---
 android_keymaster/operation.cpp | 9 +++++++++
 include/keymaster/operation.h   | 3 +++
 km_openssl/ecdsa_operation.cpp  | 4 +++-
 km_openssl/rsa_operation.cpp    | 5 ++++-
 4 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/android_keymaster/operation.cpp b/android_keymaster/operation.cpp
index 127aeb6..3180ab0 100644
--- a/android_keymaster/operation.cpp
+++ b/android_keymaster/operation.cpp
@@ -114,8 +114,17 @@ bool OperationFactory::GetAndValidatePadding(const AuthorizationSet& begin_param
 bool OperationFactory::GetAndValidateDigest(const AuthorizationSet& begin_params, const Key& key,
                                             keymaster_digest_t* digest,
                                             keymaster_error_t* error) const {
+    return GetAndValidateDigest(begin_params, key, digest, error, false);
+}
+
+bool OperationFactory::GetAndValidateDigest(const AuthorizationSet& begin_params, const Key& key,
+                                            keymaster_digest_t* digest, keymaster_error_t* error,
+                                            bool require_explicit_digest) const {
     *error = KM_ERROR_UNSUPPORTED_DIGEST;
     if (!begin_params.GetTagValue(TAG_DIGEST, digest)) {
+        if (require_explicit_digest) {
+            return false;
+        }
         if (key.authorizations().Contains(TAG_DIGEST, KM_DIGEST_NONE)) {
             *digest = KM_DIGEST_NONE;
         } else {
diff --git a/include/keymaster/operation.h b/include/keymaster/operation.h
index 682aadf..656ba9d 100644
--- a/include/keymaster/operation.h
+++ b/include/keymaster/operation.h
@@ -81,6 +81,9 @@ class OperationFactory {
                                keymaster_padding_t* padding, keymaster_error_t* error) const;
     bool GetAndValidateDigest(const AuthorizationSet& begin_params, const Key& key,
                               keymaster_digest_t* digest, keymaster_error_t* error) const;
+    bool GetAndValidateDigest(const AuthorizationSet& begin_params, const Key& key,
+                              keymaster_digest_t* digest, keymaster_error_t* error,
+                              bool require_explicit_digest) const;
 };
 
 /**
diff --git a/km_openssl/ecdsa_operation.cpp b/km_openssl/ecdsa_operation.cpp
index 59ce624..e4cac5a 100644
--- a/km_openssl/ecdsa_operation.cpp
+++ b/km_openssl/ecdsa_operation.cpp
@@ -39,7 +39,9 @@ OperationPtr EcdsaOperationFactory::CreateOperation(Key&& key, const Authorizati
     }
 
     keymaster_digest_t digest;
-    if (!GetAndValidateDigest(begin_params, ecdsa_key, &digest, error)) return nullptr;
+    if (!GetAndValidateDigest(begin_params, ecdsa_key, &digest, error, true)) {
+        return nullptr;
+    }
 
     *error = KM_ERROR_OK;
     auto op = OperationPtr(InstantiateOperation(key.hw_enforced_move(), key.sw_enforced_move(),
diff --git a/km_openssl/rsa_operation.cpp b/km_openssl/rsa_operation.cpp
index b8d1443..7e9bae8 100644
--- a/km_openssl/rsa_operation.cpp
+++ b/km_openssl/rsa_operation.cpp
@@ -69,7 +69,10 @@ RsaOperation* RsaOperationFactory::CreateRsaOperation(Key&& key,
                            padding == KM_PAD_RSA_OAEP);
 
     keymaster_digest_t digest = KM_DIGEST_NONE;
-    if (require_digest && !GetAndValidateDigest(begin_params, key, &digest, error)) return nullptr;
+
+    if (require_digest && !GetAndValidateDigest(begin_params, key, &digest, error, true)) {
+        return nullptr;
+    }
 
     UniquePtr<EVP_PKEY, EVP_PKEY_Delete> rsa(GetRsaKey(move(key), error));
     if (!rsa.get()) return nullptr;
-- 
2.17.1

