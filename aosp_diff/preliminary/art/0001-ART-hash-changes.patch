From 990661bd4a3dac3c5269380d3610f8d01fb9121f Mon Sep 17 00:00:00 2001
From: jaishank <jaishankar.rajendran@intel.com>
Date: Fri, 18 Oct 2019 11:39:35 +0530
Subject: [PATCH] ART hash changes

Tracked-On:
Signed-off-by: jaishank <jaishankar.rajendran@intel.com>
---
 libdexfile/dex/utf.cc                     | 7 ++++---
 log_1310.txt                              | 3 +++
 runtime/interpreter/interpreter_common.cc | 2 +-
 runtime/mirror/object-readbarrier-inl.h   | 6 ++++--
 4 files changed, 12 insertions(+), 6 deletions(-)
 create mode 100644 log_1310.txt

diff --git a/libdexfile/dex/utf.cc b/libdexfile/dex/utf.cc
index 3eb80b1..5890c0f 100644
--- a/libdexfile/dex/utf.cc
+++ b/libdexfile/dex/utf.cc
@@ -193,10 +193,11 @@ int32_t ComputeUtf16HashFromModifiedUtf8(const char* utf8, size_t utf16_length)
 
 uint32_t ComputeModifiedUtf8Hash(const char* chars) {
   uint32_t hash = 0;
-  while (*chars != '\0') {
-    hash = hash * 31 + static_cast<uint8_t>(*chars);
+
+  do {
+		hash = hash * 31 + static_cast<uint8_t>(*chars);
     ++chars;
-  }
+	} while (*chars != '\0');
   return hash;
 }
 
diff --git a/runtime/interpreter/interpreter_common.cc b/runtime/interpreter/interpreter_common.cc
index 30c4b90..78d00ad 100644
--- a/runtime/interpreter/interpreter_common.cc
+++ b/runtime/interpreter/interpreter_common.cc
@@ -1527,7 +1527,7 @@ inline void CopyRegisters(ShadowFrame& caller_frame,
 
 template <bool is_range,
           bool do_assignability_check>
-static inline bool DoCallCommon(ArtMethod* called_method,
+static bool DoCallCommon(ArtMethod* called_method,
                                 Thread* self,
                                 ShadowFrame& shadow_frame,
                                 JValue* result,
diff --git a/runtime/mirror/object-readbarrier-inl.h b/runtime/mirror/object-readbarrier-inl.h
index ee84997..80799b5 100644
--- a/runtime/mirror/object-readbarrier-inl.h
+++ b/runtime/mirror/object-readbarrier-inl.h
@@ -158,6 +158,7 @@ inline bool Object::AtomicSetReadBarrierState(uint32_t expected_rb_state, uint32
   DCHECK(ReadBarrier::IsValidReadBarrierState(rb_state)) << rb_state;
   LockWord expected_lw;
   LockWord new_lw;
+  bool val;
   do {
     LockWord lw = GetLockWord(false);
     if (UNLIKELY(lw.ReadBarrierState() != expected_rb_state)) {
@@ -165,15 +166,16 @@ inline bool Object::AtomicSetReadBarrierState(uint32_t expected_rb_state, uint32
       return false;
     }
     expected_lw = lw;
-    expected_lw.SetReadBarrierState(expected_rb_state);
     new_lw = lw;
+    expected_lw.SetReadBarrierState(expected_rb_state);
     new_lw.SetReadBarrierState(rb_state);
+    val = CasLockWord(expected_lw, new_lw, CASMode::kWeak, kMemoryOrder);
     // ConcurrentCopying::ProcessMarkStackRef uses this with
     // `kMemoryOrder` == `std::memory_order_release`.
     // If `kMemoryOrder` == `std::memory_order_release`, use a CAS release so that when GC updates
     // all the fields of an object and then changes the object from gray to black (non-gray), the
     // field updates (stores) will be visible (won't be reordered after this CAS.)
-  } while (!CasLockWord(expected_lw, new_lw, CASMode::kWeak, kMemoryOrder));
+  } while (!val);
   return true;
 }
 
-- 
2.7.4

