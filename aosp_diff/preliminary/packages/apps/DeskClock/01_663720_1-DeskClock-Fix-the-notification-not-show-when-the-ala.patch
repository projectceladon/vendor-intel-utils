From 613df2ed88f5e75184de4475e7f88a7848f0290d Mon Sep 17 00:00:00 2001
From: rleix <rayx.lei@intel.com>
Date: Fri, 1 Mar 2019 16:50:37 +0800
Subject: [PATCH 1/2] [DeskClock] Fix the notification not show when the alarm
 goes off

Google updated the app targetSdkVersion to 28 on android Q.
Since android O, all notifications must be assigned to a channel.
Create the channel for each alarm/stopwatch/timer notification.

Change-Id: I1f0cdf8527584ed429c0df1b5e00c3ab7c942bcb
Tracked-On: https://jira.devtools.intel.com/browse/OAM-76600
Signed-off-by: Lei,RayX <rayx.lei@intel.com>
---
 AndroidManifest.xml                           |  1 +
 .../deskclock/alarms/AlarmNotifications.java  | 31 +++++++++++++++++++
 .../data/StopwatchNotificationBuilder.java    | 17 ++++++++++
 .../data/TimerNotificationBuilder.java        | 22 +++++++++++++
 4 files changed, 71 insertions(+)

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index cf4271338..0c75f636d 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -29,6 +29,7 @@
     <uses-permission android:name="android.permission.VIBRATE" />
     <uses-permission android:name="android.permission.DISABLE_KEYGUARD" />
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />

     <!-- WRITE_SETTINGS is required to record the upcoming alarm prior to L -->
     <uses-permission
diff --git a/src/com/android/deskclock/alarms/AlarmNotifications.java b/src/com/android/deskclock/alarms/AlarmNotifications.java
index 3e2c7e35c..5c8d6a1ce 100644
--- a/src/com/android/deskclock/alarms/AlarmNotifications.java
+++ b/src/com/android/deskclock/alarms/AlarmNotifications.java
@@ -28,6 +28,8 @@ import android.service.notification.StatusBarNotification;
 import androidx.core.app.NotificationCompat;
 import androidx.core.app.NotificationManagerCompat;
 import androidx.core.content.ContextCompat;
+import android.app.NotificationChannel;
+import androidx.core.os.BuildCompat;

 import com.android.deskclock.AlarmClockFragment;
 import com.android.deskclock.AlarmUtils;
@@ -82,10 +84,13 @@ final class AlarmNotifications {
      */
     private static final int ALARM_FIRING_NOTIFICATION_ID = Integer.MAX_VALUE - 7;

+    private static final String CHANNEL_ID_ALARM = "alarm";
+
     static synchronized void showLowPriorityNotification(Context context,
             AlarmInstance instance) {
         LogUtils.v("Displaying low priority notification for alarm instance: " + instance.mId);

+        createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_DEFAULT);
         NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
                 .setShowWhen(false)
                 .setContentTitle(context.getString(
@@ -98,6 +103,7 @@ final class AlarmNotifications {
                 .setPriority(NotificationCompat.PRIORITY_DEFAULT)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);

         if (Utils.isNOrLater()) {
@@ -135,6 +141,7 @@ final class AlarmNotifications {
             AlarmInstance instance) {
         LogUtils.v("Displaying high priority notification for alarm instance: " + instance.mId);

+        createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_HIGH);
         NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
                 .setShowWhen(false)
                 .setContentTitle(context.getString(R.string.alarm_alert_predismiss_title))
@@ -146,6 +153,7 @@ final class AlarmNotifications {
                 .setPriority(NotificationCompat.PRIORITY_HIGH)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);

         if (Utils.isNOrLater()) {
@@ -243,6 +251,7 @@ final class AlarmNotifications {
         Notification summary = getActiveGroupSummaryNotification(context, UPCOMING_GROUP_KEY);
         if (summary == null
                 || !Objects.equals(summary.contentIntent, firstUpcoming.contentIntent)) {
+            createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_HIGH);
             summary = new NotificationCompat.Builder(context)
                     .setShowWhen(false)
                     .setContentIntent(firstUpcoming.contentIntent)
@@ -253,6 +262,7 @@ final class AlarmNotifications {
                     .setPriority(NotificationCompat.PRIORITY_HIGH)
                     .setCategory(NotificationCompat.CATEGORY_ALARM)
                     .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                    .setChannelId(CHANNEL_ID_ALARM)
                     .setLocalOnly(true)
                     .build();
             nm.notify(ALARM_GROUP_NOTIFICATION_ID, summary);
@@ -277,6 +287,7 @@ final class AlarmNotifications {
         Notification summary = getActiveGroupSummaryNotification(context, MISSED_GROUP_KEY);
         if (summary == null
                 || !Objects.equals(summary.contentIntent, firstMissed.contentIntent)) {
+            createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_HIGH);
             summary = new NotificationCompat.Builder(context)
                     .setShowWhen(false)
                     .setContentIntent(firstMissed.contentIntent)
@@ -287,6 +298,7 @@ final class AlarmNotifications {
                     .setPriority(NotificationCompat.PRIORITY_HIGH)
                     .setCategory(NotificationCompat.CATEGORY_ALARM)
                     .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                    .setChannelId(CHANNEL_ID_ALARM)
                     .setLocalOnly(true)
                     .build();
             nm.notify(ALARM_GROUP_MISSED_NOTIFICATION_ID, summary);
@@ -297,6 +309,7 @@ final class AlarmNotifications {
             AlarmInstance instance) {
         LogUtils.v("Displaying snoozed notification for alarm instance: " + instance.mId);

+        createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_MAX);
         NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
                 .setShowWhen(false)
                 .setContentTitle(instance.getLabelOrDefault(context))
@@ -309,6 +322,7 @@ final class AlarmNotifications {
                 .setPriority(NotificationCompat.PRIORITY_MAX)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);

         if (Utils.isNOrLater()) {
@@ -341,6 +355,8 @@ final class AlarmNotifications {

         String label = instance.mLabel;
         String alarmTime = AlarmUtils.getFormattedTime(context, instance.getAlarmTime());
+
+        createNotificationAlarmChannel(context, NotificationManager.IMPORTANCE_HIGH);
         NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
                 .setShowWhen(false)
                 .setContentTitle(context.getString(R.string.alarm_missed_title))
@@ -352,6 +368,7 @@ final class AlarmNotifications {
                 .setPriority(NotificationCompat.PRIORITY_HIGH)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);

         if (Utils.isNOrLater()) {
@@ -384,6 +401,8 @@ final class AlarmNotifications {
         LogUtils.v("Displaying alarm notification for alarm instance: " + instance.mId);

         Resources resources = service.getResources();
+
+        createNotificationAlarmChannel(service, NotificationManager.IMPORTANCE_MAX);
         NotificationCompat.Builder notification = new NotificationCompat.Builder(service)
                 .setContentTitle(instance.getLabelOrDefault(service))
                 .setContentText(AlarmUtils.getFormattedTime(service, instance.getAlarmTime()))
@@ -395,6 +414,7 @@ final class AlarmNotifications {
                 .setWhen(0)
                 .setCategory(NotificationCompat.CATEGORY_ALARM)
                 .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setChannelId(CHANNEL_ID_ALARM)
                 .setLocalOnly(true);

         // Setup Snooze Action
@@ -489,4 +509,15 @@ final class AlarmNotifications {
         final boolean missedAlarm = instance.mAlarmState == AlarmInstance.MISSED_STATE;
         return missedAlarm ? ("MISSED " + timeKey) : timeKey;
     }
+
+    private static void createNotificationAlarmChannel(Context context, int important) {
+        if (!BuildCompat.isAtLeastO()) {
+            return;
+        }
+        final NotificationManager nm = context.getSystemService(NotificationManager.class);
+        final NotificationChannel channel = new NotificationChannel(CHANNEL_ID_ALARM,
+                context.getString(R.string.default_label),
+                important);
+        nm.createNotificationChannel(channel);
+    }
 }
diff --git a/src/com/android/deskclock/data/StopwatchNotificationBuilder.java b/src/com/android/deskclock/data/StopwatchNotificationBuilder.java
index 4ca8c7b37..bd89fd864 100644
--- a/src/com/android/deskclock/data/StopwatchNotificationBuilder.java
+++ b/src/com/android/deskclock/data/StopwatchNotificationBuilder.java
@@ -18,6 +18,8 @@ package com.android.deskclock.data;

 import android.app.Notification;
 import android.app.PendingIntent;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Resources;
@@ -28,6 +30,7 @@ import androidx.core.app.NotificationCompat;
 import androidx.core.app.NotificationCompat.Action;
 import androidx.core.app.NotificationCompat.Builder;
 import androidx.core.content.ContextCompat;
+import androidx.core.os.BuildCompat;
 import android.widget.RemoteViews;

 import com.android.deskclock.R;
@@ -46,6 +49,7 @@ import static android.view.View.VISIBLE;
  */
 class StopwatchNotificationBuilder {

+    static final String CHANNEL_ID = "StopwatchNotification";
     public Notification build(Context context, NotificationModel nm, Stopwatch stopwatch) {
         @StringRes final int eventLabel = R.string.label_notification;

@@ -127,7 +131,9 @@ class StopwatchNotificationBuilder {
             content.setViewVisibility(R.id.state, VISIBLE);
         }

+        createNotificationStopwatchChannel(context, NotificationManager.IMPORTANCE_MAX);
         final Builder notification = new NotificationCompat.Builder(context)
+                .setChannelId(CHANNEL_ID)
                 .setLocalOnly(true)
                 .setOngoing(running)
                 .setCustomContentView(content)
@@ -148,4 +154,15 @@ class StopwatchNotificationBuilder {

         return notification.build();
     }
+
+    private static void createNotificationStopwatchChannel(Context context, int important) {
+        if (!BuildCompat.isAtLeastO()) {
+            return;
+        }
+        final NotificationManager nm = context.getSystemService(NotificationManager.class);
+        final NotificationChannel channel = new NotificationChannel(CHANNEL_ID,
+                context.getString(R.string.default_label),
+                important);
+        nm.createNotificationChannel(channel);
+    }
 }
diff --git a/src/com/android/deskclock/data/TimerNotificationBuilder.java b/src/com/android/deskclock/data/TimerNotificationBuilder.java
index 4d93053c3..da73d5d39 100644
--- a/src/com/android/deskclock/data/TimerNotificationBuilder.java
+++ b/src/com/android/deskclock/data/TimerNotificationBuilder.java
@@ -20,6 +20,8 @@ import android.annotation.TargetApi;
 import android.app.AlarmManager;
 import android.app.Notification;
 import android.app.PendingIntent;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Resources;
@@ -28,6 +30,7 @@ import android.os.SystemClock;
 import androidx.annotation.DrawableRes;
 import androidx.core.app.NotificationCompat;
 import androidx.core.content.ContextCompat;
+import androidx.core.os.BuildCompat;
 import android.text.TextUtils;
 import android.widget.RemoteViews;

@@ -54,6 +57,8 @@ class TimerNotificationBuilder {
     private static final int REQUEST_CODE_UPCOMING = 0;
     private static final int REQUEST_CODE_MISSING = 1;

+    private static final String CHANNEL_ID_TIMER = "timer";
+
     public Notification build(Context context, NotificationModel nm, List<Timer> unexpired) {
         final Timer timer = unexpired.get(0);
         final int count = unexpired.size();
@@ -148,7 +153,9 @@ class TimerNotificationBuilder {
                 PendingIntent.getService(context, REQUEST_CODE_UPCOMING, showApp,
                         PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_UPDATE_CURRENT);

+        createNotificationTimerChannel(context, NotificationManager.IMPORTANCE_HIGH);
         final Builder notification = new NotificationCompat.Builder(context)
+                .setChannelId(CHANNEL_ID_TIMER)
                 .setOngoing(true)
                 .setLocalOnly(true)
                 .setShowWhen(false)
@@ -261,7 +268,9 @@ class TimerNotificationBuilder {
                 .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_USER_ACTION);
         final PendingIntent pendingFullScreen = Utils.pendingActivityIntent(context, fullScreen);

+        createNotificationTimerChannel(context, NotificationManager.IMPORTANCE_MAX);
         final Builder notification = new NotificationCompat.Builder(context)
+                .setChannelId(CHANNEL_ID_TIMER)
                 .setOngoing(true)
                 .setLocalOnly(true)
                 .setShowWhen(false)
@@ -344,7 +353,9 @@ class TimerNotificationBuilder {
                 PendingIntent.getService(context, REQUEST_CODE_MISSING, showApp,
                         PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_UPDATE_CURRENT);

+        createNotificationTimerChannel(context, NotificationManager.IMPORTANCE_HIGH);
         final Builder notification = new NotificationCompat.Builder(context)
+                .setChannelId(CHANNEL_ID_TIMER)
                 .setLocalOnly(true)
                 .setShowWhen(false)
                 .setAutoCancel(false)
@@ -393,4 +404,15 @@ class TimerNotificationBuilder {
         content.setTextViewText(R.id.state, stateText);
         return content;
     }
+
+    private static void createNotificationTimerChannel(Context context, int important) {
+        if (!BuildCompat.isAtLeastO()) {
+            return;
+        }
+        final NotificationManager nm = context.getSystemService(NotificationManager.class);
+        final NotificationChannel channel = new NotificationChannel(CHANNEL_ID_TIMER,
+                context.getString(R.string.default_label),
+                important);
+        nm.createNotificationChannel(channel);
+    }
 }
--
2.21.0
