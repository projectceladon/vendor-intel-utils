From f1134400c8899728e79ff023e91f662c616e4220 Mon Sep 17 00:00:00 2001
From: "Yang, JunchaoX" <junchaox.yang@intel.com>
Date: Wed, 1 Jun 2022 18:28:14 +0800
Subject: [PATCH]  add for display mode setting

---
 res/values/arrays.xml                         |   8 ++
 res/values/strings.xml                        |   2 +
 res/xml/display_settings.xml                  |   8 +-
 src/com/android/settings/DisplaySettings.java |   3 +
 .../display/DisplayModeListPreference.java    |  60 +++++++++
 .../DisplayModePreferenceController.java      | 121 ++++++++++++++++++
 6 files changed, 201 insertions(+), 1 deletion(-)
 create mode 100644 src/com/android/settings/display/DisplayModeListPreference.java
 create mode 100644 src/com/android/settings/display/DisplayModePreferenceController.java

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 1ad3cc3103..f026baf5ac 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -67,6 +67,14 @@
         <!-- Do not translate. -->
         <item>1800000</item>
     </string-array>
+    
+    <!-- Display settings.  The delay in inactivity before the screen is turned off. These are shown in a list dialog. -->
+    <string-array name="display_mode_entries">
+    </string-array>
+
+    <!-- Do not translate. -->
+    <string-array name="display_mode_values" translatable="false">
+    </string-array>
 
     <!-- Display settings.  The delay in inactivity before the dream is shown. These are shown in a list dialog. -->
     <string-array name="dream_timeout_entries">
diff --git a/res/values/strings.xml b/res/values/strings.xml
index f80e8c5203..b3a6156b34 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -2779,6 +2779,8 @@
 
     <!-- Night display screen, setting option name to enable night display (renamed "Night Light" with title caps). [CHAR LIMIT=30] -->
     <string name="night_display_title">Night Light</string>
+    
+    <string name="display_mode_title">Display Mode</string>
     <!-- Night display screen, description of night display feature (renamed "Night Light" with title caps). [CHAR LIMIT=NONE] -->
     <string name="night_display_text">Night Light tints your screen amber. This makes it easier to look at your screen or read in dim light, and may help you fall asleep more easily.</string>
     <!-- Night display screen, setting option name to configure whether night display turn on/off automatically. [CHAR LIMIT=30] -->
diff --git a/res/xml/display_settings.xml b/res/xml/display_settings.xml
index 30dad01749..889cadf16d 100644
--- a/res/xml/display_settings.xml
+++ b/res/xml/display_settings.xml
@@ -70,7 +70,6 @@
         android:entries="@array/screen_timeout_entries"
         android:entryValues="@array/screen_timeout_values"
         settings:keywords="@string/keywords_screen_timeout" />
-
     <Preference
         android:key="adaptive_sleep_entry"
         android:title="@string/adaptive_sleep_title"
@@ -108,6 +107,13 @@
         android:title="@string/title_font_size"
         android:fragment="com.android.settings.display.ToggleFontSizePreferenceFragment"
         settings:controller="com.android.settings.display.FontSizePreferenceController" />
+    
+    <com.android.settings.display.DisplayModeListPreference
+        android:key="display_mode"
+        android:title="@string/display_mode_title"
+        android:summary="@string/summary_placeholder"
+        android:entries="@array/display_mode_entries"
+        android:entryValues="@array/display_mode_values" />
 
     <com.android.settings.display.ScreenZoomPreference
         android:key="display_settings_screen_zoom"
diff --git a/src/com/android/settings/DisplaySettings.java b/src/com/android/settings/DisplaySettings.java
index 6b23b29190..77f3d132b8 100644
--- a/src/com/android/settings/DisplaySettings.java
+++ b/src/com/android/settings/DisplaySettings.java
@@ -31,6 +31,7 @@ import com.android.settings.display.ShowOperatorNamePreferenceController;
 import com.android.settings.display.TapToWakePreferenceController;
 import com.android.settings.display.ThemePreferenceController;
 import com.android.settings.display.TimeoutPreferenceController;
+import com.android.settings.display.DisplayModePreferenceController;
 import com.android.settings.display.VrDisplayPreferenceController;
 import com.android.settings.search.BaseSearchIndexProvider;
 import com.android.settingslib.core.AbstractPreferenceController;
@@ -45,6 +46,7 @@ public class DisplaySettings extends DashboardFragment {
     private static final String TAG = "DisplaySettings";
 
     private static final String KEY_SCREEN_TIMEOUT = "screen_timeout";
+    private static final String KEY_DISPLAY_MODE = "display_mode";
 
     @Override
     public int getMetricsCategory() {
@@ -86,6 +88,7 @@ public class DisplaySettings extends DashboardFragment {
         controllers.add(new ScreenSaverPreferenceController(context));
         controllers.add(new TapToWakePreferenceController(context));
         controllers.add(new TimeoutPreferenceController(context, KEY_SCREEN_TIMEOUT));
+        controllers.add(new DisplayModePreferenceController(context,KEY_DISPLAY_MODE));
         controllers.add(new VrDisplayPreferenceController(context));
         controllers.add(new ShowOperatorNamePreferenceController(context));
         controllers.add(new ThemePreferenceController(context));
diff --git a/src/com/android/settings/display/DisplayModeListPreference.java b/src/com/android/settings/display/DisplayModeListPreference.java
new file mode 100644
index 0000000000..bcecee9fd3
--- /dev/null
+++ b/src/com/android/settings/display/DisplayModeListPreference.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.display;
+
+import static com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
+
+import android.app.Dialog;
+import android.app.admin.DevicePolicyManager;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import androidx.appcompat.app.AlertDialog.Builder;
+import com.android.settings.R;
+import com.android.settings.RestrictedListPreference;
+import com.android.settingslib.RestrictedLockUtils;
+
+import java.util.ArrayList;
+
+
+public class DisplayModeListPreference extends RestrictedListPreference {
+    private static final String TAG = "DisplayModeListPreference";
+    private final CharSequence[] mInitialEntries;
+    private final CharSequence[] mInitialValues;
+
+    public DisplayModeListPreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mInitialEntries = getEntries();
+        mInitialValues = getEntryValues();
+    }
+
+    @Override
+    protected void onPrepareDialogBuilder(Builder builder,
+            DialogInterface.OnClickListener listener) {
+        super.onPrepareDialogBuilder(builder, listener);
+        builder.setView(null);
+    }
+
+    @Override
+    protected void onDialogCreated(Dialog dialog) {
+        super.onDialogCreated(dialog);
+        dialog.create();
+    }
+
+}
diff --git a/src/com/android/settings/display/DisplayModePreferenceController.java b/src/com/android/settings/display/DisplayModePreferenceController.java
new file mode 100644
index 0000000000..2bbff84ece
--- /dev/null
+++ b/src/com/android/settings/display/DisplayModePreferenceController.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+package com.android.settings.display;
+
+import static android.provider.Settings.System.SCREEN_OFF_TIMEOUT;
+
+import android.app.admin.DevicePolicyManager;
+import android.content.Context;
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.provider.Settings;
+import android.util.Log;
+import androidx.preference.Preference;
+import com.android.settings.R;
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.RestrictedLockUtils;
+import com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
+import com.android.settingslib.RestrictedLockUtilsInternal;
+import com.android.settingslib.core.AbstractPreferenceController;
+import android.view.Surface;
+import android.view.SurfaceControl;
+import android.os.IBinder;
+
+public class DisplayModePreferenceController extends AbstractPreferenceController implements
+        PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
+
+    private static final String TAG = "DisplayModePrefContr";
+    private SurfaceControl mSurfaceControl = new SurfaceControl();
+    final IBinder token = SurfaceControl.getInternalDisplayToken();
+
+    /** If there is no setting in the provider, use this. */
+    public static final int FALLBACK_SCREEN_TIMEOUT_VALUE = 10;
+
+    private final String mDisplayModeKey;
+
+    public DisplayModePreferenceController(Context context,String key) {
+        super(context);
+        mDisplayModeKey = key;
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return true;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return mDisplayModeKey;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        final DisplayModeListPreference DisplayModeListPreference = (DisplayModeListPreference) preference;
+        //final long currentTimeout = Settings.System.getLong(mContext.getContentResolver(),
+        //        SCREEN_OFF_TIMEOUT, FALLBACK_SCREEN_TIMEOUT_VALUE);
+        int mActiveConfig = mSurfaceControl.getActiveConfig(token);
+
+	CharSequence mentries[] = new String[10];
+	CharSequence mentryValues[] = new String[10]; 
+        
+	SurfaceControl.DisplayConfig[] configs = mSurfaceControl.getDisplayConfigs(token);
+	for (int i=0,j=0;i < configs.length;i++) {
+	switch(i) {
+	    case 0:
+	    case 2:
+	    case 7:
+	    case 10:
+	    case 18:
+	    case 20:
+	    case 21:
+	    case 24:
+	    case 32:
+	    case 36:
+		SurfaceControl.DisplayConfig mconfig = configs[i];
+		System.out.println(Integer.toString(i) + "  " + mconfig.toString());
+            	mentries[j] = Integer.toString(mconfig.width) + "*" + Integer.toString(mconfig.height) + "  " + Float.toString(mconfig.refreshRate) + "fps";
+            	mentryValues[j] = Integer.toString(i);
+		j++;
+		break;
+	    default:
+		break;
+	    }
+        }
+
+        DisplayModeListPreference.setEntries(mentries);
+        DisplayModeListPreference.setEntryValues(mentryValues);
+        DisplayModeListPreference.setValue(Integer.toString(mActiveConfig));
+        DisplayModeListPreference.setSummary(Integer.toString(configs[mActiveConfig].width) + "*" + Integer.toString(configs[mActiveConfig].height));
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        try {
+            int value = Integer.parseInt((String) newValue);
+            final DisplayModeListPreference DisplayModeListPreference = (DisplayModeListPreference) preference;
+            int mActiveConfig = mSurfaceControl.getActiveConfig(token);
+            SurfaceControl.DisplayConfig[]  configs = mSurfaceControl.getDisplayConfigs(token);
+
+            SurfaceControl.DisplayConfig config = configs[value];
+            mSurfaceControl.setDesiredDisplayConfigSpecs(token,new SurfaceControl.DesiredDisplayConfigSpecs(value,config.refreshRate,config.refreshRate,config.refreshRate,config.refreshRate));
+            mActiveConfig = mSurfaceControl.getActiveConfig(token);
+            System.out.println(mActiveConfig);
+
+            DisplayModeListPreference.setSummary(Integer.toString(configs[mActiveConfig].width) + "*" + Integer.toString(configs[mActiveConfig].height));
+        } catch (NumberFormatException e) {
+            Log.e(TAG, "could not persist display mode setting", e);
+        }
+        return true;
+    }
+}
-- 
2.33.0

