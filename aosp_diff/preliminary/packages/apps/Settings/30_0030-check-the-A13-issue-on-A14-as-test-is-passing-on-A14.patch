From 3de47d9146ef7e4e28c53922456d1c415f6ecf97 Mon Sep 17 00:00:00 2001
From: "Alam, Sahibex" <sahibex.alam@intel.com>
Date: Thu, 17 Apr 2025 10:43:50 +0000
Subject: [PATCH] check the A13 issue on A14 as test is passing on A14

Signed-off-by: Alam, Sahibex <sahibex.alam@intel.com>
---
 src/com/android/settings/applications/AppInfoBase.java | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/com/android/settings/applications/AppInfoBase.java b/src/com/android/settings/applications/AppInfoBase.java
index e8a67de5a52..b1271dc7815 100644
--- a/src/com/android/settings/applications/AppInfoBase.java
+++ b/src/com/android/settings/applications/AppInfoBase.java
@@ -104,7 +104,9 @@ public abstract class AppInfoBase extends SettingsPreferenceFragment
         IBinder b = ServiceManager.getService(Context.USB_SERVICE);
         mUsbManager = IUsbManager.Stub.asInterface(b);
 
+	Log.w("Alam","retrive Appentry called to get package");
         retrieveAppEntry();
+	Log.w("Alam","Start listing to package remove called to get package");
         startListeningToPackageRemove();
     }
 
@@ -138,12 +140,14 @@ public abstract class AppInfoBase extends SettingsPreferenceFragment
                 mPackageName = intent.getData().getSchemeSpecificPart();
             }
         }
+	Log.w(TAG, "Alam intent validity check");
         if (intent != null && intent.hasExtra(Intent.EXTRA_USER_HANDLE)) {
             mUserId = ((UserHandle) intent.getParcelableExtra(Intent.EXTRA_USER_HANDLE))
                     .getIdentifier();
             if (mUserId != UserHandle.myUserId() && !hasInteractAcrossUsersPermission()) {
                 Log.w(TAG, "Intent not valid.");
                 finish();
+		Log.w(TAG, "Alam intent not valid return empty");
                 return "";
             }
         } else {
@@ -165,6 +169,7 @@ public abstract class AppInfoBase extends SettingsPreferenceFragment
             mPackageInfo = null;
         }
 
+	Log.w(TAG,"Alam retuning package name as intent is valid");
         return mPackageName;
     }
 
@@ -174,6 +179,7 @@ public abstract class AppInfoBase extends SettingsPreferenceFragment
         if (!(activity instanceof SettingsActivity)) {
             return false;
         }
+	Log.w(TAG,"Alam before permission");
         try {
             int callerUid = ActivityManager.getService().getLaunchedFromUid(
                     activity.getActivityToken());
@@ -183,8 +189,10 @@ public abstract class AppInfoBase extends SettingsPreferenceFragment
                         + Manifest.permission.INTERACT_ACROSS_USERS_FULL);
                 return false;
             }
+	    Log.w(TAG,"Alam Permission granted");
             return true;
         } catch (RemoteException e) {
+	    Log.w(TAG,"Alam Exception on permission condition");
             return false;
         }
     }
-- 
2.34.1

