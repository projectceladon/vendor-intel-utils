From d0b3dac29763865fcec4a4e6707ff65eccd11547 Mon Sep 17 00:00:00 2001
From: "Tekriwal, Tanuj" <tanuj.tekriwal@intel.com>
Date: Tue, 30 May 2023 13:42:02 +0530
Subject: [PATCH] Fix build errors due to new APIs in 12L

Tracked-On: NA
Signed-off-by: Tanuj Tekriwal <tanuj.tekriwal@intel.com>
---
 cpp/evs/sampleDriver/bufferCopy.cpp | 23 +++++++++++------------
 cpp/evs/sampleDriver/bufferCopy.h   |  2 +-
 2 files changed, 12 insertions(+), 13 deletions(-)

diff --git a/cpp/evs/sampleDriver/bufferCopy.cpp b/cpp/evs/sampleDriver/bufferCopy.cpp
index 39c77d1bf..1fc3ffb2a 100644
--- a/cpp/evs/sampleDriver/bufferCopy.cpp
+++ b/cpp/evs/sampleDriver/bufferCopy.cpp
@@ -34,7 +34,17 @@ namespace evs {
 namespace V1_1 {
 namespace implementation {
 
-void fillRGBAFromNV12(const BufferDesc& tgtBuff, uint8_t* tgt, void* imgData, unsigned) {
+// Round up to the nearest multiple of the given alignment value
+template<unsigned alignment>
+int align(int value) {
+    static_assert((alignment && !(alignment & (alignment - 1))),
+                  "alignment must be a power of 2");
+
+    unsigned mask = alignment - 1;
+    return (value + mask) & ~mask;
+}
+
+void fillRGBAFromNV12(const BufferDesc& tgtBuff, uint8_t* tgt, void* imgData, void*, unsigned) {
     const AHardwareBuffer_Desc* pDesc =
         reinterpret_cast<const AHardwareBuffer_Desc*>(&tgtBuff.buffer.description);
     const unsigned strideLum = align<16>(pDesc->width);
@@ -49,17 +59,6 @@ void fillRGBAFromNV12(const BufferDesc& tgtBuff, uint8_t* tgt, void* imgData, un
                                 pDesc->width, pDesc->height);
 }
 
-// Round up to the nearest multiple of the given alignment value
-template<unsigned alignment>
-int align(int value) {
-    static_assert((alignment && !(alignment & (alignment - 1))),
-                  "alignment must be a power of 2");
-
-    unsigned mask = alignment - 1;
-    return (value + mask) & ~mask;
-}
-
-
 void fillNV21FromNV21(
         const BufferDesc& tgtBuff, uint8_t* tgt, void* imgData, void*, unsigned) {
     // The NV21 format provides a Y array of 8bit values, followed by a 1/2 x 1/2 interleave U/V array.
diff --git a/cpp/evs/sampleDriver/bufferCopy.h b/cpp/evs/sampleDriver/bufferCopy.h
index 32bc234b8..c68d0d80e 100644
--- a/cpp/evs/sampleDriver/bufferCopy.h
+++ b/cpp/evs/sampleDriver/bufferCopy.h
@@ -51,7 +51,7 @@ void fillYUYVFromUYVY(const BufferDesc& tgtBuff, uint8_t* tgt,
                       void* imgData, void* buf, unsigned imgStride);
 
 void fillRGBAFromNV12(const BufferDesc& tgtBuff, uint8_t* tgt,
-                      void* imgData, unsigned imgStride);
+                      void* imgData, void* buf, unsigned imgStride);
 
 } // namespace implementation
 } // namespace V1_1
-- 
2.17.1

