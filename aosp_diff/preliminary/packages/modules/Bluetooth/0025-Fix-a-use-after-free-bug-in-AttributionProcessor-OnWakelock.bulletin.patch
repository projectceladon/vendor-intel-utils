From 6a2e3c85578f714ba308ae0f8897084758ea4d51 Mon Sep 17 00:00:00 2001
From: Hui Peng <phui@google.com>
Date: Tue, 29 Nov 2022 00:25:16 +0000
Subject: [PATCH] Fix a use-after-free bug in
 AttributionProcessor::OnWakelockReleased

There is a use-after-free bug in AttributionProcessor::OnWakelockReleased
resulted from a well-known misuse of using iterators to delete
items in containers (the deleted items are used for calculating the next iterator
in the next round). This patch fix it with correct usage.

see the regression test is in I1709af943b6fa238dd4df41a62e6add36984c9ec

Bug: 254774758
Ignore-AOSP-First: security
Test: atest bluetooth_test_gd_unit
Merged-In: If9f14d5fe2fbf2150f2ab0d1f90ce0f263399227
Change-Id: If9f14d5fe2fbf2150f2ab0d1f90ce0f263399227
(cherry picked from commit 15fbebc88e86763c61f606592085f95a26c00b42)
Merged-In: If9f14d5fe2fbf2150f2ab0d1f90ce0f263399227
---
 .../linux_generic/attribution_processor.cc    | 22 ++++++++++++-------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/system/gd/btaa/linux_generic/attribution_processor.cc b/system/gd/btaa/linux_generic/attribution_processor.cc
index 62e62ae095..baa0c0709f 100644
--- a/system/gd/btaa/linux_generic/attribution_processor.cc
+++ b/system/gd/btaa/linux_generic/attribution_processor.cc
@@ -126,23 +126,29 @@ void AttributionProcessor::OnWakelockReleased(uint32_t duration_ms) {
   }
   // Trim down the transient entries in the aggregator to avoid that it overgrows
   if (btaa_aggregator_.size() > kMapSizeTrimDownAggregationEntry) {
-    for (auto& it : btaa_aggregator_) {
+    auto it = btaa_aggregator_.begin();
+    while (it != btaa_aggregator_.end()) {
       auto elapsed_time_sec =
-          std::chrono::duration_cast<std::chrono::seconds>(cur_time - it.second.creation_time).count();
+          std::chrono::duration_cast<std::chrono::seconds>(cur_time - it->second.creation_time).count();
       if (elapsed_time_sec > kDurationTransientDeviceActivityEntrySecs &&
-          it.second.byte_count < kByteCountTransientDeviceActivityEntry) {
-        btaa_aggregator_.erase(it.first);
+          it->second.byte_count < kByteCountTransientDeviceActivityEntry) {
+        it = btaa_aggregator_.erase(it);
+      } else {
+        it++;
       }
     }
   }
 
   if (app_activity_aggregator_.size() > kMapSizeTrimDownAggregationEntry) {
-    for (auto& it : app_activity_aggregator_) {
+    auto it = app_activity_aggregator_.begin();
+    while (it != app_activity_aggregator_.end()) {
       auto elapsed_time_sec =
-          std::chrono::duration_cast<std::chrono::seconds>(cur_time - it.second.creation_time).count();
+          std::chrono::duration_cast<std::chrono::seconds>(cur_time - it->second.creation_time).count();
       if (elapsed_time_sec > kDurationTransientDeviceActivityEntrySecs &&
-          it.second.byte_count < kByteCountTransientDeviceActivityEntry) {
-        app_activity_aggregator_.erase(it.first);
+          it->second.byte_count < kByteCountTransientDeviceActivityEntry) {
+        it = app_activity_aggregator_.erase(it);
+      } else {
+        it++;
       }
     }
   }
-- 
2.39.1.456.gfc5497dd1b-goog

