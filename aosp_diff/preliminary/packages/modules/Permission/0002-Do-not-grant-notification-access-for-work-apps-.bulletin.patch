From 5f36dcd7f69b22fd4e442305cab6b8b2826532f7 Mon Sep 17 00:00:00 2001
From: Raphael Kim <raphk@google.com>
Date: Thu, 26 Oct 2023 23:42:20 +0000
Subject: [PATCH] Do not grant notification access for work apps.

Bug: 295549388
Test: Manual test on debug app
(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:1c458f0b3223f1a3f66ae45527b3200877b7e2c5)
Merged-In: Ie6078a1081bf9f98466bfbf2bc0b54a7af7b4951
Change-Id: Ie6078a1081bf9f98466bfbf2bc0b54a7af7b4951
---
 ...mpanionDeviceAppStreamingRoleBehavior.java | 13 ++++++--
 .../CompanionDeviceComputerRoleBehavior.java  | 13 ++++++--
 .../CompanionDeviceWatchRoleBehavior.java     | 13 ++++++--
 .../role/utils/UserUtils.java                 | 33 ++++++++++++++++---
 4 files changed, 62 insertions(+), 10 deletions(-)

diff --git a/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceAppStreamingRoleBehavior.java b/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceAppStreamingRoleBehavior.java
index ca4af2355..8e33980a1 100644
--- a/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceAppStreamingRoleBehavior.java
+++ b/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceAppStreamingRoleBehavior.java
@@ -17,10 +17,13 @@
 package com.android.permissioncontroller.role.model;
 
 import android.content.Context;
+import android.os.Process;
+import android.os.UserHandle;
 
 import androidx.annotation.NonNull;
 
 import com.android.permissioncontroller.role.utils.NotificationUtils;
+import com.android.permissioncontroller.role.utils.UserUtils;
 
 /**
  * Class for behavior of the "App Streaming" Companion device profile role.
@@ -29,11 +32,17 @@ public class CompanionDeviceAppStreamingRoleBehavior implements RoleBehavior {
 
     @Override
     public void grant(@NonNull Role role, @NonNull String packageName, @NonNull Context context) {
-        NotificationUtils.grantNotificationAccessForPackage(context, packageName);
+        UserHandle user = Process.myUserHandle();
+        if (!UserUtils.isManagedProfile(user, context)) {
+            NotificationUtils.grantNotificationAccessForPackage(context, packageName);
+        }
     }
 
     @Override
     public void revoke(@NonNull Role role, @NonNull String packageName, @NonNull Context context) {
-        NotificationUtils.revokeNotificationAccessForPackage(context, packageName);
+        UserHandle user = Process.myUserHandle();
+        if (!UserUtils.isManagedProfile(user, context)) {
+            NotificationUtils.revokeNotificationAccessForPackage(context, packageName);
+        }
     }
 }
diff --git a/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceComputerRoleBehavior.java b/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceComputerRoleBehavior.java
index 1d9409f1f..0d184d940 100644
--- a/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceComputerRoleBehavior.java
+++ b/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceComputerRoleBehavior.java
@@ -17,10 +17,13 @@
 package com.android.permissioncontroller.role.model;
 
 import android.content.Context;
+import android.os.Process;
+import android.os.UserHandle;
 
 import androidx.annotation.NonNull;
 
 import com.android.permissioncontroller.role.utils.NotificationUtils;
+import com.android.permissioncontroller.role.utils.UserUtils;
 
 /**
  * Class for behavior of the "Computer" Companion device profile role.
@@ -29,11 +32,17 @@ public class CompanionDeviceComputerRoleBehavior implements RoleBehavior {
 
     @Override
     public void grant(@NonNull Role role, @NonNull String packageName, @NonNull Context context) {
-        NotificationUtils.grantNotificationAccessForPackage(context, packageName);
+        UserHandle user = Process.myUserHandle();
+        if (!UserUtils.isManagedProfile(user, context)) {
+            NotificationUtils.grantNotificationAccessForPackage(context, packageName);
+        }
     }
 
     @Override
     public void revoke(@NonNull Role role, @NonNull String packageName, @NonNull Context context) {
-        NotificationUtils.revokeNotificationAccessForPackage(context, packageName);
+        UserHandle user = Process.myUserHandle();
+        if (!UserUtils.isManagedProfile(user, context)) {
+            NotificationUtils.revokeNotificationAccessForPackage(context, packageName);
+        }
     }
 }
diff --git a/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceWatchRoleBehavior.java b/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceWatchRoleBehavior.java
index 75675fb00..c38c784c6 100644
--- a/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceWatchRoleBehavior.java
+++ b/PermissionController/src/com/android/permissioncontroller/role/model/CompanionDeviceWatchRoleBehavior.java
@@ -17,10 +17,13 @@
 package com.android.permissioncontroller.role.model;
 
 import android.content.Context;
+import android.os.Process;
+import android.os.UserHandle;
 
 import androidx.annotation.NonNull;
 
 import com.android.permissioncontroller.role.utils.NotificationUtils;
+import com.android.permissioncontroller.role.utils.UserUtils;
 
 /**
  * Class for behavior of the "watch" Companion device profile role.
@@ -29,11 +32,17 @@ public class CompanionDeviceWatchRoleBehavior implements RoleBehavior {
 
     @Override
     public void grant(@NonNull Role role, @NonNull String packageName, @NonNull Context context) {
-        NotificationUtils.grantNotificationAccessForPackage(context, packageName);
+        UserHandle user = Process.myUserHandle();
+        if (!UserUtils.isManagedProfile(user, context)) {
+            NotificationUtils.grantNotificationAccessForPackage(context, packageName);
+        }
     }
 
     @Override
     public void revoke(@NonNull Role role, @NonNull String packageName, @NonNull Context context) {
-        NotificationUtils.revokeNotificationAccessForPackage(context, packageName);
+        UserHandle user = Process.myUserHandle();
+        if (!UserUtils.isManagedProfile(user, context)) {
+            NotificationUtils.revokeNotificationAccessForPackage(context, packageName);
+        }
     }
 }
diff --git a/PermissionController/src/com/android/permissioncontroller/role/utils/UserUtils.java b/PermissionController/src/com/android/permissioncontroller/role/utils/UserUtils.java
index cd7a6b8a5..68c1e6176 100644
--- a/PermissionController/src/com/android/permissioncontroller/role/utils/UserUtils.java
+++ b/PermissionController/src/com/android/permissioncontroller/role/utils/UserUtils.java
@@ -39,16 +39,41 @@ public class UserUtils {
     /**
      * Check whether a user is a profile.
      *
-     * @param user the user to check
+     * @param user    the user to check
      * @param context the {@code Context} to retrieve system services
-     *
      * @return whether the user is a profile
      */
     public static boolean isProfile(@NonNull UserHandle user, @NonNull Context context) {
+        return isManagedProfile(user, context) || isCloneProfile(user, context);
+    }
+
+    /**
+     * Check whether a user is a managed profile.
+     *
+     * @param user    the user to check
+     * @param context the {@code Context} to retrieve system services
+     * @return whether the user is a managed profile
+     */
+    public static boolean isManagedProfile(@NonNull UserHandle user, @NonNull Context context) {
+        Context userContext = getUserContext(context, user);
+        UserManager userUserManager = userContext.getSystemService(UserManager.class);
+        return userUserManager.isManagedProfile(user.getIdentifier());
+    }
+
+    /**
+     * Check whether a user is a clone profile.
+     *
+     * @param user    the user to check
+     * @param context the {@code Context} to retrieve system services
+     * @return whether the user is a clone profile
+     */
+    public static boolean isCloneProfile(@NonNull UserHandle user, @NonNull Context context) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
+            return false;
+        }
         Context userContext = getUserContext(context, user);
         UserManager userUserManager = userContext.getSystemService(UserManager.class);
-        return userUserManager.isManagedProfile(user.getIdentifier()) || (
-                Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && userUserManager.isCloneProfile());
+        return userUserManager.isCloneProfile();
     }
 
     /**
-- 
2.44.0.396.g6e790dbe36-goog

