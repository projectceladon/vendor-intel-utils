From b9a047c94deb06ab7ff956e4fb50b19ddd70cf9a Mon Sep 17 00:00:00 2001
From: Austin Borger <borgera@google.com>
Date: Wed, 8 May 2024 15:47:58 -0700
Subject: [PATCH] CameraService: Watch for foreground changes from AppOps

AppOps now sends notifications when an app loses its camera capability.
We should watch for these notifications and block clients when they
happen, assuming they're untrusted. Otherwise, an app that should not
have camera access outside of the foreground may retain it.

Bug: 290086710
Test: Ran on physical device, tested Zoom + GCA
(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:5673af6bd01f27f50768e8e2d5b7d31cea461f1e)
Merged-In: Iaa21d74873da1dcc2453ad98abb284bad3a211f5
Change-Id: Iaa21d74873da1dcc2453ad98abb284bad3a211f5
---
 services/camera/libcameraservice/CameraService.cpp | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index 668a51ae6d..5eb9192c95 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -3683,7 +3683,8 @@ status_t CameraService::BasicClient::startCameraOps() {
         // Notify app ops that the camera is not available
         mOpsCallback = new OpsCallback(this);
         mAppOpsManager->startWatchingMode(AppOpsManager::OP_CAMERA,
-                mClientPackageName, mOpsCallback);
+                mClientPackageName,
+                AppOpsManager::WATCH_FOREGROUND_CHANGES, mOpsCallback);
 
         // Just check for camera acccess here on open - delay startOp until
         // camera frames start streaming in startCameraStreamingOps
@@ -3842,6 +3843,12 @@ void CameraService::BasicClient::opChanged(int32_t op, const String16&) {
         block();
     } else if (res == AppOpsManager::MODE_IGNORED) {
         bool isUidActive = sCameraService->mUidPolicy->isUidActive(mClientUid, mClientPackageName);
+
+        // Uid may be active, but not visible to the user (e.g. PROCESS_STATE_FOREGROUND_SERVICE).
+        // If not visible, but still active, then we want to block instead of muting the camera.
+        int32_t procState = sCameraService->mUidPolicy->getProcState(mClientUid);
+        bool isUidVisible = (procState <= ActivityManager::PROCESS_STATE_BOUND_TOP);
+
         bool isCameraPrivacyEnabled =
                 sCameraService->mSensorPrivacyPolicy->isCameraPrivacyEnabled();
         ALOGI("Camera %s: Access for \"%s\" has been restricted, isUidTrusted %d, isUidActive %d",
@@ -3851,10 +3858,9 @@ void CameraService::BasicClient::opChanged(int32_t op, const String16&) {
         // b/175320666), the AppOpsManager could return MODE_IGNORED. Do not treat such cases as
         // error.
         if (!mUidIsTrusted) {
-            if (isUidActive && isCameraPrivacyEnabled && supportsCameraMute()) {
+            if (isUidVisible && isCameraPrivacyEnabled && supportsCameraMute()) {
                 setCameraMute(true);
-            } else if (!isUidActive
-                || (isCameraPrivacyEnabled && !supportsCameraMute())) {
+            } else {
                 block();
             }
         }
-- 
2.49.0.395.g12beb8f557-goog

