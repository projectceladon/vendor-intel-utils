From 00c57d45bef805fe09110e00295c00606b86d524 Mon Sep 17 00:00:00 2001
From: shivasku82 <shiva.kumara.rudrappa@intel.com>
Date: Mon, 19 Jul 2021 22:17:32 +0530
Subject: [PATCH] debug destroy and create window

Signed-off-by: shivasku82 <shiva.kumara.rudrappa@intel.com>
---
 camera/Camera.cpp                                 |  4 ++--
 camera/CameraParameters2.cpp                      |  4 ++--
 camera/ICamera.cpp                                |  2 +-
 camera/ICameraClient.cpp                          |  2 +-
 .../camera/libcameraservice/CameraService.cpp     |  6 +++++-
 .../libcameraservice/api1/Camera2Client.cpp       |  8 +++++---
 .../camera/libcameraservice/api1/CameraClient.cpp |  7 +++++--
 .../libcameraservice/api2/CameraDeviceClient.cpp  | 10 +++++++---
 .../libcameraservice/common/Camera2ClientBase.cpp |  2 +-
 .../device1/CameraHardwareInterface.cpp           |  7 ++++++-
 .../libcameraservice/device3/BufferUtils.cpp      |  2 +-
 .../device3/Camera3BufferManager.cpp              |  2 +-
 .../device3/Camera3OutputStream.cpp               | 15 +++++++++++++--
 .../libcameraservice/gui/RingBufferConsumer.cpp   |  2 +-
 14 files changed, 51 insertions(+), 22 deletions(-)

diff --git a/camera/Camera.cpp b/camera/Camera.cpp
index 84d1d934e1..084cd6fa89 100644
--- a/camera/Camera.cpp
+++ b/camera/Camera.cpp
@@ -15,8 +15,8 @@
 ** limitations under the License.
 */
 
-//#define LOG_NDEBUG 0
-#define LOG_TAG "Camera"
+#define LOG_NDEBUG 0
+#define LOG_TAG "cam fw Camera"
 #include <utils/Log.h>
 #include <utils/threads.h>
 #include <utils/String16.h>
diff --git a/camera/CameraParameters2.cpp b/camera/CameraParameters2.cpp
index c29233cd1a..b1489b85c6 100644
--- a/camera/CameraParameters2.cpp
+++ b/camera/CameraParameters2.cpp
@@ -15,8 +15,8 @@
 ** limitations under the License.
 */
 
-#define LOG_TAG "CameraParams2"
-// #define LOG_NDEBUG 0
+#define LOG_TAG "cam fw CameraParams2"
+ #define LOG_NDEBUG 0
 #include <utils/Log.h>
 
 #include <string.h>
diff --git a/camera/ICamera.cpp b/camera/ICamera.cpp
index b83edf7060..f11d85b99b 100644
--- a/camera/ICamera.cpp
+++ b/camera/ICamera.cpp
@@ -15,7 +15,7 @@
 ** limitations under the License.
 */
 
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 #define LOG_TAG "ICamera"
 #include <utils/Log.h>
 #include <stdint.h>
diff --git a/camera/ICameraClient.cpp b/camera/ICameraClient.cpp
index bef2ea0acd..4ef08f4839 100644
--- a/camera/ICameraClient.cpp
+++ b/camera/ICameraClient.cpp
@@ -15,7 +15,7 @@
 ** limitations under the License.
 */
 
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 #define LOG_TAG "ICameraClient"
 #include <utils/Log.h>
 #include <stdint.h>
diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index ed64d4ccc8..0af3d615cd 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -16,7 +16,7 @@
 
 #define LOG_TAG "CameraService"
 #define ATRACE_TAG ATRACE_TAG_CAMERA
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <algorithm>
 #include <climits>
@@ -841,12 +841,15 @@ Status CameraService::makeClient(const sp<CameraService>& cameraService,
           case CAMERA_DEVICE_API_VERSION_3_5:
           case CAMERA_DEVICE_API_VERSION_3_6:
             if (effectiveApiLevel == API_1) { // Camera1 API route
+		    ALOGE("shiva API_1");
                 sp<ICameraClient> tmp = static_cast<ICameraClient*>(cameraCb.get());
                 *client = new Camera2Client(cameraService, tmp, packageName, featureId,
                         cameraId, api1CameraId,
                         facing, clientPid, clientUid,
                         servicePid);
             } else { // Camera2 API route
+		                        ALOGE("shiva API_2");
+
                 sp<hardware::camera2::ICameraDeviceCallbacks> tmp =
                         static_cast<hardware::camera2::ICameraDeviceCallbacks*>(cameraCb.get());
                 *client = new CameraDeviceClient(cameraService, tmp, packageName, featureId,
@@ -1277,6 +1280,7 @@ status_t CameraService::handleEvictionsLocked(const String8& cameraId, int clien
         sp<BasicClient>* client,
         std::shared_ptr<resource_policy::ClientDescriptor<String8, sp<BasicClient>>>* partial) {
     ATRACE_CALL();
+    ALOGE("shiva %s E",__FUNCTION__);
     status_t ret = NO_ERROR;
     std::vector<DescriptorPtr> evictedClients;
     DescriptorPtr clientDescriptor;
diff --git a/services/camera/libcameraservice/api1/Camera2Client.cpp b/services/camera/libcameraservice/api1/Camera2Client.cpp
index b043c0b557..3c293eb40e 100644
--- a/services/camera/libcameraservice/api1/Camera2Client.cpp
+++ b/services/camera/libcameraservice/api1/Camera2Client.cpp
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-#define LOG_TAG "Camera2Client"
+#define LOG_TAG "api1 Camera2Client"
 #define ATRACE_TAG ATRACE_TAG_CAMERA
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <inttypes.h>
 #include <utils/Log.h>
@@ -537,7 +537,9 @@ status_t Camera2Client::setPreviewTarget(
     sp<IBinder> binder;
     sp<Surface> window;
     if (bufferProducer != 0) {
-        binder = IInterface::asBinder(bufferProducer);
+            ALOGV("1 %s: E", __FUNCTION__);
+
+	    binder = IInterface::asBinder(bufferProducer);
         // Using controlledByApp flag to ensure that the buffer queue remains in
         // async mode for the old camera API, where many applications depend
         // on that behavior.
diff --git a/services/camera/libcameraservice/api1/CameraClient.cpp b/services/camera/libcameraservice/api1/CameraClient.cpp
index 892996c3af..b2d8fb7950 100644
--- a/services/camera/libcameraservice/api1/CameraClient.cpp
+++ b/services/camera/libcameraservice/api1/CameraClient.cpp
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "CameraClient"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <cutils/atomic.h>
 #include <cutils/properties.h>
@@ -227,6 +227,7 @@ status_t CameraClient::connect(const sp<hardware::ICameraClient>& client) {
 
 static void disconnectWindow(const sp<ANativeWindow>& window) {
     if (window != 0) {
+	    ALOGE("shiva disconnectWindow E");
         status_t result = native_window_api_disconnect(window.get(),
                 NATIVE_WINDOW_API_CAMERA);
         if (result != NO_ERROR) {
@@ -287,13 +288,15 @@ status_t CameraClient::setPreviewWindow(const sp<IBinder>& binder,
         const sp<ANativeWindow>& window) {
     Mutex::Autolock lock(mLock);
     status_t result = checkPidAndHardware();
+    ALOGE("setPreviewWindow E");
+
     if (result != NO_ERROR) return result;
 
     // return if no change in surface.
     if (binder == mSurface) {
         return NO_ERROR;
     }
-
+ALOGE("setPreviewWindow 1");
     if (window != 0) {
         result = native_window_api_connect(window.get(), NATIVE_WINDOW_API_CAMERA);
         if (result != NO_ERROR) {
diff --git a/services/camera/libcameraservice/api2/CameraDeviceClient.cpp b/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
index e35b4366f2..bc850b7e8c 100644
--- a/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
+++ b/services/camera/libcameraservice/api2/CameraDeviceClient.cpp
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-#define LOG_TAG "CameraDeviceClient"
+#define LOG_TAG "api2 CameraDeviceClient"
 #define ATRACE_TAG ATRACE_TAG_CAMERA
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <cutils/properties.h>
 #include <utils/CameraThreadState.h>
@@ -136,6 +136,7 @@ status_t CameraDeviceClient::initializeImpl(TProviderPtr providerPtr, const Stri
 }
 
 CameraDeviceClient::~CameraDeviceClient() {
+	ALOGE("shiva CameraDeviceClient destroy");
 }
 
 binder::Status CameraDeviceClient::submitRequest(
@@ -1396,6 +1397,7 @@ binder::Status CameraDeviceClient::createSurfaceFromGbp(
         sp<Surface>& surface, const sp<IGraphicBufferProducer>& gbp,
         const String8 &cameraId, const CameraMetadata &physicalCameraMetadata) {
 
+	ALOGE("shiva createSurfaceFromGbp E");
     // bufferProducer must be non-null
     if (gbp == nullptr) {
         String8 msg = String8::format("Camera %s: Surface is NULL", cameraId.string());
@@ -1428,7 +1430,9 @@ binder::Status CameraDeviceClient::createSurfaceFromGbp(
     bool flexibleConsumer = (consumerUsage & disallowedFlags) == 0 &&
             (consumerUsage & allowedFlags) != 0;
 
-    surface = new Surface(gbp, useAsync);
+//    surface = new Surface(gbp, useAsync);
+        surface = new Surface(gbp, true);
+
     ANativeWindow *anw = surface.get();
 
     int width, height, format;
diff --git a/services/camera/libcameraservice/common/Camera2ClientBase.cpp b/services/camera/libcameraservice/common/Camera2ClientBase.cpp
index 0a41776a3e..6ae3c6507b 100644
--- a/services/camera/libcameraservice/common/Camera2ClientBase.cpp
+++ b/services/camera/libcameraservice/common/Camera2ClientBase.cpp
@@ -16,7 +16,7 @@
 
 #define LOG_TAG "Camera2ClientBase"
 #define ATRACE_TAG ATRACE_TAG_CAMERA
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <inttypes.h>
 
diff --git a/services/camera/libcameraservice/device1/CameraHardwareInterface.cpp b/services/camera/libcameraservice/device1/CameraHardwareInterface.cpp
index 62ef681668..35a5a54042 100644
--- a/services/camera/libcameraservice/device1/CameraHardwareInterface.cpp
+++ b/services/camera/libcameraservice/device1/CameraHardwareInterface.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 #define LOG_TAG "CameraHardwareInterface"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <inttypes.h>
 #include <media/hardware/HardwareAPI.h> // For VideoNativeHandleMetadata
@@ -297,7 +297,10 @@ CameraHardwareInterface::cancelBuffer(uint64_t bufferId) {
 hardware::Return<Status>
 CameraHardwareInterface::setBufferCount(uint32_t count) {
     ANativeWindow *a = mPreviewWindow.get();
+    ALOGE("shiva setBufferCount E %d", (int)count);
     if (a != nullptr) {
+	        ALOGE("shiva setBufferCount 1");
+
         // Workaround for b/27039775
         // Previously, setting the buffer count would reset the buffer
         // queue's flag that allows for all buffers to be dequeued on the
@@ -332,6 +335,8 @@ CameraHardwareInterface::setBufferCount(uint32_t count) {
             native_window_set_crop(a, &(mPreviewCrop));
         }
     }
+        ALOGE("shiva setBufferCount  %d", (int)count);
+
     int rc = native_window_set_buffer_count(a, count);
     if (rc == OK) {
         cleanupCirculatingBuffers();
diff --git a/services/camera/libcameraservice/device3/BufferUtils.cpp b/services/camera/libcameraservice/device3/BufferUtils.cpp
index cc2939062e..fc84a4aa41 100644
--- a/services/camera/libcameraservice/device3/BufferUtils.cpp
+++ b/services/camera/libcameraservice/device3/BufferUtils.cpp
@@ -16,7 +16,7 @@
 
 #define LOG_TAG "Camera3-BufUtils"
 #define ATRACE_TAG ATRACE_TAG_CAMERA
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 //#define LOG_NNDEBUG 0  // Per-frame verbose logging
 
 #include <inttypes.h>
diff --git a/services/camera/libcameraservice/device3/Camera3BufferManager.cpp b/services/camera/libcameraservice/device3/Camera3BufferManager.cpp
index d6bf83eba8..13c9482ea4 100644
--- a/services/camera/libcameraservice/device3/Camera3BufferManager.cpp
+++ b/services/camera/libcameraservice/device3/Camera3BufferManager.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 #define LOG_TAG "Camera3-BufferManager"
 #define ATRACE_TAG ATRACE_TAG_CAMERA
 
diff --git a/services/camera/libcameraservice/device3/Camera3OutputStream.cpp b/services/camera/libcameraservice/device3/Camera3OutputStream.cpp
index 01ca0064ec..aa52a2ff66 100644
--- a/services/camera/libcameraservice/device3/Camera3OutputStream.cpp
+++ b/services/camera/libcameraservice/device3/Camera3OutputStream.cpp
@@ -377,9 +377,19 @@ status_t Camera3OutputStream::configureConsumerQueueLocked() {
     status_t res;
 
     mTraceFirstBuffer = true;
-
+ALOGE("shiva configureConsumerQueueLocked E");
     ALOG_ASSERT(mConsumer != 0, "mConsumer should never be NULL");
 
+        res = native_window_api_disconnect(mConsumer.get(),
+                                       NATIVE_WINDOW_API_CAMERA);
+
+	    if (res == DEAD_OBJECT) {
+        ALOGW("%s: While disconnecting stream %d from native window, the"
+                " native window died from under us", __FUNCTION__, mId);
+	    }
+	        else if (res != OK) {
+ALOGE("shiva unable to disconnect");
+		}
     // Configure consumer-side ANativeWindow interface. The listener may be used
     // to notify buffer manager (if it is used) of the returned buffers.
     res = mConsumer->connect(NATIVE_WINDOW_API_CAMERA,
@@ -655,6 +665,7 @@ bool Camera3OutputStream::shouldLogError(status_t res, StreamState state) {
 status_t Camera3OutputStream::disconnectLocked() {
     status_t res;
 
+    ALOGE("shiva disconnectLocked E");
     if ((res = Camera3IOStreamBase::disconnectLocked()) != OK) {
         return res;
     }
@@ -728,7 +739,7 @@ void Camera3OutputStream::applyZSLUsageQuirk(int format, uint64_t *consumerUsage
     if (consumerUsage == nullptr) {
         return;
     }
-
+ALOGE("shiva applyZSLUsageQuirk %d", format);
     // If an opaque output stream's endpoint is ImageReader, add
     // GRALLOC_USAGE_HW_CAMERA_ZSL to the usage so HAL knows it will be used
     // for the ZSL use case.
diff --git a/services/camera/libcameraservice/gui/RingBufferConsumer.cpp b/services/camera/libcameraservice/gui/RingBufferConsumer.cpp
index ee018c3cc8..80cb451fd4 100644
--- a/services/camera/libcameraservice/gui/RingBufferConsumer.cpp
+++ b/services/camera/libcameraservice/gui/RingBufferConsumer.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 #define LOG_TAG "RingBufferConsumer"
 #define ATRACE_TAG ATRACE_TAG_GRAPHICS
 
-- 
2.32.0

