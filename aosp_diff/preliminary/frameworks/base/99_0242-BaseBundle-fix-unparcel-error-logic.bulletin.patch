From f58054c926e53e18cfe66dc7eff5741447d8b581 Mon Sep 17 00:00:00 2001
From: Steven Moreland <smoreland@google.com>
Date: Tue, 10 Dec 2024 21:54:36 +0000
Subject: [PATCH] BaseBundle: fix unparcel error logic

This code considered a success case to be an unsuccessful
case.

Bug: 373357090
Test: repro in bug no longer works
(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:1997a76a8846a5d5cd27472976885bed0180a59c)
Merged-In: Id423936872cbb0e0265ccf2855092357cb175d47
Change-Id: Id423936872cbb0e0265ccf2855092357cb175d47
---
 core/java/android/os/BaseBundle.java |  9 +++++++--
 core/java/android/os/Parcel.java     | 12 +++++-------
 2 files changed, 12 insertions(+), 9 deletions(-)

diff --git a/core/java/android/os/BaseBundle.java b/core/java/android/os/BaseBundle.java
index b599028ccb9b..23966080e57e 100644
--- a/core/java/android/os/BaseBundle.java
+++ b/core/java/android/os/BaseBundle.java
@@ -437,12 +437,15 @@ public class BaseBundle {
             map.erase();
             map.ensureCapacity(count);
         }
+
+        int[] numLazyValues = new int[]{0};
+
         try {
             // recycleParcel being false implies that we do not own the parcel. In this case, do
             // not use lazy values to be safe, as the parcel could be recycled outside of our
             // control.
-            recycleParcel &= parcelledData.readArrayMap(map, count, !parcelledByNative,
-                    /* lazy */ recycleParcel, mClassLoader);
+            parcelledData.readArrayMap(map, count, !parcelledByNative,
+                    /* lazy */ recycleParcel, mClassLoader, numLazyValues);
         } catch (BadParcelableException e) {
             if (sShouldDefuse) {
                 Log.w(TAG, "Failed to parse Bundle, but defusing quietly", e);
@@ -451,6 +454,8 @@ public class BaseBundle {
                 throw e;
             }
         } finally {
+            recycleParcel &= (numLazyValues[0] == 0);
+
             mMap = map;
             if (recycleParcel) {
                 recycleParcel(parcelledData);
diff --git a/core/java/android/os/Parcel.java b/core/java/android/os/Parcel.java
index f6a3fed08d7b..69356a5a6bf5 100644
--- a/core/java/android/os/Parcel.java
+++ b/core/java/android/os/Parcel.java
@@ -5212,7 +5212,7 @@ public final class Parcel {
 
     private void readArrayMapInternal(@NonNull ArrayMap<? super String, Object> outVal,
             int size, @Nullable ClassLoader loader) {
-        readArrayMap(outVal, size, /* sorted */ true, /* lazy */ false, loader);
+        readArrayMap(outVal, size, /* sorted */ true, /* lazy */ false, loader, null);
     }
 
     /**
@@ -5222,17 +5222,16 @@ public final class Parcel {
      * @param lazy   Whether to populate the map with lazy {@link Supplier} objects for
      *               length-prefixed values. See {@link Parcel#readLazyValue(ClassLoader)} for more
      *               details.
-     * @return whether the parcel can be recycled or not.
+     * @param lazyValueCount number of lazy values added here
      * @hide
      */
-    boolean readArrayMap(ArrayMap<? super String, Object> map, int size, boolean sorted,
-            boolean lazy, @Nullable ClassLoader loader) {
-        boolean recycle = true;
+    void readArrayMap(ArrayMap<? super String, Object> map, int size, boolean sorted,
+            boolean lazy, @Nullable ClassLoader loader, int[] lazyValueCount) {
         while (size > 0) {
             String key = readString();
             Object value = (lazy) ? readLazyValue(loader) : readValue(loader);
             if (value instanceof LazyValue) {
-                recycle = false;
+                lazyValueCount[0]++;
             }
             if (sorted) {
                 map.append(key, value);
@@ -5244,7 +5243,6 @@ public final class Parcel {
         if (sorted) {
             map.validate();
         }
-        return recycle;
     }
 
     /**
-- 
2.48.1.262.g85cc9f2d1e-goog

