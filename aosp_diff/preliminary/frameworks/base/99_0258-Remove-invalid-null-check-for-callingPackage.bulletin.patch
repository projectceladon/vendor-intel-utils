From b285860ea4841208d2997bac643fb47e50d13668 Mon Sep 17 00:00:00 2001
From: Sumedh Sen <sumedhsen@google.com>
Date: Wed, 5 Mar 2025 14:42:42 -0800
Subject: [PATCH] Remove invalid null check for callingPackage

getLaunchedFromPackage() will never return null. As such, remove the null check while processing a session based install

Bug: 399881067
Bug: 364604008
Test: atest CtsPackageInstallTestCases CtsAppOps2TestCases
(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:d733423089a4006c2cdd2357be6cf176e84ea150)
Merged-In: I4dc5fc8108c1ffffde82a5d774d4eb3805fbf0a3
Change-Id: I4dc5fc8108c1ffffde82a5d774d4eb3805fbf0a3
---
 .../packageinstaller/InstallStart.java        | 20 ++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

diff --git a/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java b/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java
index 5f03410c8d5d..6196dfaefc30 100644
--- a/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java
+++ b/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java
@@ -27,6 +27,7 @@ import android.content.Intent;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageInstaller;
+import android.content.pm.PackageInstaller.SessionInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ProviderInfo;
 import android.net.Uri;
@@ -65,14 +66,15 @@ public class InstallStart extends Activity {
         // If the activity was started via a PackageInstaller session, we retrieve the calling
         // package from that session
         final int sessionId = (isSessionInstall
-                ? intent.getIntExtra(PackageInstaller.EXTRA_SESSION_ID, -1)
-                : -1);
-        if (callingPackage == null && sessionId != -1) {
-            PackageInstaller packageInstaller = getPackageManager().getPackageInstaller();
+                ? intent.getIntExtra(PackageInstaller.EXTRA_SESSION_ID, SessionInfo.INVALID_ID)
+                : SessionInfo.INVALID_ID);
+        if (sessionId != SessionInfo.INVALID_ID) {
+            PackageInstaller packageInstaller = mPackageManager.getPackageInstaller();
             PackageInstaller.SessionInfo sessionInfo = packageInstaller.getSessionInfo(sessionId);
-            callingPackage = (sessionInfo != null) ? sessionInfo.getInstallerPackageName() : null;
-            callingAttributionTag =
-                    (sessionInfo != null) ? sessionInfo.getInstallerAttributionTag() : null;
+            if (sessionInfo != null) {
+                callingPackage = sessionInfo.getInstallerPackageName();
+                callingAttributionTag = sessionInfo.getInstallerAttributionTag();
+            }
         }
 
         final ApplicationInfo sourceInfo = getSourceInfo(callingPackage);
@@ -173,7 +175,7 @@ public class InstallStart extends Activity {
     private ApplicationInfo getSourceInfo(@Nullable String callingPackage) {
         if (callingPackage != null) {
             try {
-                return getPackageManager().getApplicationInfo(callingPackage, 0);
+                return mPackageManager.getApplicationInfo(callingPackage, 0);
             } catch (PackageManager.NameNotFoundException ex) {
                 // ignore
             }
@@ -220,7 +222,7 @@ public class InstallStart extends Activity {
     }
 
     private boolean isSystemDownloadsProvider(int uid) {
-        final ProviderInfo downloadProviderPackage = getPackageManager().resolveContentProvider(
+        final ProviderInfo downloadProviderPackage = mPackageManager.resolveContentProvider(
                 DOWNLOADS_AUTHORITY, 0);
         if (downloadProviderPackage == null) {
             // There seems to be no currently enabled downloads provider on the system.
-- 
2.49.0.395.g12beb8f557-goog

