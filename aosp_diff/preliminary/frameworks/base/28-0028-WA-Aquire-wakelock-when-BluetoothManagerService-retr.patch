From c0addaa5a27f7548c47796c4366c490efdae194d Mon Sep 17 00:00:00 2001
From: Aiswarya Cyriac <aiswarya.cyriac@intel.com>
Date: Tue, 15 Jun 2021 11:43:18 +0530
Subject: [PATCH] [WA] Aquire wakelock when BluetoothManagerService retries
 enable BT

com.android.bluetooth process crashes on system resume if power is
cut to the bluetooth chip during suspend. If system suspends again
before bluetooth is enabled, the crash repeats, and which will result
in the subsequent retries to fail. After many suspsed resume cycles
the retry counter will exceed the maximum limit and BT will remain in
Off state.

Workaround solution is to acquire wakelock when the service tries to
restart BT

Tracked-On: OAM-97107
Signed-off-by: Aiswarya Cyriac <aiswarya.cyriac@intel.com>
---
 .../server/BluetoothManagerService.java       | 19 +++++++++++++++++--
 1 file changed, 17 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/BluetoothManagerService.java b/services/core/java/com/android/server/BluetoothManagerService.java
index 9ce7cf27f9ff..3c8f60d65506 100644
--- a/services/core/java/com/android/server/BluetoothManagerService.java
+++ b/services/core/java/com/android/server/BluetoothManagerService.java
@@ -54,6 +54,8 @@ import android.os.Handler;
 import android.os.IBinder;
 import android.os.Looper;
 import android.os.Message;
+import android.os.PowerManager;
+import android.os.PowerManager.WakeLock;
 import android.os.Process;
 import android.os.RemoteCallbackList;
 import android.os.RemoteException;
@@ -173,6 +175,8 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
     private boolean mUnbinding;
     private int mWaitForEnableRetry;
     private int mWaitForDisableRetry;
+    private PowerManager mPowerManager;
+    private WakeLock mPartialWakeLock;
 
     private BluetoothAirplaneModeListener mBluetoothAirplaneModeListener;
 
@@ -461,7 +465,7 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
 
         mIsHearingAidProfileSupported = context.getResources()
                 .getBoolean(com.android.internal.R.bool.config_hearing_aid_profile_supported);
-
+        mPowerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
         // TODO: We need a more generic way to initialize the persist keys of FeatureFlagUtils
         String value = SystemProperties.get(FeatureFlagUtils.PERSIST_PREFIX + FeatureFlagUtils.HEARING_AID_SETTINGS);
         if (!TextUtils.isEmpty(value)) {
@@ -512,6 +516,8 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
             Slog.w(TAG, "Unable to resolve SystemUI's UID.");
         }
         mSystemUiUid = systemUiUid;
+        mPartialWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
+        mPartialWakeLock.setReferenceCounted(false);
     }
 
     /**
@@ -1759,7 +1765,6 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
                     }
                     mHandler.removeMessages(MESSAGE_RESTART_BLUETOOTH_SERVICE);
                     mEnable = true;
-
                     // Use service interface to get the exact state
                     try {
                         mBluetoothLock.readLock().lock();
@@ -2058,6 +2063,9 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
                             Slog.w(TAG, "bluetooth is recovered from error");
                             mErrorRecoveryRetryCounter = 0;
                         }
+                        if (mPartialWakeLock.isHeld()) {
+                            mPartialWakeLock.release();
+                        }
                     }
                     break;
                 }
@@ -2115,6 +2123,9 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
                 }
                 case MESSAGE_RESTART_BLUETOOTH_SERVICE: {
                     mErrorRecoveryRetryCounter++;
+                    if (!mPartialWakeLock.isHeld()) {
+                        mPartialWakeLock.acquire();
+                    }
                     Slog.d(TAG, "MESSAGE_RESTART_BLUETOOTH_SERVICE: retry count="
                             + mErrorRecoveryRetryCounter);
                     if (mErrorRecoveryRetryCounter < MAX_ERROR_RESTART_RETRIES) {
@@ -2127,6 +2138,10 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
                         handleEnable(mQuietEnable);
                     } else {
                         Slog.e(TAG, "Reach maximum retry to restart Bluetooth!");
+                        if (mPartialWakeLock.isHeld()) {
+                            Slog.d(TAG,"Releasing the partial wakelock as maximum retry exceeded");
+                            mPartialWakeLock.release();
+                        }
                     }
                     break;
                 }
-- 
2.31.1

