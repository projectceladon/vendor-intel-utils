From 580d482e426312e5e1069aa6350d56c45df02379 Mon Sep 17 00:00:00 2001
From: Jeff Chang <chengjeff@google.com>
Date: Tue, 8 Feb 2022 14:06:14 +0800
Subject: [PATCH] Do not resume activity if behind a translucent task

The top-focusable activity resides in the RESUMED state while the app
process is newly created and attached. The behavior may enable UI
hijacking attacks against apps implementing authentication.

This CL disallows the system to resume the activity for the case if it
is not visible or is occluded by other translucent tasks.

Bug: 211481342
Test: atest CtsWindowManagerDeviceTestCases:ActivityLifecycleTests
Change-Id: I7903494cf928b5b5613700262b7c5fff10f3c5a0
(cherry picked from commit 43b8bcc01474bce480642acae2c554393c3bfb6a)
Merged-In: I7903494cf928b5b5613700262b7c5fff10f3c5a0
---
 .../server/wm/EnsureActivitiesVisibleHelper.java      |  2 +-
 .../com/android/server/wm/RootWindowContainer.java    |  5 +++--
 services/core/java/com/android/server/wm/Task.java    | 11 +++++++++++
 3 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java b/services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java
index aa76a07bc9c7..7b7fcc4e8f8b 100644
--- a/services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java
+++ b/services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java
@@ -93,7 +93,7 @@ class EnsureActivitiesVisibleHelper {
         // activities are actually behind other fullscreen activities, but still required
         // to be visible (such as performing Recents animation).
         final boolean resumeTopActivity = mTop != null && !mTop.mLaunchTaskBehind
-                && mContiner.isTopActivityFocusable()
+                && mContiner.canBeResumed(starting)
                 && (starting == null || !starting.isDescendantOf(mContiner));
 
         final PooledConsumer f = PooledLambda.obtainConsumer(
diff --git a/services/core/java/com/android/server/wm/RootWindowContainer.java b/services/core/java/com/android/server/wm/RootWindowContainer.java
index 1c1360f6f389..de60546db038 100644
--- a/services/core/java/com/android/server/wm/RootWindowContainer.java
+++ b/services/core/java/com/android/server/wm/RootWindowContainer.java
@@ -1971,8 +1971,9 @@ class RootWindowContainer extends WindowContainer<DisplayContent>
 
         try {
             if (mStackSupervisor.realStartActivityLocked(r, app,
-                    top == r && r.isFocusable() /*andResume*/, true /*checkConfig*/)) {
-                mTmpBoolean = true;
+                    top == r && r.getTask().canBeResumed(r) /*andResume*/,
+                     true /*checkConfig*/)) {
+		mTmpBoolean = true;
             }
         } catch (RemoteException e) {
             Slog.w(TAG, "Exception in new application when starting activity "
diff --git a/services/core/java/com/android/server/wm/Task.java b/services/core/java/com/android/server/wm/Task.java
index b19b8c1ce10b..2da9c8db9ff8 100644
--- a/services/core/java/com/android/server/wm/Task.java
+++ b/services/core/java/com/android/server/wm/Task.java
@@ -3660,6 +3660,17 @@ class Task extends WindowContainer<WindowContainer> {
         return getVisibility(starting) != STACK_VISIBILITY_INVISIBLE;
     }
 
+    /**
+     * Returns {@code true} is the activity in this Task can be resumed.
+     *
+     * @param starting The currently starting activity or {@code null} if there is none.
+     */
+    boolean canBeResumed(@Nullable ActivityRecord starting) {
+        // No need to resume activity in Task that is not visible.
+        return isTopActivityFocusable()
+                && getVisibility(starting) == STACK_VISIBILITY_VISIBLE;
+    }
+
     /**
      * Returns true if the task should be visible.
      *
-- 
2.33.1

