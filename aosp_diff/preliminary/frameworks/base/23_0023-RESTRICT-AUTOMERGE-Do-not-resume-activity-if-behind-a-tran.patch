From 29765b7d0ff4e4195232208a2ddf7342349bb2b2 Mon Sep 17 00:00:00 2001
From: Jeff Chang <chengjeff@google.com>
Date: Tue, 25 Jan 2022 11:57:46 +0800
Subject: [PATCH] [RESTRICT AUTOMERGE] Do not resume activity if behind a
 translucent task

The top-focusable activity resides in the RESUMED state while the app
process is newly created and attached. The behavior may enable UI
hijacking attacks against apps implementing authentication.

This CL disallows the system to resume the activity for the case if it
is not visible or is occluded by other translucent tasks.

Bug: 211481342
Test: atest CtsWindowManagerDeviceTestCases:ActivityLifecycleTests
Change-Id: I7903494cf928b5b5613700262b7c5fff10f3c5a0
(cherry picked from commit 51d287d831364cb158330e132cd11b4c596c04c2)
Merged-In: I7903494cf928b5b5613700262b7c5fff10f3c5a0
---
 .../server/wm/EnsureActivitiesVisibleHelper.java      |  2 +-
 .../com/android/server/wm/RootWindowContainer.java    |  3 ++-
 services/core/java/com/android/server/wm/Task.java    | 11 +++++++++++
 3 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java b/services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java
index 316c20ba5c4..e08816117f2 100644
--- a/services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java
+++ b/services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java
@@ -93,7 +93,7 @@ class EnsureActivitiesVisibleHelper {
         // activities are actually behind other fullscreen activities, but still required
         // to be visible (such as performing Recents animation).
         final boolean resumeTopActivity = mTop != null && !mTop.mLaunchTaskBehind
-                && mTask.isTopActivityFocusable()
+                && mTask.canBeResumed(starting)
                 && (starting == null || !starting.isDescendantOf(mTask));
 
         mTask.forAllActivities(a -> {
diff --git a/services/core/java/com/android/server/wm/RootWindowContainer.java b/services/core/java/com/android/server/wm/RootWindowContainer.java
index bd688a618c6..01c1989a80c 100644
--- a/services/core/java/com/android/server/wm/RootWindowContainer.java
+++ b/services/core/java/com/android/server/wm/RootWindowContainer.java
@@ -1948,7 +1948,8 @@ class RootWindowContainer extends WindowContainer<DisplayContent>
 
         try {
             if (mTaskSupervisor.realStartActivityLocked(r, app,
-                    top == r && r.isFocusable() /*andResume*/, true /*checkConfig*/)) {
+                    top == r && r.getTask().canBeResumed(r) /*andResume*/,
+                    true /*checkConfig*/)) {
                 mTmpBoolean = true;
             }
         } catch (RemoteException e) {
diff --git a/services/core/java/com/android/server/wm/Task.java b/services/core/java/com/android/server/wm/Task.java
index ced5af126e4..039c3b702bd 100644
--- a/services/core/java/com/android/server/wm/Task.java
+++ b/services/core/java/com/android/server/wm/Task.java
@@ -4213,6 +4213,17 @@ class Task extends WindowContainer<WindowContainer> {
         return getVisibility(starting) != TASK_VISIBILITY_INVISIBLE;
     }
 
+    /**
+     * Returns {@code true} is the activity in this Task can be resumed.
+     *
+     * @param starting The currently starting activity or {@code null} if there is none.
+     */
+    boolean canBeResumed(@Nullable ActivityRecord starting) {
+        // No need to resume activity in Task that is not visible.
+        return isTopActivityFocusable()
+                && getVisibility(starting) == TASK_VISIBILITY_VISIBLE;
+    }
+
     /**
      * Returns true if the task should be visible.
      *
-- 
2.35.1.894.gb6a874cedc-goog

