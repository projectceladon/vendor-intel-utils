From 942884abf148426e948774b4857052da77ef77b3 Mon Sep 17 00:00:00 2001
From: Sumedh Sen <sumedhsen@google.com>
Date: Wed, 5 Mar 2025 14:42:42 -0800
Subject: [PATCH] Remove invalid null check for callingPackage

getLaunchedFromPackage() will never return null. As such, remove the
null check while processing a session based install

Bug: 399881067
Bug: 364604008
Test: atest CtsPackageInstallTestCases CtsAppOps2TestCases
(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:bb685f98972b3e35727ca1444bd8e9937a15aedf)
Merged-In: If214150e6811b6ae833d63b9e8831ee027673628
Change-Id: If214150e6811b6ae833d63b9e8831ee027673628
---
 .../packageinstaller/InstallStart.java        | 19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

diff --git a/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java b/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java
index e70acc314658..b89e27dfab86 100644
--- a/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java
+++ b/packages/PackageInstaller/src/com/android/packageinstaller/InstallStart.java
@@ -27,6 +27,7 @@ import android.content.Intent;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageInstaller;
+import android.content.pm.PackageInstaller.SessionInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ProviderInfo;
 import android.net.Uri;
@@ -78,14 +79,14 @@ public class InstallStart extends Activity {
         // If the activity was started via a PackageInstaller session, we retrieve the calling
         // package from that session
         final int sessionId = (isSessionInstall
-                ? intent.getIntExtra(PackageInstaller.EXTRA_SESSION_ID, -1)
-                : -1);
-        if (callingPackage == null && sessionId != -1) {
-            PackageInstaller packageInstaller = getPackageManager().getPackageInstaller();
+                ? intent.getIntExtra(PackageInstaller.EXTRA_SESSION_ID, SessionInfo.INVALID_ID)
+                : SessionInfo.INVALID_ID);
+        if (sessionId != SessionInfo.INVALID_ID) {
+            PackageInstaller packageInstaller = mPackageManager.getPackageInstaller();
             PackageInstaller.SessionInfo sessionInfo = packageInstaller.getSessionInfo(sessionId);
-            callingPackage = (sessionInfo != null) ? sessionInfo.getInstallerPackageName() : null;
-            callingAttributionTag =
-                    (sessionInfo != null) ? sessionInfo.getInstallerAttributionTag() : null;
+            if (sessionInfo != null) {
+                callingAttributionTag = sessionInfo.getInstallerAttributionTag();
+            }
         }
 
         final ApplicationInfo sourceInfo = getSourceInfo(callingPackage);
@@ -233,7 +234,7 @@ public class InstallStart extends Activity {
     private ApplicationInfo getSourceInfo(@Nullable String callingPackage) {
         if (callingPackage != null) {
             try {
-                return getPackageManager().getApplicationInfo(callingPackage, 0);
+                return mPackageManager.getApplicationInfo(callingPackage, 0);
             } catch (PackageManager.NameNotFoundException ex) {
                 // ignore
             }
@@ -242,7 +243,7 @@ public class InstallStart extends Activity {
     }
 
     private boolean isSystemDownloadsProvider(int uid) {
-        final ProviderInfo downloadProviderPackage = getPackageManager().resolveContentProvider(
+        final ProviderInfo downloadProviderPackage = mPackageManager.resolveContentProvider(
                 DOWNLOADS_AUTHORITY, 0);
         if (downloadProviderPackage == null) {
             // There seems to be no currently enabled downloads provider on the system.
-- 
2.49.0.395.g12beb8f557-goog

