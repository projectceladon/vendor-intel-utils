From f84416f2f41d906712e96a179130e8b3e87590d9 Mon Sep 17 00:00:00 2001
From: buildslave <ctbbot@intel.com>
Date: Tue, 9 Feb 2021 08:06:14 +0000
Subject: [PATCH] Debugging issue

Tracked-On: OAM-95316
Signed-off-by: yaravapa <yasoda.aravapalli@intel.com>
---
 core/jni/AndroidRuntime.cpp | 5 +++--
 core/jni/fd_utils.cpp       | 6 ++++++
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/core/jni/AndroidRuntime.cpp b/core/jni/AndroidRuntime.cpp
index 053c2cc0fda..e89b6fe9e69 100644
--- a/core/jni/AndroidRuntime.cpp
+++ b/core/jni/AndroidRuntime.cpp
@@ -16,7 +16,8 @@
 
 #define ATRACE_TAG ATRACE_TAG_DALVIK
 #define LOG_TAG "AndroidRuntime"
-#define LOG_NDEBUG 1
+//#define LOG_NDEBUG 1
+#define LOG_NDEBUG 0
 
 #include <android-base/macros.h>
 #include <android-base/properties.h>
@@ -1137,7 +1138,7 @@ jstring AndroidRuntime::NewStringLatin1(JNIEnv* env, const char* bytes) {
  */
 void AndroidRuntime::start(const char* className, const Vector<String8>& options, bool zygote)
 {
-    ALOGD(">>>>>> START %s uid %d <<<<<<\n",
+    ALOGV(">>>>>> AHS:: Runtime START %s uid %d <<<<<<\n",
             className != NULL ? className : "(unknown)", getuid());
 
     static const String8 startSystemServer("start-system-server");
diff --git a/core/jni/fd_utils.cpp b/core/jni/fd_utils.cpp
index c72668f84fb..2c16c94d7ea 100644
--- a/core/jni/fd_utils.cpp
+++ b/core/jni/fd_utils.cpp
@@ -31,6 +31,10 @@
 #include <android-base/stringprintf.h>
 #include <android-base/strings.h>
 
+#define LOG_TAG "AHS"
+#define LOG_NDEBUG 0
+#include <utils/Log.h>
+
 // Static whitelist of open paths that the zygote is allowed to keep open.
 static const char* kPathWhitelist[] = {
         "/apex/com.android.conscrypt/javalib/conscrypt.jar",
@@ -210,6 +214,7 @@ class FileDescriptorInfo {
 // static
 FileDescriptorInfo* FileDescriptorInfo::CreateFromFd(int fd, fail_fn_t fail_fn) {
   struct stat f_stat;
+  ALOGV("AHS:: In function CreateFromFd");
   // This should never happen; the zygote should always have the right set
   // of permissions required to stat all its open files.
   if (TEMP_FAILURE_RETRY(fstat(fd, &f_stat)) == -1) {
@@ -267,6 +272,7 @@ FileDescriptorInfo* FileDescriptorInfo::CreateFromFd(int fd, fail_fn_t fail_fn)
                                         strerror(errno)));
   }
 
+  ALOGV("AHS:: Whitelisted fd = %d, path = %s", fd, file_path.c_str());
   if (!whitelist->IsAllowed(file_path)) {
     fail_fn(android::base::StringPrintf("Not whitelisted (%d): %s", fd, file_path.c_str()));
   }
-- 
2.26.0

