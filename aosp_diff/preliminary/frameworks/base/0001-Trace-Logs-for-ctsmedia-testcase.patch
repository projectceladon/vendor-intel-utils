From db3c7fa689df371288ec8278be1e12d50fdea560 Mon Sep 17 00:00:00 2001
From: ahs <amrita.h.s@intel.com>
Date: Wed, 23 Dec 2020 11:58:30 +0530
Subject: [PATCH] Trace Logs for ctsmedia testcase

Tracked-On:
Signed-off-by: ahs <amrita.h.s@intel.com>
---
 media/java/android/media/ThumbnailUtils.java       |  4 ++++
 media/jni/android_media_MediaMetadataRetriever.cpp | 12 ++++++++++--
 2 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/media/java/android/media/ThumbnailUtils.java b/media/java/android/media/ThumbnailUtils.java
index fbf38dc4d80..1975c722cf5 100644
--- a/media/java/android/media/ThumbnailUtils.java
+++ b/media/java/android/media/ThumbnailUtils.java
@@ -273,6 +273,7 @@ public class ThumbnailUtils {
                 || mimeType.equals("image/heif-sequence")
                 || mimeType.equals("image/heic")
                 || mimeType.equals("image/heic-sequence")) {
+		Log.i("AHS", "if - 1");
             try (MediaMetadataRetriever retriever = new MediaMetadataRetriever()) {
                 retriever.setDataSource(file.getAbsolutePath());
                 bitmap = retriever.getThumbnailImageAtIndex(-1,
@@ -286,6 +287,7 @@ public class ThumbnailUtils {
         if (bitmap == null && exif != null) {
             final byte[] raw = exif.getThumbnailBytes();
             if (raw != null) {
+		Log.i("AHS", "if - 2");
                 try {
                     bitmap = ImageDecoder.decodeBitmap(ImageDecoder.createSource(raw), resizer);
                 } catch (ImageDecoder.DecodeException e) {
@@ -298,6 +300,7 @@ public class ThumbnailUtils {
         if (signal != null) signal.throwIfCanceled();
 
         if (bitmap == null) {
+            Log.i("AHS", "if - 3");
             bitmap = ImageDecoder.decodeBitmap(ImageDecoder.createSource(file), resizer);
             // Use ImageDecoder to do full file decoding, we don't need to handle the orientation
             return bitmap;
@@ -305,6 +308,7 @@ public class ThumbnailUtils {
 
         // Transform the bitmap if the orientation of the image is not 0.
         if (orientation != 0 && bitmap != null) {
+            Log.i("AHS", "if - 4");
             final int width = bitmap.getWidth();
             final int height = bitmap.getHeight();
 
diff --git a/media/jni/android_media_MediaMetadataRetriever.cpp b/media/jni/android_media_MediaMetadataRetriever.cpp
index 1c9b349a7ee..b5b7f1e2420 100644
--- a/media/jni/android_media_MediaMetadataRetriever.cpp
+++ b/media/jni/android_media_MediaMetadataRetriever.cpp
@@ -260,7 +260,7 @@ static void rotate(T *dst, const T *src, size_t width, size_t height, int angle)
 static jobject getBitmapFromVideoFrame(
         JNIEnv *env, VideoFrame *videoFrame, jint dst_width, jint dst_height,
         AndroidBitmapFormat outColorType) {
-    ALOGV("getBitmapFromVideoFrame: dimension = %dx%d, displaySize = %dx%d, bytes = %d",
+    ALOGV("AHS:: getBitmapFromVideoFrame: dimension = %dx%d, displaySize = %dx%d, bytes = %d",
             videoFrame->mWidth,
             videoFrame->mHeight,
             videoFrame->mDisplayWidth,
@@ -272,12 +272,14 @@ static jobject getBitmapFromVideoFrame(
     uint32_t width, height, displayWidth, displayHeight;
     bool swapWidthAndHeight = false;
     if (videoFrame->mRotationAngle == 90 || videoFrame->mRotationAngle == 270) {
+	ALOGV("AHS:: 1 - If");    
         width = videoFrame->mHeight;
         height = videoFrame->mWidth;
         swapWidthAndHeight = true;
         displayWidth = videoFrame->mDisplayHeight;
         displayHeight = videoFrame->mDisplayWidth;
     } else {
+	ALOGV("AHS:: 1 - else");    
         width = videoFrame->mWidth;
         height = videoFrame->mHeight;
         displayWidth = videoFrame->mDisplayWidth;
@@ -301,12 +303,14 @@ static jobject getBitmapFromVideoFrame(
     graphics::Bitmap bitmap(env, jBitmap);
 
     if (outColorType == ANDROID_BITMAP_FORMAT_RGB_565) {
+	ALOGV("AHS:: 2 - If");    
         rotate((uint16_t*)bitmap.getPixels(),
                (uint16_t*)((char*)videoFrame + sizeof(VideoFrame)),
                videoFrame->mWidth,
                videoFrame->mHeight,
                videoFrame->mRotationAngle);
     } else {
+	ALOGV("AHS:: 2 - else");    
         rotate((uint32_t*)bitmap.getPixels(),
                (uint32_t*)((char*)videoFrame + sizeof(VideoFrame)),
                videoFrame->mWidth,
@@ -431,7 +435,7 @@ static jobject android_media_MediaMetadataRetriever_getImageAtIndex(
 static jobject android_media_MediaMetadataRetriever_getThumbnailImageAtIndex(
         JNIEnv *env, jobject thiz, jint index, jobject params, jint targetSize, jint maxPixels)
 {
-    ALOGV("getThumbnailImageAtIndex: index %d", index);
+    ALOGV("AHS:: getThumbnailImageAtIndex: index %d", index);
 
     sp<MediaMetadataRetriever> retriever = getRetriever(env, thiz);
     if (retriever == 0) {
@@ -440,6 +444,7 @@ static jobject android_media_MediaMetadataRetriever_getThumbnailImageAtIndex(
     }
 
     AndroidBitmapFormat colorFormat = getColorFormat(env, params);
+    ALOGV("AHS:: colorFormat = %d", colorFormat);
     jint dst_width = -1, dst_height = -1;
 
     // Call native method to retrieve an image
@@ -452,6 +457,7 @@ static jobject android_media_MediaMetadataRetriever_getThumbnailImageAtIndex(
         //       Either document why it is safe in this case or address the
         //       issue (e.g. by copying).
         videoFrame = static_cast<VideoFrame *>(frameMemory->unsecurePointer());
+	ALOGV("AHS:: videoFrame = %p", videoFrame);
         int32_t thumbWidth = videoFrame->mWidth;
         int32_t thumbHeight = videoFrame->mHeight;
         videoFrame = NULL;
@@ -462,6 +468,7 @@ static jobject android_media_MediaMetadataRetriever_getThumbnailImageAtIndex(
         // downscale which could take long.
         if (thumbWidth >= targetSize || thumbHeight >= targetSize
                 || thumbPixels * 6 >= maxPixels) {
+		ALOGV("AHS:: Using thumbnail");
             frameMemory = retriever->getImageAtIndex(
                     index, colorFormat, false /*metaOnly*/, true /*thumbnail*/);
             // TODO: Using unsecurePointer() has some associated security pitfalls
@@ -469,6 +476,7 @@ static jobject android_media_MediaMetadataRetriever_getThumbnailImageAtIndex(
             //       Either document why it is safe in this case or address the
             //       issue (e.g. by copying).
             videoFrame = static_cast<VideoFrame *>(frameMemory->unsecurePointer());
+	    ALOGV("AHS:: videoFrame of thumbnail = %p", videoFrame);
 
             if (thumbPixels > maxPixels) {
                 int downscale = ceil(sqrt(thumbPixels / (float)maxPixels));
-- 
2.17.1

