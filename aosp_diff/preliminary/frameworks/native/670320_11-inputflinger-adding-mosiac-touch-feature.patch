From 47f357bf9e030d4f71be8242b8d5a6d71e749857 Mon Sep 17 00:00:00 2001
From: rajucm <raju.mallikarjun.chegaraddi@intel.com>
Date: Mon, 8 Jul 2019 20:33:31 +0530
Subject: [PATCH 1/5] inputflinger: adding mosiac-touch feature.

Features:
- MoasicTouchSettings class for multiple displays
- Multiple Touch Screens - Gesturing across two display boundaries
- corrected touch translate factor calculation
- Code cleanup

Change-Id: I1ed218d1cf03cfcacc83c7909072593d785e9061
Tracked-On:
Signed-off-by: Mallikarjun Chegaraddi, Raju <raju.mallikarjun.chegaraddi@intel.com>
Signed-off-by: Jaikrishna, Nemallapudi <nemallapudi.jaikrishna@intel.com>
---
 services/inputflinger/Android.bp              |   2 +
 services/inputflinger/InputReader.cpp         |  40 +++++++
 services/inputflinger/InputReader.h           |   6 +
 services/inputflinger/MosaicTouchSettings.cpp | 107 ++++++++++++++++++
 services/inputflinger/MosaicTouchSettings.h   |  67 +++++++++++
 5 files changed, 222 insertions(+)
 create mode 100644 services/inputflinger/MosaicTouchSettings.cpp
 create mode 100644 services/inputflinger/MosaicTouchSettings.h

diff --git a/services/inputflinger/Android.bp b/services/inputflinger/Android.bp
index 8dd4d1df6..949de65f6 100644
--- a/services/inputflinger/Android.bp
+++ b/services/inputflinger/Android.bp
@@ -20,6 +20,7 @@ cc_defaults {
         "-Werror",
         "-Wno-unused-parameter",
         "-Wthread-safety",
+        "-DENABLE_MOSAIC_TOUCH_FEATURE"
     ],
 }

@@ -76,6 +77,7 @@ cc_library_shared {
         "InputReader.cpp",
         "InputReaderFactory.cpp",
         "TouchVideoDevice.cpp",
+        "MosaicTouchSettings.cpp",
     ],

     shared_libs: [
diff --git a/services/inputflinger/InputReader.cpp b/services/inputflinger/InputReader.cpp
index a45b8a56c..edd75edab 100644
--- a/services/inputflinger/InputReader.cpp
+++ b/services/inputflinger/InputReader.cpp
@@ -43,6 +43,9 @@
 #define DEBUG_STYLUS_FUSION 0

 #include "InputReader.h"
+#if defined(ENABLE_MOSAIC_TOUCH_FEATURE)
+#include "MosaicTouchSettings.h"
+#endif

 #include <errno.h>
 #include <inttypes.h>
@@ -3656,6 +3659,17 @@ void TouchInputMapper::configureSurface(nsecs_t when, bool* outResetNeeded) {
         mPointerController.clear();
     }

+#if defined(ENABLE_MOSAIC_TOUCH_FEATURE)
+    /* check if mosaic mode enabled & touch device for mosic mode
+     * configure surface left & surface width os the device based
+     * on position and device count.
+     */
+    if (MosaicTouchSettings::getInstance()->isEnabled() &&
+        MosaicTouchSettings::getInstance()->isConfigured())
+        MosaicTouchSettings::getInstance()->configureWxL(getDeviceLocation(),
+                                            mSurfaceWidth, mSurfaceLeft);
+#endif
+
     if (viewportChanged || deviceModeChanged) {
         ALOGI("Device reconfigured: id=%d, name='%s', size %dx%d, orientation %d, mode %d, "
                 "display id %d",
@@ -3665,8 +3679,24 @@ void TouchInputMapper::configureSurface(nsecs_t when, bool* outResetNeeded) {
         // Configure X and Y factors.
         mXScale = float(mSurfaceWidth) / rawWidth;
         mYScale = float(mSurfaceHeight) / rawHeight;
+
+#if defined(ENABLE_MOSAIC_TOUCH_FEATURE)
+        /* Configure X & Y translate factors in mosaic modes.
+         * if mosiac mode enabled calculate top & left offset values
+         * for commected mosaic touch devices else no change
+         */
+        if (MosaicTouchSettings::getInstance()->isEnabled() &&
+            MosaicTouchSettings::getInstance()->isConfigured()) {
+            mXTranslate += mSurfaceLeft;
+            mYTranslate += mSurfaceTop;
+        } else {
+            mXTranslate = -mSurfaceLeft;
+            mYTranslate = -mSurfaceTop;
+        }
+#else
         mXTranslate = -mSurfaceLeft;
         mYTranslate = -mSurfaceTop;
+#endif
         mXPrecision = 1.0f / mXScale;
         mYPrecision = 1.0f / mYScale;

@@ -4321,6 +4351,16 @@ void TouchInputMapper::reportEventForStatistics(nsecs_t evdevTime) {
 }

 void TouchInputMapper::process(const RawEvent* rawEvent) {
+#if defined(ENABLE_MOSAIC_TOUCH_FEATURE)
+    /* check if mosaic mode enabled & configure if user wants
+     * to reconfigure touch device position. add/update device
+     * location in device list on touch each device.
+     */
+    if (MosaicTouchSettings::getInstance()->isEnabled() &&
+        !MosaicTouchSettings::getInstance()->isConfigured())
+        MosaicTouchSettings::getInstance()->configure(getDeviceLocation());
+#endif
+
     mCursorButtonAccumulator.process(rawEvent);
     mCursorScrollAccumulator.process(rawEvent);
     mTouchButtonAccumulator.process(rawEvent);
diff --git a/services/inputflinger/InputReader.h b/services/inputflinger/InputReader.h
index 9777779e7..8b95dd419 100644
--- a/services/inputflinger/InputReader.h
+++ b/services/inputflinger/InputReader.h
@@ -254,6 +254,9 @@ public:
     inline int32_t getGeneration() const { return mGeneration; }
     inline const std::string getName() const { return mIdentifier.name; }
     inline const std::string getDescriptor() { return mIdentifier.descriptor; }
+#if defined(ENABLE_MOSAIC_TOUCH_FEATURE)
+    inline const std::string getLocation() const { return mIdentifier.location; }
+#endif
     inline uint32_t getClasses() const { return mClasses; }
     inline uint32_t getSources() const { return mSources; }

@@ -751,6 +754,9 @@ public:
     inline InputDevice* getDevice() { return mDevice; }
     inline int32_t getDeviceId() { return mDevice->getId(); }
     inline const std::string getDeviceName() { return mDevice->getName(); }
+#if defined(ENABLE_MOSAIC_TOUCH_FEATURE)
+    inline const std::string getDeviceLocation() { return mDevice->getLocation(); }
+#endif
     inline InputReaderContext* getContext() { return mContext; }
     inline InputReaderPolicyInterface* getPolicy() { return mContext->getPolicy(); }
     inline InputListenerInterface* getListener() { return mContext->getListener(); }
diff --git a/services/inputflinger/MosaicTouchSettings.cpp b/services/inputflinger/MosaicTouchSettings.cpp
new file mode 100644
index 000000000..41dab347d
--- /dev/null
+++ b/services/inputflinger/MosaicTouchSettings.cpp
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * mosaic touchsettings implementation by Intel.
+ * author: rajucm <raju.mallikarjun.chegaraddi@intel.com>
+ */
+
+#include "MosaicTouchSettings.h"
+
+namespace android {
+
+MosaicTouchSettings* MosaicTouchSettings::mMosaicSettings = NULL;
+
+MosaicTouchSettings* MosaicTouchSettings::getInstance() {
+    if (!mMosaicSettings)
+        mMosaicSettings = new MosaicTouchSettings;
+
+    return mMosaicSettings;
+}
+
+MosaicTouchSettings::MosaicTouchSettings() {
+    property_get(PROP_MOSAIC_MODE, prop_value, "0");
+    mState = atoi(prop_value);
+
+    property_get(PROP_MOSAIC_CONFIGURED, prop_value, "1");
+    mConfigured = atoi(prop_value);
+
+    property_get(PROP_MOSAIC_DEVICE_NUM, prop_value, "2");
+    mDevCount = atoi(prop_value);
+
+    for (int idx = 0; idx < mDevCount; idx++) {
+        string prop_name = PROP_MOSAIC_DEVICE_ID + std::to_string(idx);
+        property_get(prop_name.c_str(), prop_value, NULL);
+        mdevList.push_back(string(prop_value));
+    }
+
+    dump(string("mosiac::constr"));
+}
+
+int32_t MosaicTouchSettings::getDeviceIndex(string deviceLocation) {
+    int32_t deviceIndex = -1;
+
+    find_if(mdevList.begin(), mdevList.end(), [&] (const string devname) {
+        deviceIndex++; return (devname == deviceLocation)? true : false; });
+
+    return deviceIndex;
+}
+
+void MosaicTouchSettings::configure(string devLocation) {
+    /* check if device is already configured*/
+    for (auto devname : mdevList)
+        if (devname == devLocation) { return; }
+
+    /* check if deviceloaction not configured*/
+    vector<string>::iterator devIterator =
+    find_if(mdevList.begin(), mdevList.end(), [&] (const string devname) {
+            return (devname != devLocation)? true : false; });
+
+    /* update mosaic device name */
+    string prop_name = PROP_MOSAIC_DEVICE_ID + std::to_string(mConfigIdx);
+    property_set(prop_name.c_str(), devLocation.c_str());
+    *devIterator = devLocation;
+    mConfigIdx++;
+
+    if (mConfigIdx == mDevCount) {
+        mConfigured = 1;
+        property_set(PROP_MOSAIC_CONFIGURED, "1");
+    }
+
+    dump("mosaic::confgure");
+}
+
+void MosaicTouchSettings::configureWxL(string devLocation,
+                                       int32_t& sWidth, int32_t& sLeft) {
+    /* get device position */
+    int32_t devIndex = getDeviceIndex(devLocation);
+
+    /* set width & left  of the current device*/
+    sWidth = sWidth / mDevCount;
+    sLeft =  sWidth * devIndex;
+
+    ALOGI("mosaic::configureWxL index: %d, location: %s, WxL: %dx%d",
+                      devIndex, devLocation.c_str(), sWidth, sLeft);
+}
+
+void MosaicTouchSettings::dump(string tag) {
+    ALOGD("%s mode(%s), configured(%s), devCount(%d)",
+          tag.c_str(), mState? "enabled" : "disabled",
+          mConfigured? "yes" : "no", mDevCount);
+
+    for (auto devname : mdevList)
+        ALOGD("%s devLocation = %s", tag.c_str(), devname.c_str());
+}
+
+}  // namespace android
diff --git a/services/inputflinger/MosaicTouchSettings.h b/services/inputflinger/MosaicTouchSettings.h
new file mode 100644
index 000000000..2bb6bc341
--- /dev/null
+++ b/services/inputflinger/MosaicTouchSettings.h
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * mosaic touchsettings implementation by Intel.
+ * author: rajucm <raju.mallikarjun.chegaraddi@intel.com>
+ */
+
+#ifndef SERVICES_INPUTFLINGER_MOSAICTOUCHSETTINGS_H_
+#define SERVICES_INPUTFLINGER_MOSAICTOUCHSETTINGS_H_
+
+#include <log/log.h>
+#include <cutils/properties.h>
+
+#include <vector>
+#include <string>
+
+#define TOUCH_MOSAIC_MAX_DEVICES 4
+#define PROP_MOSAIC_MODE "persist.sys.touch.mosaic.mode"
+#define PROP_MOSAIC_DEVICE_NUM "persist.sys.touch.mosaic.num"
+#define PROP_MOSAIC_DEVICE_ID "persist.sys.touch.mosaic.%d"
+#define PROP_MOSAIC_CONFIGURED "persist.sys.touch.mosaic.configured"
+
+using namespace std;
+
+namespace android {
+
+class MosaicTouchSettings {
+ private:
+    static MosaicTouchSettings *mMosaicSettings;
+    int32_t mState = 0;
+    int32_t mConfigured = 0;
+    int32_t mDevCount = 0;
+    int32_t mConfigIdx = 0;
+
+    vector <string> mdevList;
+    char prop_value[PROPERTY_VALUE_MAX];
+
+    MosaicTouchSettings();
+    void reset();
+    void dump(string ctx);
+
+ public:
+    static MosaicTouchSettings* getInstance();
+    bool isEnabled() { return mState; }
+    bool isConfigured() { return mConfigured; }
+    int32_t getDeviceCount() { return mDevCount; }
+    int32_t getDeviceIndex(string deviceLocation);
+    void configure(string devLocation);
+
+    void configureWxL(string devLocation, int32_t& sWidth, int32_t& sLeft);
+};
+
+}  // namespace android
+
+#endif  // SERVICES_INPUTFLINGER_MOSAICTOUCHSETTINGS_H_
--
2.21.0
