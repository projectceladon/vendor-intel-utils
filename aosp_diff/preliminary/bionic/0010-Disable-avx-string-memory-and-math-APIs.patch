From 60b48ceeab0bc25275ed607b9818c81280b014b7 Mon Sep 17 00:00:00 2001
From: celadon <celadon@intel.com>
Date: Wed, 12 Oct 2022 09:30:26 +0000
Subject: [PATCH] Disable avx string,memory and math APIs

Signed-off-by: celadon <celadon@intel.com>
---
 .../arch-x86_64/dynamic_function_dispatch.cpp | 99 ++++++++++---------
 libm/x86_64/dynamic_function_dispatch.cpp     | 68 ++++++-------
 2 files changed, 84 insertions(+), 83 deletions(-)

diff --git a/libc/arch-x86_64/dynamic_function_dispatch.cpp b/libc/arch-x86_64/dynamic_function_dispatch.cpp
index eca295c5c..08e249508 100644
--- a/libc/arch-x86_64/dynamic_function_dispatch.cpp
+++ b/libc/arch-x86_64/dynamic_function_dispatch.cpp
@@ -34,170 +34,171 @@ extern "C" {
 
 typedef int memcmp_func(const void* __lhs, const void* __rhs, size_t __n);
 DEFINE_IFUNC_FOR(memcmp) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memcmp_func, memcmp_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memcmp_func, memcmp_avx2);
     RETURN_FUNC(memcmp_func, memcmp_generic);
 }
 
 typedef void* memmove_func(void* __dst, const void* __src, size_t __n);
 DEFINE_IFUNC_FOR(memmove) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memmove_func, memmove_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memmove_func, memmove_avx2);
     RETURN_FUNC(memmove_func, memmove_generic);
 }
 
 typedef void* memcpy_func(void* __dst, const void* __src, size_t __n);
 DEFINE_IFUNC_FOR(memcpy) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memcpy_func, memcpy_avx2);
-    RETURN_FUNC(memcpy_func, memcpy_generic);
+ //   __builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memcpy_func, memcpy_avx2);
+//    RETURN_FUNC(memcpy_func, memcpy_generic);
+    return memmove_resolver();
 }
 
 typedef void* memchr_func(const void* __s, int __ch, size_t __n);
 DEFINE_IFUNC_FOR(memchr) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memchr_func, memchr_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memchr_func, memchr_avx2);
     RETURN_FUNC(memchr_func, memchr_generic);
 }
 
 typedef void* memrchr_func(const void* __s, int __ch, size_t __n);
 DEFINE_IFUNC_FOR(memrchr) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memrchr_func, memrchr_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(memrchr_func, memrchr_avx2);
     RETURN_FUNC(memrchr_func, memrchr_generic);
 }
 
 typedef int wmemset_func(const wchar_t* __lhs, const wchar_t* __rhs, size_t __n);
 DEFINE_IFUNC_FOR(wmemset) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wmemset_func, wmemset_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wmemset_func, wmemset_avx2);
     RETURN_FUNC(wmemset_func, wmemset_generic);
 }
 
 typedef int strcmp_func(const char* __lhs, const char* __rhs);
 DEFINE_IFUNC_FOR(strcmp) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strcmp_func, strcmp_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strcmp_func, strcmp_avx2);
     RETURN_FUNC(strcmp_func, strcmp_generic);
 }
 
 typedef int strncmp_func(const char* __lhs, const char* __rhs, size_t __n);
 DEFINE_IFUNC_FOR(strncmp) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strncmp_func, strncmp_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strncmp_func, strncmp_avx2);
     RETURN_FUNC(strncmp_func, strncmp_generic);
 }
 
 typedef char* strcpy_func(char* __dst, const char* __src);
 DEFINE_IFUNC_FOR(strcpy) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strcpy_func, strcpy_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strcpy_func, strcpy_avx2);
     RETURN_FUNC(strcpy_func, strcpy_generic);
 }
 
 typedef char* strncpy_func(char* __dst, const char* __src, size_t __n);
 DEFINE_IFUNC_FOR(strncpy) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strncpy_func, strncpy_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strncpy_func, strncpy_avx2);
     RETURN_FUNC(strncpy_func, strncpy_generic);
 }
 
 typedef char* stpcpy_func(char* __dst, const char* __src);
 DEFINE_IFUNC_FOR(stpcpy) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(stpcpy_func, stpcpy_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(stpcpy_func, stpcpy_avx2);
     RETURN_FUNC(stpcpy_func, stpcpy_generic);
 }
 
 typedef char* stpncpy_func(char* __dst, const char* __src, size_t __n);
 DEFINE_IFUNC_FOR(stpncpy) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(stpncpy_func, stpncpy_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(stpncpy_func, stpncpy_avx2);
     RETURN_FUNC(stpncpy_func, stpncpy_generic);
 }
 
 typedef size_t strlen_func(const char* __s);
 DEFINE_IFUNC_FOR(strlen) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strlen_func, strlen_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strlen_func, strlen_avx2);
     RETURN_FUNC(strlen_func, strlen_generic);
 }
 
 
 typedef size_t strnlen_func(const char* __s, size_t __n);
 DEFINE_IFUNC_FOR(strnlen) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strnlen_func, strnlen_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strnlen_func, strnlen_avx2);
     RETURN_FUNC(strnlen_func, strnlen_generic);
 }
 
 typedef char* strchr_func(const char* __s, int __ch);
 DEFINE_IFUNC_FOR(strchr) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strchr_func, strchr_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strchr_func, strchr_avx2);
     RETURN_FUNC(strchr_func, strchr_generic);
 }
 
 typedef char* strrchr_func(const char* __s, int __ch);
 DEFINE_IFUNC_FOR(strrchr) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strrchr_func, strrchr_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strrchr_func, strrchr_avx2);
     RETURN_FUNC(strrchr_func, strrchr_generic);
 }
 
 typedef char* strcat_func(char* __dst, const char* __src);
 DEFINE_IFUNC_FOR(strcat) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strcat_func, strcat_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strcat_func, strcat_avx2);
     RETURN_FUNC(strcat_func, strcat_generic);
 }
 
 typedef char* strncat_func(char* __dst, const char* __src, size_t __n);
 DEFINE_IFUNC_FOR(strncat) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strncat_func, strncat_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(strncat_func, strncat_avx2);
     RETURN_FUNC(strncat_func, strncat_generic);
 }
 
 typedef int wcscmp_func(const wchar_t* __lhs, const wchar_t* __rhs);
 DEFINE_IFUNC_FOR(wcscmp) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcscmp_func, wcscmp_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcscmp_func, wcscmp_avx2);
     RETURN_FUNC(wcscmp_func, wcscmp_generic);
 }
 
 typedef int wcsncmp_func(const wchar_t* __lhs, const wchar_t* __rhs, size_t __n);
 DEFINE_IFUNC_FOR(wcsncmp) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcsncmp_func, wcsncmp_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcsncmp_func, wcsncmp_avx2);
     RETURN_FUNC(wcsncmp_func, wcsncmp_generic);
 }
 
 typedef size_t wcslen_func(const wchar_t* __s);
 DEFINE_IFUNC_FOR(wcslen) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcslen_func, wcslen_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcslen_func, wcslen_avx2);
     RETURN_FUNC(wcslen_func, wcslen_generic);
 }
 
 typedef size_t wcsnlen_func(const wchar_t* __s, size_t __n);
 DEFINE_IFUNC_FOR(wcsnlen) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcsnlen_func, wcsnlen_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcsnlen_func, wcsnlen_avx2);
     RETURN_FUNC(wcsnlen_func, wcsnlen_generic);
 }
 
 typedef wchar_t* wcschr_func(const wchar_t* __s, wchar_t __wc);
 DEFINE_IFUNC_FOR(wcschr) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcschr_func, wcschr_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcschr_func, wcschr_avx2);
     RETURN_FUNC(wcschr_func, wcschr_generic);
 }
 
 typedef wchar_t* wcsrchr_func(const wchar_t* __s, wchar_t __wc);
 DEFINE_IFUNC_FOR(wcsrchr) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcsrchr_func, wcsrchr_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(wcsrchr_func, wcsrchr_avx2);
     RETURN_FUNC(wcsrchr_func, wcsrchr_generic);
 }
 
diff --git a/libm/x86_64/dynamic_function_dispatch.cpp b/libm/x86_64/dynamic_function_dispatch.cpp
index 94f6a3f1c..8fe7cdb6e 100644
--- a/libm/x86_64/dynamic_function_dispatch.cpp
+++ b/libm/x86_64/dynamic_function_dispatch.cpp
@@ -34,99 +34,99 @@ extern "C" {
 
 typedef double ceil_func(double __x);
 DEFINE_IFUNC_FOR(ceil) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(ceil_func, ceil_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(ceil_func, ceil_avx2);
     RETURN_FUNC(ceil_func, ceil_generic);
 }
 
 typedef float ceilf_func(float __x);
 DEFINE_IFUNC_FOR(ceilf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(ceilf_func, ceilf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(ceilf_func, ceilf_avx2);
     RETURN_FUNC(ceilf_func, ceilf_generic);
 }
 
 typedef double floor_func(double __x);
 DEFINE_IFUNC_FOR(floor) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(floor_func, floor_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(floor_func, floor_avx2);
     RETURN_FUNC(floor_func, floor_generic);
 }
 
 typedef float floorf_func(float __x);
 DEFINE_IFUNC_FOR(floorf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(floorf_func, floorf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(floorf_func, floorf_avx2);
     RETURN_FUNC(floorf_func, floorf_generic);
 }
 
 typedef double rint_func(double __x);
 DEFINE_IFUNC_FOR(rint) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(rint_func, rint_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(rint_func, rint_avx2);
     RETURN_FUNC(rint_func, rint_generic);
 }
 
 typedef float rintf_func(float __x);
 DEFINE_IFUNC_FOR(rintf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(rintf_func, rintf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(rintf_func, rintf_avx2);
     RETURN_FUNC(rintf_func, rintf_generic);
 }
 
 typedef double hypot_func(double __x, double __y);
 DEFINE_IFUNC_FOR(hypot) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(hypot_func, hypot_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(hypot_func, hypot_avx2);
     RETURN_FUNC(hypot_func, hypot_generic);
 }
 
 typedef double log10_func(double __x);
 DEFINE_IFUNC_FOR(log10) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log10_func, log10_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log10_func, log10_avx2);
     RETURN_FUNC(log10_func, log10_generic);
 }
 
 typedef float log10f_func(float __x);
 DEFINE_IFUNC_FOR(log10f) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log10f_func, log10f_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log10f_func, log10f_avx2);
     RETURN_FUNC(log10f_func, log10f_generic);
 }
 
 typedef double log1p_func(double __x);
 DEFINE_IFUNC_FOR(log1p) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log1p_func, log1p_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log1p_func, log1p_avx2);
     RETURN_FUNC(log1p_func, log1p_generic);
 }
 
 typedef float log1pf_func(float __x);
 DEFINE_IFUNC_FOR(log1pf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log1pf_func, log1pf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log1pf_func, log1pf_avx2);
     RETURN_FUNC(log1pf_func, log1pf_generic);
 }
 
 typedef double cbrt_func(double __x);
 DEFINE_IFUNC_FOR(cbrt) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cbrt_func, cbrt_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cbrt_func, cbrt_avx2);
     RETURN_FUNC(cbrt_func, cbrt_generic);
 }
 
 typedef float cbrtf_func(float __x);
 DEFINE_IFUNC_FOR(cbrtf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cbrtf_func, cbrtf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cbrtf_func, cbrtf_avx2);
     RETURN_FUNC(cbrtf_func, cbrtf_generic);
 }
 
 typedef double cos_func(double __x);
 DEFINE_IFUNC_FOR(cos) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cos_func, cos_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cos_func, cos_avx2);
     RETURN_FUNC(cos_func, cos_generic);
 }
 
@@ -139,8 +139,8 @@ DEFINE_IFUNC_FOR(cosf) {
 
 typedef double sin_func(double __x);
 DEFINE_IFUNC_FOR(sin) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sin_func, sin_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sin_func, sin_avx2);
     RETURN_FUNC(sin_func, sin_generic);
 }
 
@@ -153,15 +153,15 @@ DEFINE_IFUNC_FOR(sinf) {
 
 typedef double sinh_func(double __x);
 DEFINE_IFUNC_FOR(sinh) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinh_func, sinh_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinh_func, sinh_avx2);
     RETURN_FUNC(sinh_func, sinh_generic);
 }
 
 typedef float sinhf_func(float __x);
 DEFINE_IFUNC_FOR(sinhf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinhf_func, sinhf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinhf_func, sinhf_avx2);
     RETURN_FUNC(sinhf_func, sinhf_generic);
 }
 
-- 
2.37.1

