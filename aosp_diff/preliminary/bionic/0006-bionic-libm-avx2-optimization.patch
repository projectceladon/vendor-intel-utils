From 1c74f16b6979159950d3a74dd1aff9ec2e52884f Mon Sep 17 00:00:00 2001
From: "Soni, Ravi Kumar" <ravi.kumar.soni@intel.com>
Date: Tue, 3 Jan 2023 11:54:50 +0530
Subject: [PATCH] bionic libm avx2 optimization

Signed-off-by: Soni, Ravi Kumar <ravi.kumar.soni@intel.com>
---
 libm/Android.bp                             |  91 +++++++++++++++
 libm/upstream-freebsd/lib/msun/src/e_acos.c |   3 +-
 libm/upstream-freebsd/lib/msun/src/e_sinh.c |   3 +-
 libm/upstream-freebsd/lib/msun/src/s_tanh.c |   3 +-
 libm/x86/cosf.c                             |  19 ++++
 libm/x86/dynamic_function_dispatch.cpp      | 116 ++++++++++++++++++++
 libm/x86/e_acos.S                           |   4 +-
 libm/x86/e_sinh.S                           |   4 +-
 libm/x86/kabylake/acos_avx2.c               |   2 +
 libm/x86/kabylake/cosf_avx2.c               |   2 +
 libm/x86/kabylake/log_avx2.c                |   5 +
 libm/x86/kabylake/logf_avx2.c               |   3 +
 libm/x86/kabylake/sincosf_avx2.c            |   2 +
 libm/x86/kabylake/sinf_avx2.c               |   2 +
 libm/x86/kabylake/sinh_avx2.c               |   2 +
 libm/x86/kabylake/tanh_avx2.c               |   2 +
 libm/x86/log.c                              |   5 +
 libm/x86/logf.c                             |   4 +
 libm/x86/s_tanh.S                           |   4 +-
 libm/x86/sincosf.c                          |   2 +
 libm/x86/sinf.c                             |  19 ++++
 libm/x86/static_function_dispatch.S         |  52 +++++++++
 libm/x86_64/cosf.c                          |  19 ++++
 libm/x86_64/e_acos.S                        |   4 +-
 libm/x86_64/e_sinh.S                        |   4 +-
 libm/x86_64/kabylake/acos_avx2.c            |   2 +
 libm/x86_64/kabylake/cosf_avx2.c            |   2 +
 libm/x86_64/kabylake/expm1_avx2.c           |   2 +
 libm/x86_64/kabylake/log_avx2.c             |   4 +
 libm/x86_64/kabylake/logf_avx2.c            |   3 +
 libm/x86_64/kabylake/sincosf_avx2.c         |   2 +
 libm/x86_64/kabylake/sinf_avx2.c            |   2 +
 libm/x86_64/kabylake/sinh_avx2.c            |   2 +
 libm/x86_64/kabylake/tanh_avx2.c            |   2 +
 libm/x86_64/log.c                           |   4 +
 libm/x86_64/logf.c                          |   4 +
 libm/x86_64/s_expm1.S                       |   4 +-
 libm/x86_64/s_tanh.S                        |   4 +-
 libm/x86_64/sincosf.c                       |   2 +
 libm/x86_64/sinf.c                          |  19 ++++
 40 files changed, 417 insertions(+), 17 deletions(-)
 create mode 100644 libm/x86/cosf.c
 create mode 100644 libm/x86/dynamic_function_dispatch.cpp
 create mode 100644 libm/x86/kabylake/acos_avx2.c
 create mode 100644 libm/x86/kabylake/cosf_avx2.c
 create mode 100644 libm/x86/kabylake/log_avx2.c
 create mode 100644 libm/x86/kabylake/logf_avx2.c
 create mode 100644 libm/x86/kabylake/sincosf_avx2.c
 create mode 100644 libm/x86/kabylake/sinf_avx2.c
 create mode 100644 libm/x86/kabylake/sinh_avx2.c
 create mode 100644 libm/x86/kabylake/tanh_avx2.c
 create mode 100644 libm/x86/log.c
 create mode 100644 libm/x86/logf.c
 create mode 100644 libm/x86/sincosf.c
 create mode 100644 libm/x86/sinf.c
 create mode 100644 libm/x86/static_function_dispatch.S
 create mode 100644 libm/x86_64/cosf.c
 create mode 100644 libm/x86_64/kabylake/acos_avx2.c
 create mode 100644 libm/x86_64/kabylake/cosf_avx2.c
 create mode 100644 libm/x86_64/kabylake/expm1_avx2.c
 create mode 100644 libm/x86_64/kabylake/log_avx2.c
 create mode 100644 libm/x86_64/kabylake/logf_avx2.c
 create mode 100644 libm/x86_64/kabylake/sincosf_avx2.c
 create mode 100644 libm/x86_64/kabylake/sinf_avx2.c
 create mode 100644 libm/x86_64/kabylake/sinh_avx2.c
 create mode 100644 libm/x86_64/kabylake/tanh_avx2.c
 create mode 100644 libm/x86_64/log.c
 create mode 100644 libm/x86_64/logf.c
 create mode 100644 libm/x86_64/sincosf.c
 create mode 100644 libm/x86_64/sinf.c

diff --git a/libm/Android.bp b/libm/Android.bp
index 7469cde0a..e8f4414fc 100644
--- a/libm/Android.bp
+++ b/libm/Android.bp
@@ -377,6 +377,11 @@ cc_library {
                 "x86/s_sin.S",
                 "x86/s_tanh.S",
                 "x86/s_tan.S",
+                "x86/cosf.c",
+                "x86/sinf.c",
+                "x86/log.c",
+                "x86/logf.c",
+                "x86/sincosf.c",
             ],
             exclude_srcs: [
                 "upstream-freebsd/lib/msun/src/e_acos.c",
@@ -407,6 +412,13 @@ cc_library {
                 "upstream-freebsd/lib/msun/src/s_trunc.c",
                 "upstream-freebsd/lib/msun/src/s_truncf.c",
             ],
+            whole_static_libs: ["msun_fma_avx2_math",],
+            shared: {
+               srcs: ["x86/dynamic_function_dispatch.cpp"],
+            },
+            static: {
+               srcs: ["x86/static_function_dispatch.S"],
+            },
             local_include_dirs: ["i387"],
             pack_relocations: false,
             ldflags: ["-Wl,--hash-style=both"],
@@ -443,6 +455,11 @@ cc_library {
                 "x86_64/s_sin.S",
                 "x86_64/s_tanh.S",
                 "x86_64/s_tan.S",
+                "x86_64/cosf.c",
+                "x86_64/sinf.c",
+                "x86_64/log.c",
+                "x86_64/logf.c",
+                "x86_64/sincosf.c",
             ],
             exclude_srcs: [
                 "upstream-freebsd/lib/msun/src/e_acos.c",
@@ -475,6 +492,13 @@ cc_library {
                 "upstream-freebsd/lib/msun/src/s_trunc.c",
                 "upstream-freebsd/lib/msun/src/s_truncf.c",
             ],
+            whole_static_libs: ["msun_fma_avx2_math",],
+            shared: {
+               srcs: ["x86/dynamic_function_dispatch.cpp"],
+            },
+            static: {
+               srcs: ["x86/static_function_dispatch.S"],
+            },
             version_script: ":libm.x86_64.map",
         },
     },
@@ -587,3 +611,70 @@ genrule {
     tool_files: [":bionic-generate-version-script"],
     cmd: "$(location :bionic-generate-version-script) x86_64 $(in) $(out)",
 }
+
+cc_library_static {
+    name: "msun_fma_avx2_math",
+    ramdisk_available: true,
+    vendor_ramdisk_available: true,
+    recovery_available: true,
+    static_ndk_lib: true,
+    stl: "none",
+    local_include_dirs: ["upstream-freebsd/android/include/",],
+    cflags: [
+        "-D__BIONIC_LP32_USE_LONG_DOUBLE",
+        "-D_BSD_SOURCE",
+        "-DFLT_EVAL_METHOD=0",
+        "-include freebsd-compat.h",
+        "-fno-math-errno",
+        "-Wall",
+        "-Werror",
+        "-Wno-ignored-pragmas",
+        "-Wno-missing-braces",
+        "-Wno-parentheses",
+        "-Wno-sign-compare",
+        "-Wno-unknown-pragmas",
+        "-Wno-unused-const-variable",
+        "-Wno-unused-variable",
+        "-Wno-unused-parameter",
+        "-O2",
+        "-ffp-contract=fast",
+        "-DWANT_ERRNO_UFLOW",
+        "-mfma",
+        "-mavx2",
+    ],
+    arch: {
+        x86: {
+                srcs : [
+                        "x86/kabylake/acos_avx2.c",
+                        "x86/kabylake/cosf_avx2.c",
+                        "x86/kabylake/log_avx2.c",
+                        "x86/kabylake/logf_avx2.c",
+                        "x86/kabylake/sincosf_avx2.c",
+                        "x86/kabylake/sinf_avx2.c",
+                        "x86/kabylake/sinh_avx2.c",
+                        "x86/kabylake/tanh_avx2.c",
+		],
+        },
+
+        x86_64: {
+		srcs : [
+                        "x86_64/kabylake/acos_avx2.c",
+                        "x86_64/kabylake/cosf_avx2.c",
+                        "x86_64/kabylake/expm1_avx2.c",
+                        "x86_64/kabylake/log_avx2.c",
+                        "x86_64/kabylake/logf_avx2.c",
+                        "x86_64/kabylake/sincosf_avx2.c",
+                        "x86_64/kabylake/sinf_avx2.c",
+                        "x86_64/kabylake/sinh_avx2.c",
+                        "x86_64/kabylake/tanh_avx2.c",
+		],
+        },
+    },
+    
+    include_dirs: ["bionic/libc"],
+    system_shared_libs: ["libc"],
+    apex_available: [
+           "//apex_available:platform",
+           "com.android.runtime",
+    ],
+}
diff --git a/libm/upstream-freebsd/lib/msun/src/e_acos.c b/libm/upstream-freebsd/lib/msun/src/e_acos.c
index 1f6dca5bb..db5a6d81a 100644
--- a/libm/upstream-freebsd/lib/msun/src/e_acos.c
+++ b/libm/upstream-freebsd/lib/msun/src/e_acos.c
@@ -105,7 +105,8 @@ __ieee754_acos(double x)
 	    return 2.0*(df+w);
 	}
 }
-
+/*
 #if LDBL_MANT_DIG == 53
 __weak_reference(acos, acosl);
 #endif
+*/
diff --git a/libm/upstream-freebsd/lib/msun/src/e_sinh.c b/libm/upstream-freebsd/lib/msun/src/e_sinh.c
index 6c01f4a3c..852338bec 100644
--- a/libm/upstream-freebsd/lib/msun/src/e_sinh.c
+++ b/libm/upstream-freebsd/lib/msun/src/e_sinh.c
@@ -73,7 +73,8 @@ __ieee754_sinh(double x)
     /* |x| > overflowthresold, sinh(x) overflow */
 	return x*shuge;
 }
-
+/*
 #if (LDBL_MANT_DIG == 53)
 __weak_reference(sinh, sinhl);
 #endif
+*/
diff --git a/libm/upstream-freebsd/lib/msun/src/s_tanh.c b/libm/upstream-freebsd/lib/msun/src/s_tanh.c
index 6d26c695d..6cc6ecc19 100644
--- a/libm/upstream-freebsd/lib/msun/src/s_tanh.c
+++ b/libm/upstream-freebsd/lib/msun/src/s_tanh.c
@@ -78,7 +78,8 @@ tanh(double x)
 	}
 	return (jx>=0)? z: -z;
 }
-
+/*
 #if (LDBL_MANT_DIG == 53)
 __weak_reference(tanh, tanhl);
 #endif
+*/
diff --git a/libm/x86/cosf.c b/libm/x86/cosf.c
new file mode 100644
index 000000000..e980df018
--- /dev/null
+++ b/libm/x86/cosf.c
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+*/
+
+#define  cosf cosf_generic
+
+#include <../../external/arm-optimized-routines/math/cosf.c>
diff --git a/libm/x86/dynamic_function_dispatch.cpp b/libm/x86/dynamic_function_dispatch.cpp
new file mode 100644
index 000000000..1d8f3a238
--- /dev/null
+++ b/libm/x86/dynamic_function_dispatch.cpp
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <stddef.h>
+#include <private/bionic_ifuncs.h>
+
+#ifdef LOG_FROM_LIBM
+strong_alias (log, __log_finite)
+hidden_alias (log, __ieee754_log)
+#endif
+
+#ifdef LOGF_FROM_LIBM
+strong_alias (logf, __logf_finite)
+hidden_alias (logf, __ieee754_logf)
+#endif
+
+# if LDBL_MANT_DIG == 53
+__weak_reference(acos, acosl);
+__weak_reference(sinh, sinhl);
+__weak_reference(tanh, tanhl);
+long double logl (long double x) { return log (x); }
+#endif
+
+extern "C" {
+
+typedef double sinh_func(double __x);
+DEFINE_IFUNC_FOR(sinh) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinh_func, sinh_avx2);
+    RETURN_FUNC(sinh_func, sinh_generic);
+}
+
+typedef double tanh_func(double __x);
+DEFINE_IFUNC_FOR(tanh) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(tanh_func, tanh_avx2);
+    RETURN_FUNC(tanh_func, tanh_generic);
+}
+
+typedef double acos_func(double __x);
+DEFINE_IFUNC_FOR(acos) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(acos_func, acos_avx2);
+    RETURN_FUNC(acos_func, acos_generic);
+}
+
+typedef float cosf_func(float __x);
+DEFINE_IFUNC_FOR(cosf) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cosf_func, cosf_avx2);
+    RETURN_FUNC(cosf_func, cosf_generic);
+}
+
+typedef float sinf_func(float __x);
+DEFINE_IFUNC_FOR(sinf) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinf_func, sinf_avx2);
+    RETURN_FUNC(sinf_func, sinf_generic);
+}
+
+typedef double log_func(double __x);
+DEFINE_IFUNC_FOR(log) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log_func, log_avx2);
+    RETURN_FUNC(log_func, log_generic);
+}
+
+typedef float logf_func(float __x);
+DEFINE_IFUNC_FOR(logf) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(logf_func, logf_avx2);
+    RETURN_FUNC(logf_func, logf_generic);
+}
+
+typedef void sincosf_func(float __y, float *__sinp, float *__cosp);
+DEFINE_IFUNC_FOR(sincosf) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sincosf_func, sincosf_avx2);
+    RETURN_FUNC(sincosf_func, sincosf_generic);
+}
+
+#if defined(__x86_64__)
+typedef double expm1_func(double __x);
+DEFINE_IFUNC_FOR(expm1) {
+    __builtin_cpu_init();
+    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(expm1_func, expm1_avx2);
+    RETURN_FUNC(expm1_func, expm1_generic);
+}
+#endif
+
+}  // extern "C"
diff --git a/libm/x86/e_acos.S b/libm/x86/e_acos.S
index 04b178719..c22012195 100644
--- a/libm/x86/e_acos.S
+++ b/libm/x86/e_acos.S
@@ -92,7 +92,7 @@ static_func:
 # -- End  static_func
 
 # -- Begin  acos
-ENTRY(acos)
+ENTRY(acos_generic)
 # parameter 1: 8 + %ebp
 ..B2.1:
 ..B2.2:
@@ -384,7 +384,7 @@ ENTRY(acos)
         popl      %ebp
         ret       
 ..B2.3:
-END(acos)
+END(acos_generic)
 # -- End  acos
 
 # Start file scope ASM
diff --git a/libm/x86/e_sinh.S b/libm/x86/e_sinh.S
index b9a29308d..bde9a92fd 100644
--- a/libm/x86/e_sinh.S
+++ b/libm/x86/e_sinh.S
@@ -93,7 +93,7 @@ static_func:
 # -- End  static_func
 
 # -- Begin  sinh
-ENTRY(sinh)
+ENTRY(sinh_generic)
 # parameter 1: 8 + %ebp
 ..B2.1:
 ..B2.2:
@@ -320,7 +320,7 @@ ENTRY(sinh)
         popl      %ebp
         ret       
 ..B2.3:
-END(sinh)
+END(sinh_generic)
 # -- End  sinh
 
 # Start file scope ASM
diff --git a/libm/x86/kabylake/acos_avx2.c b/libm/x86/kabylake/acos_avx2.c
new file mode 100644
index 000000000..280eeaf7d
--- /dev/null
+++ b/libm/x86/kabylake/acos_avx2.c
@@ -0,0 +1,2 @@
+#define acos acos_avx2
+#include <upstream-freebsd/lib/msun/src/e_acos.c>
diff --git a/libm/x86/kabylake/cosf_avx2.c b/libm/x86/kabylake/cosf_avx2.c
new file mode 100644
index 000000000..fdfd51331
--- /dev/null
+++ b/libm/x86/kabylake/cosf_avx2.c
@@ -0,0 +1,2 @@
+#define cosf cosf_avx2
+#include <../../external/arm-optimized-routines/math/cosf.c>
diff --git a/libm/x86/kabylake/log_avx2.c b/libm/x86/kabylake/log_avx2.c
new file mode 100644
index 000000000..c97608bed
--- /dev/null
+++ b/libm/x86/kabylake/log_avx2.c
@@ -0,0 +1,5 @@
+#define log log_avx2
+#define logl logl_avx2
+#define LOG_FROM_LIBM
+#include <../../external/arm-optimized-routines/math/log.c>
+
diff --git a/libm/x86/kabylake/logf_avx2.c b/libm/x86/kabylake/logf_avx2.c
new file mode 100644
index 000000000..ff8421147
--- /dev/null
+++ b/libm/x86/kabylake/logf_avx2.c
@@ -0,0 +1,3 @@
+#define logf logf_avx2
+#define LOGF_FROM_LIBM
+#include <../../external/arm-optimized-routines/math/logf.c>
diff --git a/libm/x86/kabylake/sincosf_avx2.c b/libm/x86/kabylake/sincosf_avx2.c
new file mode 100644
index 000000000..eca9a7696
--- /dev/null
+++ b/libm/x86/kabylake/sincosf_avx2.c
@@ -0,0 +1,2 @@
+#define sincosf sincosf_avx2
+#include <../../external/arm-optimized-routines/math/sincosf.c>
diff --git a/libm/x86/kabylake/sinf_avx2.c b/libm/x86/kabylake/sinf_avx2.c
new file mode 100644
index 000000000..96c09d72d
--- /dev/null
+++ b/libm/x86/kabylake/sinf_avx2.c
@@ -0,0 +1,2 @@
+#define sinf sinf_avx2
+#include <../../external/arm-optimized-routines/math/sinf.c>
diff --git a/libm/x86/kabylake/sinh_avx2.c b/libm/x86/kabylake/sinh_avx2.c
new file mode 100644
index 000000000..40e409ae4
--- /dev/null
+++ b/libm/x86/kabylake/sinh_avx2.c
@@ -0,0 +1,2 @@
+#define sinh sinh_avx2
+#include<upstream-freebsd/lib/msun/src/e_sinh.c>
diff --git a/libm/x86/kabylake/tanh_avx2.c b/libm/x86/kabylake/tanh_avx2.c
new file mode 100644
index 000000000..0f9ba8f65
--- /dev/null
+++ b/libm/x86/kabylake/tanh_avx2.c
@@ -0,0 +1,2 @@
+#define tanh tanh_avx2
+#include <upstream-freebsd/lib/msun/src/s_tanh.c>
diff --git a/libm/x86/log.c b/libm/x86/log.c
new file mode 100644
index 000000000..ea0dcf2f4
--- /dev/null
+++ b/libm/x86/log.c
@@ -0,0 +1,5 @@
+#define log log_generic
+#define logl logl_generic
+#define LOG_FROM_LIBM
+#include <../../external/arm-optimized-routines/math/log.c>
+
diff --git a/libm/x86/logf.c b/libm/x86/logf.c
new file mode 100644
index 000000000..e51cea4b5
--- /dev/null
+++ b/libm/x86/logf.c
@@ -0,0 +1,4 @@
+#define logf logf_generic
+#define LOGF_FROM_LIBM
+#include <../../external/arm-optimized-routines/math/logf.c>
+
diff --git a/libm/x86/s_tanh.S b/libm/x86/s_tanh.S
index 777519f45..8792d0956 100644
--- a/libm/x86/s_tanh.S
+++ b/libm/x86/s_tanh.S
@@ -93,7 +93,7 @@ static_func:
 # -- End  static_func
 
 # -- Begin  tanh
-ENTRY(tanh)
+ENTRY(tanh_generic)
 # parameter 1: 8 + %ebp
 ..B2.1:
 ..B2.2:
@@ -274,7 +274,7 @@ ENTRY(tanh)
         popl      %ebp
         ret       
 ..B2.3:
-END(tanh)
+END(tanh_generic)
 # -- End  tanh
 
 # Start file scope ASM
diff --git a/libm/x86/sincosf.c b/libm/x86/sincosf.c
new file mode 100644
index 000000000..f5ca91e1c
--- /dev/null
+++ b/libm/x86/sincosf.c
@@ -0,0 +1,2 @@
+#define sincosf sincosf_generic
+#include <../../external/arm-optimized-routines/math/sincosf.c>
diff --git a/libm/x86/sinf.c b/libm/x86/sinf.c
new file mode 100644
index 000000000..6b004c7e7
--- /dev/null
+++ b/libm/x86/sinf.c
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+*/
+
+#define  sinf sinf_generic
+
+#include <../../external/arm-optimized-routines/math/sinf.c>
diff --git a/libm/x86/static_function_dispatch.S b/libm/x86/static_function_dispatch.S
new file mode 100644
index 000000000..5226517ea
--- /dev/null
+++ b/libm/x86/static_function_dispatch.S
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <private/bionic_asm.h>
+
+ALIAS_SYMBOL(acosl, acos);
+ALIAS_SYMBOL(sinhl, sinh);
+ALIAS_SYMBOL(tanhl, tanh);
+
+#define FUNCTION_DELEGATE(name, impl) \
+ENTRY(name); \
+    jmp impl; \
+END(name)
+
+FUNCTION_DELEGATE(sinh, sinh_generic)
+FUNCTION_DELEGATE(tanh, tanh_generic)
+FUNCTION_DELEGATE(acos, acos_generic)
+FUNCTION_DELEGATE(sinf, sinf_generic)
+FUNCTION_DELEGATE(cosf, cosf_generic)
+FUNCTION_DELEGATE(log, log_generic)
+FUNCTION_DELEGATE(logl, logl_generic)
+FUNCTION_DELEGATE(logf, logf_generic)
+FUNCTION_DELEGATE(sincosf, sincosf_generic)
+
+#if defined(__x86_64__)
+FUNCTION_DELEGATE(expm1, expm1_generic)
+#endif
diff --git a/libm/x86_64/cosf.c b/libm/x86_64/cosf.c
new file mode 100644
index 000000000..e980df018
--- /dev/null
+++ b/libm/x86_64/cosf.c
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+*/
+
+#define  cosf cosf_generic
+
+#include <../../external/arm-optimized-routines/math/cosf.c>
diff --git a/libm/x86_64/e_acos.S b/libm/x86_64/e_acos.S
index 57c910e64..c576734b0 100644
--- a/libm/x86_64/e_acos.S
+++ b/libm/x86_64/e_acos.S
@@ -77,7 +77,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <private/bionic_asm.h>
 # -- Begin  acos
-ENTRY(acos)
+ENTRY(acos_generic)
 # parameter 1: %xmm0
 ..B1.1:
 ..___tag_value_acos.1:
@@ -358,7 +358,7 @@ ENTRY(acos)
 ..___tag_value_acos.4:
         ret       
 ..___tag_value_acos.5:
-END(acos)
+END(acos_generic)
 # -- End  acos
 	.section .rodata, "a"
 	.align 16
diff --git a/libm/x86_64/e_sinh.S b/libm/x86_64/e_sinh.S
index d5f7b163a..f0c88571e 100644
--- a/libm/x86_64/e_sinh.S
+++ b/libm/x86_64/e_sinh.S
@@ -78,7 +78,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <private/bionic_asm.h>
 # -- Begin  sinh
-ENTRY(sinh)
+ENTRY(sinh_generic)
 # parameter 1: %xmm0
 ..B1.1:
 ..___tag_value_sinh.1:
@@ -300,7 +300,7 @@ ENTRY(sinh)
 ..___tag_value_sinh.4:
         ret       
 ..___tag_value_sinh.5:
-END(sinh)
+END(sinh_generic)
 # -- End  sinh
 	.section .rodata, "a"
 	.align 16
diff --git a/libm/x86_64/kabylake/acos_avx2.c b/libm/x86_64/kabylake/acos_avx2.c
new file mode 100644
index 000000000..280eeaf7d
--- /dev/null
+++ b/libm/x86_64/kabylake/acos_avx2.c
@@ -0,0 +1,2 @@
+#define acos acos_avx2
+#include <upstream-freebsd/lib/msun/src/e_acos.c>
diff --git a/libm/x86_64/kabylake/cosf_avx2.c b/libm/x86_64/kabylake/cosf_avx2.c
new file mode 100644
index 000000000..fdfd51331
--- /dev/null
+++ b/libm/x86_64/kabylake/cosf_avx2.c
@@ -0,0 +1,2 @@
+#define cosf cosf_avx2
+#include <../../external/arm-optimized-routines/math/cosf.c>
diff --git a/libm/x86_64/kabylake/expm1_avx2.c b/libm/x86_64/kabylake/expm1_avx2.c
new file mode 100644
index 000000000..0929f3d56
--- /dev/null
+++ b/libm/x86_64/kabylake/expm1_avx2.c
@@ -0,0 +1,2 @@
+#define expm1 expm1_avx2
+#include <upstream-freebsd/lib/msun/src/s_expm1.c>
diff --git a/libm/x86_64/kabylake/log_avx2.c b/libm/x86_64/kabylake/log_avx2.c
new file mode 100644
index 000000000..846bab115
--- /dev/null
+++ b/libm/x86_64/kabylake/log_avx2.c
@@ -0,0 +1,4 @@
+#define log log_avx2
+#define LOG_FROM_LIBM
+#include <../../external/arm-optimized-routines/math/log.c>
+
diff --git a/libm/x86_64/kabylake/logf_avx2.c b/libm/x86_64/kabylake/logf_avx2.c
new file mode 100644
index 000000000..ff8421147
--- /dev/null
+++ b/libm/x86_64/kabylake/logf_avx2.c
@@ -0,0 +1,3 @@
+#define logf logf_avx2
+#define LOGF_FROM_LIBM
+#include <../../external/arm-optimized-routines/math/logf.c>
diff --git a/libm/x86_64/kabylake/sincosf_avx2.c b/libm/x86_64/kabylake/sincosf_avx2.c
new file mode 100644
index 000000000..eca9a7696
--- /dev/null
+++ b/libm/x86_64/kabylake/sincosf_avx2.c
@@ -0,0 +1,2 @@
+#define sincosf sincosf_avx2
+#include <../../external/arm-optimized-routines/math/sincosf.c>
diff --git a/libm/x86_64/kabylake/sinf_avx2.c b/libm/x86_64/kabylake/sinf_avx2.c
new file mode 100644
index 000000000..96c09d72d
--- /dev/null
+++ b/libm/x86_64/kabylake/sinf_avx2.c
@@ -0,0 +1,2 @@
+#define sinf sinf_avx2
+#include <../../external/arm-optimized-routines/math/sinf.c>
diff --git a/libm/x86_64/kabylake/sinh_avx2.c b/libm/x86_64/kabylake/sinh_avx2.c
new file mode 100644
index 000000000..40e409ae4
--- /dev/null
+++ b/libm/x86_64/kabylake/sinh_avx2.c
@@ -0,0 +1,2 @@
+#define sinh sinh_avx2
+#include<upstream-freebsd/lib/msun/src/e_sinh.c>
diff --git a/libm/x86_64/kabylake/tanh_avx2.c b/libm/x86_64/kabylake/tanh_avx2.c
new file mode 100644
index 000000000..0f9ba8f65
--- /dev/null
+++ b/libm/x86_64/kabylake/tanh_avx2.c
@@ -0,0 +1,2 @@
+#define tanh tanh_avx2
+#include <upstream-freebsd/lib/msun/src/s_tanh.c>
diff --git a/libm/x86_64/log.c b/libm/x86_64/log.c
new file mode 100644
index 000000000..0fe27eea8
--- /dev/null
+++ b/libm/x86_64/log.c
@@ -0,0 +1,4 @@
+#define log log_generic
+#define LOG_FROM_LIBM
+#include <../../external/arm-optimized-routines/math/log.c>
+
diff --git a/libm/x86_64/logf.c b/libm/x86_64/logf.c
new file mode 100644
index 000000000..e51cea4b5
--- /dev/null
+++ b/libm/x86_64/logf.c
@@ -0,0 +1,4 @@
+#define logf logf_generic
+#define LOGF_FROM_LIBM
+#include <../../external/arm-optimized-routines/math/logf.c>
+
diff --git a/libm/x86_64/s_expm1.S b/libm/x86_64/s_expm1.S
index 4b22f5a2c..668efe675 100644
--- a/libm/x86_64/s_expm1.S
+++ b/libm/x86_64/s_expm1.S
@@ -74,7 +74,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <private/bionic_asm.h>
 # -- Begin  expm1
-ENTRY(expm1)
+ENTRY(expm1_generic)
 # parameter 1: %xmm0
 ..B1.1:
 ..___tag_value_expm1.1:
@@ -341,7 +341,7 @@ ENTRY(expm1)
 ..___tag_value_expm1.4:
         ret       
 ..___tag_value_expm1.5:
-END(expm1)
+END(expm1_generic)
 # -- End  expm1
 	.section .rodata, "a"
 	.align 16
diff --git a/libm/x86_64/s_tanh.S b/libm/x86_64/s_tanh.S
index a76a5c2c8..be3503b84 100644
--- a/libm/x86_64/s_tanh.S
+++ b/libm/x86_64/s_tanh.S
@@ -78,7 +78,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <private/bionic_asm.h>
 # -- Begin  tanh
-ENTRY(tanh)
+ENTRY(tanh_generic)
 # parameter 1: %xmm0
 ..B1.1:
 ..___tag_value_tanh.1:
@@ -253,7 +253,7 @@ ENTRY(tanh)
 ..___tag_value_tanh.4:
         ret       
 ..___tag_value_tanh.5:
-END(tanh)
+END(tanh_generic)
 # -- End  tanh
 	.section .rodata, "a"
 	.align 16
diff --git a/libm/x86_64/sincosf.c b/libm/x86_64/sincosf.c
new file mode 100644
index 000000000..f5ca91e1c
--- /dev/null
+++ b/libm/x86_64/sincosf.c
@@ -0,0 +1,2 @@
+#define sincosf sincosf_generic
+#include <../../external/arm-optimized-routines/math/sincosf.c>
diff --git a/libm/x86_64/sinf.c b/libm/x86_64/sinf.c
new file mode 100644
index 000000000..6b004c7e7
--- /dev/null
+++ b/libm/x86_64/sinf.c
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+*/
+
+#define  sinf sinf_generic
+
+#include <../../external/arm-optimized-routines/math/sinf.c>
-- 
2.25.1

