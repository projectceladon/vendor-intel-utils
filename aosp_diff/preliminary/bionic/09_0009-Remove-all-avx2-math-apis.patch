From 6385a95fac38b6159a37bc75ed27f0ab1858c75a Mon Sep 17 00:00:00 2001
From: ahs <amrita.h.s@intel.com>
Date: Wed, 6 Jul 2022 15:30:49 +0530
Subject: [PATCH] Remove all avx2 math apis.

This is used to create base build for perf testing

Signed-off-by: ahs <amrita.h.s@intel.com>
---
 libm/x86_64/dynamic_function_dispatch.cpp | 68 +++++++++++------------
 1 file changed, 34 insertions(+), 34 deletions(-)

diff --git a/libm/x86_64/dynamic_function_dispatch.cpp b/libm/x86_64/dynamic_function_dispatch.cpp
index 94f6a3f1c..8fe7cdb6e 100644
--- a/libm/x86_64/dynamic_function_dispatch.cpp
+++ b/libm/x86_64/dynamic_function_dispatch.cpp
@@ -34,99 +34,99 @@ extern "C" {
 
 typedef double ceil_func(double __x);
 DEFINE_IFUNC_FOR(ceil) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(ceil_func, ceil_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(ceil_func, ceil_avx2);
     RETURN_FUNC(ceil_func, ceil_generic);
 }
 
 typedef float ceilf_func(float __x);
 DEFINE_IFUNC_FOR(ceilf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(ceilf_func, ceilf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(ceilf_func, ceilf_avx2);
     RETURN_FUNC(ceilf_func, ceilf_generic);
 }
 
 typedef double floor_func(double __x);
 DEFINE_IFUNC_FOR(floor) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(floor_func, floor_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(floor_func, floor_avx2);
     RETURN_FUNC(floor_func, floor_generic);
 }
 
 typedef float floorf_func(float __x);
 DEFINE_IFUNC_FOR(floorf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(floorf_func, floorf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(floorf_func, floorf_avx2);
     RETURN_FUNC(floorf_func, floorf_generic);
 }
 
 typedef double rint_func(double __x);
 DEFINE_IFUNC_FOR(rint) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(rint_func, rint_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(rint_func, rint_avx2);
     RETURN_FUNC(rint_func, rint_generic);
 }
 
 typedef float rintf_func(float __x);
 DEFINE_IFUNC_FOR(rintf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(rintf_func, rintf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(rintf_func, rintf_avx2);
     RETURN_FUNC(rintf_func, rintf_generic);
 }
 
 typedef double hypot_func(double __x, double __y);
 DEFINE_IFUNC_FOR(hypot) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(hypot_func, hypot_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(hypot_func, hypot_avx2);
     RETURN_FUNC(hypot_func, hypot_generic);
 }
 
 typedef double log10_func(double __x);
 DEFINE_IFUNC_FOR(log10) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log10_func, log10_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log10_func, log10_avx2);
     RETURN_FUNC(log10_func, log10_generic);
 }
 
 typedef float log10f_func(float __x);
 DEFINE_IFUNC_FOR(log10f) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log10f_func, log10f_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log10f_func, log10f_avx2);
     RETURN_FUNC(log10f_func, log10f_generic);
 }
 
 typedef double log1p_func(double __x);
 DEFINE_IFUNC_FOR(log1p) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log1p_func, log1p_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log1p_func, log1p_avx2);
     RETURN_FUNC(log1p_func, log1p_generic);
 }
 
 typedef float log1pf_func(float __x);
 DEFINE_IFUNC_FOR(log1pf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log1pf_func, log1pf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(log1pf_func, log1pf_avx2);
     RETURN_FUNC(log1pf_func, log1pf_generic);
 }
 
 typedef double cbrt_func(double __x);
 DEFINE_IFUNC_FOR(cbrt) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cbrt_func, cbrt_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cbrt_func, cbrt_avx2);
     RETURN_FUNC(cbrt_func, cbrt_generic);
 }
 
 typedef float cbrtf_func(float __x);
 DEFINE_IFUNC_FOR(cbrtf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cbrtf_func, cbrtf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cbrtf_func, cbrtf_avx2);
     RETURN_FUNC(cbrtf_func, cbrtf_generic);
 }
 
 typedef double cos_func(double __x);
 DEFINE_IFUNC_FOR(cos) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cos_func, cos_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(cos_func, cos_avx2);
     RETURN_FUNC(cos_func, cos_generic);
 }
 
@@ -139,8 +139,8 @@ DEFINE_IFUNC_FOR(cosf) {
 
 typedef double sin_func(double __x);
 DEFINE_IFUNC_FOR(sin) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sin_func, sin_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sin_func, sin_avx2);
     RETURN_FUNC(sin_func, sin_generic);
 }
 
@@ -153,15 +153,15 @@ DEFINE_IFUNC_FOR(sinf) {
 
 typedef double sinh_func(double __x);
 DEFINE_IFUNC_FOR(sinh) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinh_func, sinh_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinh_func, sinh_avx2);
     RETURN_FUNC(sinh_func, sinh_generic);
 }
 
 typedef float sinhf_func(float __x);
 DEFINE_IFUNC_FOR(sinhf) {
-    __builtin_cpu_init();
-    if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinhf_func, sinhf_avx2);
+    //__builtin_cpu_init();
+    //if (__builtin_cpu_supports("avx2")) RETURN_FUNC(sinhf_func, sinhf_avx2);
     RETURN_FUNC(sinhf_func, sinhf_generic);
 }
 
-- 
2.17.1

