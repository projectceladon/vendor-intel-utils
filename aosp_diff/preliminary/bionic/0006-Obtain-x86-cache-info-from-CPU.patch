From 62829d4164f687340b5288523f970d5a8375d32c Mon Sep 17 00:00:00 2001
From: Vinay Kompella <vinay.kompella@intel.com>
Date: Tue, 14 Jun 2022 12:56:20 +0530
Subject: [PATCH] Obtain x86 cache info from CPU

The cache info today is hardcoded in cache.h
May not be optimal across various uarchs/SKUs
Leverage cpu_features lib to get the underlying cache.

Improvements seen on TGL, for various sizes
memset
  8M - 1.96x
memcpy
  2M - 19.6%
  4M - 8%
memcmp
  8M - 22%
memmove_non_overlapping
  2M - 19%
  4M - 10%
  8M - 36%
memmove_overlap_dst_before_src
  2M - 3.74x
  4M - 3.72x
memmove_overlap_src_before_dst
  2M - 3.32x
  4M - 3.30x

Test: bionic/tests/run-on-host.sh 64 && bionic/tests/run-on-host.sh 32
Signed-off-by: Vinay Kompella <vinay.kompella@intel.com>
Change-Id: Ieafd3902596b864404dfec940ccd229a42a17c51
Signed-off-by: ahs <amrita.h.s@intel.com>
---
 libc/Android.bp                               | 26 ++++++++++-
 libc/arch-arm/bionic/cpuinfo.cpp              | 33 ++++++++++++++
 libc/arch-arm64/bionic/cpuinfo.cpp            | 33 ++++++++++++++
 libc/arch-x86/bionic/cpuinfo.cpp              | 45 +++++++++++++++++++
 libc/arch-x86/cache.h                         | 41 +++++++++++++++++
 libc/arch-x86/silvermont/string/cache.h       | 36 ---------------
 .../silvermont/string/sse2-memmove-slm.S      | 32 ++++++++++++-
 .../silvermont/string/sse2-memset-slm.S       | 27 ++++++++++-
 .../kabylake/string/avx2-memset-kbl.S         |  4 +-
 libc/arch-x86_64/kabylake/string/cache.h      | 36 ---------------
 .../silvermont/string/sse2-memmove-slm.S      | 12 ++++-
 .../silvermont/string/sse2-memset-slm.S       |  4 +-
 .../silvermont/string/sse4-memcmp-slm.S       |  6 +--
 libc/bionic/libc_init_common.cpp              |  2 +
 libc/private/bionic_cpuinfo.h                 | 37 +++++++++++++++
 15 files changed, 286 insertions(+), 88 deletions(-)
 create mode 100644 libc/arch-arm/bionic/cpuinfo.cpp
 create mode 100644 libc/arch-arm64/bionic/cpuinfo.cpp
 create mode 100644 libc/arch-x86/bionic/cpuinfo.cpp
 create mode 100644 libc/arch-x86/cache.h
 delete mode 100644 libc/arch-x86/silvermont/string/cache.h
 delete mode 100644 libc/arch-x86_64/kabylake/string/cache.h
 create mode 100644 libc/private/bionic_cpuinfo.h

diff --git a/libc/Android.bp b/libc/Android.bp
index 1ff452077..8ff35fd98 100644
--- a/libc/Android.bp
+++ b/libc/Android.bp
@@ -825,12 +825,30 @@ cc_library_static {
     },
 }
 
+cc_defaults {
+    name: "libcpu_features_dependencies",
+    include_dirs: ["external/cpu_features/include"],
+    cflags: [
+        // Reserve 1024 bytes on the stack when reading from `/proc/cpuinfo`.
+        "-DSTACK_LINE_READER_BUFFER_SIZE=1024",
+        "-Wno-gnu-designator",
+    ],
+    arch: {
+        x86: {
+            srcs: [":libcpu_features_x86_sources"],
+        },
+        x86_64: {
+            srcs: [":libcpu_features_x86_sources"],
+        }
+    }
+}
+
 // ========================================================
 // libc_bionic.a - home-grown C library code
 // ========================================================
 
 cc_library_static {
-    defaults: ["libc_defaults"],
+    defaults: ["libc_defaults", "libcpu_features_dependencies"],
     srcs: [
         // These require getauxval, which isn't available on older platforms.
         "bionic/sysconf.cpp",
@@ -871,6 +889,7 @@ cc_library_static {
                 "arch-arm/bionic/setjmp.S",
                 "arch-arm/bionic/syscall.S",
                 "arch-arm/bionic/vfork.S",
+                "arch-arm/bionic/cpuinfo.cpp",
 
                 "arch-arm/cortex-a15/bionic/memcpy.S",
                 "arch-arm/cortex-a15/bionic/memmove.S",
@@ -913,6 +932,7 @@ cc_library_static {
                 "arch-arm64/bionic/setjmp.S",
                 "arch-arm64/bionic/syscall.S",
                 "arch-arm64/bionic/vfork.S",
+                "arch-arm64/bionic/cpuinfo.cpp",
             ],
             exclude_srcs: [
                 "bionic/__memcpy_chk.cpp",
@@ -963,6 +983,7 @@ cc_library_static {
                 "arch-x86/bionic/syscall.S",
                 "arch-x86/bionic/vfork.S",
                 "arch-x86/bionic/__x86.get_pc_thunk.S",
+                "arch-x86/bionic/cpuinfo.cpp",
 
                 // ssse3 functions
                 "arch-x86/atom/string/ssse3-strcat-atom.S",
@@ -1059,6 +1080,9 @@ cc_library_static {
                 "arch-x86_64/bionic/setjmp.S",
                 "arch-x86_64/bionic/syscall.S",
                 "arch-x86_64/bionic/vfork.S",
+                
+                // Common source for both x86/x86_64
+                "arch-x86/bionic/cpuinfo.cpp",
             ],
             exclude_srcs: [
                 "bionic/strchr.cpp",
diff --git a/libc/arch-arm/bionic/cpuinfo.cpp b/libc/arch-arm/bionic/cpuinfo.cpp
new file mode 100644
index 000000000..528de9647
--- /dev/null
+++ b/libc/arch-arm/bionic/cpuinfo.cpp
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2022 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "private/bionic_cpuinfo.h"
+
+void __libc_init_cpuinfo() {}
+
+void __libc_init_cacheinfo() {}
diff --git a/libc/arch-arm64/bionic/cpuinfo.cpp b/libc/arch-arm64/bionic/cpuinfo.cpp
new file mode 100644
index 000000000..528de9647
--- /dev/null
+++ b/libc/arch-arm64/bionic/cpuinfo.cpp
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2022 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "private/bionic_cpuinfo.h"
+
+void __libc_init_cpuinfo() {}
+
+void __libc_init_cacheinfo() {}
diff --git a/libc/arch-x86/bionic/cpuinfo.cpp b/libc/arch-x86/bionic/cpuinfo.cpp
new file mode 100644
index 000000000..0b56161b3
--- /dev/null
+++ b/libc/arch-x86/bionic/cpuinfo.cpp
@@ -0,0 +1,45 @@
+#include <async_safe/log.h>
+#include "../cache.h"
+#include "cpuinfo_x86.h"
+#include "private/bionic_cpuinfo.h"
+
+/* Data cache size for use in memory and string routines, typically
+   L1 size, rounded to multiple of 256 bytes.  */
+unsigned long int __x86_data_cache_size = 24 * 1024;
+unsigned long int __x86_data_cache_size_half = __x86_data_cache_size / 2;
+/* Shared cache size for use in memory and string routines, typically
+   L2 or L3 size, rounded to multiple of 256 bytes.  */
+unsigned long int __x86_shared_cache_size = 1024 * 1024;
+unsigned long int __x86_shared_cache_size_half = __x86_shared_cache_size / 2;
+
+using namespace cpu_features;
+
+void __libc_init_cpuinfo() {
+  __libc_init_cacheinfo();
+}
+
+void __libc_init_cacheinfo() {
+  CacheInfo info = GetX86CacheInfo();
+  bool bL3Obtained = false;
+  for (int count = 0, i = 0; count < info.size && i < CPU_FEATURES_MAX_CACHE_LEVEL; ++i) {
+    if (info.levels[i].level == 1 && info.levels[i].cache_type == CPU_FEATURE_CACHE_DATA) {
+      // L1D
+      __x86_data_cache_size = info.levels[i].cache_size;
+      __x86_data_cache_size_half = __x86_data_cache_size / 2;
+    } else if (info.levels[i].level == 3 &&
+               info.levels[i].cache_type == CPU_FEATURE_CACHE_UNIFIED) {
+      // L3Unified
+      __x86_shared_cache_size = info.levels[i].cache_size;
+      __x86_shared_cache_size_half = __x86_shared_cache_size / 2;
+      bL3Obtained = true;
+    } else if (info.levels[i].level == 2 &&
+               (info.levels[i].cache_type == CPU_FEATURE_CACHE_UNIFIED ||
+                info.levels[i].cache_type == CPU_FEATURE_CACHE_DATA) &&
+               !bL3Obtained) {
+      // Fallback to L2 Data or Unified
+      // If no L3, this must be the shared cache
+      __x86_shared_cache_size = info.levels[i].cache_size;
+      __x86_shared_cache_size_half = __x86_shared_cache_size / 2;
+    }
+  }
+}
\ No newline at end of file
diff --git a/libc/arch-x86/cache.h b/libc/arch-x86/cache.h
new file mode 100644
index 000000000..cf1faeac5
--- /dev/null
+++ b/libc/arch-x86/cache.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2022 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _PRIVATE_ARCH_CACHE_H_
+#define _PRIVATE_ARCH_CACHE_H_
+
+/* Data cache size for use in memory and string routines, typically
+   L1 size, rounded to multiple of 256 bytes.  */
+extern unsigned long int __x86_data_cache_size_half;
+extern unsigned long int __x86_data_cache_size;
+/* Shared cache size for use in memory and string routines, typically
+   L2 or L3 size, rounded to multiple of 256 bytes.  */
+extern unsigned long int __x86_shared_cache_size_half;
+extern unsigned long int __x86_shared_cache_size;
+
+#endif
diff --git a/libc/arch-x86/silvermont/string/cache.h b/libc/arch-x86/silvermont/string/cache.h
deleted file mode 100644
index c342b1c33..000000000
--- a/libc/arch-x86/silvermont/string/cache.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
-Copyright (c) 2010, Intel Corporation
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
-
-    * Redistributions of source code must retain the above copyright notice,
-    * this list of conditions and the following disclaimer.
-
-    * Redistributions in binary form must reproduce the above copyright notice,
-    * this list of conditions and the following disclaimer in the documentation
-    * and/or other materials provided with the distribution.
-
-    * Neither the name of Intel Corporation nor the names of its contributors
-    * may be used to endorse or promote products derived from this software
-    * without specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-*/
-
-/* Values are optimized for Silvermont */
-#define SHARED_CACHE_SIZE	(1024*1024)			/* Silvermont L2 Cache */
-#define DATA_CACHE_SIZE		(24*1024)			/* Silvermont L1 Data Cache */
-
-#define SHARED_CACHE_SIZE_HALF	(SHARED_CACHE_SIZE / 2)
-#define DATA_CACHE_SIZE_HALF	(DATA_CACHE_SIZE / 2)
diff --git a/libc/arch-x86/silvermont/string/sse2-memmove-slm.S b/libc/arch-x86/silvermont/string/sse2-memmove-slm.S
index da6456ccc..111e3220f 100644
--- a/libc/arch-x86/silvermont/string/sse2-memmove-slm.S
+++ b/libc/arch-x86/silvermont/string/sse2-memmove-slm.S
@@ -28,8 +28,6 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
-#include "cache.h"
-
 #ifndef MEMMOVE
 # define MEMMOVE	memmove_generic
 #endif
@@ -93,6 +91,8 @@ name:		\
 #define RETURN_END	POP (%ebx); ret
 #define RETURN		RETURN_END; CFI_PUSH (%ebx)
 
+# define SETUP_PIC_REG(x)	call	__x86.get_pc_thunk.x
+
 	.section .text.sse2,"ax",@progbits
 ENTRY (MEMMOVE)
 	ENTRANCE
@@ -192,7 +192,21 @@ L(mm_len_128_or_more_forward):
 	cmp	%edi, %ebx
 	jbe	L(mm_copy_remaining_forward)
 
+#ifdef SHARED_CACHE_SIZE_HALF
 	cmp	$SHARED_CACHE_SIZE_HALF, %ecx
+#else
+# if (defined SHARED || defined __PIC__)
+	PUSH(%ebx)
+	SETUP_PIC_REG(bx)
+	add	$_GLOBAL_OFFSET_TABLE_, %ebx
+	cmp	__x86_shared_cache_size_half@GOTOFF(%ebx), %ecx
+	/* Restore ebx. We can place a pop before jump as it doesnt effect any flags */
+	POP(%ebx)
+# else
+	cmp	__x86_shared_cache_size_half, %ecx
+# endif
+#endif
+
 	jae	L(mm_large_page_loop_forward)
 
 	.p2align 4
@@ -423,7 +437,21 @@ L(mm_len_128_or_more_backward):
 	cmp	%edi, %ebx
 	jae	L(mm_main_loop_backward_end)
 
+#ifdef SHARED_CACHE_SIZE_HALF
 	cmp	$SHARED_CACHE_SIZE_HALF, %ecx
+#else
+# if (defined SHARED || defined __PIC__)
+	PUSH(%ebx)
+	SETUP_PIC_REG(bx)
+	add	$_GLOBAL_OFFSET_TABLE_, %ebx
+	cmp	__x86_shared_cache_size_half@GOTOFF(%ebx), %ecx
+	/* Restore ebx. We can place a pop before jump as it doesnt effect any flags */
+	POP(%ebx)
+# else
+	cmp	__x86_shared_cache_size_half, %ecx
+# endif
+#endif
+
 	jae	L(mm_large_page_loop_backward)
 
 	.p2align 4
diff --git a/libc/arch-x86/silvermont/string/sse2-memset-slm.S b/libc/arch-x86/silvermont/string/sse2-memset-slm.S
index b7633f5c9..9c5e1ed4a 100644
--- a/libc/arch-x86/silvermont/string/sse2-memset-slm.S
+++ b/libc/arch-x86/silvermont/string/sse2-memset-slm.S
@@ -30,8 +30,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <private/bionic_asm.h>
 
-#include "cache.h"
-
 #ifndef L
 # define L(label)	.L##label
 #endif
@@ -63,6 +61,8 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 # define RETURN		RETURN_END; CFI_PUSH(%ebx)
 # define JMPTBL(I, B)	I - B
 
+# define SETUP_PIC_REG(x)	call	__x86.get_pc_thunk.x
+
 /* Load an entry in a jump table into EBX and branch to it.  TABLE is a
    jump table with relative offsets.   */
 # define BRANCH_TO_JMPTBL_ENTRY(TABLE)				\
@@ -176,14 +176,37 @@ L(aligned_16_less128bytes):
 	ALIGN(4)
 L(128bytesormore):
 	PUSH(%ebx)
+
+#ifdef SHARED_CACHE_SIZE
 	mov	$SHARED_CACHE_SIZE, %ebx
+#else
+# if (defined SHARED || defined __PIC__)
+	SETUP_PIC_REG(bx)
+	add	$_GLOBAL_OFFSET_TABLE_, %ebx
+	mov	__x86_shared_cache_size@GOTOFF(%ebx), %ebx
+# else
+	mov	__x86_shared_cache_size, %ebx
+# endif
+#endif
+
 	cmp	%ebx, %ecx
 	jae	L(128bytesormore_nt_start)
 
 	POP(%ebx)
 
 	PUSH(%ebx)
+
+#ifdef DATA_CACHE_SIZE
 	mov	$DATA_CACHE_SIZE, %ebx
+#else
+# if (defined SHARED || defined __PIC__)
+	SETUP_PIC_REG(bx)
+	add	$_GLOBAL_OFFSET_TABLE_, %ebx
+	mov	__x86_data_cache_size@GOTOFF(%ebx), %ebx
+# else
+	mov	__x86_data_cache_size, %ebx
+# endif
+#endif
 
 	cmp	%ebx, %ecx
 	jae	L(128bytes_L2_normal)
diff --git a/libc/arch-x86_64/kabylake/string/avx2-memset-kbl.S b/libc/arch-x86_64/kabylake/string/avx2-memset-kbl.S
index b09d80ab8..7fd3fb948 100644
--- a/libc/arch-x86_64/kabylake/string/avx2-memset-kbl.S
+++ b/libc/arch-x86_64/kabylake/string/avx2-memset-kbl.S
@@ -30,7 +30,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <private/bionic_asm.h>
 
-#include "cache.h"
+//#include "cache.h"
 
 #ifndef L
 # define L(label)	.L##label
@@ -129,7 +129,7 @@ L(256bytesmore):
 #ifdef SHARED_CACHE_SIZE
 cmp	$SHARED_CACHE_SIZE, %r8
 #else
-cmp	__x86_64_shared_cache_size(%rip), %r8
+cmp	__x86_shared_cache_size(%rip), %r8
 #endif
 	ja	L(256bytesmore_nt)
 
diff --git a/libc/arch-x86_64/kabylake/string/cache.h b/libc/arch-x86_64/kabylake/string/cache.h
deleted file mode 100644
index 4131509fb..000000000
--- a/libc/arch-x86_64/kabylake/string/cache.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
-Copyright (c) 2014, Intel Corporation
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
-
-    * Redistributions of source code must retain the above copyright notice,
-    * this list of conditions and the following disclaimer.
-
-    * Redistributions in binary form must reproduce the above copyright notice,
-    * this list of conditions and the following disclaimer in the documentation
-    * and/or other materials provided with the distribution.
-
-    * Neither the name of Intel Corporation nor the names of its contributors
-    * may be used to endorse or promote products derived from this software
-    * without specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
-ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
-ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-*/
-
-/* Values are optimized for Core Architecture */
-#define SHARED_CACHE_SIZE (4096*1024)  /* Core Architecture L2 Cache */
-#define DATA_CACHE_SIZE   (24*1024)    /* Core Architecture L1 Data Cache */
-
-#define SHARED_CACHE_SIZE_HALF (SHARED_CACHE_SIZE / 2)
-#define DATA_CACHE_SIZE_HALF   (DATA_CACHE_SIZE / 2)
diff --git a/libc/arch-x86_64/silvermont/string/sse2-memmove-slm.S b/libc/arch-x86_64/silvermont/string/sse2-memmove-slm.S
index 7024f4950..bc137d6cc 100644
--- a/libc/arch-x86_64/silvermont/string/sse2-memmove-slm.S
+++ b/libc/arch-x86_64/silvermont/string/sse2-memmove-slm.S
@@ -28,8 +28,6 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
-#include "cache.h"
-
 #ifndef MEMMOVE
 # define MEMMOVE		memmove_generic
 #endif
@@ -189,7 +187,12 @@ L(mm_len_128_or_more_forward):
 	cmp	%r8, %rbx
 	jbe	L(mm_copy_remaining_forward)
 
+#ifdef SHARED_CACHE_SIZE_HALF
 	cmp	$SHARED_CACHE_SIZE_HALF, %rdx
+#else
+	cmp	__x86_shared_cache_size_half(%rip), %rdx
+#endif
+
 	jae	L(mm_large_page_loop_forward)
 
 	.p2align 4
@@ -414,7 +417,12 @@ L(mm_len_128_or_more_backward):
 	cmp	%r9, %rbx
 	jae	L(mm_recalc_len)
 
+#ifdef SHARED_CACHE_SIZE_HALF
 	cmp	$SHARED_CACHE_SIZE_HALF, %rdx
+#else
+	cmp __x86_shared_cache_size_half(%rip), %rdx
+#endif
+
 	jae	L(mm_large_page_loop_backward)
 
 	.p2align 4
diff --git a/libc/arch-x86_64/silvermont/string/sse2-memset-slm.S b/libc/arch-x86_64/silvermont/string/sse2-memset-slm.S
index 883078d8c..68d4b07f5 100644
--- a/libc/arch-x86_64/silvermont/string/sse2-memset-slm.S
+++ b/libc/arch-x86_64/silvermont/string/sse2-memset-slm.S
@@ -30,8 +30,6 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <private/bionic_asm.h>
 
-#include "cache.h"
-
 #ifndef L
 # define L(label)	.L##label
 #endif
@@ -122,7 +120,7 @@ L(128bytesmore):
 #ifdef SHARED_CACHE_SIZE
 	cmp	$SHARED_CACHE_SIZE, %r8
 #else
-	cmp	__x86_64_shared_cache_size(%rip), %r8
+	cmp	__x86_shared_cache_size(%rip), %r8
 #endif
 	ja	L(128bytesmore_nt)
 
diff --git a/libc/arch-x86_64/silvermont/string/sse4-memcmp-slm.S b/libc/arch-x86_64/silvermont/string/sse4-memcmp-slm.S
index 6cfcd767f..1f4281211 100644
--- a/libc/arch-x86_64/silvermont/string/sse4-memcmp-slm.S
+++ b/libc/arch-x86_64/silvermont/string/sse4-memcmp-slm.S
@@ -28,8 +28,6 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
-#include "cache.h"
-
 #ifndef MEMCMP
 # define MEMCMP		memcmp_generic
 #endif
@@ -356,7 +354,7 @@ L(512bytesormore):
 #ifdef DATA_CACHE_SIZE_HALF
 	mov	$DATA_CACHE_SIZE_HALF, %r8
 #else
-	mov	__x86_64_data_cache_size_half(%rip), %r8
+	mov	__x86_data_cache_size_half(%rip), %r8
 #endif
 	mov	%r8, %r9
 	shr	$1, %r8
@@ -672,7 +670,7 @@ L(512bytesormorein2aligned):
 #ifdef DATA_CACHE_SIZE_HALF
 	mov	$DATA_CACHE_SIZE_HALF, %r8
 #else
-	mov	__x86_64_data_cache_size_half(%rip), %r8
+	mov	__x86_data_cache_size_half(%rip), %r8
 #endif
 	mov	%r8, %r9
 	shr	$1, %r8
diff --git a/libc/bionic/libc_init_common.cpp b/libc/bionic/libc_init_common.cpp
index 8084e73d1..044fbb431 100644
--- a/libc/bionic/libc_init_common.cpp
+++ b/libc/bionic/libc_init_common.cpp
@@ -45,6 +45,7 @@
 #include <async_safe/log.h>
 
 #include "private/WriteProtected.h"
+#include "private/bionic_cpuinfo.h"
 #include "private/bionic_defs.h"
 #include "private/bionic_globals.h"
 #include "private/bionic_tls.h"
@@ -125,6 +126,7 @@ void __libc_init_common() {
   __system_properties_init(); // Requires 'environ'.
   __libc_init_fdsan(); // Requires system properties (for debug.fdsan).
   __libc_init_fdtrack();
+  __libc_init_cpuinfo();
 }
 
 void __libc_init_fork_handler() {
diff --git a/libc/private/bionic_cpuinfo.h b/libc/private/bionic_cpuinfo.h
new file mode 100644
index 000000000..3e0d7b2f0
--- /dev/null
+++ b/libc/private/bionic_cpuinfo.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2022 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _PRIVATE_BIONIC_CPUINFO_H_
+#define _PRIVATE_BIONIC_CPUINFO_H_
+
+#include <sys/cdefs.h>
+
+__LIBC_HIDDEN__ void __libc_init_cpuinfo();
+__LIBC_HIDDEN__ void __libc_init_cacheinfo();
+
+#endif
-- 
2.37.3

