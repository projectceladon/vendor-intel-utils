From 870a41db926e516b284e98bb8de2478b20eff98a Mon Sep 17 00:00:00 2001
From: "Zhong,Fangjian" <fangjian.zhong@intel.com>
Date: Mon, 23 Apr 2018 08:22:37 +0800
Subject: [PATCH] enabling x86-64 Google diff

Change-Id: Ib6a7ac3b97b203e11bb58b51b77880131456f7b5
Tracked-On: https://jira01.devtools.intel.com/browse/OAM-63646
Signed-off-by: Zhong,Fangjian <fangjian.zhong@intel.com>
---
 include/user/trusty_ipc.h                    | 2 +-
 include/user/trusty_uuid.h                   | 1 +
 lib/hwkey/hwkey.c                            | 8 ++++----
 lib/keymaster/keymaster.c                    | 8 ++++----
 lib/libc-trusty/arch/x86/64/trusty_syscall.S | 6 ++++++
 lib/libc-trusty/malloc.c                     | 2 +-
 lib/openssl-stubs/sscanf.c                   | 5 +++++
 lib/rng/rules.mk                             | 3 ++-
 lib/storage/storage.c                        | 6 +++---
 9 files changed, 27 insertions(+), 14 deletions(-)

diff --git a/include/user/trusty_ipc.h b/include/user/trusty_ipc.h
index 33a8ccd..860d836 100644
--- a/include/user/trusty_ipc.h
+++ b/include/user/trusty_ipc.h
@@ -73,7 +73,7 @@ typedef struct ipc_msg {
 } ipc_msg_t;
 
 typedef struct ipc_msg_info {
-	size_t		len;
+	uint32_t	len;
 	uint32_t	id;
 	uint32_t	num_handles;
 } ipc_msg_info_t;
diff --git a/include/user/trusty_uuid.h b/include/user/trusty_uuid.h
index c6cb9a2..61592e8 100644
--- a/include/user/trusty_uuid.h
+++ b/include/user/trusty_uuid.h
@@ -24,6 +24,7 @@
 #pragma once
 
 #include <sys/types.h>
+#include "trusty_apps_uuid.h"
 
 typedef struct uuid
 {
diff --git a/lib/hwkey/hwkey.c b/lib/hwkey/hwkey.c
index 40603f9..14a94c2 100644
--- a/lib/hwkey/hwkey.c
+++ b/lib/hwkey/hwkey.c
@@ -109,13 +109,13 @@ static long send_req(hwkey_session_t session, struct hwkey_msg *msg, uint8_t *re
 
 	if (inf.len > sizeof(*msg) + *rsp_buf_len) {
 		TLOGE("%s: insufficient output buffer size (%zu > %zu)\n",
-		      __func__, inf.len - sizeof(*msg), *rsp_buf_len);
+		      __func__, inf.len - sizeof(*msg), (size_t)*rsp_buf_len);
 		rc = ERR_TOO_BIG;
 		goto err_get_fail;
 	}
 
 	if (inf.len < sizeof(*msg)) {
-		TLOGE("%s: short buffer (%zu)\n", __func__, inf.len);
+		TLOGE("%s: short buffer (%u)\n", __func__, inf.len);
 		rc = ERR_NOT_VALID;
 		goto err_get_fail;
 	}
@@ -143,10 +143,10 @@ static long send_req(hwkey_session_t session, struct hwkey_msg *msg, uint8_t *re
 		goto err_read_fail;
 	}
 
-	size_t read_len = (size_t) rc;
+	uint32_t read_len = rc;
 	if (read_len != inf.len) {
 		// data read in does not match message length
-		TLOGE("%s: invalid read length (%zu != %zu)\n",
+		TLOGE("%s: invalid read length (%u != %u)\n",
 		       __func__, read_len, inf.len);
 		rc = ERR_IO;
 		goto err_read_fail;
diff --git a/lib/keymaster/keymaster.c b/lib/keymaster/keymaster.c
index abb2510..f78e672 100644
--- a/lib/keymaster/keymaster.c
+++ b/lib/keymaster/keymaster.c
@@ -139,7 +139,7 @@ int keymaster_get_auth_token_key(keymaster_session_t session,
 	}
 
 	if (inf.len <= sizeof(struct keymaster_message)) {
-		TLOGE("%s: invalid auth token len (%zu)\n", __func__, inf.len);
+		TLOGE("%s: invalid auth token len (%u)\n", __func__, inf.len);
 		put_msg(session, inf.id);
 		return ERR_NOT_FOUND;
 	}
@@ -147,7 +147,7 @@ int keymaster_get_auth_token_key(keymaster_session_t session,
 	size_t size = inf.len - sizeof(struct keymaster_message);
 	uint8_t *key_buf = malloc(size);
 	if (key_buf == NULL) {
-		TLOGE("%s: out of memory (%zu)\n", __func__, inf.len);
+		TLOGE("%s: out of memory (%u)\n", __func__, inf.len);
 		put_msg(session, inf.id);
 		return ERR_NO_MEMORY;
 	}
@@ -158,10 +158,10 @@ int keymaster_get_auth_token_key(keymaster_session_t session,
 		goto err_bad_read;
 	}
 
-	size_t read_len = (size_t) rc;
+	uint32_t read_len = rc;
 	if (read_len != inf.len){
 		// data read in does not match message length
-		TLOGE("%s: invalid read length: (%zu != %zu)\n",
+		TLOGE("%s: invalid read length: (%u != %u)\n",
 		      __func__, read_len, inf.len);
 		rc = ERR_IO;
 		goto err_bad_read;
diff --git a/lib/libc-trusty/arch/x86/64/trusty_syscall.S b/lib/libc-trusty/arch/x86/64/trusty_syscall.S
index 3ffec57..e116521 100644
--- a/lib/libc-trusty/arch/x86/64/trusty_syscall.S
+++ b/lib/libc-trusty/arch/x86/64/trusty_syscall.S
@@ -111,11 +111,17 @@ FUNCTION(nanosleep)
     pushq %rbp
     pushq %rbx
     pushq %r15
+    pushq %rcx
+    movq %rdx, %rcx
+    shr $32, %rcx
+    /* clear high 32 bit of RDX */
+    movl %edx, %edx
     movq $__NR_nanosleep, %rax
     leaq .Lnanosleep_sysreturn(%rip), %rbx
     movq %rsp, %rbp
     sysenter
 .Lnanosleep_sysreturn:
+    popq %rcx
     popq %r15
     popq %rbx
     popq %rbp
diff --git a/lib/libc-trusty/malloc.c b/lib/libc-trusty/malloc.c
index b3add96..a84a39c 100644
--- a/lib/libc-trusty/malloc.c
+++ b/lib/libc-trusty/malloc.c
@@ -53,7 +53,7 @@ static void *sbrk(ptrdiff_t increment)
 	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
 	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
 
-	new_brk = (char *)brk((uint32_t)end);
+	new_brk = (char *)brk((uint32_t)(uint64_t)end);
 	if (new_brk < end)
 		return (void *)-1;
 
diff --git a/lib/openssl-stubs/sscanf.c b/lib/openssl-stubs/sscanf.c
index 2cdc4f8..274876f 100644
--- a/lib/openssl-stubs/sscanf.c
+++ b/lib/openssl-stubs/sscanf.c
@@ -29,3 +29,8 @@ int sscanf(const char *str, const char *fmt, ...)
 {
 	return 0;
 }
+
+char *getenv(const char *name)
+{
+    return (void *)0;
+}
diff --git a/lib/rng/rules.mk b/lib/rng/rules.mk
index bb8139c..dd8c63d 100644
--- a/lib/rng/rules.mk
+++ b/lib/rng/rules.mk
@@ -23,6 +23,7 @@ GLOBAL_INCLUDES += $(LOCAL_DIR)/include/
 
 MODULE_DEPS := \
 	interface/hwrng \
-	openssl
+	lib/libc-trusty \
+	lib/boringssl
 
 include make/module.mk
diff --git a/lib/storage/storage.c b/lib/storage/storage.c
index 6224bfb..5907f1b 100644
--- a/lib/storage/storage.c
+++ b/lib/storage/storage.c
@@ -144,9 +144,9 @@ static ssize_t get_response(storage_session_t session,
         return rc;
     }
 
-    if ((size_t)rc != mi.len) {
-        TLOGE("%s: partial message read (%zd vs. %zd)\n",
-              __func__, (size_t)rc, mi.len);
+    if ((uint32_t)rc != mi.len) {
+        TLOGE("%s: partial message read (%d vs. %d)\n",
+              __func__, rc, mi.len);
         return ERR_IO;
     }
 
-- 
2.21.0

