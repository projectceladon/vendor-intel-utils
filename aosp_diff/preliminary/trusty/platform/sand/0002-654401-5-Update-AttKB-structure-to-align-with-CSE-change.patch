From 2460df17ea052f6ef0955251d6b74f6096827258 Mon Sep 17 00:00:00 2001
From: Huang Yang <yang.huang@intel.com>
Date: Wed, 21 Nov 2018 14:43:17 +0800
Subject: [PATCH 2/6] Update AttKB structure to align with CSE change

P stable uses CSE 2278, which updates structure of AttKB.
It causes to a failure to parse or decompress AttKB.

Change-Id: I2ad32cdb2e49d48280df1c32006a7737f539273f
Signed-off-by: Huang Yang <yang.huang@intel.com>
---
 include/shared/trusty_device_info.h | 36 +++++++++++++++++++++++++++++
 lib/heci/cse_msg.h                  |  6 ++++-
 lib/heci/heci.c                     |  1 +
 lib/syscall/syscall_x86.c           |  6 ++++-
 4 files changed, 47 insertions(+), 2 deletions(-)

diff --git a/include/shared/trusty_device_info.h b/include/shared/trusty_device_info.h
index d0d80a5..4c9ed4c 100644
--- a/include/shared/trusty_device_info.h
+++ b/include/shared/trusty_device_info.h
@@ -104,6 +104,42 @@ typedef struct {
 	uint8_t                attkb[0];
 } trusty_device_info_t;
 
+#define TRUSTY_ENC_IV_SIZE    12
+#define TRUSTY_ENC_TAG_SIZE   16
+#define TRUSTY_ENC_FORMAT_VER 1
+
+#pragma pack (1)
+typedef struct
+{
+	uint8_t version;           // version 1 supports plan and LZMA
+	uint16_t size;             // decompressed size excluding this header
+	struct
+	{
+		uint8_t compressed : 1;//0- uncompressed 1- LZMA
+		uint8_t encrypted  : 1;
+		uint8_t reserved   : 6;
+	} format;
+	uint8_t flags;//not used
+	uint16_t reserved;//not used
+} attkb_header_t;
+
+typedef struct
+{
+	uint16_t      format_ver;//1 for now
+	uint16_t      enc_blob_size;
+	uint8_t       IV[TRUSTY_ENC_IV_SIZE];
+	uint8_t       tag[TRUSTY_ENC_TAG_SIZE];
+	uint8_t       enc_blob[0];
+} trusty_encrypted_blob_t;
+
+typedef struct
+{
+	attkb_header_t attkb_hdr;
+	trusty_encrypted_blob_t encryption_blob;
+} trusty_enc_attkb_t;
+
+#pragma pack ()
+
 #define DUMMY_PLATFORM     0
 #define APL_PLATFORM       1
 #define ICL_PLATFORM       2
diff --git a/lib/heci/cse_msg.h b/lib/heci/cse_msg.h
index 1003fb3..9a1a221 100644
--- a/lib/heci/cse_msg.h
+++ b/lib/heci/cse_msg.h
@@ -60,7 +60,11 @@ typedef struct
     uint32_t             Size;
     uint32_t             DstAddrLower;
     uint32_t             DstAddrUpper;
-    uint32_t             Flags;
+    struct
+    {
+      uint32_t Encrypt  : 1;
+      uint32_t Reserved : 31;
+    } Flags;
 } MCA_BOOTLOADER_READ_ATTKB_REQ_DATA;
 
 typedef struct
diff --git a/lib/heci/heci.c b/lib/heci/heci.c
index d244db4..5c3b6a9 100644
--- a/lib/heci/heci.c
+++ b/lib/heci/heci.c
@@ -415,6 +415,7 @@ uint32_t get_attkb(uint8_t *attkb)
     Req->DstAddrLower = (uint32_t)pa;
     Req->DstAddrUpper = (uint32_t)(pa >> 32);
     Req->Size = MAX_ATTKB_SIZE;
+    Req->Flags.Encrypt = 0;
 
     HeciSendLength = sizeof(MCA_BOOTLOADER_READ_ATTKB_REQ_DATA);
     HeciRecvLength = sizeof(DataBuffer);
diff --git a/lib/syscall/syscall_x86.c b/lib/syscall/syscall_x86.c
index d5f1290..e76d769 100644
--- a/lib/syscall/syscall_x86.c
+++ b/lib/syscall/syscall_x86.c
@@ -141,7 +141,7 @@ long sys_get_device_info(user_addr_t info)
 
 	/* memcpy may result to klocwork scan error, so size is checked before memcpy is called. */
 	ret = memcpy_s(dev_info, sizeof(device_sec_info_t), g_sec_info, g_sec_info->size_of_this_struct);
-	if (ret != NO_ERROR){
+	if (ret != NO_ERROR) {
 		dprintf(INFO, "failed to memcopy dev_info!\n");
 		free(dev_info);
 		return ERR_GENERIC;
@@ -172,6 +172,10 @@ long sys_get_device_info(user_addr_t info)
 		dev_info->attkb_size = 0;
 #endif
 	}
+	else {
+		memset(dev_info->sec_info.attkb_enc_key, 0,
+			sizeof(dev_info->sec_info.attkb_enc_key));
+	}
 
 	ret = copy_to_user(info, dev_info, sizeof(trusty_device_info_t));
 	memset(dev_info, 0, sizeof(trusty_device_info_t));
-- 
2.22.0

