From e8e602703db1be53fe589bdf8fbfb74862d0b67d Mon Sep 17 00:00:00 2001
From: zhonghuis <zhonghui.shi@intel.com>
Date: Fri, 12 Apr 2024 13:42:22 +0000
Subject: [PATCH] Add display controlling UI on settings

Add UI on Settings for display adjustment, including
Saturation, Hue, Contrast, Luminance and White Balance.

Tracked-On: OAM-114024
Change-Id: I762e29f1703a6def247ba21593a7e70a3e32e2b9
Signed-off-by: xubing <bing.xu@intel.com>
---
 res/values/config.xml                         |   5 +
 res/values/preference_keys.xml                |   5 +
 res/values/strings.xml                        |   6 +
 res/xml/display_settings_fragment.xml         |  27 +++-
 .../ContrastLevelPreferenceController.java    | 126 +++++++++++++++++
 .../display/HueLevelPreferenceController.java | 129 +++++++++++++++++
 .../LuminanceLevelPreferenceController.java   | 121 ++++++++++++++++
 .../SaturationLevelPreferenceController.java  | 132 ++++++++++++++++++
 ...WhitebalanceLevelPreferenceController.java | 130 +++++++++++++++++
 9 files changed, 680 insertions(+), 1 deletion(-)
 create mode 100644 src/com/android/car/settings/display/ContrastLevelPreferenceController.java
 create mode 100644 src/com/android/car/settings/display/HueLevelPreferenceController.java
 create mode 100644 src/com/android/car/settings/display/LuminanceLevelPreferenceController.java
 create mode 100644 src/com/android/car/settings/display/SaturationLevelPreferenceController.java
 create mode 100644 src/com/android/car/settings/display/WhitebalanceLevelPreferenceController.java

diff --git a/res/values/config.xml b/res/values/config.xml
index 7e89ff199..c2c6567e1 100644
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -93,6 +93,11 @@
         <item>@string/pk_display_settings_entry</item>
         <item>@string/pk_brightness_level</item>
         <item>@string/pk_adaptive_brightness_switch</item>
+        <item>@string/pk_contrast_level</item>
+        <item>@string/pk_hue_level</item>
+        <item>@string/pk_saturation_level</item>
+        <item>@string/pk_whitebalance_level</item>
+        <item>@string/pk_luminance_level</item>
         <item>@string/pk_sound_settings_entry</item>
         <item>@string/pk_volume_settings</item>
         <item>@string/pk_network_and_internet_entry</item>
diff --git a/res/values/preference_keys.xml b/res/values/preference_keys.xml
index 169d7b139..cf430cf4e 100644
--- a/res/values/preference_keys.xml
+++ b/res/values/preference_keys.xml
@@ -351,6 +351,11 @@
     <string name="pk_adaptive_brightness_switch" translatable="false">adaptive_brightness_switch
     </string>
     <string name="pk_brightness_level" translatable="false">brightness_level</string>
+    <string name="pk_contrast_level" translatable="false">contrast_level</string>
+    <string name="pk_hue_level" translatable="false">hue_level</string>
+    <string name="pk_saturation_level" translatable="false">saturation_level</string>
+    <string name="pk_whitebalance_level" translatable="false">whitebalance_level</string>
+    <string name="pk_luminance_level" translatable="false">luminance_level</string>
     <string name="pk_display_extra_settings" translatable="false">display_extra_settings</string>
     <!-- DateTime Settings -->
     <string name="pk_auto_datetime_switch" translatable="false">auto_datetime_switch</string>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index ff31c4356..af5ab4b0b 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -22,6 +22,12 @@
     <string name="display_settings">Display</string>
     <!-- Sound & display settings screen, setting option name to change brightness level -->
     <string name="brightness">Brightness level</string>
+    <string name="backlight">Backlight level</string>
+    <string name="contrast">Contrast level</string>
+    <string name="hue">Hue level</string>
+    <string name="saturation">Saturation level</string>
+    <string name="whitebalance">Whitebalance level</string>
+    <string name="luminance">Brightness level</string>
     <!-- Sound & display settings screen, setting option name to enable adaptive brightness [CHAR LIMIT=30] -->
     <string name="auto_brightness_title">Adaptive brightness</string>
     <!-- Sound & display settings screen, setting option summary to enable adaptive brightness [CHAR LIMIT=100] -->
diff --git a/res/xml/display_settings_fragment.xml b/res/xml/display_settings_fragment.xml
index 6d1ba8d7e..4177d1c74 100644
--- a/res/xml/display_settings_fragment.xml
+++ b/res/xml/display_settings_fragment.xml
@@ -22,9 +22,34 @@
     android:key="@string/psk_display_settings">
     <com.android.car.settings.common.SeekBarPreference
         android:key="@string/pk_brightness_level"
-        android:title="@string/brightness"
+        android:title="@string/backlight"
         settings:controller="com.android.car.settings.display.BrightnessLevelPreferenceController"
         settings:showSeekBarValue="false"/>
+    <com.android.car.settings.common.SeekBarPreference
+        android:key="@string/pk_contrast_level"
+        android:title="@string/contrast"
+        settings:controller="com.android.car.settings.display.ContrastLevelPreferenceController"
+        settings:showSeekBarValue="false"/>
+    <com.android.car.settings.common.SeekBarPreference
+        android:key="@string/pk_hue_level"
+        android:title="@string/hue"
+        settings:controller="com.android.car.settings.display.HueLevelPreferenceController"
+        settings:showSeekBarValue="false"/>
+    <com.android.car.settings.common.SeekBarPreference
+        android:key="@string/pk_saturation_level"
+        android:title="@string/saturation"
+        settings:controller="com.android.car.settings.display.SaturationLevelPreferenceController"
+        settings:showSeekBarValue="false"/>
+    <com.android.car.settings.common.SeekBarPreference
+        android:key="@string/pk_whitebalance_level"
+        android:title="@string/whitebalance"
+        settings:controller="com.android.car.settings.display.WhitebalanceLevelPreferenceController"
+        settings:showSeekBarValue="false"/>
+    <com.android.car.settings.common.SeekBarPreference
+        android:key="@string/pk_luminance_level"
+        android:title="@string/luminance"
+        settings:controller="com.android.car.settings.display.LuminanceLevelPreferenceController"
+        settings:showSeekBarValue="false"/>
     <SwitchPreference
         android:key="@string/pk_adaptive_brightness_switch"
         android:summary="@string/auto_brightness_summary"
diff --git a/src/com/android/car/settings/display/ContrastLevelPreferenceController.java b/src/com/android/car/settings/display/ContrastLevelPreferenceController.java
new file mode 100644
index 000000000..6c4f15245
--- /dev/null
+++ b/src/com/android/car/settings/display/ContrastLevelPreferenceController.java
@@ -0,0 +1,126 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.car.settings.display;
+import static com.android.car.settings.enterprise.ActionDisabledByAdminDialogFragment.DISABLED_BY_ADMIN_CONFIRM_DIALOG_TAG;
+import static com.android.car.settings.enterprise.EnterpriseUtils.hasUserRestrictionByDpm;
+import static com.android.car.settings.enterprise.EnterpriseUtils.hasUserRestrictionByUm;
+import static com.android.settingslib.display.BrightnessUtils.convertGammaToLinear;
+import static com.android.settingslib.display.BrightnessUtils.convertLinearToGamma;
+import android.car.drivingstate.CarUxRestrictions;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.hardware.display.ColorDisplayManager;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.PowerManager;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.widget.Toast;
+
+import com.android.car.settings.R;
+import com.android.car.settings.common.FragmentController;
+import com.android.car.settings.common.Logger;
+import com.android.car.settings.common.PreferenceController;
+import com.android.car.settings.common.SeekBarPreference;
+import com.android.car.settings.enterprise.EnterpriseUtils;
+
+/** Business logic for changing the CONTRAST of the display. */
+public class ContrastLevelPreferenceController extends PreferenceController<SeekBarPreference> {
+
+    private static final Logger LOG = new Logger(ContrastLevelPreferenceController.class);
+    private static final Uri CONTRAST_URI = Settings.System.getUriFor(
+            Settings.System.SCREEN_CONTRAST);
+    private final int mMaximumContrast = 65535;
+    private final int mMinimumContrast = 0;
+
+    private ColorDisplayManager mColorDisplayManager;
+    private final Handler mHandler = new Handler(Looper.getMainLooper());
+
+    private final ContentObserver mContrastObserver = new ContentObserver(mHandler) {
+        @Override
+        public void onChange(boolean selfChange) {
+            refreshUi();
+        }
+    };
+
+    public ContrastLevelPreferenceController(Context context, String preferenceKey,
+                                             FragmentController fragmentController, CarUxRestrictions uxRestrictions) {
+        super(context, preferenceKey, fragmentController, uxRestrictions);
+        getColorDisplayManager();
+    }
+
+    ColorDisplayManager getColorDisplayManager() {
+        if (mColorDisplayManager == null) {
+            mColorDisplayManager = getContext().getSystemService(ColorDisplayManager.class);
+        }
+        return mColorDisplayManager;
+    }
+    @Override
+    protected Class<SeekBarPreference> getPreferenceType() {
+        return SeekBarPreference.class;
+    }
+
+    @Override
+    protected void onCreateInternal() {
+        super.onCreateInternal();
+    }
+
+    @Override
+    protected void onStartInternal() {
+        super.onStartInternal();
+        getContext().getContentResolver().registerContentObserver(CONTRAST_URI,
+                /* notifyForDescendants= */ false, mContrastObserver);
+    }
+
+    @Override
+    protected void onStopInternal() {
+        super.onStopInternal();
+        getContext().getContentResolver().unregisterContentObserver(mContrastObserver);
+    }
+
+    @Override
+    protected void updateState(SeekBarPreference preference) {
+        preference.setMax(mMaximumContrast);
+        preference.setValue(getSeekbarValue());
+        preference.setContinuousUpdate(true);
+    }
+
+    @Override
+    protected boolean handlePreferenceChanged(SeekBarPreference preference, Object newValue) {
+        int gamma = (Integer) newValue;
+        int linear = convertGammaToLinear(gamma, mMinimumContrast, mMaximumContrast);
+        Settings.System.putIntForUser(getContext().getContentResolver(),
+                Settings.System.SCREEN_CONTRAST, linear, UserHandle.myUserId());
+        int contrastLevel = gamma * 100/65535;
+        mColorDisplayManager.setContrastLevel(contrastLevel);
+        return true;
+    }
+
+    private int getSeekbarValue() {
+        int gamma = mMaximumContrast;
+        try {
+            int linear = Settings.System.getIntForUser(getContext().getContentResolver(),
+                    Settings.System.SCREEN_CONTRAST, UserHandle.myUserId());
+            gamma = convertLinearToGamma(linear, mMinimumContrast, mMaximumContrast);
+            LOG.w("getSeekbarValue linear:" + linear);
+        } catch (Settings.SettingNotFoundException e) {
+            LOG.w("Can't find setting for SCREEN_CONTRAST.");
+        }
+        return gamma;
+    }
+}
diff --git a/src/com/android/car/settings/display/HueLevelPreferenceController.java b/src/com/android/car/settings/display/HueLevelPreferenceController.java
new file mode 100644
index 000000000..5211cdf30
--- /dev/null
+++ b/src/com/android/car/settings/display/HueLevelPreferenceController.java
@@ -0,0 +1,129 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.car.settings.display;
+
+import static com.android.car.settings.enterprise.ActionDisabledByAdminDialogFragment.DISABLED_BY_ADMIN_CONFIRM_DIALOG_TAG;
+import static com.android.car.settings.enterprise.EnterpriseUtils.hasUserRestrictionByDpm;
+import static com.android.car.settings.enterprise.EnterpriseUtils.hasUserRestrictionByUm;
+import static com.android.settingslib.display.BrightnessUtils.convertGammaToLinear;
+import static com.android.settingslib.display.BrightnessUtils.convertLinearToGamma;
+import android.car.drivingstate.CarUxRestrictions;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.hardware.display.ColorDisplayManager;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.PowerManager;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.widget.Toast;
+
+import com.android.car.settings.R;
+import com.android.car.settings.common.FragmentController;
+import com.android.car.settings.common.Logger;
+import com.android.car.settings.common.PreferenceController;
+import com.android.car.settings.common.SeekBarPreference;
+import com.android.car.settings.enterprise.EnterpriseUtils;
+
+/** Business logic for changing the brightness of the display. */
+public class HueLevelPreferenceController extends PreferenceController<SeekBarPreference> {
+
+    private static final Logger LOG = new Logger(HueLevelPreferenceController.class);
+    private static final Uri HUE_URI = Settings.System.getUriFor(
+            Settings.System.SCREEN_HUE);
+    private final int mMaximumHue = 65535;
+    private final int mMinimumHue = 0;
+
+    private ColorDisplayManager mColorDisplayManager;
+    private final Handler mHandler = new Handler(Looper.getMainLooper());
+
+    private final ContentObserver mHueObserver = new ContentObserver(mHandler) {
+        @Override
+        public void onChange(boolean selfChange) {
+            refreshUi();
+        }
+    };
+
+    public HueLevelPreferenceController(Context context, String preferenceKey,
+                                        FragmentController fragmentController, CarUxRestrictions uxRestrictions) {
+        super(context, preferenceKey, fragmentController, uxRestrictions);
+        getColorDisplayManager();
+    }
+
+    ColorDisplayManager getColorDisplayManager() {
+        if (mColorDisplayManager == null) {
+            mColorDisplayManager = getContext().getSystemService(ColorDisplayManager.class);
+        }
+        return mColorDisplayManager;
+    }
+
+    @Override
+    protected Class<SeekBarPreference> getPreferenceType() {
+        return SeekBarPreference.class;
+    }
+
+    @Override
+    protected void onCreateInternal() {
+        super.onCreateInternal();
+    }
+
+    @Override
+    protected void onStartInternal() {
+        super.onStartInternal();
+        getContext().getContentResolver().registerContentObserver(HUE_URI,
+                /* notifyForDescendants= */ false, mHueObserver);
+    }
+
+    @Override
+    protected void onStopInternal() {
+        super.onStopInternal();
+        getContext().getContentResolver().unregisterContentObserver(mHueObserver);
+    }
+
+    @Override
+    protected void updateState(SeekBarPreference preference) {
+        preference.setMax(mMaximumHue);
+        preference.setValue(getSeekbarValue());
+        preference.setContinuousUpdate(true);
+    }
+
+    @Override
+    protected boolean handlePreferenceChanged(SeekBarPreference preference, Object newValue) {
+        int gamma = (Integer) newValue;
+        LOG.w("handlePreferenceChanged gamma:" + gamma);
+        int linear = convertGammaToLinear(gamma, mMinimumHue, mMaximumHue);
+        Settings.System.putIntForUser(getContext().getContentResolver(),
+                Settings.System.SCREEN_HUE, linear, UserHandle.myUserId());
+        int hueLevel = gamma * 100/65535;
+        mColorDisplayManager.setHueLevel(hueLevel);
+        return true;
+    }
+
+    private int getSeekbarValue() {
+        int gamma = mMaximumHue;
+        try {
+            int linear = Settings.System.getIntForUser(getContext().getContentResolver(),
+                    Settings.System.SCREEN_HUE, UserHandle.myUserId());
+            gamma = convertLinearToGamma(linear, mMinimumHue, mMaximumHue);
+            LOG.w("getSeekbarValue linear:" + linear);
+        } catch (Settings.SettingNotFoundException e) {
+            LOG.w("Can't find setting for SCREEN_BRIGHTNESS.");
+        }
+        return gamma;
+    }
+}
diff --git a/src/com/android/car/settings/display/LuminanceLevelPreferenceController.java b/src/com/android/car/settings/display/LuminanceLevelPreferenceController.java
new file mode 100644
index 000000000..3d6dade98
--- /dev/null
+++ b/src/com/android/car/settings/display/LuminanceLevelPreferenceController.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.car.settings.display;
+
+import static com.android.settingslib.display.BrightnessUtils.convertGammaToLinear;
+import static com.android.settingslib.display.BrightnessUtils.convertLinearToGamma;
+
+import android.car.drivingstate.CarUxRestrictions;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.hardware.display.ColorDisplayManager;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.UserHandle;
+import android.provider.Settings;
+
+import com.android.car.settings.common.FragmentController;
+import com.android.car.settings.common.Logger;
+import com.android.car.settings.common.PreferenceController;
+import com.android.car.settings.common.SeekBarPreference;
+
+/** Business logic for changing the LUMINANCE of the display. */
+public class LuminanceLevelPreferenceController extends PreferenceController<SeekBarPreference> {
+
+    private static final Logger LOG = new Logger(LuminanceLevelPreferenceController.class);
+    private static final Uri LUMINANCE_URI = Settings.System.getUriFor(
+            Settings.System.SCREEN_LUMINANCE);
+    private final int mMaximumLuminance = 65535;
+    private final int mMinimumLuminance = 0;
+
+    private ColorDisplayManager mColorDisplayManager;
+    private final Handler mHandler = new Handler(Looper.getMainLooper());
+
+    private final ContentObserver mLuminanceObserver = new ContentObserver(mHandler) {
+        @Override
+        public void onChange(boolean selfChange) {
+            refreshUi();
+        }
+    };
+
+    public LuminanceLevelPreferenceController(Context context, String preferenceKey,
+                                              FragmentController fragmentController, CarUxRestrictions uxRestrictions) {
+        super(context, preferenceKey, fragmentController, uxRestrictions);
+        getColorDisplayManager();
+    }
+
+    ColorDisplayManager getColorDisplayManager() {
+        if (mColorDisplayManager == null) {
+            mColorDisplayManager = getContext().getSystemService(ColorDisplayManager.class);
+        }
+        return mColorDisplayManager;
+    }
+    @Override
+    protected Class<SeekBarPreference> getPreferenceType() {
+        return SeekBarPreference.class;
+    }
+
+    @Override
+    protected void onCreateInternal() {
+        super.onCreateInternal();
+    }
+
+    @Override
+    protected void onStartInternal() {
+        super.onStartInternal();
+        getContext().getContentResolver().registerContentObserver(LUMINANCE_URI,
+                /* notifyForDescendants= */ false, mLuminanceObserver);
+    }
+
+    @Override
+    protected void onStopInternal() {
+        super.onStopInternal();
+        getContext().getContentResolver().unregisterContentObserver(mLuminanceObserver);
+    }
+
+    @Override
+    protected void updateState(SeekBarPreference preference) {
+        preference.setMax(mMaximumLuminance);
+        preference.setValue(getSeekbarValue());
+        preference.setContinuousUpdate(true);
+    }
+
+    @Override
+    protected boolean handlePreferenceChanged(SeekBarPreference preference, Object newValue) {
+        int gamma = (Integer) newValue;
+        int linear = convertGammaToLinear(gamma, mMinimumLuminance, mMaximumLuminance);
+        Settings.System.putIntForUser(getContext().getContentResolver(),
+                Settings.System.SCREEN_LUMINANCE, linear, UserHandle.myUserId());
+        int luminanceLevel = gamma * 100/65535;
+        mColorDisplayManager.setLuminanceLevel(luminanceLevel);
+        return true;
+    }
+
+    private int getSeekbarValue() {
+        int gamma = mMaximumLuminance;
+        try {
+            int linear = Settings.System.getIntForUser(getContext().getContentResolver(),
+                    Settings.System.SCREEN_LUMINANCE, UserHandle.myUserId());
+            gamma = convertLinearToGamma(linear, mMinimumLuminance, mMaximumLuminance);
+            LOG.w("getSeekbarValue linear:" + linear);
+        } catch (Settings.SettingNotFoundException e) {
+            LOG.w("Can't find setting for SCREEN_LUMINANCE.");
+        }
+        return gamma;
+    }
+}
diff --git a/src/com/android/car/settings/display/SaturationLevelPreferenceController.java b/src/com/android/car/settings/display/SaturationLevelPreferenceController.java
new file mode 100644
index 000000000..74871e81d
--- /dev/null
+++ b/src/com/android/car/settings/display/SaturationLevelPreferenceController.java
@@ -0,0 +1,132 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.car.settings.display;
+
+import static android.os.UserManager.DISALLOW_CONFIG_BRIGHTNESS;
+import static com.android.car.settings.enterprise.ActionDisabledByAdminDialogFragment.DISABLED_BY_ADMIN_CONFIRM_DIALOG_TAG;
+import static com.android.car.settings.enterprise.EnterpriseUtils.hasUserRestrictionByDpm;
+import static com.android.car.settings.enterprise.EnterpriseUtils.hasUserRestrictionByUm;
+import static com.android.settingslib.display.BrightnessUtils.GAMMA_SPACE_MAX;
+import static com.android.settingslib.display.BrightnessUtils.convertGammaToLinear;
+import static com.android.settingslib.display.BrightnessUtils.convertLinearToGamma;
+
+import android.car.drivingstate.CarUxRestrictions;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.hardware.display.ColorDisplayManager;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.PowerManager;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.widget.Toast;
+
+import com.android.car.settings.R;
+import com.android.car.settings.common.FragmentController;
+import com.android.car.settings.common.Logger;
+import com.android.car.settings.common.PreferenceController;
+import com.android.car.settings.common.SeekBarPreference;
+import com.android.car.settings.enterprise.EnterpriseUtils;
+//import com.android.server.display.color.ColorDisplayService;
+
+
+/** Business logic for changing the brightness of the display. */
+public class SaturationLevelPreferenceController extends PreferenceController<SeekBarPreference> {
+
+    private static final Logger LOG = new Logger(SaturationLevelPreferenceController.class);
+    private static final Uri SATURATION_URI = Settings.System.getUriFor(
+            Settings.System.SCREEN_SATURATION);
+    private final int mMaximumSaturation = 65535;
+
+    private ColorDisplayManager mColorDisplayManager;
+    private final int mMinimumSaturation = 0;
+    private final Handler mHandler = new Handler(Looper.getMainLooper());
+
+    private final ContentObserver mSaturationObserver = new ContentObserver(mHandler) {
+        @Override
+        public void onChange(boolean selfChange) {
+            refreshUi();
+        }
+    };
+
+    public SaturationLevelPreferenceController(Context context, String preferenceKey,
+                                               FragmentController fragmentController, CarUxRestrictions uxRestrictions) {
+        super(context, preferenceKey, fragmentController, uxRestrictions);
+        getColorDisplayManager();
+    }
+
+    ColorDisplayManager getColorDisplayManager() {
+        if (mColorDisplayManager == null) {
+            mColorDisplayManager = getContext().getSystemService(ColorDisplayManager.class);
+        }
+        return mColorDisplayManager;
+    }
+
+    @Override
+    protected Class<SeekBarPreference> getPreferenceType() {
+        return SeekBarPreference.class;
+    }
+
+    @Override
+    protected void onCreateInternal() {
+        super.onCreateInternal();
+    }
+
+    @Override
+    protected void onStartInternal() {
+        super.onStartInternal();
+        getContext().getContentResolver().registerContentObserver(SATURATION_URI,
+                /* notifyForDescendants= */ false, mSaturationObserver);
+    }
+
+    @Override
+    protected void onStopInternal() {
+        super.onStopInternal();
+        getContext().getContentResolver().unregisterContentObserver(mSaturationObserver);
+    }
+
+    @Override
+    protected void updateState(SeekBarPreference preference) {
+        preference.setMax(GAMMA_SPACE_MAX);
+        preference.setValue(getSeekbarValue());
+        preference.setContinuousUpdate(true);
+    }
+
+    @Override
+    protected boolean handlePreferenceChanged(SeekBarPreference preference, Object newValue) {
+        int gamma = (Integer) newValue;
+        int linear = convertGammaToLinear(gamma, mMinimumSaturation, mMaximumSaturation);
+        Settings.System.putIntForUser(getContext().getContentResolver(),
+                Settings.System.SCREEN_SATURATION, linear, UserHandle.myUserId());
+        int saturationLevel = gamma * 100/65535;
+        mColorDisplayManager.setSaturationLevel(saturationLevel);
+        return true;
+    }
+
+    private int getSeekbarValue() {
+        int gamma = GAMMA_SPACE_MAX;
+        try {
+            int linear = Settings.System.getIntForUser(getContext().getContentResolver(),
+                    Settings.System.SCREEN_SATURATION, UserHandle.myUserId());
+            gamma = convertLinearToGamma(linear, mMinimumSaturation, mMaximumSaturation);
+        } catch (Settings.SettingNotFoundException e) {
+            LOG.w("Can't find setting for SCREEN_BRIGHTNESS.");
+        }
+        return gamma;
+    }
+}
diff --git a/src/com/android/car/settings/display/WhitebalanceLevelPreferenceController.java b/src/com/android/car/settings/display/WhitebalanceLevelPreferenceController.java
new file mode 100644
index 000000000..6759dc879
--- /dev/null
+++ b/src/com/android/car/settings/display/WhitebalanceLevelPreferenceController.java
@@ -0,0 +1,130 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.car.settings.display;
+
+import static android.os.UserManager.DISALLOW_CONFIG_BRIGHTNESS;
+import static com.android.car.settings.enterprise.ActionDisabledByAdminDialogFragment.DISABLED_BY_ADMIN_CONFIRM_DIALOG_TAG;
+import static com.android.car.settings.enterprise.EnterpriseUtils.hasUserRestrictionByDpm;
+import static com.android.car.settings.enterprise.EnterpriseUtils.hasUserRestrictionByUm;
+import static com.android.settingslib.display.BrightnessUtils.GAMMA_SPACE_MAX;
+import static com.android.settingslib.display.BrightnessUtils.convertGammaToLinear;
+import static com.android.settingslib.display.BrightnessUtils.convertLinearToGamma;
+
+import android.car.drivingstate.CarUxRestrictions;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.PowerManager;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.widget.Toast;
+import android.hardware.display.ColorDisplayManager;
+
+import com.android.car.settings.R;
+import com.android.car.settings.common.FragmentController;
+import com.android.car.settings.common.Logger;
+import com.android.car.settings.common.PreferenceController;
+import com.android.car.settings.common.SeekBarPreference;
+import com.android.car.settings.enterprise.EnterpriseUtils;
+
+/** Business logic for changing the brightness of the display. */
+public class WhitebalanceLevelPreferenceController extends PreferenceController<SeekBarPreference> {
+
+    private static final Logger LOG = new Logger(WhitebalanceLevelPreferenceController.class);
+    private static final Uri WHITEBALANCE_URI = Settings.System.getUriFor(
+            Settings.System.SCREEN_WHITEBALANCE);
+
+    private ColorDisplayManager mColorDisplayManager;
+    private final int mMaximumWhitebalance = 65535;
+    private final int mMinimumWhitebalance = 0;
+    private final Handler mHandler = new Handler(Looper.getMainLooper());
+
+    private final ContentObserver mWhitebalanceObserver = new ContentObserver(mHandler) {
+        @Override
+        public void onChange(boolean selfChange) {
+            refreshUi();
+        }
+    };
+
+    public WhitebalanceLevelPreferenceController(Context context, String preferenceKey,
+                                                 FragmentController fragmentController, CarUxRestrictions uxRestrictions) {
+        super(context, preferenceKey, fragmentController, uxRestrictions);
+        getColorDisplayManager();
+    }
+
+    ColorDisplayManager getColorDisplayManager() {
+        if (mColorDisplayManager == null) {
+            mColorDisplayManager = getContext().getSystemService(ColorDisplayManager.class);
+        }
+        return mColorDisplayManager;
+    }
+    @Override
+    protected Class<SeekBarPreference> getPreferenceType() {
+        return SeekBarPreference.class;
+    }
+
+    @Override
+    protected void onCreateInternal() {
+        super.onCreateInternal();
+    }
+
+    @Override
+    protected void onStartInternal() {
+        super.onStartInternal();
+        getContext().getContentResolver().registerContentObserver(WHITEBALANCE_URI,
+                /* notifyForDescendants= */ false, mWhitebalanceObserver);
+    }
+
+    @Override
+    protected void onStopInternal() {
+        super.onStopInternal();
+        getContext().getContentResolver().unregisterContentObserver(mWhitebalanceObserver);
+    }
+
+    @Override
+    protected void updateState(SeekBarPreference preference) {
+        preference.setMax(GAMMA_SPACE_MAX);
+        preference.setValue(getSeekbarValue());
+        preference.setContinuousUpdate(true);
+    }
+
+    @Override
+    protected boolean handlePreferenceChanged(SeekBarPreference preference, Object newValue) {
+        int gamma = (Integer) newValue;
+        int linear = convertGammaToLinear(gamma, mMinimumWhitebalance, mMaximumWhitebalance);
+        Settings.System.putIntForUser(getContext().getContentResolver(),
+                Settings.System.SCREEN_WHITEBALANCE, linear, UserHandle.myUserId());
+        int whitebalanceLevel = gamma * 100/65535;
+        mColorDisplayManager.setDisplayWhiteBalanceEnabled(true);
+        mColorDisplayManager.setWhitebalanceLevel(whitebalanceLevel);
+        return true;
+    }
+
+    private int getSeekbarValue() {
+        int gamma = GAMMA_SPACE_MAX;
+        try {
+            int linear = Settings.System.getIntForUser(getContext().getContentResolver(),
+                    Settings.System.SCREEN_WHITEBALANCE, UserHandle.myUserId());
+            gamma = convertLinearToGamma(linear, mMinimumWhitebalance, mMaximumWhitebalance);
+        } catch (Settings.SettingNotFoundException e) {
+            LOG.w("Can't find setting for SCREEN_BRIGHTNESS.");
+        }
+        return gamma;
+    }
+}
-- 
2.34.1

