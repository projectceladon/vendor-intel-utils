From 6983c1fea526360df55cdc9d74277fbef3cab9ed Mon Sep 17 00:00:00 2001
From: Gowtham Anandha Babu <gowtham.anandha.babu@intel.com>
Date: Tue, 13 Feb 2024 12:58:56 +0530
Subject: [PATCH] Add HFP AG support for ivi

With this patch, BT headset connected on primary BT.
HFP profile is connected.
Unable to create AUDIO_DEVICE_OUT_BLUETOOTH_SCO_HEADSET, as this
device type used in legacy audio.

Signed-off-by: Gowtham Anandha Babu <gowtham.anandha.babu@intel.com>
---
 .../src/android/car/settings/CarSettings.java |  24 ++++
 car_product/build/component-overrides.xml     |  39 +++--
 .../apps/Bluetooth/res/values/config.xml      |  20 +--
 .../car/BluetoothProfileDeviceManager.java    |  53 +++----
 .../com/android/car/CarBluetoothService.java  |  11 +-
 .../android/car/CarBluetoothUserService.java  | 135 +++++++++---------
 6 files changed, 157 insertions(+), 125 deletions(-)

diff --git a/car-lib/src/android/car/settings/CarSettings.java b/car-lib/src/android/car/settings/CarSettings.java
index 66f6cc9745..7d81707c55 100644
--- a/car-lib/src/android/car/settings/CarSettings.java
+++ b/car-lib/src/android/car/settings/CarSettings.java
@@ -199,6 +199,14 @@ public class CarSettings {
                 "android.car.KEY_BLUETOOTH_HFP_CLIENT_DEVICES";
 
         /**
+         * Key for a list of devices to automatically connect on Bluetooth HFP profile
+         * Written to and read by {@link com.android.car.BluetoothDeviceConnectionPolicy}
+         * @hide
+         */
+        public static final String KEY_BLUETOOTH_HFP_DEVICES =
+                "android.car.KEY_BLUETOOTH_HFP_DEVICES";
+
+	/**
          * Key for a list of devices to automatically connect on Bluetooth MAP Client profile
          * Written to and read by {@link com.android.car.BluetoothDeviceConnectionPolicy}
          * @hide
@@ -206,6 +214,14 @@ public class CarSettings {
         public static final String KEY_BLUETOOTH_MAP_CLIENT_DEVICES =
                 "android.car.KEY_BLUETOOTH_MAP_CLIENT_DEVICES";
 
+	/**
+         * Key for a list of devices to automatically connect on Bluetooth MAP profile
+         * Written to and read by {@link com.android.car.BluetoothDeviceConnectionPolicy}
+         * @hide
+         */
+        public static final String KEY_BLUETOOTH_MAP_DEVICES =
+                "android.car.KEY_BLUETOOTH_MAP_DEVICES";
+
         /**
          * Key for a list of devices to automatically connect on Bluetooth PBAP Client profile
          * Written to and read by {@link com.android.car.BluetoothDeviceConnectionPolicy}
@@ -214,6 +230,14 @@ public class CarSettings {
         public static final String KEY_BLUETOOTH_PBAP_CLIENT_DEVICES =
                 "android.car.KEY_BLUETOOTH_PBAP_CLIENT_DEVICES";
 
+        /**
+         * Key for a list of devices to automatically connect on Bluetooth PBAP profile
+         * Written to and read by {@link com.android.car.BluetoothDeviceConnectionPolicy}
+         * @hide
+         */
+        public static final String KEY_BLUETOOTH_PBAP_DEVICES =
+                "android.car.KEY_BLUETOOTH_PBAP_DEVICES";
+
         /**
          * Key for storing temporarily-disconnected devices and profiles.
          * Read and written by {@link com.android.car.BluetoothDeviceConnectionPolicy}.
diff --git a/car_product/build/component-overrides.xml b/car_product/build/component-overrides.xml
index b2e4f78eef..1c17c2c64f 100644
--- a/car_product/build/component-overrides.xml
+++ b/car_product/build/component-overrides.xml
@@ -36,9 +36,9 @@
         <component class=".avrcp.AvrcpTargetService" enabled="false" />
 -->
         <!-- Controlled by profile_supported_hs_hfp -->
-<!--
-        <component class=".hfp.HeadsetService" enabled="false" />
--->
+
+        <component class=".hfp.HeadsetService" enabled="true" />
+
         <!-- Controlled by profile_supported_hid_device -->
 <!--
         <component class=".hid.HidDeviceService" enabled="false" />
@@ -48,15 +48,14 @@
         <component class=".hid.HidHostService" enabled="false" />
 -->
         <!-- Controlled by profile_supported_pbap -->
-<!--
-        <component class=".pbap.BluetoothPbapActivity" enabled="false" />
-        <component class=".pbap.BluetoothPbapService" enabled="false" />
--->
+
+        <component class=".pbap.BluetoothPbapActivity" enabled="true" />
+        <component class=".pbap.BluetoothPbapService" enabled="true" />
+
         <!-- Controlled by profile_supported_map -->
-<!--
-        <component class=".map.BluetoothMapService" enabled="false" />
-        <component class=".map.BluetoothMapSettings" enabled="false" />
--->
+        <component class=".map.BluetoothMapService" enabled="true" />
+	<component class=".map.BluetoothMapSettings" enabled="true" />
+
         <!-- Controlled by profile_supported_opp -->
         <component class=".opp.BluetoothOppService" enabled="true" />
         <component class=".opp.BluetoothOppExtService" enabled="true" />
@@ -75,31 +74,31 @@
 
         <!-- Enable sink profiles (typically used on a CarKitt) -->
         <!-- Controlled by profile_supported_hfpclient -->
-        <component class=".hfpclient.HeadsetClientService" enabled="true" />
+        <!--component class=".hfpclient.HeadsetClientService" enabled="true" /-->
 
         <!-- Controlled by hfp_client_connection_service_enabled -->
-        <component class=".hfpclient.connserv.HfpClientConnectionService" enabled="true" />
+        <!--component class=".hfpclient.connserv.HfpClientConnectionService" enabled="true" /-->
 
         <!-- Controlled by profile_supported_avrcp_controller -->
-        <component class=".avrcpcontroller.AvrcpControllerService" enabled="true" />
+        <!--component class=".avrcpcontroller.AvrcpControllerService" enabled="true" /-->
 
         <!-- Controlled by avrcp_controller_enable_cover_art -->
-        <component class=".avrcpcontroller.AvrcpCoverArtProvider" enabled="true" />
+        <!--component class=".avrcpcontroller.AvrcpCoverArtProvider" enabled="true" /-->
 
         <!-- Controlled by profile_supported_a2dp_sink -->
-        <component class=".a2dpsink.A2dpSinkService" enabled="true" />
+        <!--component class=".a2dpsink.A2dpSinkService" enabled="true" />
         <component class=".avrcpcontroller.BluetoothMediaBrowserService" enabled="true" />
-        <component class=".BluetoothPrefs" enabled="true" />
+        <component class=".BluetoothPrefs" enabled="true" /-->
 
         <!-- Controlled by profile_supported_pbapclient -->
-        <component class=".pbapclient.PbapClientService" enabled="true" />
-        <component class=".pbapclient.AuthenticationService" enabled="true" />
+        <!--component class=".pbapclient.PbapClientService" enabled="true" />
+        <component class=".pbapclient.AuthenticationService" enabled="true" /-->
 
         <!-- Controlled by profile_supported_pan -->
         <component class=".pan.PanService" enabled="true" />
 
         <!-- Controlled by profile_supported_mapmce -->
-        <component class=".mapclient.MapClientService" enabled="true" />
+        <!--component class=".mapclient.MapClientService" enabled="true" /-->
         <!-- End for enabling-->
     </component-override>
 
diff --git a/car_product/overlay/packages/apps/Bluetooth/res/values/config.xml b/car_product/overlay/packages/apps/Bluetooth/res/values/config.xml
index 108e604426..5de3890e59 100644
--- a/car_product/overlay/packages/apps/Bluetooth/res/values/config.xml
+++ b/car_product/overlay/packages/apps/Bluetooth/res/values/config.xml
@@ -33,23 +33,23 @@
     <!-- Disable source profiles (typically used in phone) -->
     <bool name="profile_supported_a2dp">false</bool>
     <bool name="profile_supported_avrcp_target">false</bool>
-    <bool name="profile_supported_hs_hfp">false</bool>
+    <bool name="profile_supported_hs_hfp">true</bool>
     <bool name="profile_supported_hid_device">false</bool>
     <bool name="profile_supported_hid_host">false</bool>
-    <bool name="profile_supported_pbap">false</bool>
-    <bool name="profile_supported_map">false</bool>
+    <bool name="profile_supported_pbap">true</bool>
+    <bool name="profile_supported_map">true</bool>
     <bool name="profile_supported_hdp">false</bool>
     <bool name="profile_supported_opp">true</bool>
     <bool name="profile_supported_sap">false</bool>
     <bool name="enable_phone_policy">false</bool>
 
     <!-- Enable sink profiles (typically used on a CarKitt) -->
-    <bool name="profile_supported_hfpclient">true</bool>
-    <bool name="hfp_client_connection_service_enabled">true</bool>
-    <bool name="profile_supported_avrcp_controller">true</bool>
-    <bool name="avrcp_controller_enable_cover_art">true</bool>
-    <bool name="profile_supported_a2dp_sink">true</bool>
-    <bool name="profile_supported_pbapclient">true</bool>
+    <bool name="profile_supported_hfpclient">false</bool>
+    <bool name="hfp_client_connection_service_enabled">false</bool>
+    <bool name="profile_supported_avrcp_controller">false</bool>
+    <bool name="avrcp_controller_enable_cover_art">false</bool>
+    <bool name="profile_supported_a2dp_sink">false</bool>
+    <bool name="profile_supported_pbapclient">false</bool>
     <bool name="profile_supported_pan">true</bool>
-    <bool name="profile_supported_mapmce">true</bool>
+    <bool name="profile_supported_mapmce">false</bool>
 </resources>
diff --git a/service/src/com/android/car/BluetoothProfileDeviceManager.java b/service/src/com/android/car/BluetoothProfileDeviceManager.java
index 5ab5af750c..03d50faceb 100644
--- a/service/src/com/android/car/BluetoothProfileDeviceManager.java
+++ b/service/src/com/android/car/BluetoothProfileDeviceManager.java
@@ -18,17 +18,18 @@ package com.android.car;
 
 import static android.car.settings.CarSettings.Secure.KEY_BLUETOOTH_A2DP_SINK_DEVICES;
 import static android.car.settings.CarSettings.Secure.KEY_BLUETOOTH_HFP_CLIENT_DEVICES;
-import static android.car.settings.CarSettings.Secure.KEY_BLUETOOTH_MAP_CLIENT_DEVICES;
+import static android.car.settings.CarSettings.Secure.KEY_BLUETOOTH_HFP_DEVICES;
+import static android.car.settings.CarSettings.Secure.KEY_BLUETOOTH_MAP_DEVICES;
 import static android.car.settings.CarSettings.Secure.KEY_BLUETOOTH_PAN_DEVICES;
-import static android.car.settings.CarSettings.Secure.KEY_BLUETOOTH_PBAP_CLIENT_DEVICES;
+import static android.car.settings.CarSettings.Secure.KEY_BLUETOOTH_PBAP_DEVICES;
 
 import android.bluetooth.BluetoothA2dpSink;
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
-import android.bluetooth.BluetoothHeadsetClient;
-import android.bluetooth.BluetoothMapClient;
+import android.bluetooth.BluetoothHeadset;
+import android.bluetooth.BluetoothMap;
 import android.bluetooth.BluetoothPan;
-import android.bluetooth.BluetoothPbapClient;
+import android.bluetooth.BluetoothPbap;
 import android.bluetooth.BluetoothProfile;
 import android.bluetooth.BluetoothUuid;
 import android.car.ICarBluetoothUserService;
@@ -63,7 +64,7 @@ import java.util.Set;
  */
 public class BluetoothProfileDeviceManager {
     private static final String TAG = CarLog.tagFor(BluetoothProfileDeviceManager.class);
-    private static final boolean DBG = Log.isLoggable(TAG, Log.DEBUG);
+    private static final boolean DBG = true;//Log.isLoggable(TAG, Log.DEBUG);
     private final Context mContext;
     private final int mUserId;
     private Set<String> mBondingDevices = new HashSet<>();
@@ -90,31 +91,35 @@ public class BluetoothProfileDeviceManager {
 
     private static final SparseArray<BluetoothProfileInfo> sProfileActions = new SparseArray();
     static {
-        sProfileActions.put(BluetoothProfile.A2DP_SINK,
+        /*sProfileActions.put(BluetoothProfile.A2DP_SINK,
                 new BluetoothProfileInfo(BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED,
                         KEY_BLUETOOTH_A2DP_SINK_DEVICES, new ParcelUuid[] {
                             BluetoothUuid.A2DP_SOURCE
+                        }, new int[] {}));*/
+        sProfileActions.put(BluetoothProfile.HEADSET,
+                new BluetoothProfileInfo(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED,
+                        KEY_BLUETOOTH_HFP_DEVICES, new ParcelUuid[] {
+                            BluetoothUuid.HFP,
+                            BluetoothUuid.HSP
+                        }, new int[] {BluetoothProfile.MAP, BluetoothProfile.PBAP}));
+        sProfileActions.put(BluetoothProfile.MAP,
+                new BluetoothProfileInfo(BluetoothMap.ACTION_CONNECTION_STATE_CHANGED,
+                        KEY_BLUETOOTH_MAP_DEVICES, new ParcelUuid[] {
+                            BluetoothUuid.MAP,
+                            BluetoothUuid.MNS,
+                            BluetoothUuid.MAS,
                         }, new int[] {}));
-        sProfileActions.put(BluetoothProfile.HEADSET_CLIENT,
-                new BluetoothProfileInfo(BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED,
-                        KEY_BLUETOOTH_HFP_CLIENT_DEVICES, new ParcelUuid[] {
-                            BluetoothUuid.HFP_AG,
-                            BluetoothUuid.HSP_AG
-                        }, new int[] {BluetoothProfile.MAP_CLIENT, BluetoothProfile.PBAP_CLIENT}));
-        sProfileActions.put(BluetoothProfile.MAP_CLIENT,
-                new BluetoothProfileInfo(BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED,
-                        KEY_BLUETOOTH_MAP_CLIENT_DEVICES, new ParcelUuid[] {
-                            BluetoothUuid.MAS
-                        }, new int[] {}));
-        sProfileActions.put(BluetoothProfile.PAN,
+        /*sProfileActions.put(BluetoothProfile.PAN,
                 new BluetoothProfileInfo(BluetoothPan.ACTION_CONNECTION_STATE_CHANGED,
                         KEY_BLUETOOTH_PAN_DEVICES, new ParcelUuid[] {
                             BluetoothUuid.PANU
-                        }, new int[] {}));
-        sProfileActions.put(BluetoothProfile.PBAP_CLIENT,
-                new BluetoothProfileInfo(BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED,
-                        KEY_BLUETOOTH_PBAP_CLIENT_DEVICES, new ParcelUuid[] {
-                            BluetoothUuid.PBAP_PSE
+                        }, new int[] {}));*/
+        sProfileActions.put(BluetoothProfile.PBAP,
+                new BluetoothProfileInfo(BluetoothPbap.ACTION_CONNECTION_STATE_CHANGED,
+                        KEY_BLUETOOTH_PBAP_DEVICES, new ParcelUuid[] {
+                            BluetoothUuid.HSP,
+                            BluetoothUuid.HFP,
+                            BluetoothUuid.PBAP_PCE
                         }, new int[] {}));
     }
 
diff --git a/service/src/com/android/car/CarBluetoothService.java b/service/src/com/android/car/CarBluetoothService.java
index 45912b0abc..7e1ca641db 100644
--- a/service/src/com/android/car/CarBluetoothService.java
+++ b/service/src/com/android/car/CarBluetoothService.java
@@ -55,16 +55,16 @@ import java.util.List;
  */
 public class CarBluetoothService extends ICarBluetooth.Stub implements CarServiceBase {
     private static final String TAG = CarLog.tagFor(CarBluetoothService.class);
-    private static final boolean DBG = Log.isLoggable(TAG, Log.DEBUG);
+    private static final boolean DBG = true;//Log.isLoggable(TAG, Log.DEBUG);
     static final String THREAD_NAME = "CarBluetoothService";
     private final Context mContext;
 
     // The list of profiles we wish to manage
     private static final List<Integer> sManagedProfiles = Arrays.asList(
-            BluetoothProfile.HEADSET_CLIENT,
-            BluetoothProfile.PBAP_CLIENT,
-            BluetoothProfile.A2DP_SINK,
-            BluetoothProfile.MAP_CLIENT,
+            BluetoothProfile.HEADSET,
+            BluetoothProfile.PBAP,
+            //BluetoothProfile.A2DP_SINK,
+            BluetoothProfile.MAP,
             BluetoothProfile.PAN
     );
 
@@ -193,6 +193,7 @@ public class CarBluetoothService extends ICarBluetooth.Stub implements CarServic
         // Determine if we need to begin the default policy
         mBluetoothDeviceConnectionPolicy = null;
         if (mUseDefaultPolicy) {
+            logd("mUseDefaultPolicy");
             createBluetoothDeviceConnectionPolicyLocked();
         }
         logd("Switched to user " + mUserId);
diff --git a/service/src/com/android/car/CarBluetoothUserService.java b/service/src/com/android/car/CarBluetoothUserService.java
index 13beb9b5d9..bd1e817169 100644
--- a/service/src/com/android/car/CarBluetoothUserService.java
+++ b/service/src/com/android/car/CarBluetoothUserService.java
@@ -19,9 +19,12 @@ import android.bluetooth.BluetoothA2dpSink;
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
 import android.bluetooth.BluetoothHeadsetClient;
+import android.bluetooth.BluetoothHeadset;
 import android.bluetooth.BluetoothMapClient;
+import android.bluetooth.BluetoothMap;
 import android.bluetooth.BluetoothPan;
 import android.bluetooth.BluetoothPbapClient;
+import android.bluetooth.BluetoothPbap;
 import android.bluetooth.BluetoothProfile;
 import android.car.ICarBluetoothUserService;
 import android.util.IndentingPrintWriter;
@@ -46,10 +49,10 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
 
     // Profiles we support
     private static final List<Integer> sProfilesToConnect = Arrays.asList(
-            BluetoothProfile.HEADSET_CLIENT,
-            BluetoothProfile.PBAP_CLIENT,
-            BluetoothProfile.A2DP_SINK,
-            BluetoothProfile.MAP_CLIENT,
+            BluetoothProfile.HEADSET,
+            BluetoothProfile.PBAP,
+            //BluetoothProfile.A2DP_SINK,
+            BluetoothProfile.MAP,
             BluetoothProfile.PAN
     );
 
@@ -58,10 +61,10 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
 
     // Profile Proxies Objects to pair with above list. Access to these proxy objects will all be
     // guarded by the below mBluetoothProxyLock
-    private BluetoothA2dpSink mBluetoothA2dpSink;
-    private BluetoothHeadsetClient mBluetoothHeadsetClient;
-    private BluetoothPbapClient mBluetoothPbapClient;
-    private BluetoothMapClient mBluetoothMapClient;
+    //private BluetoothA2dpSink mBluetoothA2dpSink;
+    private BluetoothHeadset mBluetoothHeadset;
+    private BluetoothPbap mBluetoothPbap;
+    private BluetoothMap mBluetoothMap;
     private BluetoothPan mBluetoothPan;
 
     // Concurrency variables for waitForProxies. Used so we can best effort block with a timeout
@@ -126,22 +129,22 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
         logd("Clean up profile proxy objects");
         mBluetoothProxyLock.lock();
         try {
-            mBluetoothAdapter.closeProfileProxy(BluetoothProfile.A2DP_SINK, mBluetoothA2dpSink);
+            /*mBluetoothAdapter.closeProfileProxy(BluetoothProfile.A2DP_SINK, mBluetoothA2dpSink);
             mBluetoothA2dpSink = null;
-            mBluetoothProfileStatus.put(BluetoothProfile.A2DP_SINK, false);
+            mBluetoothProfileStatus.put(BluetoothProfile.A2DP_SINK, false);*/
 
-            mBluetoothAdapter.closeProfileProxy(BluetoothProfile.HEADSET_CLIENT,
-                    mBluetoothHeadsetClient);
-            mBluetoothHeadsetClient = null;
-            mBluetoothProfileStatus.put(BluetoothProfile.HEADSET_CLIENT, false);
+            mBluetoothAdapter.closeProfileProxy(BluetoothProfile.HEADSET,
+                    mBluetoothHeadset);
+            mBluetoothHeadset = null;
+            mBluetoothProfileStatus.put(BluetoothProfile.HEADSET, false);
 
-            mBluetoothAdapter.closeProfileProxy(BluetoothProfile.PBAP_CLIENT, mBluetoothPbapClient);
-            mBluetoothPbapClient = null;
-            mBluetoothProfileStatus.put(BluetoothProfile.PBAP_CLIENT, false);
+            mBluetoothAdapter.closeProfileProxy(BluetoothProfile.PBAP, mBluetoothPbap);
+            mBluetoothPbap = null;
+            mBluetoothProfileStatus.put(BluetoothProfile.PBAP, false);
 
-            mBluetoothAdapter.closeProfileProxy(BluetoothProfile.MAP_CLIENT, mBluetoothMapClient);
-            mBluetoothMapClient = null;
-            mBluetoothProfileStatus.put(BluetoothProfile.MAP_CLIENT, false);
+            mBluetoothAdapter.closeProfileProxy(BluetoothProfile.MAP, mBluetoothMap);
+            mBluetoothMap = null;
+            mBluetoothProfileStatus.put(BluetoothProfile.MAP, false);
 
             mBluetoothAdapter.closeProfileProxy(BluetoothProfile.PAN, mBluetoothPan);
             mBluetoothPan = null;
@@ -167,17 +170,17 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
             mBluetoothProxyLock.lock();
             try {
                 switch (profile) {
-                    case BluetoothProfile.A2DP_SINK:
+                    /*case BluetoothProfile.A2DP_SINK:
                         mBluetoothA2dpSink = (BluetoothA2dpSink) proxy;
+                        break;*/
+                    case BluetoothProfile.HEADSET:
+                        mBluetoothHeadset = (BluetoothHeadset) proxy;
                         break;
-                    case BluetoothProfile.HEADSET_CLIENT:
-                        mBluetoothHeadsetClient = (BluetoothHeadsetClient) proxy;
+                    case BluetoothProfile.PBAP:
+                        mBluetoothPbap = (BluetoothPbap) proxy;
                         break;
-                    case BluetoothProfile.PBAP_CLIENT:
-                        mBluetoothPbapClient = (BluetoothPbapClient) proxy;
-                        break;
-                    case BluetoothProfile.MAP_CLIENT:
-                        mBluetoothMapClient = (BluetoothMapClient) proxy;
+                    case BluetoothProfile.MAP:
+                        mBluetoothMap = (BluetoothMap) proxy;
                         break;
                     case BluetoothProfile.PAN:
                         mBluetoothPan = (BluetoothPan) proxy;
@@ -292,14 +295,14 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
                 }
             }
             switch (profile) {
-                case BluetoothProfile.A2DP_SINK:
-                    return mBluetoothA2dpSink.connect(device);
-                case BluetoothProfile.HEADSET_CLIENT:
-                    return mBluetoothHeadsetClient.connect(device);
-                case BluetoothProfile.MAP_CLIENT:
-                    return mBluetoothMapClient.connect(device);
-                case BluetoothProfile.PBAP_CLIENT:
-                    return mBluetoothPbapClient.connect(device);
+                /*case BluetoothProfile.A2DP_SINK:
+                    return mBluetoothA2dpSink.connect(device);*/
+                case BluetoothProfile.HEADSET:
+                    return mBluetoothHeadset.connect(device);
+                case BluetoothProfile.MAP:
+                    return mBluetoothMap.connect(device);
+                /*case BluetoothProfile.PBAP:
+                    return mBluetoothPbap.connect(device);*/
                 case BluetoothProfile.PAN:
                     return mBluetoothPan.connect(device);
                 default:
@@ -336,14 +339,14 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
                 }
             }
             switch (profile) {
-                case BluetoothProfile.A2DP_SINK:
-                    return mBluetoothA2dpSink.disconnect(device);
-                case BluetoothProfile.HEADSET_CLIENT:
-                    return mBluetoothHeadsetClient.disconnect(device);
-                case BluetoothProfile.MAP_CLIENT:
-                    return mBluetoothMapClient.disconnect(device);
-                case BluetoothProfile.PBAP_CLIENT:
-                    return mBluetoothPbapClient.disconnect(device);
+                /*case BluetoothProfile.A2DP_SINK:
+                    return mBluetoothA2dpSink.disconnect(device);*/
+                case BluetoothProfile.HEADSET:
+                    return mBluetoothHeadset.disconnect(device);
+                case BluetoothProfile.MAP:
+                    return mBluetoothMap.disconnect(device);
+                case BluetoothProfile.PBAP:
+                    return mBluetoothPbap.disconnect(device);
                 case BluetoothProfile.PAN:
                     return mBluetoothPan.disconnect(device);
                 default:
@@ -381,18 +384,18 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
                 }
             }
             switch (profile) {
-                case BluetoothProfile.A2DP_SINK:
+                /*case BluetoothProfile.A2DP_SINK:
                     priority = mBluetoothA2dpSink.getPriority(device);
+                    break;*/
+                case BluetoothProfile.HEADSET:
+                    priority = mBluetoothHeadset.getPriority(device);
                     break;
-                case BluetoothProfile.HEADSET_CLIENT:
-                    priority = mBluetoothHeadsetClient.getPriority(device);
-                    break;
-                case BluetoothProfile.MAP_CLIENT:
-                    priority = mBluetoothMapClient.getPriority(device);
-                    break;
-                case BluetoothProfile.PBAP_CLIENT:
-                    priority = mBluetoothPbapClient.getPriority(device);
+                case BluetoothProfile.MAP:
+                    priority = mBluetoothMap.getPriority(device);
                     break;
+                /*case BluetoothProfile.PBAP:
+                    priority = mBluetoothPbap.getPriority(device);
+                    break;*/
                 default:
                     Slog.w(TAG, "Unknown Profile: " + Utils.getProfileName(profile));
                     priority = BluetoothProfile.PRIORITY_UNDEFINED;
@@ -433,18 +436,18 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
                 }
             }
             switch (profile) {
-                case BluetoothProfile.A2DP_SINK:
+                /*case BluetoothProfile.A2DP_SINK:
                     mBluetoothA2dpSink.setPriority(device, priority);
+                    break;*/
+                case BluetoothProfile.HEADSET:
+                    mBluetoothHeadset.setPriority(device, priority);
                     break;
-                case BluetoothProfile.HEADSET_CLIENT:
-                    mBluetoothHeadsetClient.setPriority(device, priority);
-                    break;
-                case BluetoothProfile.MAP_CLIENT:
-                    mBluetoothMapClient.setPriority(device, priority);
-                    break;
-                case BluetoothProfile.PBAP_CLIENT:
-                    mBluetoothPbapClient.setPriority(device, priority);
+                case BluetoothProfile.MAP:
+                    mBluetoothMap.setPriority(device, priority);
                     break;
+                /*case BluetoothProfile.PBAP:
+                    mBluetoothPbap.setPriority(device, priority);
+                    break;*/
                 default:
                     Slog.w(TAG, "Unknown Profile: " + Utils.getProfileName(profile));
                     break;
@@ -460,10 +463,10 @@ public class CarBluetoothUserService extends ICarBluetoothUserService.Stub {
         pw.printf("Profiles status: %s\n", mBluetoothProfileStatus);
         pw.printf("Proxy operation timeout: %d ms\n", PROXY_OPERATION_TIMEOUT_MS);
         pw.printf("BluetoothAdapter: %s\n", mBluetoothAdapter);
-        pw.printf("BluetoothA2dpSink: %s\n", mBluetoothA2dpSink);
-        pw.printf("BluetoothHeadsetClient: %s\n", mBluetoothHeadsetClient);
-        pw.printf("BluetoothPbapClient: %s\n", mBluetoothPbapClient);
-        pw.printf("BluetoothMapClient: %s\n", mBluetoothMapClient);
+        //pw.printf("BluetoothA2dpSink: %s\n", mBluetoothA2dpSink);
+        pw.printf("BluetoothHeadset: %s\n", mBluetoothHeadset);
+        pw.printf("BluetoothPbap: %s\n", mBluetoothPbap);
+        pw.printf("BluetoothMap: %s\n", mBluetoothMap);
         pw.printf("BluetoothPan: %s\n", mBluetoothPan);
         mFastPairProvider.dump(pw);
     }
-- 
2.17.1

