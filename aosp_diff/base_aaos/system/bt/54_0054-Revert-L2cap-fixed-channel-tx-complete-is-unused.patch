From fc6c1b7cbbf9e6bd5aa549e1a1b106fe3ba2d6a9 Mon Sep 17 00:00:00 2001
From: Gowtham Anandha Babu <gowtham.anandha.babu@intel.com>
Date: Tue, 20 Feb 2024 12:32:24 +0530
Subject: [PATCH] Revert "L2cap fixed channel tx complete is unused"

This reverts commit 1f6cf09bcd50d14f5eefa0ba948166ac5d306b88.

The assumption in the original CL "L2cap tx completes immediately"
seems to be incorrect.

Tracked-On: OAM-112831
Signed-off-by: Gowtham Anandha Babu <gowtham.anandha.babu@intel.com>
---
 stack/include/l2c_api.h  |  2 ++
 stack/l2cap/l2c_int.h    |  3 +++
 stack/l2cap/l2c_link.cc  |  4 ++++
 stack/l2cap/l2c_utils.cc |  4 ++++
 stack/smp/smp_l2c.cc     | 12 ++++++++++++
 5 files changed, 25 insertions(+)

diff --git a/stack/include/l2c_api.h b/stack/include/l2c_api.h
index 52f41614e..f884e1bb0 100644
--- a/stack/include/l2c_api.h
+++ b/stack/include/l2c_api.h
@@ -701,6 +701,8 @@ typedef struct {
   tL2CA_FIXED_CONGESTION_STATUS_CB* pL2CA_FixedCong_Cb;
 
   uint16_t default_idle_tout;
+  tL2CA_TX_COMPLETE_CB*
+      pL2CA_FixedTxComplete_Cb; /* fixed channel tx complete callback */
 } tL2CAP_FIXED_CHNL_REG;
 
 /*******************************************************************************
diff --git a/stack/l2cap/l2c_int.h b/stack/l2cap/l2c_int.h
index 6c3d711b2..ab314fdf4 100644
--- a/stack/l2cap/l2c_int.h
+++ b/stack/l2cap/l2c_int.h
@@ -650,6 +650,7 @@ typedef void(tL2C_FCR_MGMT_EVT_HDLR)(uint8_t, tL2C_CCB*);
 typedef struct {
   uint16_t local_cid;
   uint16_t num_sdu;
+  tL2CA_TX_COMPLETE_CB* cb;
 } tL2C_TX_COMPLETE_CB_INFO;
 
 /* The offset in a buffer that L2CAP will use when building commands.
@@ -721,6 +722,8 @@ extern void l2cu_set_acl_hci_header(BT_HDR* p_buf, tL2C_CCB* p_ccb);
 extern void l2cu_check_channel_congestion(tL2C_CCB* p_ccb);
 extern void l2cu_disconnect_chnl(tL2C_CCB* p_ccb);
 
+extern void l2cu_tx_complete(tL2C_TX_COMPLETE_CB_INFO* p_cbi);
+
 extern void l2cu_send_peer_ble_par_req(tL2C_LCB* p_lcb, uint16_t min_int,
                                        uint16_t max_int, uint16_t latency,
                                        uint16_t timeout);
diff --git a/stack/l2cap/l2c_link.cc b/stack/l2cap/l2c_link.cc
index b4ed68594..c94e818e0 100644
--- a/stack/l2cap/l2c_link.cc
+++ b/stack/l2cap/l2c_link.cc
@@ -1157,6 +1157,7 @@ static void l2c_link_send_to_lower(tL2C_LCB* p_lcb, BT_HDR* p_buf,
   } else {
     l2c_link_send_to_lower_ble(p_lcb, p_buf);
   }
+  if (p_cbi) l2cu_tx_complete(p_cbi);
 }
 
 /*******************************************************************************
@@ -1497,6 +1498,8 @@ BT_HDR* l2cu_get_next_buffer_to_send(tL2C_LCB* p_lcb,
   /* Highest priority are fixed channels */
   int xx;
 
+  p_cbi->cb = NULL;
+
   for (xx = 0; xx < L2CAP_NUM_FIXED_CHNLS; xx++) {
     p_ccb = p_lcb->p_fixed_ccbs[xx];
     if (p_ccb == NULL) continue;
@@ -1530,6 +1533,7 @@ BT_HDR* l2cu_get_next_buffer_to_send(tL2C_LCB* p_lcb,
         }
 
         /* Prepare callback info for TX completion */
+        p_cbi->cb = l2cb.fixed_reg[xx].pL2CA_FixedTxComplete_Cb;
         p_cbi->local_cid = p_ccb->local_cid;
         p_cbi->num_sdu = 1;
 
diff --git a/stack/l2cap/l2c_utils.cc b/stack/l2cap/l2c_utils.cc
index 72c5326fa..4a8dd4e9f 100644
--- a/stack/l2cap/l2c_utils.cc
+++ b/stack/l2cap/l2c_utils.cc
@@ -3162,6 +3162,10 @@ tL2C_CCB* l2cu_find_ccb_by_cid(tL2C_LCB* p_lcb, uint16_t local_cid) {
   return (p_ccb);
 }
 
+void l2cu_tx_complete(tL2C_TX_COMPLETE_CB_INFO* p_cbi) {
+  if (p_cbi->cb != NULL) p_cbi->cb(p_cbi->local_cid, p_cbi->num_sdu);
+}
+
 /******************************************************************************
  *
  * Function         l2cu_set_acl_hci_header
diff --git a/stack/smp/smp_l2c.cc b/stack/smp/smp_l2c.cc
index 6c286b133..e73b8dd00 100644
--- a/stack/smp/smp_l2c.cc
+++ b/stack/smp/smp_l2c.cc
@@ -35,6 +35,8 @@
 #include "osi/include/osi.h"  // UNUSED_ATTR
 #include "smp_int.h"
 
+static void smp_tx_complete_callback(uint16_t cid, uint16_t num_pkt);
+
 static void smp_connect_callback(uint16_t channel, const RawAddress& bd_addr,
                                  bool connected, uint16_t reason,
                                  tBT_TRANSPORT transport);
@@ -61,6 +63,7 @@ void smp_l2cap_if_init(void) {
 
   fixed_reg.pL2CA_FixedConn_Cb = smp_connect_callback;
   fixed_reg.pL2CA_FixedData_Cb = smp_data_received;
+  fixed_reg.pL2CA_FixedTxComplete_Cb = smp_tx_complete_callback;
 
   fixed_reg.pL2CA_FixedCong_Cb =
       NULL; /* do not handle congestion on this channel */
@@ -215,6 +218,15 @@ static void smp_data_received(uint16_t channel, const RawAddress& bd_addr,
   osi_free(p_buf);
 }
 
+/*******************************************************************************
+ *
+ * Function         smp_tx_complete_callback
+ *
+ * Description      SMP channel tx complete callback
+ *
+ ******************************************************************************/
+static void smp_tx_complete_callback(uint16_t cid, uint16_t num_pkt) {}
+
 /*******************************************************************************
  *
  * Function         smp_br_connect_callback
-- 
2.17.1

