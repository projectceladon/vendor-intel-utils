From 2d794b9633b0885a66099843d782407f43d46d13 Mon Sep 17 00:00:00 2001
From: bodapati <shalini.salomi.bodapati@intel.com>
Date: Mon, 26 Apr 2021 14:24:42 +0530
Subject: [PATCH 3/3] Add support for overide_lib_name for IA perf variants of
 a library

Change-Id: If803bfd12181fc9c32585252b71a182326255549
Tracked-On: OAM-95425
Signed-off-by: bodapati <shalini.salomi.bodapati@intel.com>
---
 android/module.go | 5 +++++
 cc/cc.go          | 5 +++++
 cc/library.go     | 5 +++++
 cc/vndk.go        | 4 +++-
 4 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/android/module.go b/android/module.go
index 1936d3cfb..40aa9ec7f 100644
--- a/android/module.go
+++ b/android/module.go
@@ -620,6 +620,7 @@ type Dist struct {
 type nameProperties struct {
 	// The name of the module.  Must be unique across all modules.
 	Name *string
+	Override_lib_name *string
 }
 
 type commonProperties struct {
@@ -1229,6 +1230,10 @@ func (m *ModuleBase) BaseModuleName() string {
 	return String(m.nameProperties.Name)
 }
 
+func (m *ModuleBase) OverrideLibraryName() string {
+	return String(m.nameProperties.Override_lib_name)
+}
+
 func (m *ModuleBase) base() *ModuleBase {
 	return m
 }
diff --git a/cc/cc.go b/cc/cc.go
index 11d871845..b3a545813 100644
--- a/cc/cc.go
+++ b/cc/cc.go
@@ -482,6 +482,7 @@ type ModuleContextIntf interface {
 	inRecovery() bool
 	selectedStl() string
 	baseModuleName() string
+	overrideLibraryName() string
 	getVndkExtendsModuleName() string
 	isPgoCompile() bool
 	isNDKStubLibrary() bool
@@ -1429,6 +1430,10 @@ func (ctx *moduleContextImpl) baseModuleName() string {
 	return ctx.mod.ModuleBase.BaseModuleName()
 }
 
+func (ctx *moduleContextImpl) overrideLibraryName() string {
+	return ctx.mod.ModuleBase.OverrideLibraryName()
+}
+
 func (ctx *moduleContextImpl) getVndkExtendsModuleName() string {
 	return ctx.mod.getVndkExtendsModuleName()
 }
diff --git a/cc/library.go b/cc/library.go
index 0e6e10764..1dff6a6c2 100644
--- a/cc/library.go
+++ b/cc/library.go
@@ -773,6 +773,11 @@ func (library *libraryDecorator) getLibNameHelper(baseModuleName string, inVendo
 // getLibName returns the actual canonical name of the library (the name which
 // should be passed to the linker via linker flags).
 func (library *libraryDecorator) getLibName(ctx BaseModuleContext) string {
+	// If an overrideLibraryName exists => this is a proxy library
+       // We must use the overrideLibraryName
+       if ctx.overrideLibraryName() != "" {
+               library.libName = ctx.overrideLibraryName()
+       }
 	name := library.getLibNameHelper(ctx.baseModuleName(), ctx.inVendor(), ctx.inProduct())
 
 	if ctx.IsVndkExt() {
diff --git a/cc/vndk.go b/cc/vndk.go
index 9922852a8..194228f95 100644
--- a/cc/vndk.go
+++ b/cc/vndk.go
@@ -702,7 +702,9 @@ func (c *vndkSnapshotSingleton) GenerateBuildActions(ctx android.SingletonContex
 		}
 
 		libPath := m.outputFile.Path()
-		snapshotLibOut := filepath.Join(snapshotArchDir, targetArch, "shared", vndkType, libPath.Base())
+		qualifiedLibName := m.RelativeInstallPath()
+                qualifiedLibName = filepath.Join(qualifiedLibName, libPath.Base())
+                snapshotLibOut := filepath.Join(snapshotArchDir, targetArch, "shared", vndkType, qualifiedLibName)
 		ret = append(ret, copyFileRule(ctx, libPath, snapshotLibOut))
 
 		if ctx.Config().VndkSnapshotBuildArtifacts() {
-- 
2.17.1

