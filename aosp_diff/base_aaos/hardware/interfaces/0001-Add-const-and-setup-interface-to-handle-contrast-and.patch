From 06e80ddcde3fd8451d82e4671a0469ed6647a2d4 Mon Sep 17 00:00:00 2001
From: zhonghuis <zhonghui.shi@intel.com>
Date: Tue, 23 Apr 2024 13:46:06 +0000
Subject: [PATCH] Add const and setup interface to handle contrast and
 luminance color transform/correction

Signed-off-by: zhonghuis <zhonghui.shi@intel.com>
---
 current.txt                                   |  2 +-
 graphics/composer/2.1/IComposerClient.hal     |  1 +
 .../2.4/ComposerCommandBuffer.h               |  8 ++++++
 .../composer-hal/2.4/ComposerCommandEngine.h  | 15 ++++++++++
 .../include/composer-hal/2.4/ComposerHal.h    |  2 ++
 .../include/composer-passthrough/2.4/HwcHal.h | 23 +++++++++++++--
 .../1/.hash                                   |  2 +-
 .../graphics/composer3/DisplayCommand.aidl    |  2 ++
 .../2/.hash                                   |  2 +-
 .../graphics/composer3/DisplayCommand.aidl    |  2 ++
 .../graphics/composer3/DisplayCommand.aidl    |  2 ++
 .../graphics/composer3/DisplayCommand.aidl    | 28 +++++++++++++++++++
 .../aidl/default/ComposerCommandEngine.cpp    | 16 +++++++++++
 .../aidl/default/ComposerCommandEngine.h      |  1 +
 .../composer/aidl/default/impl/HalImpl.cpp    |  8 ++++++
 graphics/composer/aidl/default/impl/HalImpl.h |  2 ++
 .../aidl/default/include/IComposerHal.h       |  1 +
 .../graphics/composer3/ComposerClientWriter.h |  5 ++++
 18 files changed, 117 insertions(+), 5 deletions(-)

diff --git a/current.txt b/current.txt
index 754093f2b1..67807c85ae 100644
--- a/current.txt
+++ b/current.txt
@@ -99,7 +99,7 @@ b8a75617b9ec12bea641f3a73d4025a33e8b9a2f9169dd46094af56adf9249c5 android.hardwar
 4f6dedbcdd21c309dfc650acea81a096d6b242493ffe49c8d61bd3c43aad354e android.hardware.graphics.common@1.0::types
 b3aac6c3817f039964fcd62268274b3039e17bd7d0d5b40b4d1d1c7b19a1f866 android.hardware.graphics.composer@2.1::IComposer
 b19d00eb8a8b3b0034a0321f22e8f32162bf4c2aebbce6da22c025f56e459ea2 android.hardware.graphics.composer@2.1::IComposerCallback
-61ee43ffe6fb6dbe8b22dc17c51ff3d5ba703fc6029cba211f901f3d79c8a72d android.hardware.graphics.composer@2.1::IComposerClient
+ad4c1847b660ebb66ccc21e34eca4bacb15e480237149262c5a12243c387554d android.hardware.graphics.composer@2.1::IComposerClient
 1c98c2f5154345312ec054871792a2982ec5f3e2bc2abfb61a10c0b517978e20 android.hardware.graphics.composer@2.1::types
 a695898589e1ef15b2b2510f11edd6aafac9918d9cf8d74b4b6143b309dee542 android.hardware.graphics.mapper@2.0::IMapper
 28507d385a3dd224bf3c32f1bfd9f96092c4701b9c1cc66caa578fc3efc97877 android.hardware.graphics.mapper@2.0::types
diff --git a/graphics/composer/2.1/IComposerClient.hal b/graphics/composer/2.1/IComposerClient.hal
index e036ce974b..0df30a8317 100644
--- a/graphics/composer/2.1/IComposerClient.hal
+++ b/graphics/composer/2.1/IComposerClient.hal
@@ -1118,6 +1118,7 @@ interface IComposerClient {
         ACCEPT_DISPLAY_CHANGES             = 0x204 << OPCODE_SHIFT,
         PRESENT_DISPLAY                    = 0x205 << OPCODE_SHIFT,
         PRESENT_OR_VALIDATE_DISPLAY        = 0x206 << OPCODE_SHIFT,
+        SET_COLOR_TRANSFORM_CORRECTION     = 0x207 << OPCODE_SHIFT,
 
         /** layer commands (VALIDATE_DISPLAY not required) */
         SET_LAYER_CURSOR_POSITION          = 0x300 << OPCODE_SHIFT,
diff --git a/graphics/composer/2.4/utils/command-buffer/include/composer-command-buffer/2.4/ComposerCommandBuffer.h b/graphics/composer/2.4/utils/command-buffer/include/composer-command-buffer/2.4/ComposerCommandBuffer.h
index eb35e5cb9e..8bcbe31676 100644
--- a/graphics/composer/2.4/utils/command-buffer/include/composer-command-buffer/2.4/ComposerCommandBuffer.h
+++ b/graphics/composer/2.4/utils/command-buffer/include/composer-command-buffer/2.4/ComposerCommandBuffer.h
@@ -72,6 +72,14 @@ class CommandWriterBase : public V2_3::CommandWriterBase {
         endCommand();
     }
 
+    static constexpr uint16_t kSetColorTransformCorrectionLength = 2;
+    void setColorTransformCorrection(int32_t contrast, int32_t luminance) {
+        beginCommand(IComposerClient::Command::SET_COLOR_TRANSFORM_CORRECTION, 
+                     kSetColorTransformCorrectionLength);
+        writeSigned(contrast);
+        writeSigned(luminance);
+        endCommand();
+    }
   protected:
     uint32_t sizeToElements(uint32_t size) { return (size + 3) / 4; }
 };
diff --git a/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerCommandEngine.h b/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerCommandEngine.h
index 697d6b8a6b..100dd2b01d 100644
--- a/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerCommandEngine.h
+++ b/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerCommandEngine.h
@@ -78,6 +78,8 @@ class ComposerCommandEngine : public V2_3::hal::ComposerCommandEngine {
         switch (static_cast<IComposerClient::Command>(command)) {
             case IComposerClient::Command::SET_LAYER_GENERIC_METADATA:
                 return executeSetLayerGenericMetadata(length);
+            case IComposerClient::Command::SET_COLOR_TRANSFORM_CORRECTION:
+                return executeSetColorTransformCorrection(length);    
             default:
                 return BaseType2_3::executeCommand(command, length);
         }
@@ -112,6 +114,19 @@ class ComposerCommandEngine : public V2_3::hal::ComposerCommandEngine {
     }
 
     ComposerHal* mHal;
+
+    bool executeSetColorTransformCorrection(uint16_t length) {
+        if (length != CommandWriterBase::kSetColorTransformCorrectionLength) {
+            return false;
+        }
+        int32_t contrast = readSigned();
+        int32_t luminance = readSigned();
+        auto err = mHal->setColorTransformCorrection(mCurrentDisplay, contrast, luminance);
+        if (err != Error::NONE) {
+            mWriter->setError(getCommandLoc(), (V2_1::Error) err);
+        }
+        return true;
+    }
 };
 
 }  // namespace hal
diff --git a/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerHal.h b/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerHal.h
index 58991c1d8d..8adcd85a9a 100644
--- a/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerHal.h
+++ b/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerHal.h
@@ -83,6 +83,8 @@ class ComposerHal : public V2_3::hal::ComposerHal {
                                           bool mandatory, const std::vector<uint8_t>& value) = 0;
     virtual Error getLayerGenericMetadataKeys(
             std::vector<IComposerClient::LayerGenericMetadataKey>* outKeys) = 0;
+    virtual Error setColorTransformCorrection(Display display, int32_t contrast, 
+                                              int32_t luminance) = 0;
 };
 
 }  // namespace hal
diff --git a/graphics/composer/2.4/utils/passthrough/include/composer-passthrough/2.4/HwcHal.h b/graphics/composer/2.4/utils/passthrough/include/composer-passthrough/2.4/HwcHal.h
index d28e00625f..9b14058154 100644
--- a/graphics/composer/2.4/utils/passthrough/include/composer-passthrough/2.4/HwcHal.h
+++ b/graphics/composer/2.4/utils/passthrough/include/composer-passthrough/2.4/HwcHal.h
@@ -265,6 +265,11 @@ class HwcHalImpl : public V2_3::passthrough::detail::HwcHalImpl<Hal> {
         return static_cast<Error>(error);
     }
 
+    Error setColorTransformCorrection(Display display, int32_t contrast, int32_t luminance) override {
+        int32_t err = mDispatch.setColorTransformCorrection(mDevice, display, contrast, luminance);
+        return static_cast<Error>(err);
+    }
+
     Error getLayerGenericMetadataKeys(
             std::vector<IComposerClient::LayerGenericMetadataKey>* outKeys) override {
         if (!mDispatch.getLayerGenericMetadataKey) {
@@ -299,7 +304,17 @@ class HwcHalImpl : public V2_3::passthrough::detail::HwcHalImpl<Hal> {
         *outKeys = std::move(keys);
         return Error::NONE;
     }
-
+    template <typename T>
+    bool initDispatch(hwc2_function_descriptor_t desc, T* outPfn) {
+        auto pfn = mDevice->getFunction(mDevice, desc);
+        if (pfn) {
+            *outPfn = reinterpret_cast<T>(pfn);
+            return true;
+        } else {
+            ALOGE("failed to get hwcomposer2 function %d", desc);
+            return false;
+        }
+    }
   protected:
     bool initDispatch() override {
         if (!BaseType2_3::initDispatch()) {
@@ -312,7 +327,10 @@ class HwcHalImpl : public V2_3::passthrough::detail::HwcHalImpl<Hal> {
                                        &mDispatch.setActiveConfigWithConstraints)) {
             return false;
         }
-
+        if (!initDispatch(HWC2_FUNCTION_SET_COLOR_TRANSFORM_CORRECTION, 
+            &mDispatch.setColorTransformCorrection)) {
+            return false;
+        }
         this->initOptionalDispatch(HWC2_FUNCTION_GET_DISPLAY_CONNECTION_TYPE,
                                    &mDispatch.getDisplayConnectionType);
         this->initOptionalDispatch(HWC2_FUNCTION_SET_AUTO_LOW_LATENCY_MODE,
@@ -381,6 +399,7 @@ class HwcHalImpl : public V2_3::passthrough::detail::HwcHalImpl<Hal> {
         HWC2_PFN_GET_CLIENT_TARGET_PROPERTY getClientTargetProperty;
         HWC2_PFN_SET_LAYER_GENERIC_METADATA setLayerGenericMetadata;
         HWC2_PFN_GET_LAYER_GENERIC_METADATA_KEY getLayerGenericMetadataKey;
+        HWC2_PFN_SET_COLOR_TRANSFORM_CORRECTION setColorTransformCorrection;
     } mDispatch = {};
 
     hal::ComposerHal::EventCallback_2_4* mEventCallback_2_4 = nullptr;
diff --git a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/1/.hash b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/1/.hash
index b7a3f2641c..45d54cde0e 100644
--- a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/1/.hash
+++ b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/1/.hash
@@ -1 +1 @@
-6e0e98f955d0bf3e7502a30fac0465e56cc98e75
+26ec627a8257736d36b2cfeb7cc25718d8165d9a
diff --git a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/1/android/hardware/graphics/composer3/DisplayCommand.aidl b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/1/android/hardware/graphics/composer3/DisplayCommand.aidl
index 662240e96b..c027fa41ab 100644
--- a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/1/android/hardware/graphics/composer3/DisplayCommand.aidl
+++ b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/1/android/hardware/graphics/composer3/DisplayCommand.aidl
@@ -45,4 +45,6 @@ parcelable DisplayCommand {
   boolean acceptDisplayChanges;
   boolean presentDisplay;
   boolean presentOrValidateDisplay;
+  int contrastValue;
+  int luminanceValue;
 }
diff --git a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/2/.hash b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/2/.hash
index 70d4ced84c..4ccb98b48b 100644
--- a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/2/.hash
+++ b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/2/.hash
@@ -1 +1 @@
-b6d53bcf537cbe89633b1622e2b065ea17291234
+082e61f06635b00442fed7909a3f3c5045b51d0c
diff --git a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/2/android/hardware/graphics/composer3/DisplayCommand.aidl b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/2/android/hardware/graphics/composer3/DisplayCommand.aidl
index 662240e96b..c027fa41ab 100644
--- a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/2/android/hardware/graphics/composer3/DisplayCommand.aidl
+++ b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/2/android/hardware/graphics/composer3/DisplayCommand.aidl
@@ -45,4 +45,6 @@ parcelable DisplayCommand {
   boolean acceptDisplayChanges;
   boolean presentDisplay;
   boolean presentOrValidateDisplay;
+  int contrastValue;
+  int luminanceValue;
 }
diff --git a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/current/android/hardware/graphics/composer3/DisplayCommand.aidl b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/current/android/hardware/graphics/composer3/DisplayCommand.aidl
index 662240e96b..c027fa41ab 100644
--- a/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/current/android/hardware/graphics/composer3/DisplayCommand.aidl
+++ b/graphics/composer/aidl/aidl_api/android.hardware.graphics.composer3/current/android/hardware/graphics/composer3/DisplayCommand.aidl
@@ -45,4 +45,6 @@ parcelable DisplayCommand {
   boolean acceptDisplayChanges;
   boolean presentDisplay;
   boolean presentOrValidateDisplay;
+  int contrastValue;
+  int luminanceValue;
 }
diff --git a/graphics/composer/aidl/android/hardware/graphics/composer3/DisplayCommand.aidl b/graphics/composer/aidl/android/hardware/graphics/composer3/DisplayCommand.aidl
index 4f69aeeab7..a8a6cf41e1 100644
--- a/graphics/composer/aidl/android/hardware/graphics/composer3/DisplayCommand.aidl
+++ b/graphics/composer/aidl/android/hardware/graphics/composer3/DisplayCommand.aidl
@@ -174,4 +174,32 @@ parcelable DisplayCommand {
      * or perform a VALIDATE_DISPLAY action instead.
      */
     boolean presentOrValidateDisplay;
+    
+    /**
+     * Sets a color transform contrast which will be applied after composition.
+     *
+     * If the device is not capable of either using the value to
+     * apply the desired color transform, it must force all layers to client
+     * composition during VALIDATE_DISPLAY.
+     *
+     * If Capability.SKIP_CLIENT_COLOR_TRANSFORM is present, then
+     * the client must never apply the color transform during client
+     * composition, even if all layers are being composed by the client.
+     *
+     */
+    int contrastValue;
+
+    /**
+     * Sets a color transform luminance which will be applied after composition.
+     *
+     * If the device is not capable of either using the value to
+     * apply the desired color transform, it must force all layers to client
+     * composition during VALIDATE_DISPLAY.
+     *
+     * If Capability.SKIP_CLIENT_COLOR_TRANSFORM is present, then
+     * the client must never apply the color transform during client
+     * composition, even if all layers are being composed by the client.
+     *
+     */
+    int luminanceValue;
 }
diff --git a/graphics/composer/aidl/default/ComposerCommandEngine.cpp b/graphics/composer/aidl/default/ComposerCommandEngine.cpp
index ff66f9dfee..f600232f5f 100644
--- a/graphics/composer/aidl/default/ComposerCommandEngine.cpp
+++ b/graphics/composer/aidl/default/ComposerCommandEngine.cpp
@@ -41,6 +41,13 @@ namespace aidl::android::hardware::graphics::composer3::impl {
         }                                                                    \
     } while (0)
 
+#define DISPATCH_DISPLAY_COMMAND_MULTI(displayCmd, field1, field2, funcName) \
+    do {                                                                     \
+        if (displayCmd.field1 && displayCmd.field2) {                                              \
+            execute##funcName(displayCmd.display, displayCmd.field1, displayCmd.field2);        \
+        }                                                                    \
+    } while (0)
+
 #define DISPATCH_DISPLAY_BOOL_COMMAND(displayCmd, field, funcName)           \
     do {                                                                     \
         if (displayCmd.field) {                                              \
@@ -107,6 +114,7 @@ void ComposerCommandEngine::dispatchDisplayCommand(const DisplayCommand& command
     DISPATCH_DISPLAY_BOOL_COMMAND(command, presentDisplay, PresentDisplay);
     DISPATCH_DISPLAY_BOOL_COMMAND_AND_DATA(command, presentOrValidateDisplay, expectedPresentTime,
                                            PresentOrValidateDisplay);
+    DISPATCH_DISPLAY_COMMAND_MULTI(command, contrastValue, luminanceValue, SetColorTransformCorrection);
 }
 
 void ComposerCommandEngine::dispatchLayerCommand(int64_t display, const LayerCommand& command) {
@@ -166,6 +174,14 @@ void ComposerCommandEngine::executeSetColorTransform(int64_t display,
     }
 }
 
+void ComposerCommandEngine::executeSetColorTransformCorrection(int64_t display, int32_t contrast, int32_t luminance) {
+    auto err = mHal->setColorTransformCorrection(display, contrast, luminance);
+    if (err) {
+        LOG(ERROR) << __func__ << ": err " << err;
+        mWriter->setError(mCommandIndex, err);
+    }
+}
+
 void ComposerCommandEngine::executeSetClientTarget(int64_t display, const ClientTarget& command) {
     bool useCache = !command.buffer.handle;
     buffer_handle_t handle = useCache
diff --git a/graphics/composer/aidl/default/ComposerCommandEngine.h b/graphics/composer/aidl/default/ComposerCommandEngine.h
index ae68285709..5a728529c9 100644
--- a/graphics/composer/aidl/default/ComposerCommandEngine.h
+++ b/graphics/composer/aidl/default/ComposerCommandEngine.h
@@ -48,6 +48,7 @@ class ComposerCommandEngine {
       void dispatchLayerCommand(int64_t display, const LayerCommand& displayCommand);
 
       void executeSetColorTransform(int64_t display, const std::vector<float>& matrix);
+      void executeSetColorTransformCorrection(int64_t display, int32_t contrast, int32_t luminance);
       void executeSetClientTarget(int64_t display, const ClientTarget& command);
       void executeSetDisplayBrightness(uint64_t display, const DisplayBrightness& command);
       void executeSetOutputBuffer(uint64_t display, const Buffer& buffer);
diff --git a/graphics/composer/aidl/default/impl/HalImpl.cpp b/graphics/composer/aidl/default/impl/HalImpl.cpp
index 15dcefe912..00daa63176 100644
--- a/graphics/composer/aidl/default/impl/HalImpl.cpp
+++ b/graphics/composer/aidl/default/impl/HalImpl.cpp
@@ -185,6 +185,7 @@ bool HalImpl::initDispatch() {
         !initDispatch(HWC2_FUNCTION_SET_CLIENT_TARGET, &mDispatch.setClientTarget) ||
         !initDispatch(HWC2_FUNCTION_SET_COLOR_MODE, &mDispatch.setColorMode) ||
         !initDispatch(HWC2_FUNCTION_SET_COLOR_TRANSFORM, &mDispatch.setColorTransform) ||
+        !initDispatch(HWC2_FUNCTION_SET_COLOR_TRANSFORM_CORRECTION, &mDispatch.setColorTransformCorrection) ||
         !initDispatch(HWC2_FUNCTION_SET_CURSOR_POSITION, &mDispatch.setCursorPosition) ||
         !initDispatch(HWC2_FUNCTION_SET_LAYER_BLEND_MODE, &mDispatch.setLayerBlendMode) ||
         !initDispatch(HWC2_FUNCTION_SET_LAYER_BUFFER, &mDispatch.setLayerBuffer) ||
@@ -826,6 +827,13 @@ int32_t HalImpl::setColorTransform(int64_t display, const std::vector<float>& ma
     return mDispatch.setColorTransform(mDevice, display, matrix.data(), hwcHint);
 }
 
+int32_t HalImpl::setColorTransformCorrection(int64_t display, int32_t contrast, int32_t luminance) {
+    if (!mDispatch.setColorTransformCorrection) {
+        return HWC2_ERROR_UNSUPPORTED;
+    }
+    return mDispatch.setColorTransformCorrection(mDevice, display, contrast, luminance);
+}
+
 int32_t HalImpl::setContentType(int64_t display, ContentType contentType) {
 
     if (!mDispatch.setContentType) {
diff --git a/graphics/composer/aidl/default/impl/HalImpl.h b/graphics/composer/aidl/default/impl/HalImpl.h
index d6876b15e6..7f84bb61b5 100644
--- a/graphics/composer/aidl/default/impl/HalImpl.h
+++ b/graphics/composer/aidl/default/impl/HalImpl.h
@@ -97,6 +97,7 @@ class HalImpl : public IComposerHal {
                             const std::vector<common::Rect>& damage) override;
     int32_t setColorMode(int64_t display, ColorMode mode, RenderIntent intent) override;
     int32_t setColorTransform(int64_t display, const std::vector<float>& matrix) override;
+    int32_t setColorTransformCorrection(int64_t display, int32_t contrast, int32_t luminance) override;
     int32_t setContentType(int64_t display, ContentType contentType) override;
     int32_t setDisplayBrightness(int64_t display, float brightness) override;
     int32_t setDisplayedContentSamplingEnabled(int64_t display, bool enable,
@@ -189,6 +190,7 @@ private:
         HWC2_PFN_SET_CLIENT_TARGET setClientTarget;
         HWC2_PFN_SET_COLOR_MODE setColorMode;
         HWC2_PFN_SET_COLOR_TRANSFORM setColorTransform;
+        HWC2_PFN_SET_COLOR_TRANSFORM_CORRECTION setColorTransformCorrection;
         HWC2_PFN_SET_CURSOR_POSITION setCursorPosition;
         HWC2_PFN_SET_LAYER_BLEND_MODE setLayerBlendMode;
         HWC2_PFN_SET_LAYER_BUFFER setLayerBuffer;
diff --git a/graphics/composer/aidl/default/include/IComposerHal.h b/graphics/composer/aidl/default/include/IComposerHal.h
index 6fe25c5b7f..6cb285e4f6 100644
--- a/graphics/composer/aidl/default/include/IComposerHal.h
+++ b/graphics/composer/aidl/default/include/IComposerHal.h
@@ -165,6 +165,7 @@ class IComposerHal {
                                     const std::vector<common::Rect>& damage) = 0; // cmd
     virtual int32_t setColorMode(int64_t display, ColorMode mode, RenderIntent intent) = 0;
     virtual int32_t setColorTransform(int64_t display, const std::vector<float>& matrix) = 0; // cmd
+    virtual int32_t setColorTransformCorrection(int64_t display, int32_t contrast, int32_t luminance) = 0; // cmd
     virtual int32_t setContentType(int64_t display, ContentType contentType) = 0;
     virtual int32_t setDisplayBrightness(int64_t display, float brightness) = 0;
     virtual int32_t setDisplayedContentSamplingEnabled(int64_t display, bool enable,
diff --git a/graphics/composer/aidl/include/android/hardware/graphics/composer3/ComposerClientWriter.h b/graphics/composer/aidl/include/android/hardware/graphics/composer3/ComposerClientWriter.h
index 2e902e548b..6cced90268 100644
--- a/graphics/composer/aidl/include/android/hardware/graphics/composer3/ComposerClientWriter.h
+++ b/graphics/composer/aidl/include/android/hardware/graphics/composer3/ComposerClientWriter.h
@@ -77,6 +77,11 @@ class ComposerClientWriter final {
         getDisplayCommand(display).colorTransformMatrix.emplace(std::move(matVec));
     }
 
+    void setColorTransformCorrection(int64_t display, int32_t contrast, int32_t luminance) {
+        getDisplayCommand(display).contrastValue = contrast;
+        getDisplayCommand(display).luminanceValue = luminance;
+    }
+
     void setDisplayBrightness(int64_t display, float brightness, float brightnessNits) {
         getDisplayCommand(display).brightness.emplace(
                 DisplayBrightness{.brightness = brightness, .brightnessNits = brightnessNits});
-- 
2.34.1

