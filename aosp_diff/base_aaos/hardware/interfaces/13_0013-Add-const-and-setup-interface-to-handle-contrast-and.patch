From a4ea06c5633bb5e0e7514395103ea910da7c4b49 Mon Sep 17 00:00:00 2001
From: zhonghuis <zhonghui.shi@intel.com>
Date: Mon, 26 Feb 2024 15:29:34 +0000
Subject: [PATCH] Add const and setup interface to handle contrast and
 luminance color transform/correction

Signed-off-by: zhonghuis <zhonghui.shi@intel.com>
---
 current.txt                                   |  2 +-
 graphics/composer/2.1/IComposerClient.hal     |  1 +
 .../2.1/ComposerCommandBuffer.h               |  2 +-
 .../composer-hal/2.1/ComposerCommandEngine.h  |  1 +
 .../include/composer-hal/2.1/ComposerHal.h    |  1 +
 .../include/composer-passthrough/2.1/HwcHal.h |  1 +
 .../2.4/ComposerCommandBuffer.h               |  8 +++++++
 .../composer-hal/2.4/ComposerCommandEngine.h  | 15 ++++++++++++
 .../include/composer-hal/2.4/ComposerHal.h    |  2 ++
 .../include/composer-passthrough/2.4/HwcHal.h | 23 +++++++++++++++++--
 10 files changed, 52 insertions(+), 4 deletions(-)

diff --git a/current.txt b/current.txt
index 2373c391d..6ac6182b7 100644
--- a/current.txt
+++ b/current.txt
@@ -98,7 +98,7 @@ b8a75617b9ec12bea641f3a73d4025a33e8b9a2f9169dd46094af56adf9249c5 android.hardwar
 4f6dedbcdd21c309dfc650acea81a096d6b242493ffe49c8d61bd3c43aad354e android.hardware.graphics.common@1.0::types
 b3aac6c3817f039964fcd62268274b3039e17bd7d0d5b40b4d1d1c7b19a1f866 android.hardware.graphics.composer@2.1::IComposer
 b19d00eb8a8b3b0034a0321f22e8f32162bf4c2aebbce6da22c025f56e459ea2 android.hardware.graphics.composer@2.1::IComposerCallback
-61ee43ffe6fb6dbe8b22dc17c51ff3d5ba703fc6029cba211f901f3d79c8a72d android.hardware.graphics.composer@2.1::IComposerClient
+ad4c1847b660ebb66ccc21e34eca4bacb15e480237149262c5a12243c387554d android.hardware.graphics.composer@2.1::IComposerClient
 1c98c2f5154345312ec054871792a2982ec5f3e2bc2abfb61a10c0b517978e20 android.hardware.graphics.composer@2.1::types
 a695898589e1ef15b2b2510f11edd6aafac9918d9cf8d74b4b6143b309dee542 android.hardware.graphics.mapper@2.0::IMapper
 28507d385a3dd224bf3c32f1bfd9f96092c4701b9c1cc66caa578fc3efc97877 android.hardware.graphics.mapper@2.0::types
diff --git a/graphics/composer/2.1/IComposerClient.hal b/graphics/composer/2.1/IComposerClient.hal
index e036ce974..0df30a831 100644
--- a/graphics/composer/2.1/IComposerClient.hal
+++ b/graphics/composer/2.1/IComposerClient.hal
@@ -1118,6 +1118,7 @@ interface IComposerClient {
         ACCEPT_DISPLAY_CHANGES             = 0x204 << OPCODE_SHIFT,
         PRESENT_DISPLAY                    = 0x205 << OPCODE_SHIFT,
         PRESENT_OR_VALIDATE_DISPLAY        = 0x206 << OPCODE_SHIFT,
+        SET_COLOR_TRANSFORM_CORRECTION     = 0x207 << OPCODE_SHIFT,
 
         /** layer commands (VALIDATE_DISPLAY not required) */
         SET_LAYER_CURSOR_POSITION          = 0x300 << OPCODE_SHIFT,
diff --git a/graphics/composer/2.1/utils/command-buffer/include/composer-command-buffer/2.1/ComposerCommandBuffer.h b/graphics/composer/2.1/utils/command-buffer/include/composer-command-buffer/2.1/ComposerCommandBuffer.h
index 499d3b96e..606c9af50 100644
--- a/graphics/composer/2.1/utils/command-buffer/include/composer-command-buffer/2.1/ComposerCommandBuffer.h
+++ b/graphics/composer/2.1/utils/command-buffer/include/composer-command-buffer/2.1/ComposerCommandBuffer.h
@@ -244,7 +244,7 @@ class CommandWriterBase {
         writeSigned(static_cast<int32_t>(hint));
         endCommand();
     }
-
+    
     void setClientTarget(uint32_t slot, const native_handle_t* target, int acquireFence,
                          Dataspace dataspace, const std::vector<IComposerClient::Rect>& damage) {
         setClientTargetInternal(slot, target, acquireFence, static_cast<int32_t>(dataspace),
diff --git a/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerCommandEngine.h b/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerCommandEngine.h
index ab67eb10b..b912fae27 100644
--- a/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerCommandEngine.h
+++ b/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerCommandEngine.h
@@ -205,6 +205,7 @@ class ComposerCommandEngine : protected CommandReaderBase {
         return true;
     }
 
+
     bool executeSetClientTarget(uint16_t length) {
         // 4 parameters followed by N rectangles
         if ((length - 4) % 4 != 0) {
diff --git a/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerHal.h b/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerHal.h
index c9793fd91..32dc03589 100644
--- a/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerHal.h
+++ b/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerHal.h
@@ -96,6 +96,7 @@ class ComposerHal {
     virtual Error setVsyncEnabled(Display display, IComposerClient::Vsync enabled) = 0;
 
     virtual Error setColorTransform(Display display, const float* matrix, int32_t hint) = 0;
+
     virtual Error setClientTarget(Display display, buffer_handle_t target, int32_t acquireFence,
                                   int32_t dataspace, const std::vector<hwc_rect_t>& damage) = 0;
     virtual Error setOutputBuffer(Display display, buffer_handle_t buffer,
diff --git a/graphics/composer/2.1/utils/passthrough/include/composer-passthrough/2.1/HwcHal.h b/graphics/composer/2.1/utils/passthrough/include/composer-passthrough/2.1/HwcHal.h
index 5826b126b..be0b94874 100644
--- a/graphics/composer/2.1/utils/passthrough/include/composer-passthrough/2.1/HwcHal.h
+++ b/graphics/composer/2.1/utils/passthrough/include/composer-passthrough/2.1/HwcHal.h
@@ -306,6 +306,7 @@ class HwcHalImpl : public Hal {
         return static_cast<Error>(err);
     }
 
+
     Error setClientTarget(Display display, buffer_handle_t target, int32_t acquireFence,
                           int32_t dataspace, const std::vector<hwc_rect_t>& damage) override {
         hwc_region region = {damage.size(), damage.data()};
diff --git a/graphics/composer/2.4/utils/command-buffer/include/composer-command-buffer/2.4/ComposerCommandBuffer.h b/graphics/composer/2.4/utils/command-buffer/include/composer-command-buffer/2.4/ComposerCommandBuffer.h
index eb35e5cb9..8bcbe3167 100644
--- a/graphics/composer/2.4/utils/command-buffer/include/composer-command-buffer/2.4/ComposerCommandBuffer.h
+++ b/graphics/composer/2.4/utils/command-buffer/include/composer-command-buffer/2.4/ComposerCommandBuffer.h
@@ -72,6 +72,14 @@ class CommandWriterBase : public V2_3::CommandWriterBase {
         endCommand();
     }
 
+    static constexpr uint16_t kSetColorTransformCorrectionLength = 2;
+    void setColorTransformCorrection(int32_t contrast, int32_t luminance) {
+        beginCommand(IComposerClient::Command::SET_COLOR_TRANSFORM_CORRECTION, 
+                     kSetColorTransformCorrectionLength);
+        writeSigned(contrast);
+        writeSigned(luminance);
+        endCommand();
+    }
   protected:
     uint32_t sizeToElements(uint32_t size) { return (size + 3) / 4; }
 };
diff --git a/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerCommandEngine.h b/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerCommandEngine.h
index 697d6b8a6..100dd2b01 100644
--- a/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerCommandEngine.h
+++ b/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerCommandEngine.h
@@ -78,6 +78,8 @@ class ComposerCommandEngine : public V2_3::hal::ComposerCommandEngine {
         switch (static_cast<IComposerClient::Command>(command)) {
             case IComposerClient::Command::SET_LAYER_GENERIC_METADATA:
                 return executeSetLayerGenericMetadata(length);
+            case IComposerClient::Command::SET_COLOR_TRANSFORM_CORRECTION:
+                return executeSetColorTransformCorrection(length);    
             default:
                 return BaseType2_3::executeCommand(command, length);
         }
@@ -112,6 +114,19 @@ class ComposerCommandEngine : public V2_3::hal::ComposerCommandEngine {
     }
 
     ComposerHal* mHal;
+
+    bool executeSetColorTransformCorrection(uint16_t length) {
+        if (length != CommandWriterBase::kSetColorTransformCorrectionLength) {
+            return false;
+        }
+        int32_t contrast = readSigned();
+        int32_t luminance = readSigned();
+        auto err = mHal->setColorTransformCorrection(mCurrentDisplay, contrast, luminance);
+        if (err != Error::NONE) {
+            mWriter->setError(getCommandLoc(), (V2_1::Error) err);
+        }
+        return true;
+    }
 };
 
 }  // namespace hal
diff --git a/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerHal.h b/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerHal.h
index 58991c1d8..8adcd85a9 100644
--- a/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerHal.h
+++ b/graphics/composer/2.4/utils/hal/include/composer-hal/2.4/ComposerHal.h
@@ -83,6 +83,8 @@ class ComposerHal : public V2_3::hal::ComposerHal {
                                           bool mandatory, const std::vector<uint8_t>& value) = 0;
     virtual Error getLayerGenericMetadataKeys(
             std::vector<IComposerClient::LayerGenericMetadataKey>* outKeys) = 0;
+    virtual Error setColorTransformCorrection(Display display, int32_t contrast, 
+                                              int32_t luminance) = 0;
 };
 
 }  // namespace hal
diff --git a/graphics/composer/2.4/utils/passthrough/include/composer-passthrough/2.4/HwcHal.h b/graphics/composer/2.4/utils/passthrough/include/composer-passthrough/2.4/HwcHal.h
index d28e00625..9b1405815 100644
--- a/graphics/composer/2.4/utils/passthrough/include/composer-passthrough/2.4/HwcHal.h
+++ b/graphics/composer/2.4/utils/passthrough/include/composer-passthrough/2.4/HwcHal.h
@@ -265,6 +265,11 @@ class HwcHalImpl : public V2_3::passthrough::detail::HwcHalImpl<Hal> {
         return static_cast<Error>(error);
     }
 
+    Error setColorTransformCorrection(Display display, int32_t contrast, int32_t luminance) override {
+        int32_t err = mDispatch.setColorTransformCorrection(mDevice, display, contrast, luminance);
+        return static_cast<Error>(err);
+    }
+
     Error getLayerGenericMetadataKeys(
             std::vector<IComposerClient::LayerGenericMetadataKey>* outKeys) override {
         if (!mDispatch.getLayerGenericMetadataKey) {
@@ -299,7 +304,17 @@ class HwcHalImpl : public V2_3::passthrough::detail::HwcHalImpl<Hal> {
         *outKeys = std::move(keys);
         return Error::NONE;
     }
-
+    template <typename T>
+    bool initDispatch(hwc2_function_descriptor_t desc, T* outPfn) {
+        auto pfn = mDevice->getFunction(mDevice, desc);
+        if (pfn) {
+            *outPfn = reinterpret_cast<T>(pfn);
+            return true;
+        } else {
+            ALOGE("failed to get hwcomposer2 function %d", desc);
+            return false;
+        }
+    }
   protected:
     bool initDispatch() override {
         if (!BaseType2_3::initDispatch()) {
@@ -312,7 +327,10 @@ class HwcHalImpl : public V2_3::passthrough::detail::HwcHalImpl<Hal> {
                                        &mDispatch.setActiveConfigWithConstraints)) {
             return false;
         }
-
+        if (!initDispatch(HWC2_FUNCTION_SET_COLOR_TRANSFORM_CORRECTION, 
+            &mDispatch.setColorTransformCorrection)) {
+            return false;
+        }
         this->initOptionalDispatch(HWC2_FUNCTION_GET_DISPLAY_CONNECTION_TYPE,
                                    &mDispatch.getDisplayConnectionType);
         this->initOptionalDispatch(HWC2_FUNCTION_SET_AUTO_LOW_LATENCY_MODE,
@@ -381,6 +399,7 @@ class HwcHalImpl : public V2_3::passthrough::detail::HwcHalImpl<Hal> {
         HWC2_PFN_GET_CLIENT_TARGET_PROPERTY getClientTargetProperty;
         HWC2_PFN_SET_LAYER_GENERIC_METADATA setLayerGenericMetadata;
         HWC2_PFN_GET_LAYER_GENERIC_METADATA_KEY getLayerGenericMetadataKey;
+        HWC2_PFN_SET_COLOR_TRANSFORM_CORRECTION setColorTransformCorrection;
     } mDispatch = {};
 
     hal::ComposerHal::EventCallback_2_4* mEventCallback_2_4 = nullptr;
-- 
2.34.1

