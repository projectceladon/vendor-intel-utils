From 9df8d585174b2b75454580731ef755e415e98123 Mon Sep 17 00:00:00 2001
From: zhonghuis <zhonghui.shi@intel.com>
Date: Thu, 25 Apr 2024 17:54:24 +0000
Subject: [PATCH] Color transform fix

Update color transform reboot setting to fix
previous performance regression issue

Tracked-On: OAM-117740
Signed-off-by: zhonghuis <zhonghui.shi@intel.com>
---
 .../display/color/ColorDisplayService.java    | 65 ++++++++++---------
 1 file changed, 35 insertions(+), 30 deletions(-)

diff --git a/services/core/java/com/android/server/display/color/ColorDisplayService.java b/services/core/java/com/android/server/display/color/ColorDisplayService.java
index 138ab3bdfc87..48baa7e6c57d 100644
--- a/services/core/java/com/android/server/display/color/ColorDisplayService.java
+++ b/services/core/java/com/android/server/display/color/ColorDisplayService.java
@@ -493,56 +493,61 @@ public final class ColorDisplayService extends SystemService {
 
     void setContrastInitial() {
         int contrastValue = setColorTransformProperty(PROP_KEY_CONTRAST, DEFAULT_CONTRAST_LEVEL);
-        contrastValue = (contrastValue >= 0 && contrastValue <= 255) ? contrastValue : DEFAULT_CONTRAST_LEVEL;
-        final long token = Binder.clearCallingIdentity();
-        try {
-            setContrastLevelInternal(contrastValue);
-        } finally {
-            Binder.restoreCallingIdentity(token);
+        if (contrastValue >= 0 && contrastValue <= 255 && contrastValue != DEFAULT_CONTRAST_LEVEL){
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setContrastLevelInternal(contrastValue);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
         }
     }
 
     void setHueInitial() {
         int hueValue = setColorTransformProperty(PROP_KEY_HUE, DEFAULT_HUE_LEVEL);
-        hueValue = (hueValue >= 0 && hueValue <= 360) ? hueValue : DEFAULT_HUE_LEVEL;
-        final long token = Binder.clearCallingIdentity();
-        try {
-            setHueLevelInternal(hueValue);
-        } finally {
-            Binder.restoreCallingIdentity(token);
+        if (hueValue >= 0 && hueValue <= 360 && hueValue != DEFAULT_HUE_LEVEL){
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setHueLevelInternal(hueValue);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
         }
     }
 
     void setSaturationInitial() {
         int saturationValue = setColorTransformProperty(PROP_KEY_SATURATION, DEFAULT_SATURATION_LEVEL);
-        saturationValue = (saturationValue >= 0 && saturationValue <= 100) ? saturationValue : DEFAULT_SATURATION_LEVEL;
-        final long token = Binder.clearCallingIdentity();
-        try {
-            setSaturationLevelInternal(saturationValue);
-        } finally {
-            Binder.restoreCallingIdentity(token);
+        if (saturationValue >= 0 && saturationValue <= 100 && saturationValue != DEFAULT_SATURATION_LEVEL){
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setSaturationLevelInternal(saturationValue);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
         }
     }
 
     void setWhitebalanceInitial() {
         int whitebalanceValue = setColorTransformProperty(PROP_KEY_WHITEBALANCE, DEFAULT_WHITEBALANCE_LEVEL);
-        whitebalanceValue = (whitebalanceValue >= 0 && whitebalanceValue <= 200) ? whitebalanceValue : DEFAULT_WHITEBALANCE_LEVEL;
-        final long token = Binder.clearCallingIdentity();
-        try {
-            setWhitebalanceLevelInternal(whitebalanceValue);
-        } finally {
-            Binder.restoreCallingIdentity(token);
+        if (whitebalanceValue >= 0 && whitebalanceValue <= 200 && whitebalanceValue != DEFAULT_WHITEBALANCE_LEVEL){
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setWhitebalanceLevelInternal(whitebalanceValue);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
         }
     }
 
     void setLuminanceInitial() {
         int luminanceValue = setColorTransformProperty(PROP_KEY_LUMINANCE, DEFAULT_LUMINANCE_LEVEL);
-        luminanceValue = (luminanceValue >= 0 && luminanceValue <= 255) ? luminanceValue : DEFAULT_LUMINANCE_LEVEL;
-        final long token = Binder.clearCallingIdentity();
-        try {
-            setLuminanceLevelInternal(luminanceValue);
-        } finally {
-            Binder.restoreCallingIdentity(token);
+        if (luminanceValue >= 0 && luminanceValue <= 255 && luminanceValue != DEFAULT_LUMINANCE_LEVEL){
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setLuminanceLevelInternal(luminanceValue);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
         }
     }
 
-- 
2.34.1

