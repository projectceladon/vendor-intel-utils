From b34c6b92a2cea5cfee199902c7b021883de7782d Mon Sep 17 00:00:00 2001
From: zhonghuis <zhonghui.shi@intel.com>
Date: Fri, 12 Apr 2024 13:38:08 +0000
Subject: [PATCH] Add settings for display HW adjustment

Add API on framework for display adjustment, including
Saturation, Hue, Contrast, Luminance and White Balance.

Tracked-On: OAM-114024
Change-Id: Id1639bf4826b9afbeed6c011dd63c548cd8f0b2e
Signed-off-by: xubing <bing.xu@intel.com>
---
 core/api/current.txt                          |   5 +
 core/api/system-current.txt                   |   4 +
 .../hardware/display/ColorDisplayManager.java |  84 ++++++++
 .../display/IColorDisplayManager.aidl         |   5 +
 core/java/android/provider/Settings.java      |  20 ++
 core/res/res/values/config.xml                |   4 +-
 .../display/color/ColorDisplayService.java    | 183 ++++++++++++++++++
 .../color/DisplayTransformManager.java        |  16 ++
 .../color/GlobalContrastTintController.java   |  81 ++++++++
 .../color/GlobalHueTintController.java        |  81 ++++++++
 .../color/GlobalLuminanceTintController.java  |  81 ++++++++
 .../GlobalWhitebalanceTintController.java     |  81 ++++++++
 12 files changed, 643 insertions(+), 2 deletions(-)
 create mode 100644 services/core/java/com/android/server/display/color/GlobalContrastTintController.java
 create mode 100644 services/core/java/com/android/server/display/color/GlobalHueTintController.java
 create mode 100644 services/core/java/com/android/server/display/color/GlobalLuminanceTintController.java
 create mode 100644 services/core/java/com/android/server/display/color/GlobalWhitebalanceTintController.java

diff --git a/core/api/current.txt b/core/api/current.txt
index 288ab479c0fb..e8aa820b43c3 100644
--- a/core/api/current.txt
+++ b/core/api/current.txt
@@ -37432,6 +37432,11 @@ package android.provider {
     field public static final String SCREEN_BRIGHTNESS_MODE = "screen_brightness_mode";
     field public static final int SCREEN_BRIGHTNESS_MODE_AUTOMATIC = 1; // 0x1
     field public static final int SCREEN_BRIGHTNESS_MODE_MANUAL = 0; // 0x0
+    field public static final String SCREEN_CONTRAST = "screen_contrast";
+    field public static final String SCREEN_HUE = "screen_hue";
+    field public static final String SCREEN_LUMINANCE = "screen_luminance";
+    field public static final String SCREEN_SATURATION = "screen_saturation";
+    field public static final String SCREEN_WHITEBALANCE = "screen_whitebalance";
     field public static final String SCREEN_OFF_TIMEOUT = "screen_off_timeout";
     field @Deprecated public static final String SETTINGS_CLASSNAME = "settings_classname";
     field public static final String SETUP_WIZARD_HAS_RUN = "setup_wizard_has_run";
diff --git a/core/api/system-current.txt b/core/api/system-current.txt
index ace7d59c9a45..7394e34fa4bd 100644
--- a/core/api/system-current.txt
+++ b/core/api/system-current.txt
@@ -4484,6 +4484,10 @@ package android.hardware.display {
     method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public int getNightDisplayAutoMode();
     method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public int getTransformCapabilities();
     method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public boolean setAppSaturationLevel(@NonNull String, @IntRange(from=0, to=100) int);
+    method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public boolean setContrastLevel(@IntRange(from=0, to=100) int);
+    method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public boolean setHueLevel(@IntRange(from=0, to=100) int);
+    method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public boolean setLuminanceLevel(@IntRange(from=0, to=100) int);
+    method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public boolean setWhitebalanceLevel(@IntRange(from=0, to=100) int);
     method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public boolean setNightDisplayAutoMode(int);
     method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public boolean setNightDisplayCustomEndTime(@NonNull java.time.LocalTime);
     method @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS) public boolean setNightDisplayCustomStartTime(@NonNull java.time.LocalTime);
diff --git a/core/java/android/hardware/display/ColorDisplayManager.java b/core/java/android/hardware/display/ColorDisplayManager.java
index aafa7d520632..db4c8da88579 100644
--- a/core/java/android/hardware/display/ColorDisplayManager.java
+++ b/core/java/android/hardware/display/ColorDisplayManager.java
@@ -391,6 +391,58 @@ public final class ColorDisplayManager {
         return mManager.setSaturationLevel(saturationLevel);
     }
 
+    /**
+     * Set the level of color Hue to apply to the display.
+     *
+     * @param setHueLevel 0-360 (inclusive), where 360 is full Hue
+     * @return whether the Hue level change was applied successfully
+     * @hide
+     */
+    @SystemApi
+    @RequiresPermission(Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+    public boolean setHueLevel(@IntRange(from = 0, to = 100) int hueLevel) {
+        return mManager.setHueLevel(hueLevel);
+    }
+
+    /**
+     * Set the level of color Contrast to apply to the display.
+     *
+     * @param setContrastLevel 0-255 (inclusive), where 255 is full Contrast
+     * @return whether the Contrast level change was applied successfully
+     * @hide
+     */
+    @SystemApi
+    @RequiresPermission(Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+    public boolean setContrastLevel(@IntRange(from = 0, to = 100) int contrastLevel) {
+        return mManager.setContrastLevel(contrastLevel);
+    }
+
+    /**
+     * Set the level of color Whitebalance to apply to the display.
+     *
+     * @param setWhitebalanceLevel 0-100 (inclusive), where 100 is full Whitebalance
+     * @return whether the Whitebalance level change was applied successfully
+     * @hide
+     */
+    @SystemApi
+    @RequiresPermission(Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+    public boolean setWhitebalanceLevel(@IntRange(from = 0, to = 100) int whitebalanceLevel) {
+        return mManager.setWhitebalanceLevel(whitebalanceLevel);
+    }
+
+    /**
+     * Set the level of color Luminance to apply to the display.
+     *
+     * @param setLuminanceLevel 0-255 (inclusive), where 255 is full Luminance
+     * @return whether the Luminance level change was applied successfully
+     * @hide
+     */
+    @SystemApi
+    @RequiresPermission(Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+    public boolean setLuminanceLevel(@IntRange(from = 0, to = 100) int luminanceLevel) {
+        return mManager.setLuminanceLevel(luminanceLevel);
+    }
+
     /**
      * Gets whether or not a non-default saturation level is currently applied to the display.
      *
@@ -725,6 +777,38 @@ public final class ColorDisplayManager {
             }
         }
 
+        boolean setHueLevel(int hueLevel) {
+            try {
+                return mCdm.setHueLevel(hueLevel);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        }
+
+        boolean setContrastLevel(int contrastLevel) {
+            try {
+                return mCdm.setContrastLevel(contrastLevel);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        }
+
+        boolean setWhitebalanceLevel(int whitebalanceLevel) {
+            try {
+                return mCdm.setWhitebalanceLevel(whitebalanceLevel);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        }
+
+        boolean setLuminanceLevel(int luminanceLevel) {
+            try {
+                return mCdm.setLuminanceLevel(luminanceLevel);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        }
+
         boolean isSaturationActivated() {
             try {
                 return mCdm.isSaturationActivated();
diff --git a/core/java/android/hardware/display/IColorDisplayManager.aidl b/core/java/android/hardware/display/IColorDisplayManager.aidl
index 200cf736f0c8..4be485be3b1c 100644
--- a/core/java/android/hardware/display/IColorDisplayManager.aidl
+++ b/core/java/android/hardware/display/IColorDisplayManager.aidl
@@ -23,6 +23,11 @@ interface IColorDisplayManager {
     boolean isDeviceColorManaged();
 
     boolean setSaturationLevel(int saturationLevel);
+    boolean setHueLevel(int hueLevel);
+    boolean setContrastLevel(int contrastLevel);
+    boolean setWhitebalanceLevel(int whitebalanceLevel);
+    boolean setLuminanceLevel(int luminanceLevel);
+
     @EnforcePermission("CONTROL_DISPLAY_COLOR_TRANSFORMS")
     boolean setAppSaturationLevel(String packageName, int saturationLevel);
     @EnforcePermission("CONTROL_DISPLAY_COLOR_TRANSFORMS")
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index a55183c0f7c5..257f401f374f 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4750,6 +4750,21 @@ public final class Settings {
          */
         @Readable
         public static final String SCREEN_BRIGHTNESS = "screen_brightness";
+        @Readable
+        @SuppressLint("NoSettingsProvider")
+        public static final String SCREEN_CONTRAST = "screen_contrast";
+        @Readable
+        @SuppressLint("NoSettingsProvider")
+        public static final String SCREEN_HUE = "screen_hue";
+        @Readable
+        @SuppressLint("NoSettingsProvider")
+        public static final String SCREEN_WHITEBALANCE = "screen_whitebalance";
+        @Readable
+        @SuppressLint("NoSettingsProvider")
+        public static final String SCREEN_LUMINANCE = "screen_luminance";
+        @Readable
+        @SuppressLint("NoSettingsProvider")
+        public static final String SCREEN_SATURATION = "screen_saturation";
 
         /**
          * The screen backlight brightness between 0.0f and 1.0f.
@@ -5823,6 +5838,11 @@ public final class Settings {
             PUBLIC_SETTINGS.add(DIM_SCREEN);
             PUBLIC_SETTINGS.add(SCREEN_OFF_TIMEOUT);
             PUBLIC_SETTINGS.add(SCREEN_BRIGHTNESS);
+            PUBLIC_SETTINGS.add(SCREEN_SATURATION);
+            PUBLIC_SETTINGS.add(SCREEN_HUE);
+            PUBLIC_SETTINGS.add(SCREEN_WHITEBALANCE);
+            PUBLIC_SETTINGS.add(SCREEN_LUMINANCE);
+            PUBLIC_SETTINGS.add(SCREEN_CONTRAST);
             PUBLIC_SETTINGS.add(SCREEN_BRIGHTNESS_FLOAT);
             PUBLIC_SETTINGS.add(SCREEN_BRIGHTNESS_MODE);
             PUBLIC_SETTINGS.add(MODE_RINGER_STREAMS_AFFECTED);
diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 5b0f0befcf16..5144d2e68bfd 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -950,10 +950,10 @@
     <integer name="config_reduceBrightColorsStrengthMax">90</integer>
 
     <!-- Boolean indicating whether display white balance is supported. -->
-    <bool name="config_displayWhiteBalanceAvailable">false</bool>
+    <bool name="config_displayWhiteBalanceAvailable">true</bool>
 
     <!-- Boolean indicating whether display white balance should be enabled by default. -->
-    <bool name="config_displayWhiteBalanceEnabledDefault">false</bool>
+    <bool name="config_displayWhiteBalanceEnabledDefault">true</bool>
 
     <!-- Minimum color temperature, in Kelvin, supported by display white balance. -->
     <integer name="config_displayWhiteBalanceColorTemperatureMin">4000</integer>
diff --git a/services/core/java/com/android/server/display/color/ColorDisplayService.java b/services/core/java/com/android/server/display/color/ColorDisplayService.java
index c0ea5fead9a5..1bbb34c47461 100644
--- a/services/core/java/com/android/server/display/color/ColorDisplayService.java
+++ b/services/core/java/com/android/server/display/color/ColorDisplayService.java
@@ -116,6 +116,14 @@ public final class ColorDisplayService extends SystemService {
     private static final int MSG_APPLY_DISPLAY_WHITE_BALANCE = 5;
     private static final int MSG_APPLY_REDUCE_BRIGHT_COLORS = 6;
 
+    private static final int MSG_APPLY_GLOBAL_HUE = 7;
+
+    private static final int MSG_APPLY_GLOBAL_CONTRAST = 8;
+
+    private static final int MSG_APPLY_GLOBAL_WHITEBALANCE = 9;
+
+    private static final int MSG_APPLY_GLOBAL_LUMINANCE = 10;
+
     /**
      * Return value if a setting has not been set.
      */
@@ -156,6 +164,19 @@ public final class ColorDisplayService extends SystemService {
             new NightDisplayTintController();
     private final TintController mGlobalSaturationTintController =
             new GlobalSaturationTintController();
+
+    private final TintController mGlobalHueTintController =
+            new GlobalHueTintController();
+
+    private final TintController mGlobalWhitebalanceTintController =
+            new GlobalWhitebalanceTintController();
+
+    private final TintController mGlobalContrastTintController =
+            new GlobalContrastTintController();
+
+    private final TintController mGlobalLuminanceTintController =
+            new GlobalLuminanceTintController();
+
     private final ReduceBrightColorsTintController mReduceBrightColorsTintController =
             new ReduceBrightColorsTintController();
 
@@ -465,6 +486,22 @@ public final class ColorDisplayService extends SystemService {
             mGlobalSaturationTintController.setActivated(null);
         }
 
+        if (mGlobalHueTintController.isAvailable(getContext())) {
+            mGlobalHueTintController.setActivated(null);
+        }
+
+        if (mGlobalContrastTintController.isAvailable(getContext())) {
+            mGlobalContrastTintController.setActivated(null);
+        }
+
+        if (mGlobalWhitebalanceTintController.isAvailable(getContext())) {
+            mGlobalWhitebalanceTintController.setActivated(null);
+        }
+
+        if (mGlobalLuminanceTintController.isAvailable(getContext())) {
+            mGlobalLuminanceTintController.setActivated(null);
+        }
+
         if (mReduceBrightColorsTintController.isAvailable(getContext())) {
             mReduceBrightColorsTintController.setActivated(null);
         }
@@ -982,6 +1019,34 @@ public final class ColorDisplayService extends SystemService {
         mHandler.sendMessage(message);
     }
 
+    void setHueLevelInternal(int hueLevel) {
+        final Message message = mHandler.obtainMessage(MSG_APPLY_GLOBAL_HUE);
+        message.arg1 = hueLevel;
+        mHandler.sendMessage(message);
+    }
+
+    void setContrastLevelInternal(int contrastLevel) {
+        final Message message = mHandler.obtainMessage(MSG_APPLY_GLOBAL_CONTRAST);
+        message.arg1 = contrastLevel;
+        mHandler.sendMessage(message);
+    }
+
+    void setWhitebalanceLevelInternal(int whitebalanceLevel) {
+        if (mDisplayWhiteBalanceTintController.isAvailable(getContext())) {
+            // Prepare the display white balance transform matrix.
+            mDisplayWhiteBalanceTintController.setUp(getContext(), true /* needsLinear */);
+            mDisplayWhiteBalanceTintController.setActivated(true);
+            mDisplayWhiteBalanceTintController.setMatrix(whitebalanceLevel);
+            mHandler.sendEmptyMessage(MSG_APPLY_DISPLAY_WHITE_BALANCE);
+        }
+    }
+
+    void setLuminanceLevelInternal(int luminanceLevel) {
+        final Message message = mHandler.obtainMessage(MSG_APPLY_GLOBAL_LUMINANCE);
+        message.arg1 = luminanceLevel;
+        mHandler.sendMessage(message);
+    }
+
     boolean setAppSaturationLevelInternal(String callingPackageName,
             String affectedPackageName, int saturationLevel) {
         return mAppSaturationController
@@ -1093,6 +1158,34 @@ public final class ColorDisplayService extends SystemService {
 
         mAppSaturationController.dump(pw);
 
+        pw.println("Global Hue:");
+        if (mGlobalHueTintController.isAvailable(getContext())) {
+            pw.println("    Activated: " + mGlobalHueTintController.isActivated());
+        } else {
+            pw.println("    Not available");
+        }
+
+        pw.println("Global Contrast:");
+        if (mGlobalContrastTintController.isAvailable(getContext())) {
+            pw.println("    Activated: " + mGlobalContrastTintController.isActivated());
+        } else {
+            pw.println("    Not available");
+        }
+
+        pw.println("Global Whitebalance:");
+        if (mGlobalWhitebalanceTintController.isAvailable(getContext())) {
+            pw.println("    Activated: " + mGlobalWhitebalanceTintController.isActivated());
+        } else {
+            pw.println("    Not available");
+        }
+
+        pw.println("Global luminance:");
+        if (mGlobalLuminanceTintController.isAvailable(getContext())) {
+            pw.println("    Activated: " + mGlobalLuminanceTintController.isActivated());
+        } else {
+            pw.println("    Not available");
+        }
+
         pw.println("Display white balance:");
         if (mDisplayWhiteBalanceTintController.isAvailable(getContext())) {
             pw.println("    Activated: " + mDisplayWhiteBalanceTintController.isActivated());
@@ -1666,6 +1759,22 @@ public final class ColorDisplayService extends SystemService {
                     mGlobalSaturationTintController.setMatrix(msg.arg1);
                     applyTint(mGlobalSaturationTintController, false);
                     break;
+                case MSG_APPLY_GLOBAL_HUE:
+                    mGlobalHueTintController.setMatrix(msg.arg1);
+                    applyTint(mGlobalHueTintController, false);
+                    break;
+                case MSG_APPLY_GLOBAL_CONTRAST:
+                    mGlobalContrastTintController.setMatrix(msg.arg1);
+                    applyTint(mGlobalContrastTintController, false);
+                    break;
+                case MSG_APPLY_GLOBAL_WHITEBALANCE:
+                    mGlobalWhitebalanceTintController.setMatrix(msg.arg1);
+                    applyTint(mGlobalWhitebalanceTintController, false);
+                    break;
+                case MSG_APPLY_GLOBAL_LUMINANCE:
+                    mGlobalLuminanceTintController.setMatrix(msg.arg1);
+                    applyTint(mGlobalLuminanceTintController, false);
+                    break;
                 case MSG_APPLY_REDUCE_BRIGHT_COLORS:
                     applyTint(mReduceBrightColorsTintController, true);
                     break;
@@ -1749,6 +1858,80 @@ public final class ColorDisplayService extends SystemService {
             return true;
         }
 
+        @Override
+        public boolean setHueLevel(int level) {
+            final boolean hasTransformsPermission = getContext()
+                    .checkCallingPermission(Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+                    == PackageManager.PERMISSION_GRANTED;
+            Slog.d(TAG, "setHueLevel: " + level);
+            if (!hasTransformsPermission ) {
+                throw new SecurityException("Permission required to set display saturation level");
+            }
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setHueLevelInternal(level);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
+            return true;
+        }
+
+
+        @Override
+        public boolean setContrastLevel(int level) {
+            final boolean hasTransformsPermission = getContext()
+                    .checkCallingPermission(Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+                    == PackageManager.PERMISSION_GRANTED;
+            Slog.d(TAG, "setContrastLevel: " + level);
+            if (!hasTransformsPermission ) {
+                throw new SecurityException("Permission required to set display saturation level");
+            }
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setContrastLevelInternal(level);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
+            return true;
+        }
+
+
+        @Override
+        public boolean setWhitebalanceLevel(int level) {
+            final boolean hasTransformsPermission = getContext()
+                    .checkCallingPermission(Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+                    == PackageManager.PERMISSION_GRANTED;
+            Slog.d(TAG, "setWhitebalanceLevel: " + level);
+            if (!hasTransformsPermission ) {
+                throw new SecurityException("Permission required to set display saturation level");
+            }
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setWhitebalanceLevelInternal(level);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
+            return true;
+        }
+
+        @Override
+        public boolean setLuminanceLevel(int level) {
+            final boolean hasTransformsPermission = getContext()
+                    .checkCallingPermission(Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+                    == PackageManager.PERMISSION_GRANTED;
+            Slog.d(TAG, "setLuminanceLevel: " + level);
+            if (!hasTransformsPermission ) {
+                throw new SecurityException("Permission required to set display saturation level");
+            }
+            final long token = Binder.clearCallingIdentity();
+            try {
+                setLuminanceLevelInternal(level);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
+            return true;
+        }
+
         @android.annotation.EnforcePermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
         @Override
         public boolean isSaturationActivated() {
diff --git a/services/core/java/com/android/server/display/color/DisplayTransformManager.java b/services/core/java/com/android/server/display/color/DisplayTransformManager.java
index 0dba9e1b0af1..181ac90a0d38 100644
--- a/services/core/java/com/android/server/display/color/DisplayTransformManager.java
+++ b/services/core/java/com/android/server/display/color/DisplayTransformManager.java
@@ -54,6 +54,22 @@ public class DisplayTransformManager {
      * Color transform level used to adjust the color saturation of the display.
      */
     public static final int LEVEL_COLOR_MATRIX_SATURATION = 150;
+    /**
+     * Color transform level used to adjust the color hue of the display.
+     */
+    public static final int LEVEL_COLOR_MATRIX_HUE = 100;
+    /**
+     * Color transform level used to adjust the color contrast of the display.
+     */
+    public static final int LEVEL_COLOR_MATRIX_CONTRAST = 100;
+    /**
+     * Color transform level used to adjust the color white balance of the display.
+     */
+    public static final int LEVEL_COLOR_MATRIX_WHITEBALANCE = 100;
+    /**
+     * Color transform level used to adjust the color luminance of the display.
+     */
+    public static final int LEVEL_COLOR_MATRIX_LUMINANCE = 150;
     /**
      * Color transform level used by A11y services to make the display monochromatic.
      */
diff --git a/services/core/java/com/android/server/display/color/GlobalContrastTintController.java b/services/core/java/com/android/server/display/color/GlobalContrastTintController.java
new file mode 100644
index 000000000000..b2f97c0463e3
--- /dev/null
+++ b/services/core/java/com/android/server/display/color/GlobalContrastTintController.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.display.color;
+
+import static com.android.server.display.color.DisplayTransformManager.LEVEL_COLOR_MATRIX_CONTRAST;
+
+import android.content.Context;
+import android.hardware.display.ColorDisplayManager;
+import android.opengl.Matrix;
+import android.util.Slog;
+
+import java.util.Arrays;
+
+/** Control the color transform for global device contrast. */
+final class GlobalContrastTintController extends TintController {
+
+    private final float[] mMatrixGlobalContrast = new float[16];
+
+    @Override
+    public void setUp(Context context, boolean needsLinear) {
+    }
+
+    @Override
+    public float[] getMatrix() {
+        return Arrays.copyOf(mMatrixGlobalContrast, mMatrixGlobalContrast.length);
+    }
+
+    @Override
+    public void setMatrix(int contrastLevel) {
+        if (contrastLevel < 0) {
+            contrastLevel = 0;
+        } else if (contrastLevel > 100) {
+            contrastLevel = 100;
+        }
+        Slog.d(ColorDisplayService.TAG, "Setting contrast level: " + contrastLevel);
+
+        if (contrastLevel == 100) {
+            setActivated(false);
+            Matrix.setIdentityM(mMatrixGlobalContrast, 0);
+        } else {
+            setActivated(true);
+            float contrast = contrastLevel * 0.01f;
+            float decontrast = 1.0f - contrast;
+            float[] luminance = {0.231f * decontrast, 0.715f * decontrast,
+                    0.072f * decontrast};
+            mMatrixGlobalContrast[0] = luminance[0] + contrast;
+            mMatrixGlobalContrast[1] = luminance[0];
+            mMatrixGlobalContrast[2] = luminance[0];
+            mMatrixGlobalContrast[4] = luminance[1];
+            mMatrixGlobalContrast[5] = luminance[1] + contrast;
+            mMatrixGlobalContrast[6] = luminance[1];
+            mMatrixGlobalContrast[8] = luminance[2];
+            mMatrixGlobalContrast[9] = luminance[2];
+            mMatrixGlobalContrast[10] = luminance[2] + contrast;
+        }
+    }
+
+    @Override
+    public int getLevel() {
+        return LEVEL_COLOR_MATRIX_CONTRAST;
+    }
+
+    @Override
+    public boolean isAvailable(Context context) {
+        return ColorDisplayManager.isColorTransformAccelerated(context);
+    }
+}
diff --git a/services/core/java/com/android/server/display/color/GlobalHueTintController.java b/services/core/java/com/android/server/display/color/GlobalHueTintController.java
new file mode 100644
index 000000000000..86dd5cbcc94b
--- /dev/null
+++ b/services/core/java/com/android/server/display/color/GlobalHueTintController.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.display.color;
+
+import static com.android.server.display.color.DisplayTransformManager.LEVEL_COLOR_MATRIX_HUE;
+
+import android.content.Context;
+import android.hardware.display.ColorDisplayManager;
+import android.opengl.Matrix;
+import android.util.Slog;
+
+import java.util.Arrays;
+
+/** Control the color transform for global device Hue. */
+final class GlobalHueTintController extends TintController {
+
+    private final float[] mMatrixGlobalHue = new float[16];
+
+    @Override
+    public void setUp(Context context, boolean needsLinear) {
+    }
+
+    @Override
+    public float[] getMatrix() {
+        return Arrays.copyOf(mMatrixGlobalHue, mMatrixGlobalHue.length);
+    }
+
+    @Override
+    public void setMatrix(int hueLevel) {
+        if (hueLevel < 0) {
+            hueLevel = 0;
+        } else if (hueLevel > 100) {
+            hueLevel = 100;
+        }
+        Slog.d(ColorDisplayService.TAG, "Setting Hue level: " + hueLevel);
+
+        if (hueLevel == 100) {
+            setActivated(false);
+            Matrix.setIdentityM(mMatrixGlobalHue, 0);
+        } else {
+            setActivated(true);
+            float Hue = hueLevel * 0.01f;
+            float deHue = 1.0f - Hue;
+            float[] luminance = {0.231f * deHue, 0.715f * deHue,
+                    0.072f * deHue};
+            mMatrixGlobalHue[0] = luminance[0] + Hue;
+            mMatrixGlobalHue[1] = luminance[0];
+            mMatrixGlobalHue[2] = luminance[0];
+            mMatrixGlobalHue[4] = luminance[1];
+            mMatrixGlobalHue[5] = luminance[1] + Hue;
+            mMatrixGlobalHue[6] = luminance[1];
+            mMatrixGlobalHue[8] = luminance[2];
+            mMatrixGlobalHue[9] = luminance[2];
+            mMatrixGlobalHue[10] = luminance[2] + Hue;
+        }
+    }
+
+    @Override
+    public int getLevel() {
+        return LEVEL_COLOR_MATRIX_HUE;
+    }
+
+    @Override
+    public boolean isAvailable(Context context) {
+        return ColorDisplayManager.isColorTransformAccelerated(context);
+    }
+}
diff --git a/services/core/java/com/android/server/display/color/GlobalLuminanceTintController.java b/services/core/java/com/android/server/display/color/GlobalLuminanceTintController.java
new file mode 100644
index 000000000000..fb92345af02a
--- /dev/null
+++ b/services/core/java/com/android/server/display/color/GlobalLuminanceTintController.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.display.color;
+
+import static com.android.server.display.color.DisplayTransformManager.LEVEL_COLOR_MATRIX_LUMINANCE;
+
+import android.content.Context;
+import android.hardware.display.ColorDisplayManager;
+import android.opengl.Matrix;
+import android.util.Slog;
+
+import java.util.Arrays;
+
+/** Control the color transform for global device luminance. */
+final class GlobalLuminanceTintController extends TintController {
+
+    private final float[] mMatrixGlobalLuminance = new float[16];
+
+    @Override
+    public void setUp(Context context, boolean needsLinear) {
+    }
+
+    @Override
+    public float[] getMatrix() {
+        return Arrays.copyOf(mMatrixGlobalLuminance, mMatrixGlobalLuminance.length);
+    }
+
+    @Override
+    public void setMatrix(int luminanceLevel) {
+        if (luminanceLevel < 0) {
+            luminanceLevel = 0;
+        } else if (luminanceLevel > 100) {
+            luminanceLevel = 100;
+        }
+        Slog.d(ColorDisplayService.TAG, "Setting luminance level: " + luminanceLevel);
+
+        if (luminanceLevel == 100) {
+            setActivated(false);
+            Matrix.setIdentityM(mMatrixGlobalLuminance, 0);
+        } else {
+            setActivated(true);
+            float luminance = luminanceLevel * 0.01f;
+            float deluminance = 1.0f - luminance;
+            float[] luminance_arr = {0.231f * deluminance, 0.715f * deluminance,
+                    0.072f * deluminance};
+            mMatrixGlobalLuminance[0] = luminance_arr[0] + luminance;
+            mMatrixGlobalLuminance[1] = luminance_arr[0];
+            mMatrixGlobalLuminance[2] = luminance_arr[0];
+            mMatrixGlobalLuminance[4] = luminance_arr[1];
+            mMatrixGlobalLuminance[5] = luminance_arr[1] + luminance;
+            mMatrixGlobalLuminance[6] = luminance_arr[1];
+            mMatrixGlobalLuminance[8] = luminance_arr[2];
+            mMatrixGlobalLuminance[9] = luminance_arr[2];
+            mMatrixGlobalLuminance[10] = luminance_arr[2] + luminance;
+        }
+    }
+
+    @Override
+    public int getLevel() {
+        return LEVEL_COLOR_MATRIX_LUMINANCE;
+    }
+
+    @Override
+    public boolean isAvailable(Context context) {
+        return ColorDisplayManager.isColorTransformAccelerated(context);
+    }
+}
diff --git a/services/core/java/com/android/server/display/color/GlobalWhitebalanceTintController.java b/services/core/java/com/android/server/display/color/GlobalWhitebalanceTintController.java
new file mode 100644
index 000000000000..1b04076499f9
--- /dev/null
+++ b/services/core/java/com/android/server/display/color/GlobalWhitebalanceTintController.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.display.color;
+
+import static com.android.server.display.color.DisplayTransformManager.LEVEL_COLOR_MATRIX_WHITEBALANCE;
+
+import android.content.Context;
+import android.hardware.display.ColorDisplayManager;
+import android.opengl.Matrix;
+import android.util.Slog;
+
+import java.util.Arrays;
+
+/** Control the color transform for global device whitebalance. */
+final class GlobalWhitebalanceTintController extends TintController {
+
+    private final float[] mMatrixGlobalWhitebalance = new float[16];
+
+    @Override
+    public void setUp(Context context, boolean needsLinear) {
+    }
+
+    @Override
+    public float[] getMatrix() {
+        return Arrays.copyOf(mMatrixGlobalWhitebalance, mMatrixGlobalWhitebalance.length);
+    }
+
+    @Override
+    public void setMatrix(int whitebalanceLevel) {
+        if (whitebalanceLevel < 0) {
+            whitebalanceLevel = 0;
+        } else if (whitebalanceLevel > 100) {
+            whitebalanceLevel = 100;
+        }
+        Slog.d(ColorDisplayService.TAG, "Setting whitebalance level: " + whitebalanceLevel);
+
+        if (whitebalanceLevel == 100) {
+            setActivated(false);
+            Matrix.setIdentityM(mMatrixGlobalWhitebalance, 0);
+        } else {
+            setActivated(true);
+            float whitebalance = whitebalanceLevel * 0.01f;
+            float dewhitebalance = 1.0f - whitebalance;
+            float[] luminance = {0.231f * dewhitebalance, 0.715f * dewhitebalance,
+                    0.072f * dewhitebalance};
+            mMatrixGlobalWhitebalance[0] = luminance[0] + whitebalance;
+            mMatrixGlobalWhitebalance[1] = luminance[0];
+            mMatrixGlobalWhitebalance[2] = luminance[0];
+            mMatrixGlobalWhitebalance[4] = luminance[1];
+            mMatrixGlobalWhitebalance[5] = luminance[1] + whitebalance;
+            mMatrixGlobalWhitebalance[6] = luminance[1];
+            mMatrixGlobalWhitebalance[8] = luminance[2];
+            mMatrixGlobalWhitebalance[9] = luminance[2];
+            mMatrixGlobalWhitebalance[10] = luminance[2] + whitebalance;
+        }
+    }
+
+    @Override
+    public int getLevel() {
+        return LEVEL_COLOR_MATRIX_WHITEBALANCE;
+    }
+
+    @Override
+    public boolean isAvailable(Context context) {
+        return ColorDisplayManager.isColorTransformAccelerated(context);
+    }
+}
-- 
2.34.1

