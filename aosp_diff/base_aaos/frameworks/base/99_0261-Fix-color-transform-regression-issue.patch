From 6bee5c2d869b9972d40c640368dcde5be4102f95 Mon Sep 17 00:00:00 2001
From: zhonghuis <zhonghui.shi@intel.com>
Date: Tue, 23 Apr 2024 15:37:37 +0000
Subject: [PATCH] Fix color transform regression issue

Update color transform reboot setting to fix
previous performance regression issue

Tracked-On: OAM-117740
Signed-off-by: zhonghuis <zhonghui.shi@intel.com>
---
 .../display/color/ColorDisplayService.java    | 29 +++++++++++++++----
 1 file changed, 24 insertions(+), 5 deletions(-)

diff --git a/services/core/java/com/android/server/display/color/ColorDisplayService.java b/services/core/java/com/android/server/display/color/ColorDisplayService.java
index 138ab3bdfc87..0d5fc432a8b2 100644
--- a/services/core/java/com/android/server/display/color/ColorDisplayService.java
+++ b/services/core/java/com/android/server/display/color/ColorDisplayService.java
@@ -496,7 +496,10 @@ public final class ColorDisplayService extends SystemService {
         contrastValue = (contrastValue >= 0 && contrastValue <= 255) ? contrastValue : DEFAULT_CONTRAST_LEVEL;
         final long token = Binder.clearCallingIdentity();
         try {
-            setContrastLevelInternal(contrastValue);
+            updateColorTransformProperty(PROP_KEY_CONTRAST, contrastValue);
+            final Message message = mHandler.obtainMessage(MSG_APPLY_GLOBAL_CONTRAST);
+            message.arg1 = contrastValue;
+            mHandler.sendMessage(message);
         } finally {
             Binder.restoreCallingIdentity(token);
         }
@@ -507,7 +510,10 @@ public final class ColorDisplayService extends SystemService {
         hueValue = (hueValue >= 0 && hueValue <= 360) ? hueValue : DEFAULT_HUE_LEVEL;
         final long token = Binder.clearCallingIdentity();
         try {
-            setHueLevelInternal(hueValue);
+            updateColorTransformProperty(PROP_KEY_HUE, hueValue);
+            final Message message = mHandler.obtainMessage(MSG_APPLY_GLOBAL_HUE);
+            message.arg1 = hueValue;
+            mHandler.sendMessage(message);
         } finally {
             Binder.restoreCallingIdentity(token);
         }
@@ -518,7 +524,10 @@ public final class ColorDisplayService extends SystemService {
         saturationValue = (saturationValue >= 0 && saturationValue <= 100) ? saturationValue : DEFAULT_SATURATION_LEVEL;
         final long token = Binder.clearCallingIdentity();
         try {
-            setSaturationLevelInternal(saturationValue);
+            updateColorTransformProperty(PROP_KEY_SATURATION, saturationValue);
+            final Message message = mHandler.obtainMessage(MSG_APPLY_GLOBAL_SATURATION);
+            message.arg1 = saturationValue;
+            mHandler.sendMessage(message);
         } finally {
             Binder.restoreCallingIdentity(token);
         }
@@ -529,7 +538,14 @@ public final class ColorDisplayService extends SystemService {
         whitebalanceValue = (whitebalanceValue >= 0 && whitebalanceValue <= 200) ? whitebalanceValue : DEFAULT_WHITEBALANCE_LEVEL;
         final long token = Binder.clearCallingIdentity();
         try {
-            setWhitebalanceLevelInternal(whitebalanceValue);
+            updateColorTransformProperty(PROP_KEY_WHITEBALANCE, whitebalanceValue);
+            if (mDisplayWhiteBalanceTintController.isAvailable(getContext())) {
+                // Prepare the display white balance transform matrix.
+                mDisplayWhiteBalanceTintController.setUp(getContext(), true /* needsLinear */);
+                mDisplayWhiteBalanceTintController.setActivated(true);
+                mDisplayWhiteBalanceTintController.setMatrix(whitebalanceValue * WHITE_BALANCE_SCALE + MIN_COLOR_TEMPERATURE);
+                mHandler.sendEmptyMessage(MSG_APPLY_DISPLAY_WHITE_BALANCE);
+            }
         } finally {
             Binder.restoreCallingIdentity(token);
         }
@@ -540,7 +556,10 @@ public final class ColorDisplayService extends SystemService {
         luminanceValue = (luminanceValue >= 0 && luminanceValue <= 255) ? luminanceValue : DEFAULT_LUMINANCE_LEVEL;
         final long token = Binder.clearCallingIdentity();
         try {
-            setLuminanceLevelInternal(luminanceValue);
+            updateColorTransformProperty(PROP_KEY_LUMINANCE, luminanceValue);
+            final Message message = mHandler.obtainMessage(MSG_APPLY_GLOBAL_LUMINANCE);
+            message.arg1 = luminanceValue;
+            mHandler.sendMessage(message);
         } finally {
             Binder.restoreCallingIdentity(token);
         }
-- 
2.34.1

