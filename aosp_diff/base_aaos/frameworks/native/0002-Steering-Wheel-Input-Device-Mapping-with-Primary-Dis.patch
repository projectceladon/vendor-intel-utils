From e2a12c9c7b065215ea5c2bbdcb5f756ff942976b Mon Sep 17 00:00:00 2001
From: Ankit Agrawal <ankit.agarwal@intel.com>
Date: Mon, 24 Apr 2023 15:26:30 +0530
Subject: [PATCH] Steering Wheel Input Device Mapping with Primary Display.

Steering wheel input device has input source of type JOYSTICK and KEY
This enables routing of all physical input key event
from above sources to primary display.

Tracked-On: OAM-108946
Signed-off-by: Ankit Agrawal <ankit.agarwal@intel.com>
---
 .../dispatcher/InputDispatcher.cpp            | 26 ++++++++++++++++---
 1 file changed, 22 insertions(+), 4 deletions(-)

diff --git a/services/inputflinger/dispatcher/InputDispatcher.cpp b/services/inputflinger/dispatcher/InputDispatcher.cpp
index 464236dfb3..f275fcdfa8 100644
--- a/services/inputflinger/dispatcher/InputDispatcher.cpp
+++ b/services/inputflinger/dispatcher/InputDispatcher.cpp
@@ -47,6 +47,10 @@ static constexpr bool DEBUG_TOUCH_OCCLUSION = true;
 // Log debug messages about hover events.
 #define DEBUG_HOVER 0
 
+// Input Source JOYSTICK & BUTTON Value
+#define SOURCE_CLASS_JOYSTICK 0x00000010
+#define SOURCE_CLASS_BUTTON 0x00000001
+
 #include <InputFlingerProperties.sysprop.h>
 #include <android-base/chrono_utils.h>
 #include <android-base/properties.h>
@@ -3795,6 +3799,13 @@ void InputDispatcher::notifyKey(const NotifyKeyArgs* args) {
         return;
     }
 
+    int32_t display_id = args->displayId;
+
+    // Send all Key Input Source Events to Default Display.
+    if (display_id == ADISPLAY_ID_NONE && ((args->source & SOURCE_CLASS_BUTTON) == SOURCE_CLASS_BUTTON)) {
+        display_id = ADISPLAY_ID_DEFAULT;
+    }
+
     uint32_t policyFlags = args->policyFlags;
     int32_t flags = args->flags;
     int32_t metaState = args->metaState;
@@ -3815,7 +3826,7 @@ void InputDispatcher::notifyKey(const NotifyKeyArgs* args) {
     accelerateMetaShortcuts(args->deviceId, args->action, keyCode, metaState);
 
     KeyEvent event;
-    event.initialize(args->id, args->deviceId, args->source, args->displayId, INVALID_HMAC,
+    event.initialize(args->id, args->deviceId, args->source, display_id, INVALID_HMAC,
                      args->action, flags, keyCode, args->scanCode, metaState, repeatCount,
                      args->downTime, args->eventTime);
 
@@ -3843,7 +3854,7 @@ void InputDispatcher::notifyKey(const NotifyKeyArgs* args) {
 
         std::unique_ptr<KeyEntry> newEntry =
                 std::make_unique<KeyEntry>(args->id, args->eventTime, args->deviceId, args->source,
-                                           args->displayId, policyFlags, args->action, flags,
+                                           display_id, policyFlags, args->action, flags,
                                            keyCode, args->scanCode, metaState, repeatCount,
                                            args->downTime);
 
@@ -3893,6 +3904,13 @@ void InputDispatcher::notifyMotion(const NotifyMotionArgs* args) {
         return;
     }
 
+    int32_t display_id = args->displayId;
+
+    // Send all Joy Stick Input Source Events to Default Display.
+    if (display_id == ADISPLAY_ID_NONE && ((args->source & SOURCE_CLASS_JOYSTICK) == SOURCE_CLASS_JOYSTICK)) {
+        display_id = ADISPLAY_ID_DEFAULT;
+    }
+
     uint32_t policyFlags = args->policyFlags;
     policyFlags |= POLICY_FLAG_TRUSTED;
 
@@ -3912,7 +3930,7 @@ void InputDispatcher::notifyMotion(const NotifyMotionArgs* args) {
 
             MotionEvent event;
             ui::Transform transform;
-            event.initialize(args->id, args->deviceId, args->source, args->displayId, INVALID_HMAC,
+            event.initialize(args->id, args->deviceId, args->source, display_id, INVALID_HMAC,
                              args->action, args->actionButton, args->flags, args->edgeFlags,
                              args->metaState, args->buttonState, args->classification, transform,
                              args->xPrecision, args->yPrecision, args->xCursorPosition,
@@ -3931,7 +3949,7 @@ void InputDispatcher::notifyMotion(const NotifyMotionArgs* args) {
         // Just enqueue a new motion event.
         std::unique_ptr<MotionEntry> newEntry =
                 std::make_unique<MotionEntry>(args->id, args->eventTime, args->deviceId,
-                                              args->source, args->displayId, policyFlags,
+                                              args->source, display_id, policyFlags,
                                               args->action, args->actionButton, args->flags,
                                               args->metaState, args->buttonState,
                                               args->classification, args->edgeFlags,
-- 
2.17.1

