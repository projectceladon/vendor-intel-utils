From 16e9d564777f4d67ec94e52b2f7c09e12af228b5 Mon Sep 17 00:00:00 2001
From: Amrita Raju <amrita.raju@intel.com>
Date: Mon, 15 Jul 2019 14:31:02 +0530
Subject: [PATCH 1/2] Fix for Bluetooth not Working

Issue 1: Bluetooth is always in OFF after flashing but works
after reboot.
Issue 2:  Bluetooth is Turning OFF immediately once we do
Bluetooth device search

Fix: Add a blacklist of vendorid and productid to hide the
usb device.
Hide the dedicated BT usb device to avoid apps reading it.

Change-Id: I88bf0b886b1a7e6ac0f74e36164a1e3e512648c2
Tracked-On: https://jira.devtools.intel.com/browse/OAM-84029
Signed-off-by: Gaganpreet kaur <gaganpreetx.kaur@intel.com>
---
 .../android/server/usb/UsbHostManager.java    | 66 +++++++++++++++----
 1 file changed, 54 insertions(+), 12 deletions(-)

diff --git a/services/usb/java/com/android/server/usb/UsbHostManager.java b/services/usb/java/com/android/server/usb/UsbHostManager.java
index 00c75480ba8..08917fc52c8 100644
--- a/services/usb/java/com/android/server/usb/UsbHostManager.java
+++ b/services/usb/java/com/android/server/usb/UsbHostManager.java
@@ -228,6 +228,22 @@ public class UsbHostManager {
         }
     }
 
+    private static class VendorIdProductId {
+        public int vendorId;
+        public int productId;
+
+        public VendorIdProductId(int vendorId, int productId) {
+            vendorId = vendorId;
+            productId = productId;
+        }
+    }
+    //TODO: move the ids to the config of platform
+    private VendorIdProductId[] mVidPidBlackList = {
+        new VendorIdProductId(0x8087, 0x0a2b),
+        new VendorIdProductId(0x8087, 0x0aa7), //dedicated for BT in Celadon
+    };
+
+
     /*
      * UsbHostManager
      */
@@ -282,14 +298,22 @@ public class UsbHostManager {
     }
 
     /* returns true if the USB device should not be accessible by applications */
-    private boolean isBlackListed(int clazz, int subClass) {
+    private boolean isBlackListed(int clazz, int subClass, int vendorID, int productID) {
         // blacklist hubs
         if (clazz == UsbConstants.USB_CLASS_HUB) return true;
 
         // blacklist HID boot devices (mouse and keyboard)
-        return clazz == UsbConstants.USB_CLASS_HID
-                && subClass == UsbConstants.USB_INTERFACE_SUBCLASS_BOOT;
-
+        if (clazz == UsbConstants.USB_CLASS_HID
+                && subClass == UsbConstants.USB_INTERFACE_SUBCLASS_BOOT) {
+            return true;
+        }
+        //blacklist vendor id & product id devices
+        for (VendorIdProductId id : mVidPidBlackList) {
+            if (id.vendorId == vendorID && id.productId == productID) {
+                return true;
+            }
+        }
+        return false;
     }
 
     private void addConnectionRecord(String deviceAddress, int mode, byte[] rawDescriptors) {
@@ -351,6 +375,8 @@ public class UsbHostManager {
     @SuppressWarnings("unused")
     private boolean usbDeviceAdded(String deviceAddress, int deviceClass, int deviceSubclass,
             byte[] descriptors) {
+        int vendorId = 0;
+        int productId = 0;
         if (DEBUG) {
             Slog.d(TAG, "usbDeviceAdded(" + deviceAddress + ") - start");
         }
@@ -362,19 +388,25 @@ public class UsbHostManager {
             return false;
         }
 
-        if (isBlackListed(deviceClass, deviceSubclass)) {
-            if (DEBUG) {
-                Slog.d(TAG, "device class is black listed");
-            }
-            return false;
-        }
-
         UsbDescriptorParser parser = new UsbDescriptorParser(deviceAddress, descriptors);
         if (deviceClass == UsbConstants.USB_CLASS_PER_INTERFACE
                 && !checkUsbInterfacesBlackListed(parser)) {
             return false;
         }
 
+        UsbDeviceDescriptor deviceDescriptor = parser.getDeviceDescriptor();
+        if (deviceDescriptor != null) {
+            vendorId  = deviceDescriptor.getVendorID();
+            productId = deviceDescriptor.getProductID();
+        }
+
+        if (isBlackListed(deviceClass, deviceSubclass, vendorId, productId)) {
+            if (DEBUG) {
+                Slog.d(TAG, "device class is black listed");
+            }
+            return false;
+        }
+
         // Potentially can block as it may read data from the USB device.
         logUsbDevice(parser);
 
@@ -555,12 +587,22 @@ public class UsbHostManager {
         // Device class needs to be obtained through the device interface.  Ignore device only
         // if ALL interfaces are black-listed.
         boolean shouldIgnoreDevice = false;
+        int vendorId = 0;
+        int productId = 0;
         for (UsbDescriptor descriptor: parser.getDescriptors()) {
             if (!(descriptor instanceof UsbInterfaceDescriptor)) {
                 continue;
             }
+
+            UsbDeviceDescriptor deviceDescriptor = parser.getDeviceDescriptor();
+            if (deviceDescriptor != null) {
+                vendorId  = deviceDescriptor.getVendorID();
+                productId = deviceDescriptor.getProductID();
+            }
+
             UsbInterfaceDescriptor iface = (UsbInterfaceDescriptor) descriptor;
-            shouldIgnoreDevice = isBlackListed(iface.getUsbClass(), iface.getUsbSubclass());
+            shouldIgnoreDevice = isBlackListed(iface.getUsbClass(), iface.getUsbSubclass(),
+                                                vendorId, productId);
             if (!shouldIgnoreDevice) {
                 break;
             }
-- 
2.17.1

