From 8fc1ae6dac97118ed7f3ce492de8b9ee058cc95a Mon Sep 17 00:00:00 2001
From: Xu Bing <bing.xu@intel.com>
Date: Thu, 13 Feb 2025 13:50:49 +0800
Subject: [PATCH] Debug patch, not merge

Tracked-On: OAM-129624
Signed-off-by: Xu Bing <bing.xu@intel.com>
---
 .../CarInputMethodManagerService.java            | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/builtInServices/src_imms/com/android/server/inputmethod/CarInputMethodManagerService.java b/builtInServices/src_imms/com/android/server/inputmethod/CarInputMethodManagerService.java
index 278fed3..a63270c 100644
--- a/builtInServices/src_imms/com/android/server/inputmethod/CarInputMethodManagerService.java
+++ b/builtInServices/src_imms/com/android/server/inputmethod/CarInputMethodManagerService.java
@@ -214,7 +214,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
         implements Handler.Callback {
     // Virtual device id for test.
     private static final Integer VIRTUAL_STYLUS_ID_FOR_TEST = 999999;
-    static final boolean DEBUG = false;
+    static final boolean DEBUG = true;
     static final String TAG = "CarInputMethodManagerService";
     public static final String PROTO_ARG = "--proto";
 
@@ -3590,6 +3590,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
         int uid = Binder.getCallingUid();
         ImeTracing.getInstance().triggerManagerServiceDump(
                 "InputMethodManagerService#hideSoftInput");
+        new Exception("XB input").printStackTrace();
         synchronized (ImfLock.class) {
             if (!canInteractWithImeLocked(uid, client, "hideSoftInput", statsToken)) {
                 if (isInputShown()) {
@@ -3604,7 +3605,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
             final long ident = Binder.clearCallingIdentity();
             try {
                 Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, "IMMS.hideSoftInput");
-                if (DEBUG) Slog.v(TAG, "Client requesting input be hidden");
+                if (DEBUG) Slog.w(TAG, "Client requesting input be hidden");
                 return CarInputMethodManagerService.this.hideCurrentInputLocked(windowToken,
                         statsToken, flags, resultReceiver, reason);
             } finally {
@@ -3622,7 +3623,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
             statsToken = createStatsTokenForFocusedClient(false /* show */,
                     ImeTracker.ORIGIN_SERVER_HIDE_INPUT, reason);
         }
-
+        Slog.w(TAG, "hideCurrentInputLocked");
         if (!mVisibilityStateComputer.canHideIme(statsToken, flags)) {
             return false;
         }
@@ -3638,7 +3639,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
         IInputMethodInvoker curMethod = getCurMethodLocked();
         final boolean shouldHideSoftInput = curMethod != null
                 && (isInputShown() || (mImeWindowVis & InputMethodService.IME_ACTIVE) != 0);
-
+        Slog.v(TAG, "hideCurrentInputLocked shouldHideSoftInput : " + shouldHideSoftInput);
         mVisibilityStateComputer.requestImeVisibility(windowToken, false);
         if (shouldHideSoftInput) {
             // The IME will report its visible state again after the following message finally
@@ -3646,8 +3647,10 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
             // IMMS#mInputShown and IMMS#mImeWindowVis should be resolved spontaneously in
             // the final state.
             ImeTracker.forLogging().onProgress(statsToken, ImeTracker.PHASE_SERVER_SHOULD_HIDE);
+            Slog.v(TAG, "hideCurrentInputLocked performHideIme");
             mVisibilityApplier.performHideIme(windowToken, statsToken, resultReceiver, reason);
         } else {
+            Slog.v(TAG, "hideCurrentInputLocked onCancelled");
             ImeTracker.forLogging().onCancelled(statsToken, ImeTracker.PHASE_SERVER_SHOULD_HIDE);
         }
         mBindingController.setCurrentMethodNotVisible();
@@ -4788,6 +4791,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
     void onShowHideSoftInputRequested(boolean show, IBinder requestImeToken,
             @SoftInputShowHideReason int reason, @Nullable ImeTracker.Token statsToken) {
         final IBinder requestToken = mVisibilityStateComputer.getWindowTokenFrom(requestImeToken);
+        Slog.v(TAG, "onShowHideSoftInputRequested");
         final WindowManagerInternal.ImeTargetInfo info =
                 mWindowManagerInternal.onToggleImeRequested(
                         show, mCurFocusedWindow, requestToken, mCurTokenDisplayId);
@@ -4807,6 +4811,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
             @SoftInputShowHideReason int reason) {
         try {
             Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, "IMMS.hideMySoftInput");
+            //new Exception("XB input").printStackTrace();
             synchronized (ImfLock.class) {
                 if (!calledWithValidTokenLocked(token)) {
                     return;
@@ -6721,7 +6726,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
         final String packageName = mCurFocusedWindowEditorInfo != null
                 ? mCurFocusedWindowEditorInfo.packageName
                 : "uid(" + uid + ")";
-
+        Slog.v(TAG, "createStatsTokenForFocusedClient......");
         if (show) {
             return ImeTracker.forLogging().onRequestShow(packageName, uid, origin, reason);
         } else {
@@ -6806,6 +6811,7 @@ public final class CarInputMethodManagerService extends IInputMethodManager.Stub
             @SuppressWarnings("unchecked")
             final AndroidFuture<Void> typedFuture = future;
             try {
+               // new Exception("XB input").printStackTrace();
                 mImms.hideMySoftInput(mToken, flags, reason);
                 typedFuture.complete(null);
             } catch (Throwable e) {
-- 
2.34.1

