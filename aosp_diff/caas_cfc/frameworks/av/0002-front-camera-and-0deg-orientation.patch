From 1140446e9521323da7b9db6a52c9b88c2d5fb303 Mon Sep 17 00:00:00 2001
From: gkdeepa <g.k.deepa@intel.com>
Date: Thu, 21 Oct 2021 13:31:58 +0530
Subject: [PATCH] front camera and 0deg orientation

Tracked-On:
---
 camera/CameraUtils.cpp                        | 10 +++++--
 .../camera/libcameraservice/CameraService.cpp |  1 -
 .../libcameraservice/api1/Camera2Client.cpp   |  2 +-
 .../libcameraservice/api1/CameraClient.cpp    |  9 +++++-
 .../api1/client2/Parameters.cpp               | 28 +++++++++++++++----
 .../libcameraservice/utils/ExifUtils.cpp      |  1 +
 6 files changed, 40 insertions(+), 11 deletions(-)

diff --git a/camera/CameraUtils.cpp b/camera/CameraUtils.cpp
index f9b1b37dc9..8621979f22 100644
--- a/camera/CameraUtils.cpp
+++ b/camera/CameraUtils.cpp
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "CameraUtils"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <camera/CameraUtils.h>
 #include <media/hardware/HardwareAPI.h>
@@ -54,11 +54,15 @@ status_t CameraUtils::getRotationTransform(const CameraMetadata& staticInfo,
     int32_t& flags = *transform;
 
     bool mirror = (entryFacing.data.u8[0] == ANDROID_LENS_FACING_FRONT);
+    //Customer requirement: Make preview as front camera (mirrored)
+    mirror = !(mirror & ANDROID_LENS_FACING_FRONT);
     int orientation = entry.data.i32[0];
-    if (!mirror) {
+    orientation = 0;
+    if (!mirror) { 
         switch (orientation) {
             case 0:
                 flags = 0;
+                ALOGE("Deepa utils camer flag 0");  
                 break;
             case 90:
                 flags = NATIVE_WINDOW_TRANSFORM_ROT_90;
@@ -78,8 +82,10 @@ status_t CameraUtils::getRotationTransform(const CameraMetadata& staticInfo,
         // Front camera needs to be horizontally flipped for mirror-like behavior.
         // Note: Flips are applied before rotates; using XOR here as some of these flags are
         // composed in terms of other flip/rotation flags, and are not bitwise-ORable.
+
         switch (orientation) {
             case 0:
+                ALOGE("Deepa utils camer flag NATIVE_WINDOW_TRANSFORM_FLIP_H ");  
                 flags = NATIVE_WINDOW_TRANSFORM_FLIP_H;
                 break;
             case 90:
diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index ed64d4ccc8..68bc690baf 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -1629,7 +1629,6 @@ Status CameraService::connectHelper(const sp<CALLBACK>& cameraCb, const String8&
     String8 clientName8(clientPackageName);
 
     int originalClientPid = 0;
-
     ALOGI("CameraService::connect call (PID %d \"%s\", camera ID %s) for HAL version %s and "
             "Camera API version %d", clientPid, clientName8.string(), cameraId.string(),
             (halVersion == -1) ? "default" : std::to_string(halVersion).c_str(),
diff --git a/services/camera/libcameraservice/api1/Camera2Client.cpp b/services/camera/libcameraservice/api1/Camera2Client.cpp
index b043c0b557..706d31f6b1 100644
--- a/services/camera/libcameraservice/api1/Camera2Client.cpp
+++ b/services/camera/libcameraservice/api1/Camera2Client.cpp
@@ -16,7 +16,7 @@
 
 #define LOG_TAG "Camera2Client"
 #define ATRACE_TAG ATRACE_TAG_CAMERA
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <inttypes.h>
 #include <utils/Log.h>
diff --git a/services/camera/libcameraservice/api1/CameraClient.cpp b/services/camera/libcameraservice/api1/CameraClient.cpp
index 892996c3af..86bb0ea123 100644
--- a/services/camera/libcameraservice/api1/CameraClient.cpp
+++ b/services/camera/libcameraservice/api1/CameraClient.cpp
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "CameraClient"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include <cutils/atomic.h>
 #include <cutils/properties.h>
@@ -727,6 +727,7 @@ status_t CameraClient::sendCommand(int32_t cmd, int32_t arg1, int32_t arg2) {
 
     if (cmd == CAMERA_CMD_SET_DISPLAY_ORIENTATION) {
         // Mirror the preview if the camera is front-facing.
+        ALOGE("Deepa getOrientation");
         orientation = getOrientation(arg1, mCameraFacing == CAMERA_FACING_FRONT);
         if (orientation == -1) return BAD_VALUE;
 
@@ -1153,19 +1154,25 @@ void CameraClient::copyFrameAndPostCopiedFrame(
 }
 
 int CameraClient::getOrientation(int degrees, bool mirror) {
+   
+ALOGE("Deepa get orientation coming "); 
+   
     if (!mirror) {
+ALOGE("Deepa get orientation coming not mirror"); 
         if (degrees == 0) return 0;
         else if (degrees == 90) return HAL_TRANSFORM_ROT_90;
         else if (degrees == 180) return HAL_TRANSFORM_ROT_180;
         else if (degrees == 270) return HAL_TRANSFORM_ROT_270;
     } else {  // Do mirror (horizontal flip)
         if (degrees == 0) {           // FLIP_H and ROT_0
+ALOGE("Deepa get orientation deg 0 mirrored "); 
             return HAL_TRANSFORM_FLIP_H;
         } else if (degrees == 90) {   // FLIP_H and ROT_90
             return HAL_TRANSFORM_FLIP_H | HAL_TRANSFORM_ROT_90;
         } else if (degrees == 180) {  // FLIP_H and ROT_180
             return HAL_TRANSFORM_FLIP_V;
         } else if (degrees == 270) {  // FLIP_H and ROT_270
+ALOGE("Deepa get orientation deg 270 mirrored "); 
             return HAL_TRANSFORM_FLIP_V | HAL_TRANSFORM_ROT_90;
         }
     }
diff --git a/services/camera/libcameraservice/api1/client2/Parameters.cpp b/services/camera/libcameraservice/api1/client2/Parameters.cpp
index dbc863b3ad..eeda7fb518 100644
--- a/services/camera/libcameraservice/api1/client2/Parameters.cpp
+++ b/services/camera/libcameraservice/api1/client2/Parameters.cpp
@@ -16,7 +16,7 @@
 
 #define LOG_TAG "Camera2-Parameters"
 #define ATRACE_TAG ATRACE_TAG_CAMERA
-// #define LOG_NDEBUG 0
+ #define LOG_NDEBUG 0
 
 #include <utils/Log.h>
 #include <utils/Trace.h>
@@ -2828,20 +2828,36 @@ bool Parameters::boolFromString(const char *boolStr) {
 }
 
 int Parameters::degToTransform(int degrees, bool mirror) {
+    //Customer requirement: Make preview as front camera (mirrored)
+    mirror = !(mirror & ANDROID_LENS_FACING_FRONT);
+        ALOGE("degree is zero ? %d",degrees);
     if (!mirror) {
-        if (degrees == 0) return 0;
+        if (degrees == 0){
+        ALOGE("degrees is 0 make as front camera");
+       return 0;
+       }
         else if (degrees == 90) return HAL_TRANSFORM_ROT_90;
-        else if (degrees == 180) return HAL_TRANSFORM_ROT_180;
-        else if (degrees == 270) return HAL_TRANSFORM_ROT_270;
+        else if (degrees == 180)
+        return HAL_TRANSFORM_ROT_180;
+        else if (degrees == 270){
+        ALOGE("degree is 270  ");
+         return 0;
+        }
     } else {  // Do mirror (horizontal flip)
         if (degrees == 0) {           // FLIP_H and ROT_0
-            return HAL_TRANSFORM_FLIP_H;
+        ALOGE("degree is zero ");
+            return HAL_TRANSFORM_FLIP_H ;
         } else if (degrees == 90) {   // FLIP_H and ROT_90
             return HAL_TRANSFORM_FLIP_H | HAL_TRANSFORM_ROT_90;
         } else if (degrees == 180) {  // FLIP_H and ROT_180
             return HAL_TRANSFORM_FLIP_V;
         } else if (degrees == 270) {  // FLIP_H and ROT_270
-            return HAL_TRANSFORM_FLIP_V | HAL_TRANSFORM_ROT_90;
+            ALOGE("coming here ?"); 
+            return HAL_TRANSFORM_FLIP_V ;
+            //return HAL_TRANSFORM_FLIP_H ;
+            //return HAL_TRANSFORM_FLIP_H ;
+            //return HAL_TRANSFORM_FLIP_H | HAL_TRANSFORM_ROT_90;
+            //return HAL_TRANSFORM_FLIP_V | HAL_TRANSFORM_ROT_90;
         }
     }
     ALOGE("%s: Bad input: %d", __FUNCTION__, degrees);
diff --git a/services/camera/libcameraservice/utils/ExifUtils.cpp b/services/camera/libcameraservice/utils/ExifUtils.cpp
index 8a0303a8e0..74732d07dd 100644
--- a/services/camera/libcameraservice/utils/ExifUtils.cpp
+++ b/services/camera/libcameraservice/utils/ExifUtils.cpp
@@ -636,6 +636,7 @@ bool ExifUtilsImpl::setExposureBias(int32_t ev,
 
 bool ExifUtilsImpl::setOrientation(uint16_t degrees) {
     ExifOrientation value = ExifOrientation::ORIENTATION_0_DEGREES;
+    
     switch (degrees) {
         case 90:
             value = ExifOrientation::ORIENTATION_90_DEGREES;
-- 
2.17.1

