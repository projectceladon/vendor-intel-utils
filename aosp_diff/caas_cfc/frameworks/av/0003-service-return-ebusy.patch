From 922b1d3457c1656deffa6f8f75e0d65eab3d61b1 Mon Sep 17 00:00:00 2001
From: shivasku82 <shiva.kumara.rudrappa@intel.com>
Date: Tue, 8 Mar 2022 10:00:00 +0530
Subject: [PATCH] switching between camera application

Problem : when user open second camera application,first camera application preview
got paused and second camera preview works, but when user close second application
first application preview is not getting paused.

Solution - similar behaviour seen in other android devices,hence changed the flow to
not to allow second application gets camera when first application in use.

Signed-off-by: shivasku82 <shiva.kumara.rudrappa@intel.com>
---
 services/camera/libcameraservice/CameraService.cpp | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index ed64d4ccc8..a67c6774ef 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -1279,6 +1279,7 @@ status_t CameraService::handleEvictionsLocked(const String8& cameraId, int clien
     ATRACE_CALL();
     status_t ret = NO_ERROR;
     std::vector<DescriptorPtr> evictedClients;
+
     DescriptorPtr clientDescriptor;
     {
         if (effectiveApiLevel == API_1) {
@@ -1292,6 +1293,7 @@ status_t CameraService::handleEvictionsLocked(const String8& cameraId, int clien
                     if (!clientSp->canCastToApiClient(effectiveApiLevel)) {
                         ALOGW("CameraService connect called from same client, but with a different"
                                 " API level, evicting prior client...");
+			return -EUSERS;
                     } else if (clientSp->getRemote() == remoteCallback) {
                         ALOGI("CameraService::connect X (PID %d) (second call from same"
                                 " app binder, returning the same client)", clientPid);
@@ -1301,7 +1303,6 @@ status_t CameraService::handleEvictionsLocked(const String8& cameraId, int clien
                 }
             }
         }
-
         // Get current active client PIDs
         std::vector<int> ownerPids(mActiveClientManager.getAllOwners());
         ownerPids.push_back(clientPid);
@@ -1405,6 +1406,7 @@ status_t CameraService::handleEvictionsLocked(const String8& cameraId, int clien
 
             ALOGE("CameraService::connect evicting conflicting client for camera ID %s",
                     i->getKey().string());
+	    return -EUSERS;
             evictedClients.push_back(i);
 
             // Log the clients evicted
@@ -1418,7 +1420,7 @@ status_t CameraService::handleEvictionsLocked(const String8& cameraId, int clien
                     clientPriority.getState()));
 
             // Notify the client of disconnection
-            clientSp->notifyError(hardware::camera2::ICameraDeviceCallbacks::ERROR_CAMERA_DISCONNECTED,
+            clientSp->notifyError(hardware::camera2::ICameraDeviceCallbacks::ERROR_CAMERA_SERVICE,
                     CaptureResultExtras());
         }
     }
@@ -1432,6 +1434,7 @@ status_t CameraService::handleEvictionsLocked(const String8& cameraId, int clien
 
     // Destroy evicted clients
     for (auto& i : evictedClients) {
+	    return -EUSERS;
         // Disconnect is blocking, and should only have returned when HAL has cleaned up
         i->getValue()->disconnect(); // Clients will remove themselves from the active client list
     }
@@ -1439,7 +1442,7 @@ status_t CameraService::handleEvictionsLocked(const String8& cameraId, int clien
     CameraThreadState::restoreCallingIdentity(token);
 
     for (const auto& i : evictedClients) {
-        ALOGV("%s: Waiting for disconnect to complete for client for device %s (PID %" PRId32 ")",
+        ALOGW("%s: Waiting for disconnect to complete for client for device %s (PID %" PRId32 ")",
                 __FUNCTION__, i->getKey().string(), i->getOwnerId());
         ret = mActiveClientManager.waitUntilRemoved(i, DEFAULT_DISCONNECT_TIMEOUT_NS);
         if (ret == TIMED_OUT) {
-- 
2.17.1

