From 0d4f97067e5b157122833e631a1ee341b7b623a5 Mon Sep 17 00:00:00 2001
From: Wan Shuang <shuang.wan@intel.com>
Date: Mon, 7 Feb 2022 21:15:46 +0800
Subject: [PATCH 3/3] Fixed the toast showed in wrong display issue.

The root cause is the display ID is not saved in app context in
Android multiple display configuration. The fix is to get the
display ID by extracting from existing activity record and set it
for popup toast accordingly.

Signed-off-by: Wan Shuang <shuang.wan@intel.com>
Tracked-On: OAM-100815
---
 .../NotificationManagerService.java           | 45 ++++++++++++++++++-
 1 file changed, 43 insertions(+), 2 deletions(-)

diff --git a/services/core/java/com/android/server/notification/NotificationManagerService.java b/services/core/java/com/android/server/notification/NotificationManagerService.java
index 629a918584fe..ae1fa73ee35f 100755
--- a/services/core/java/com/android/server/notification/NotificationManagerService.java
+++ b/services/core/java/com/android/server/notification/NotificationManagerService.java
@@ -273,6 +273,10 @@ import com.android.server.statusbar.StatusBarManagerInternal;
 import com.android.server.uri.UriGrantsManagerInternal;
 import com.android.server.wm.ActivityTaskManagerInternal;
 import com.android.server.wm.WindowManagerInternal;
+import android.app.ActivityManager.RunningAppProcessInfo;
+
+import android.app.ActivityTaskManager;
+import android.app.IActivityTaskManager;
 
 import libcore.io.IoUtils;
 
@@ -723,6 +727,41 @@ public class NotificationManagerService extends SystemService {
         return false;
     }
 
+    private int getBestPlacementDisplayId(String pkg, int orig_display_id) {
+        int new_display_id = orig_display_id;
+        try {
+            List<IBinder> actlist = mAtm.getTopVisibleActivities();
+            final IActivityTaskManager atms = ActivityTaskManager.getService();
+            if (atms == null) {
+                Slog.d(TAG, "Failed to get ActivityTaskManager Service");
+                return orig_display_id;
+            }
+            Slog.d(TAG, "getTopVisibleActivities, returns: " + actlist.size());
+
+            for (int i=0; i<actlist.size(); i++) {
+                String pkgname = atms.getPackageForToken(actlist.get(i));
+                Slog.d(TAG, "pkgname: " + pkgname);
+                int atms_display_id = atms.getDisplayId(actlist.get(i));
+                Slog.d(TAG, "atms_display_id: " + atms_display_id);
+                if (pkgname.equals(pkg)) {
+                    Slog.d(TAG, "Found the Actiity for package: " + pkg);
+                    if (atms_display_id >= 0) {
+                        new_display_id = atms_display_id;
+                        Slog.d(TAG, "Got the new_display_id: " + new_display_id);
+                    }
+                    break;
+                }
+                else {
+                    Slog.d(TAG, "Got the packagename: " + pkgname + " but it's not the one we want, skip it.");
+                }
+            }
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+        return new_display_id;
+    }
+
     void readPolicyXml(InputStream stream, boolean forRestore, int userId)
             throws XmlPullParserException, NumberFormatException, IOException {
         final XmlPullParser parser = Xml.newPullParser();
@@ -2856,6 +2895,8 @@ public class NotificationManagerService extends SystemService {
                 return;
             }
 
+            int new_displayId = getBestPlacementDisplayId(pkg, displayId);
+
             final int callingUid = Binder.getCallingUid();
             final UserHandle callingUser = Binder.getCallingUserHandle();
             final boolean isSystemToast = isCallerSystemOrPhone()
@@ -2938,9 +2979,9 @@ public class NotificationManagerService extends SystemService {
                         }
 
                         Binder windowToken = new Binder();
-                        mWindowManagerInternal.addWindowToken(windowToken, TYPE_TOAST, displayId);
+                        mWindowManagerInternal.addWindowToken(windowToken, TYPE_TOAST, new_displayId);
                         record = getToastRecord(callingUid, callingPid, pkg, token, text, callback,
-                                duration, windowToken, displayId, textCallback);
+                                duration, windowToken, new_displayId, textCallback);
                         mToastQueue.add(record);
                         index = mToastQueue.size() - 1;
                         keepProcessAliveForToastIfNeededLocked(callingPid);
-- 
2.17.1

