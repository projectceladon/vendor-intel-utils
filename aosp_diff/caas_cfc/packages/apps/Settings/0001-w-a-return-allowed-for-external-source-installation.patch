From ab439b7bc2ed68b6de3064848cea39996324abbd Mon Sep 17 00:00:00 2001
From: "Ruan, Hongfu" <hongfu.ruan@intel.com>
Date: Thu, 11 Nov 2021 11:04:57 +0800
Subject: [PATCH] [w/a] return allowed for external source installation

system actually grants rights to any App, but the information returned
from this API doesn't match that. hard-code to return allowed here.

Tracked-On: OAM-99953
Signed-off-by: Ruan, Hongfu <hongfu.ruan@intel.com>
---
 .../appinfo/ExternalSourcesDetails.java             | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/com/android/settings/applications/appinfo/ExternalSourcesDetails.java b/src/com/android/settings/applications/appinfo/ExternalSourcesDetails.java
index fe1d81c17c..042623567c 100644
--- a/src/com/android/settings/applications/appinfo/ExternalSourcesDetails.java
+++ b/src/com/android/settings/applications/appinfo/ExternalSourcesDetails.java
@@ -98,9 +98,16 @@ public class ExternalSourcesDetails extends AppInfoWithHeader
         }
         final InstallAppsState appsState = new AppStateInstallAppsBridge(context, null, null)
                 .createInstallAppsStateFor(entry.info.packageName, entry.info.uid);
-        return context.getString(appsState.canInstallApps()
-                ? R.string.app_permission_summary_allowed
-                : R.string.app_permission_summary_not_allowed);
+
+        //this is a hard-coded work around for PenguinPeak platform, on which
+        //installation from external Apps is allowed by default.
+        //however, certain App(like Xindongfang) would check such rights by this
+        //API before actual installation. so we return allowed here to match system
+        //policy.
+        return context.getString(R.string.app_permission_summary_allowed);
+//      return context.getString(appsState.canInstallApps()
+//              ? R.string.app_permission_summary_allowed
+//              : R.string.app_permission_summary_not_allowed);
     }
 
     @VisibleForTesting
-- 
2.29.2

