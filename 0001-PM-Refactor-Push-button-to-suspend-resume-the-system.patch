From ab49c2b92d873c5efab41ac127d22ecfcf5f480c Mon Sep 17 00:00:00 2001
From: "Chen, Hu" <hu1.chen@intel.com>
Date: Thu, 30 May 2019 13:20:41 +0800
Subject: [PATCH] PM: Refactor: Push button to suspend/resume the system

- Let's kernel send KEY_POWER to user space during resume.
- Delete all PM related workaround in framework to make it clean.
- "sys.usb.config" is changed during suspend and resume. Delete it now
to pass compile. Will talk with USB team to rebase the patch or move it
to CarService.

Tracked-On: OAM-81137
Signed-off-by: Chen, Hu <hu1.chen@intel.com>

diff --git a/android_p/google_diff/cel_kbl/frameworks/base/0004-WA-Fix-issue-with-power-key-long-press.patch b/android_p/google_diff/cel_kbl/frameworks/base/0004-WA-Fix-issue-with-power-key-long-press.patch
deleted file mode 100644
index 8dde91e..0000000
--- a/android_p/google_diff/cel_kbl/frameworks/base/0004-WA-Fix-issue-with-power-key-long-press.patch
+++ /dev/null
@@ -1,43 +0,0 @@
-From af80299b6f4af769c8f9776c39ca1df9c26caad3 Mon Sep 17 00:00:00 2001
-From: saranya <saranya.gopal@intel.com>
-Date: Mon, 2 Apr 2018 16:57:32 +0530
-Subject: [PATCH 12/21] [WA] Fix issue with power key long press
-
-In Intel platforms like KBL, when power
-key is pressed, both press and release events
-are sent. So, this makes it impossible to detect
-long press. We do not need suspend/resume feature
-in KBL for HP nantucket project. So, just ignore
-the power key release event.
-
-Change-Id: I88045a9f6347fc459a825b371d505c48e8451499
-Tracked-On:
-Signed-off-by: saranya <saranya.gopal@intel.com>
----
- services/core/java/com/android/server/policy/PhoneWindowManager.java | 3 +--
- 1 file changed, 1 insertion(+), 2 deletions(-)
-
-diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
-index da14c36..395009a 100644
---- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
-+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
-@@ -1347,6 +1347,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
-                 }
-             }
-         }
-+        finishPowerKeyPress();
-     }
- 
-     private void interceptPowerKeyUp(KeyEvent event, boolean interactive, boolean canceled) {
-@@ -6153,8 +6154,6 @@ public class PhoneWindowManager implements WindowManagerPolicy {
-                 isWakeKey = false; // wake-up will be handled separately
-                 if (down) {
-                     interceptPowerKeyDown(event, interactive);
--                } else {
--                    interceptPowerKeyUp(event, interactive, canceled);
-                 }
-                 break;
-             }
--- 
-1.9.1
-
diff --git a/android_p/google_diff/cel_kbl/frameworks/base/0017-CELADON-GlobalActions-Handle-sleep-action.patch b/android_p/google_diff/cel_kbl/frameworks/base/0017-CELADON-GlobalActions-Handle-sleep-action.patch
deleted file mode 100644
index 4af1222..0000000
--- a/android_p/google_diff/cel_kbl/frameworks/base/0017-CELADON-GlobalActions-Handle-sleep-action.patch
+++ /dev/null
@@ -1,94 +0,0 @@
-From 04e9c4bd2ebc77e458bb2b1ff448538e224e1c2a Mon Sep 17 00:00:00 2001
-From: saranya <saranya.gopal@intel.com>
-Date: Tue, 17 Apr 2018 15:52:08 +0530
-Subject: [PATCH] [CELADON] GlobalActions: Handle 'sleep' action
-
-Some Intel platforms do not provide separate
-events for power key press and release. This
-makes it impossible to detect long press of
-power button. So, the solution is to handle
-only short press and add 'sleep' also as an
-option in GlobalActions menu. This patch
-handles 'sleep' option.
-
-Change-Id: Iaae59b324e5ba6eaed9e507fdaa8e5006535716c
-Tracked-On: OAM-56502
-Signed-off-by: saranya <saranya.gopal@intel.com>
-Signed-off-by: Madhusudhan S <madhusudhan.s@intel.com>
----
- .../globalactions/GlobalActionsDialog.java         | 35 ++++++++++++++++++++++
- 1 file changed, 35 insertions(+)
-
-diff --git a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
-index d232108..4aad11b 100644
---- a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
-+++ b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
-@@ -44,9 +44,11 @@ import android.os.Build;
- import android.os.Handler;
- import android.os.IBinder;
- import android.os.Message;
-+import android.os.PowerManager;
- import android.os.Messenger;
- import android.os.RemoteException;
- import android.os.ServiceManager;
-+import android.os.SystemClock;
- import android.os.SystemProperties;
- import android.os.UserHandle;
- import android.os.UserManager;
-@@ -126,6 +128,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
-     private static final String GLOBAL_ACTION_KEY_VOICEASSIST = "voiceassist";
-     private static final String GLOBAL_ACTION_KEY_ASSIST = "assist";
-     private static final String GLOBAL_ACTION_KEY_RESTART = "restart";
-+    private static final String GLOBAL_ACTION_KEY_SLEEP = "sleep";
-     private static final String GLOBAL_ACTION_KEY_LOGOUT = "logout";
-     private static final String GLOBAL_ACTION_KEY_SCREENSHOT = "screenshot";
- 
-@@ -357,6 +360,8 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
-                 mItems.add(getAssistAction());
-             } else if (GLOBAL_ACTION_KEY_RESTART.equals(actionKey)) {
-                 mItems.add(new RestartAction());
-+            } else if (GLOBAL_ACTION_KEY_SLEEP.equals(actionKey)) {
-+                mItems.add(new SleepAction());
-             } else if (GLOBAL_ACTION_KEY_SCREENSHOT.equals(actionKey)) {
-                 mItems.add(new ScreenshotAction());
-             } else if (GLOBAL_ACTION_KEY_LOGOUT.equals(actionKey)) {
-@@ -472,6 +477,36 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
-         }
-     }
- 
-+    private final class SleepAction extends SinglePressAction implements LongPressAction {
-+        private SleepAction() {
-+            super(R.drawable.ic_restart, R.string.global_action_sleep);
-+        }
-+
-+        @Override
-+        public boolean onLongPress() {
-+            PowerManager mPowerManager = (PowerManager)
-+                   mContext.getSystemService(Context.POWER_SERVICE);
-+            mPowerManager.goToSleep(SystemClock.uptimeMillis());
-+            return true;
-+        }
-+
-+        @Override
-+        public boolean showDuringKeyguard() {
-+            return true;
-+        }
-+
-+        @Override
-+        public boolean showBeforeProvisioning() {
-+            return true;
-+        }
-+
-+        @Override
-+        public void onPress() {
-+            PowerManager mPowerManager = (PowerManager)
-+                   mContext.getSystemService(Context.POWER_SERVICE);
-+            mPowerManager.goToSleep(SystemClock.uptimeMillis());
-+        }
-+    }
- 
-     private class ScreenshotAction extends SinglePressAction {
-         public ScreenshotAction() {
--- 
-2.7.4
-
diff --git a/android_p/google_diff/cel_kbl/frameworks/base/0018-CELADON-Enabling-suspend-on-IVI-after-clicking.patch b/android_p/google_diff/cel_kbl/frameworks/base/0018-CELADON-Enabling-suspend-on-IVI-after-clicking.patch
deleted file mode 100644
index 66ab207..0000000
--- a/android_p/google_diff/cel_kbl/frameworks/base/0018-CELADON-Enabling-suspend-on-IVI-after-clicking.patch
+++ /dev/null
@@ -1,44 +0,0 @@
-From 5db57924ee277f923beacefbe7edb924713cb4e3 Mon Sep 17 00:00:00 2001
-From: Madhusudhan S <madhusudhan.s@intel.com>
-Date: Mon, 12 Nov 2018 13:18:34 +0530
-Subject: [PATCH] [CELADON] Enabling suspend on IVI after clicking sleep from
- the power button menu.
-
-Tracked-on: OAM-56502
-
-Change-Id: Ib8e5f351815474d8e99739938ac5845227f711ff
-Signed-off-by: Madhusudhan S <madhusudhan.s@intel.com>
----
- .../core/java/com/android/server/power/PowerManagerService.java  | 9 +++++++++
- 1 file changed, 9 insertions(+)
-
-diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java
-index 697801f..44cda43 100644
---- a/services/core/java/com/android/server/power/PowerManagerService.java
-+++ b/services/core/java/com/android/server/power/PowerManagerService.java
-@@ -108,6 +108,8 @@ import java.lang.annotation.RetentionPolicy;
- import java.util.ArrayList;
- import java.util.Arrays;
- import java.util.Objects;
-+import java.io.IOException;
-+import android.os.FileUtils;
- 
- /**
-  * The power manager service is responsible for coordinating power management
-@@ -1429,6 +1431,13 @@ public final class PowerManagerService extends SystemService
-                 default:
-                     Slog.i(TAG, "Going to sleep by application request (uid " + uid +")...");
-                     reason = PowerManager.GO_TO_SLEEP_REASON_APPLICATION;
-+		    // Adding force suspend code to enable IVI to enter S3 after pressing sleep button
-+                    try {
-+                        FileUtils.stringToFile("/sys/power/state", "mem");
-+                    }
-+                    catch (IOException e) {
-+                        Slog.v(TAG, "IOException: " + e);
-+                    }
-                     break;
-             }
- 
--- 
-2.7.4
-
diff --git a/android_p/google_diff/cel_kbl/frameworks/base/0019-Changing-usb-config-during-suspend-and-resume.patch b/android_p/google_diff/cel_kbl/frameworks/base/0019-Changing-usb-config-during-suspend-and-resume.patch
deleted file mode 100644
index 7366aff..0000000
--- a/android_p/google_diff/cel_kbl/frameworks/base/0019-Changing-usb-config-during-suspend-and-resume.patch
+++ /dev/null
@@ -1,51 +0,0 @@
-From 58a84024213c9e3cc9bb51c2fffd9b95ad34b2c0 Mon Sep 17 00:00:00 2001
-From: Madhusudhan S <madhusudhan.s@intel.com>
-Date: Mon, 26 Nov 2018 13:36:32 +0530
-Subject: [PATCH] Changing usb config during suspend and resume
-
-Changing the usb config to "none" during S3 and enabling
-the usb config to "adb" to resume adb.
-
-Change-Id: Ic445c1df5fbefb55f7d9505fed3a3375931a1cbd
-Tracked-on: OAM-71949
-Signed-off-by: Madhusudhan S <madhusudhan.s@intel.com>
----
- .../core/java/com/android/server/power/PowerManagerService.java   | 8 ++++++++
- 1 file changed, 8 insertions(+)
-
-diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java
-index 44cda43..a29a2c9 100644
---- a/services/core/java/com/android/server/power/PowerManagerService.java
-+++ b/services/core/java/com/android/server/power/PowerManagerService.java
-@@ -118,6 +118,7 @@ import android.os.FileUtils;
- public final class PowerManagerService extends SystemService
-         implements Watchdog.Monitor {
-     private static final String TAG = "PowerManagerService";
-+    private static final String USB_CONFIG_PROPERTY = "sys.usb.config";
- 
-     private static final boolean DEBUG = false;
-     private static final boolean DEBUG_SPEW = DEBUG && true;
-@@ -1431,6 +1432,8 @@ public final class PowerManagerService extends SystemService
-                 default:
-                     Slog.i(TAG, "Going to sleep by application request (uid " + uid +")...");
-                     reason = PowerManager.GO_TO_SLEEP_REASON_APPLICATION;
-+		    SystemProperties.set(USB_CONFIG_PROPERTY, "none");
-+
- 		    // Adding force suspend code to enable IVI to enter S3 after pressing sleep button
-                     try {
-                         FileUtils.stringToFile("/sys/power/state", "mem");
-@@ -4289,6 +4292,11 @@ public final class PowerManagerService extends SystemService
-             final int uid = Binder.getCallingUid();
-             final long ident = Binder.clearCallingIdentity();
-             try {
-+		// Setting usbconfig to "adb" to enable ADB after wakeup from S3
-+		String currUsbConfig = new String(SystemProperties.get(USB_CONFIG_PROPERTY, "none"));
-+		if(currUsbConfig.equals("none"))
-+			SystemProperties.set(USB_CONFIG_PROPERTY, "adb");
-+
-                 wakeUpInternal(eventTime, reason, uid, opPackageName, uid);
-             } finally {
-                 Binder.restoreCallingIdentity(ident);
--- 
-2.7.4
-
diff --git a/android_p/google_diff/cel_kbl/frameworks/base/0021-CELADON-Resuming-display-after-S3.patch b/android_p/google_diff/cel_kbl/frameworks/base/0021-CELADON-Resuming-display-after-S3.patch
deleted file mode 100644
index 079ede2..0000000
--- a/android_p/google_diff/cel_kbl/frameworks/base/0021-CELADON-Resuming-display-after-S3.patch
+++ /dev/null
@@ -1,44 +0,0 @@
-From fd1b7865640fcc4d14993b3187390e250e4adf6e Mon Sep 17 00:00:00 2001
-From: Madhusudhan S <madhusudhan.s@intel.com>
-Date: Wed, 5 Dec 2018 17:27:02 +0530
-Subject: [PATCH] [CELADON] Resuming display after S3
-
-On platforms like KBL, the display was never resuming
-on single power button press. This work-around will fix
-issues where single power button press is not detected
-during wakeup.
-
-Tracked-on: OAM-72346
-
-Change-Id: I697deaa42c527e2d283cc6432616f89442aa5822
-Signed-off-by: Madhusudhan S <madhusudhan.s@intel.com>
----
- .../java/com/android/server/power/PowerManagerService.java   | 12 ++++++++++++
- 1 file changed, 12 insertions(+)
-
-diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java
-index a29a2c9..ab138e3 100644
---- a/services/core/java/com/android/server/power/PowerManagerService.java
-+++ b/services/core/java/com/android/server/power/PowerManagerService.java
-@@ -1952,6 +1952,18 @@ public final class PowerManagerService extends SystemService
-      * This function must have no other side-effects.
-      */
-     private void updateUserActivitySummaryLocked(long now, int dirty) {
-+
-+        String currUsbConfig = new String(SystemProperties.get(USB_CONFIG_PROPERTY, "none"));
-+        PowerManager mPowerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
-+
-+        if(currUsbConfig.equals("none") && (!mPowerManager.isInteractive())) {
-+                SystemProperties.set(USB_CONFIG_PROPERTY, "adb");
-+
-+                //Acquiring wakelock to resume from S3 since some devices won't capture power button events
-+                PowerManager.WakeLock mWakeLock = mPowerManager.newWakeLock(PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.FULL_WAKE_LOCK, "TurnDisplayStateOn");
-+                mWakeLock.acquire(5000);
-+        }
-+
-         // Update the status of the user activity timeout timer.
-         if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY
-                 | DIRTY_WAKEFULNESS | DIRTY_SETTINGS)) != 0) {
--- 
-2.7.4
-
diff --git a/android_p/google_diff/cel_kbl/frameworks/base/0024-GlobalActionsDialog-Fix-issue-with-shutdown-reboot.patch b/android_p/google_diff/cel_kbl/frameworks/base/0024-GlobalActionsDialog-Fix-issue-with-shutdown-reboot.patch
deleted file mode 100644
index 02d2ecd..0000000
--- a/android_p/google_diff/cel_kbl/frameworks/base/0024-GlobalActionsDialog-Fix-issue-with-shutdown-reboot.patch
+++ /dev/null
@@ -1,94 +0,0 @@
-From 312321858dcc3b045980963e4ee876bfdcb3ed50 Mon Sep 17 00:00:00 2001
-From: saranya <saranya.gopal@intel.com>
-Date: Mon, 17 Dec 2018 11:37:19 +0530
-Subject: [PATCH] GlobalActionsDialog: Fix issue with shutdown/reboot
-
-USB role should be switched back to host mode before
-shutdown.
-
-Jira: OAM-71244
-
-Change-Id: I516978bec4e4a446ea6daddeff1bd47c768d6bbe
----
- .../globalactions/GlobalActionsDialog.java         | 23 ++++++++++++++++++++++
- 1 file changed, 23 insertions(+)
-
-diff --git a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
-index 4aad11b..8dee6fa 100644
---- a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
-+++ b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
-@@ -97,6 +97,10 @@ import com.android.systemui.plugins.GlobalActions.GlobalActionsManager;
- import com.android.systemui.statusbar.phone.ScrimController;
- import com.android.systemui.volume.SystemUIInterpolators.LogAccelerateInterpolator;
- 
-+import java.io.File;
-+import java.io.FileWriter;
-+import java.io.FileOutputStream;
-+import java.io.IOException;
- import java.util.ArrayList;
- import java.util.List;
- 
-@@ -131,6 +135,9 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
-     private static final String GLOBAL_ACTION_KEY_SLEEP = "sleep";
-     private static final String GLOBAL_ACTION_KEY_LOGOUT = "logout";
-     private static final String GLOBAL_ACTION_KEY_SCREENSHOT = "screenshot";
-+    private static final String ROLE_PATH =
-+            "/sys/class/usb_role/intel_xhci_usb_sw-role-switch/role";
-+    private static final String ROLE_HOST = "host";
- 
-     private final Context mContext;
-     private final GlobalActionsManager mWindowManagerFuncs;
-@@ -228,6 +235,18 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
-         mHandler.sendEmptyMessage(MESSAGE_DISMISS);
-     }
- 
-+    public void writeSysfs(String path, String val) {
-+        FileWriter fw = null;
-+        try {
-+            fw = new FileWriter(path);
-+            fw.write(val);
-+            fw.flush();
-+            fw.close();
-+        } catch (IOException e) {
-+            Log.e(TAG, "writeSysfs failed exception:" + e);
-+        }
-+    }
-+
-     private void awakenIfNecessary() {
-         if (mDreamManager != null) {
-             try {
-@@ -423,6 +442,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
-         public boolean onLongPress() {
-             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
-             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
-+                writeSysfs(ROLE_PATH, ROLE_HOST);
-                 mWindowManagerFuncs.reboot(true);
-                 return true;
-             }
-@@ -442,6 +462,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
-         @Override
-         public void onPress() {
-             // shutdown by making sure radio and power are handled accordingly.
-+            writeSysfs(ROLE_PATH, ROLE_HOST);
-             mWindowManagerFuncs.shutdown();
-         }
-     }
-@@ -455,6 +476,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
-         public boolean onLongPress() {
-             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
-             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
-+                writeSysfs(ROLE_PATH, ROLE_HOST);
-                 mWindowManagerFuncs.reboot(true);
-                 return true;
-             }
-@@ -473,6 +495,7 @@ class GlobalActionsDialog implements DialogInterface.OnDismissListener,
- 
-         @Override
-         public void onPress() {
-+            writeSysfs(ROLE_PATH, ROLE_HOST);
-             mWindowManagerFuncs.reboot(false);
-         }
-     }
--- 
-2.7.4
-
diff --git a/android_p/google_diff/cel_kbl/kernel/project-celadon/0001-ACPI-PM-Propagate-KEY_POWER-to-user-space-when-resum.patch b/android_p/google_diff/cel_kbl/kernel/project-celadon/0001-ACPI-PM-Propagate-KEY_POWER-to-user-space-when-resum.patch
new file mode 100644
index 0000000..91fcbcb
--- /dev/null
+++ b/android_p/google_diff/cel_kbl/kernel/project-celadon/0001-ACPI-PM-Propagate-KEY_POWER-to-user-space-when-resum.patch
@@ -0,0 +1,69 @@
+From 3c1bf9f1113ca794f53cbffe8cd667f4f8df4780 Mon Sep 17 00:00:00 2001
+From: "Chen, Hu" <hu1.chen@intel.com>
+Date: Thu, 28 Mar 2019 16:55:25 +0800
+Subject: [PATCH] ACPI / PM: Propagate KEY_POWER to user space when resume
+
+I run Android on x86 PC (it's a NUC). Everytime I press the power button
+to wake the system, it suspends right away. After some debug, I find
+that Android wants to see KEY_POWER at resume. Otherwise, its
+opportunistic suspend will kick in shortly.
+
+However, other OS such as Ubuntu doesn't like KEY_POWER at resume. So
+add a knob "/sys/module/button/parameters/key_power_at_resume" for users
+to select.
+
+Signed-off-by: Chen, Hu <hu1.chen@intel.com>
+
+diff --git a/drivers/acpi/button.c b/drivers/acpi/button.c
+index a19ff3977ac4..0ece7b0e8609 100644
+--- a/drivers/acpi/button.c
++++ b/drivers/acpi/button.c
+@@ -129,6 +129,10 @@ struct acpi_button {
+ 	bool suspended;
+ };
+ 
++/* does userspace want to see KEY_POWER at resume? */
++static bool __read_mostly key_power_at_resume = true;
++module_param(key_power_at_resume, bool, 0644);
++
+ static BLOCKING_NOTIFIER_HEAD(acpi_lid_notifier);
+ static struct acpi_device *lid_device;
+ static u8 lid_init_state = ACPI_BUTTON_LID_INIT_METHOD;
+@@ -417,7 +421,7 @@ static void acpi_button_notify(struct acpi_device *device, u32 event)
+ 			int keycode;
+ 
+ 			acpi_pm_wakeup_event(&device->dev);
+-			if (button->suspended)
++			if (button->suspended && !key_power_at_resume)
+ 				break;
+ 
+ 			keycode = test_bit(KEY_SLEEP, input->keybit) ?
+diff --git a/drivers/acpi/sleep.c b/drivers/acpi/sleep.c
+index 754d59f95500..e97aeff29e14 100644
+--- a/drivers/acpi/sleep.c
++++ b/drivers/acpi/sleep.c
+@@ -462,6 +462,13 @@ static int find_powerf_dev(struct device *dev, void *data)
+ 	return !strcmp(hid, ACPI_BUTTON_HID_POWERF);
+ }
+ 
++static void pwr_btn_notify(struct device *dev)
++{
++	struct acpi_device *device = to_acpi_device(dev);
++
++	device->driver->ops.notify(device, ACPI_FIXED_HARDWARE_EVENT);
++}
++
+ /**
+  *	acpi_pm_finish - Instruct the platform to leave a sleep state.
+  *
+@@ -505,6 +512,7 @@ static void acpi_pm_finish(void)
+ 				      find_powerf_dev);
+ 	if (pwr_btn_dev) {
+ 		pm_wakeup_event(pwr_btn_dev, 0);
++		pwr_btn_notify(pwr_btn_dev);
+ 		put_device(pwr_btn_dev);
+ 	}
+ }
+-- 
+2.21.0
+
diff --git a/android_p/google_diff/cel_kbl/packages/services/Car/0001-WA-PM-acquire-release-wakelock-according-to-display-.patch b/android_p/google_diff/cel_kbl/packages/services/Car/0001-WA-PM-acquire-release-wakelock-according-to-display-.patch
new file mode 100644
index 0000000..3e1876a
--- /dev/null
+++ b/android_p/google_diff/cel_kbl/packages/services/Car/0001-WA-PM-acquire-release-wakelock-according-to-display-.patch
@@ -0,0 +1,45 @@
+From 3e476223465ef7b4df307181391281e31252c4f9 Mon Sep 17 00:00:00 2001
+From: "Chen, Hu" <hu1.chen@intel.com>
+Date: Wed, 5 Jun 2019 09:38:36 +0800
+Subject: [PATCH] [WA] PM: acquire/release wakelock according to display state
+
+It's a bit tricky to run Android.Car on NUC/PC because they don't have
+IOC. Now we rely on libsuspend not CarService to suspend the system,
+just like smartphone. However, if CarService holds any wakelock, it will
+block libsusepnd.
+
+Our WA (may become a formal solution in future) is as below:
+When the AOSP get the KEY_POWER event, it turns off the display.
+CarService is notified with the display state change and acquire/release
+its wakelocks according to display state.
+
+Know issue: CarService is not notified when the display become on
+(resume from S3).
+
+Tracked-On: OAM-81137
+Signed-off-by: Chen, Hu <hu1.chen@intel.com>
+---
+ service/src/com/android/car/CarPowerManagementService.java | 7 ++++++-
+ 1 file changed, 6 insertions(+), 1 deletion(-)
+
+diff --git a/service/src/com/android/car/CarPowerManagementService.java b/service/src/com/android/car/CarPowerManagementService.java
+index 57ccf622..e2582556 100644
+--- a/service/src/com/android/car/CarPowerManagementService.java
++++ b/service/src/com/android/car/CarPowerManagementService.java
+@@ -604,7 +604,12 @@ public class CarPowerManagementService extends ICarPower.Stub implements CarServ
+     }
+ 
+     private void doHandleMainDisplayStateChange(boolean on) {
+-        Log.w(CarLog.TAG_POWER, "Unimplemented:  doHandleMainDisplayStateChange() - on = " + on);
++        Log.i(CarLog.TAG_POWER, "doHandleMainDisplayStateChange() - on = " + on);
++        if (on) {
++            mSystemInterface.switchToFullWakeLock();
++        } else {
++            mSystemInterface.releaseAllWakeLocks();
++        }
+     }
+ 
+     public void handleMainDisplayChanged(boolean on) {
+-- 
+2.21.0
+
-- 
2.21.0

