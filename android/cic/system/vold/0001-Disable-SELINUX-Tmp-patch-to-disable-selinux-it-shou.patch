From 3b992a6b0a46c9df9c8e6717cfde517de8d52e8b Mon Sep 17 00:00:00 2001
From: Bin Yang <bin.y.yang@intel.com>
Date: Sun, 2 Jun 2019 19:24:31 +0800
Subject: [PATCH] [Disable SELINUX] Tmp patch to disable selinux, it should be
 reverted

Change-Id: Iede2ce2c0ffd7254647bf8de08b909ed44886c2e
Tracked-On:
Signed-off-by: Bin Yang <bin.y.yang@intel.com>
---
 MetadataCrypt.cpp        |  4 ++++
 Utils.cpp                | 18 ++++++++++++++++--
 cryptfs.cpp              |  4 ++++
 vold_prepare_subdirs.cpp |  4 ++++
 4 files changed, 28 insertions(+), 2 deletions(-)
 mode change 100644 => 100755 MetadataCrypt.cpp
 mode change 100644 => 100755 Utils.cpp
 mode change 100644 => 100755 cryptfs.cpp
 mode change 100644 => 100755 vold_prepare_subdirs.cpp

diff --git a/MetadataCrypt.cpp b/MetadataCrypt.cpp
old mode 100644
new mode 100755
index c14b9a2..50708c4
--- a/MetadataCrypt.cpp
+++ b/MetadataCrypt.cpp
@@ -54,16 +54,20 @@ static const std::string kDmNameUserdata = "userdata";
 static bool mount_via_fs_mgr(const char* mount_point, const char* blk_device) {
     // fs_mgr_do_mount runs fsck. Use setexeccon to run trusted
     // partitions in the fsck domain.
+#ifndef _DISALBE_SELINUX_
     if (setexeccon(secontextFsck())) {
         PLOG(ERROR) << "Failed to setexeccon";
         return false;
     }
+#endif
     auto mount_rc = fs_mgr_do_mount(fstab_default, const_cast<char*>(mount_point),
                                     const_cast<char*>(blk_device), nullptr);
+#ifndef _DISALBE_SELINUX_
     if (setexeccon(nullptr)) {
         PLOG(ERROR) << "Failed to clear setexeccon";
         return false;
     }
+#endif
     if (mount_rc != 0) {
         LOG(ERROR) << "fs_mgr_do_mount failed with rc " << mount_rc;
         return false;
diff --git a/Utils.cpp b/Utils.cpp
old mode 100644
new mode 100755
index d578d79..db5dd80
--- a/Utils.cpp
+++ b/Utils.cpp
@@ -72,12 +72,14 @@ status_t CreateDeviceNode(const std::string& path, dev_t dev) {
     const char* cpath = path.c_str();
     status_t res = 0;
 
+#ifndef _DISALBE_SELINUX_
     char* secontext = nullptr;
     if (sehandle) {
         if (!selabel_lookup(sehandle, &secontext, cpath, S_IFBLK)) {
             setfscreatecon(secontext);
         }
     }
+#endif
 
     mode_t mode = 0660 | S_IFBLK;
     if (mknod(cpath, mode, dev) < 0) {
@@ -88,10 +90,12 @@ status_t CreateDeviceNode(const std::string& path, dev_t dev) {
         }
     }
 
+#ifndef _DISALBE_SELINUX_
     if (secontext) {
         setfscreatecon(nullptr);
         freecon(secontext);
     }
+#endif
 
     return res;
 }
@@ -109,19 +113,22 @@ status_t PrepareDir(const std::string& path, mode_t mode, uid_t uid, gid_t gid)
     std::lock_guard<std::mutex> lock(kSecurityLock);
     const char* cpath = path.c_str();
 
+#ifndef _DISALBE_SELINUX_
     char* secontext = nullptr;
     if (sehandle) {
         if (!selabel_lookup(sehandle, &secontext, cpath, S_IFDIR)) {
             setfscreatecon(secontext);
         }
     }
-
+#endif
     int res = fs_prepare_dir(cpath, mode, uid, gid);
 
+#ifndef _DISALBE_SELINUX_
     if (secontext) {
         setfscreatecon(nullptr);
         freecon(secontext);
     }
+#endif
 
     if (res == 0) {
         return OK;
@@ -272,20 +279,23 @@ status_t ForkExecvp(const std::vector<std::string>& args, security_context_t con
         }
     }
 
+#ifndef _DISALBE_SELINUX_
     if (context) {
         if (setexeccon(context)) {
             LOG(ERROR) << "Failed to setexeccon";
             abort();
         }
     }
+#endif
     status_t res = android_fork_execvp(argc, argv, NULL, false, true);
+#ifndef _DISALBE_SELINUX_
     if (context) {
         if (setexeccon(nullptr)) {
             LOG(ERROR) << "Failed to setexeccon";
             abort();
         }
     }
-
+#endif
     free(argv);
     return res;
 }
@@ -309,19 +319,23 @@ status_t ForkExecvp(const std::vector<std::string>& args,
     }
     output.clear();
 
+#ifndef _DISALBE_SELINUX_
     if (context) {
         if (setexeccon(context)) {
             LOG(ERROR) << "Failed to setexeccon";
             abort();
         }
     }
+#endif
     FILE* fp = popen(cmd.c_str(), "r"); // NOLINT
+#ifndef _DISALBE_SELINUX_
     if (context) {
         if (setexeccon(nullptr)) {
             LOG(ERROR) << "Failed to setexeccon";
             abort();
         }
     }
+#endif
 
     if (!fp) {
         PLOG(ERROR) << "Failed to popen " << cmd;
diff --git a/cryptfs.cpp b/cryptfs.cpp
old mode 100644
new mode 100755
index c5024ae..251bfe0
--- a/cryptfs.cpp
+++ b/cryptfs.cpp
@@ -1609,10 +1609,12 @@ static int cryptfs_restart_internal(int restart_main)
          * fs_mgr_do_mount runs fsck. Use setexeccon to run trusted
          * partitions in the fsck domain.
          */
+#ifndef _DISALBE_SELINUX_
         if (setexeccon(secontextFsck())){
             SLOGE("Failed to setexeccon");
             return -1;
         }
+#endif
         while ((mount_rc = fs_mgr_do_mount(fstab_default, DATA_MNT_POINT,
                                            crypto_blkdev, 0))
                != 0) {
@@ -1640,10 +1642,12 @@ static int cryptfs_restart_internal(int restart_main)
                 return -1;
             }
         }
+#ifndef _DISALBE_SELINUX_
         if (setexeccon(NULL)) {
             SLOGE("Failed to setexeccon");
             return -1;
         }
+#endif
 
         /* Create necessary paths on /data */
         prep_data_fs();
diff --git a/vold_prepare_subdirs.cpp b/vold_prepare_subdirs.cpp
old mode 100644
new mode 100755
index 1b466e9..a4393e4
--- a/vold_prepare_subdirs.cpp
+++ b/vold_prepare_subdirs.cpp
@@ -56,6 +56,7 @@ static bool valid_uuid(const std::string& s) {
 
 static bool prepare_dir(struct selabel_handle* sehandle, mode_t mode, uid_t uid, gid_t gid,
                         const std::string& path) {
+#ifndef _DISALBE_SELINUX_
     auto clearfscreatecon = android::base::make_scope_guard([] { setfscreatecon(nullptr); });
     auto secontext = std::unique_ptr<char, void (*)(char*)>(nullptr, freecon);
     char* tmp_secontext;
@@ -70,9 +71,11 @@ static bool prepare_dir(struct selabel_handle* sehandle, mode_t mode, uid_t uid,
             return false;
         }
     }
+#endif
     if (fs_prepare_dir(path.c_str(), mode, uid, gid) != 0) {
         return false;
     }
+#ifndef _DISALBE_SELINUX_
     if (secontext) {
         char* tmp_oldsecontext = nullptr;
         if (lgetfilecon(path.c_str(), &tmp_oldsecontext) < 0) {
@@ -89,6 +92,7 @@ static bool prepare_dir(struct selabel_handle* sehandle, mode_t mode, uid_t uid,
             }
         }
     }
+#endif
     return true;
 }
 
-- 
2.21.0

