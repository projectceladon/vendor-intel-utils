From c0780226a466fae2075dca6521abf57ec7c3e5ef Mon Sep 17 00:00:00 2001
From: "Chen, Yu" <yu.y.chen@intel.com>
Date: Fri, 19 Jul 2019 11:15:26 +0800
Subject: [PATCH] Tmp patch to disable selinux.

Change-Id: I42171b4a86c3ba70c7b5e1ed65cc44c9e4c78791
Tracked-On:
Signed-off-by: Yang, Bin Y <bin.y.yang@intel.com>
---
 ServiceManager.cpp | 17 ++++++++++++++++-
 ServiceManager.h   |  2 ++
 2 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/ServiceManager.cpp b/ServiceManager.cpp
index 01ccd88..872dd49 100644
--- a/ServiceManager.cpp
+++ b/ServiceManager.cpp
@@ -198,9 +198,11 @@ Return<sp<IBase>> ServiceManager::get(const hidl_string& hidlFqName,
     const std::string fqName = hidlFqName;
     const std::string name = hidlName;
 
+#ifndef _DISALBE_SELINUX_
     if (!mAcl.canGet(fqName, getBinderCallingContext())) {
         return nullptr;
     }
+#endif
 
     auto ifaceIt = mServiceMap.find(fqName);
     if (ifaceIt == mServiceMap.end()) {
@@ -239,6 +241,7 @@ Return<bool> ServiceManager::add(const hidl_string& name, const sp<IBase>& servi
             return;
         }
 
+#ifndef _DISALBE_SELINUX_
         // First, verify you're allowed to add() the whole interface hierarchy
         for(size_t i = 0; i < interfaceChain.size(); i++) {
             const std::string fqName = interfaceChain[i];
@@ -247,7 +250,7 @@ Return<bool> ServiceManager::add(const hidl_string& name, const sp<IBase>& servi
                 return;
             }
         }
-
+#endif
         {
             // For IBar extends IFoo if IFoo/default is being registered, remove
             // IBar/default. This makes sure the following two things are equivalent
@@ -304,9 +307,11 @@ Return<ServiceManager::Transport> ServiceManager::getTransport(const hidl_string
                                                                const hidl_string& name) {
     using ::android::hardware::getTransport;
 
+#ifndef _DISALBE_SELINUX_
     if (!mAcl.canGet(fqName, getBinderCallingContext())) {
         return Transport::EMPTY;
     }
+#endif
 
     switch (getTransport(fqName, name)) {
         case vintf::Transport::HWBINDER:
@@ -320,10 +325,12 @@ Return<ServiceManager::Transport> ServiceManager::getTransport(const hidl_string
 }
 
 Return<void> ServiceManager::list(list_cb _hidl_cb) {
+#ifndef _DISALBE_SELINUX_
     if (!mAcl.canList(getBinderCallingContext())) {
         _hidl_cb({});
         return Void();
     }
+#endif
 
     hidl_vec<hidl_string> list;
 
@@ -340,10 +347,12 @@ Return<void> ServiceManager::list(list_cb _hidl_cb) {
 
 Return<void> ServiceManager::listByInterface(const hidl_string& fqName,
                                              listByInterface_cb _hidl_cb) {
+#ifndef _DISALBE_SELINUX_
     if (!mAcl.canGet(fqName, getBinderCallingContext())) {
         _hidl_cb({});
         return Void();
     }
+#endif
 
     auto ifaceIt = mServiceMap.find(fqName);
     if (ifaceIt == mServiceMap.end()) {
@@ -383,9 +392,11 @@ Return<bool> ServiceManager::registerForNotifications(const hidl_string& fqName,
         return false;
     }
 
+#ifndef _DISALBE_SELINUX_
     if (!mAcl.canGet(fqName, getBinderCallingContext())) {
         return false;
     }
+#endif
 
     PackageInterfaceMap &ifaceMap = mServiceMap[fqName];
 
@@ -455,10 +466,12 @@ Return<bool> ServiceManager::unregisterForNotifications(const hidl_string& fqNam
 }
 
 Return<void> ServiceManager::debugDump(debugDump_cb _cb) {
+#ifndef _DISALBE_SELINUX_
     if (!mAcl.canList(getBinderCallingContext())) {
         _cb({});
         return Void();
     }
+#endif
 
     std::vector<IServiceManager::InstanceDebugInfo> list;
     forEachServiceEntry([&] (const HidlService *service) {
@@ -488,6 +501,7 @@ Return<void> ServiceManager::registerPassthroughClient(const hidl_string &fqName
         const hidl_string &name) {
     auto callingContext = getBinderCallingContext();
 
+#ifndef _DISALBE_SELINUX_
     if (!mAcl.canGet(fqName, callingContext)) {
         /* We guard this function with "get", because it's typically used in
          * the getService() path, albeit for a passthrough service in this
@@ -495,6 +509,7 @@ Return<void> ServiceManager::registerPassthroughClient(const hidl_string &fqName
          */
         return Void();
     }
+#endif
 
     PackageInterfaceMap &ifaceMap = mServiceMap[fqName];
 
diff --git a/ServiceManager.h b/ServiceManager.h
index 54ecb37..b92c038 100644
--- a/ServiceManager.h
+++ b/ServiceManager.h
@@ -99,7 +99,9 @@ private:
         std::vector<sp<IServiceNotification>> mPackageListeners{};
     };
 
+#ifndef _DISALBE_SELINUX_
     AccessControl mAcl;
+#endif
 
     /**
      * Access to this map doesn't need to be locked, since hwservicemanager
-- 
2.21.0

