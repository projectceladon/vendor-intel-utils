From da45661fc1c94e7f8a818154d86890430193753f Mon Sep 17 00:00:00 2001
From: sgnanase <sundar.gnanasekaran@intel.com>
Date: Thu, 13 May 2021 15:44:50 +0530
Subject: [PATCH 2/2] CIC TGL NPI Patches

Resolve compilation issues

Change-Id: Id7360d0da3b87493193d480fc0c78c65dc1fc102
Tracked-On: OAM-97081
Signed-off-by: sgnanase <sundar.gnanasekaran@intel.com>
---
 ecss_signtools/Android.mk                     | 129 ---
 ecss_signtools/makepk8/MakePk8.java           | 103 --
 ecss_signtools/makepk8/MakePk8.mf             |   1 -
 ecss_signtools/prereleasekeys/DB.pk8          | Bin 135 -> 0 bytes
 ecss_signtools/prereleasekeys/DB.x509.pem     |  27 -
 ecss_signtools/prereleasekeys/generate        |  95 --
 ecss_signtools/prereleasekeys/media.pk8       | Bin 123 -> 0 bytes
 ecss_signtools/prereleasekeys/media.x509.pem  |  27 -
 ecss_signtools/prereleasekeys/oem.pk8         | Bin 121 -> 0 bytes
 ecss_signtools/prereleasekeys/oem.x509.pem    |  27 -
 ecss_signtools/prereleasekeys/platform.pk8    | Bin 126 -> 0 bytes
 .../prereleasekeys/platform.x509.pem          |  27 -
 .../prereleasekeys/prerelease_lockdown.txt    |  11 -
 ecss_signtools/prereleasekeys/releasekey.pk8  | Bin 125 -> 0 bytes
 .../prereleasekeys/releasekey.x509.pem        |  27 -
 ecss_signtools/prereleasekeys/shared.pk8      | Bin 124 -> 0 bytes
 ecss_signtools/prereleasekeys/shared.x509.pem |  27 -
 .../prereleasekeys/telemetry_consent.pk8      | Bin 136 -> 0 bytes
 .../prereleasekeys/telemetry_consent.x509.pem |  28 -
 ecss_signtools/prereleasekeys/verity.pk8      | Bin 124 -> 0 bytes
 ecss_signtools/prereleasekeys/verity.x509.pem |  27 -
 ecss_signtools/prereleasekeys/verity_key      | Bin 524 -> 0 bytes
 .../ecss/jce/provider/ECSSRSAPrivateKey.java  |  64 --
 .../ecss/jce/provider/ECSSRSAService.java     |  31 -
 .../ecss/jce/provider/IntelECSSProvider.java  |  26 -
 .../jce/provider/IntelECSSProviderParams.java |  23 -
 .../src/com/intel/ecss/jce/provider/RSA.java  | 278 -----
 .../ecss/jce/provider/RSAKeyFactory.java      | 114 --
 .../intel/ecss/jce/provider/SHA1withRSA.java  |   7 -
 .../ecss/jce/provider/SHA256withRSA.java      |   7 -
 ecss_signtools/signapk/SignApk.java           | 972 ------------------
 ecss_signtools/signapk/SignApk.mf             |   1 -
 ecss_signtools/testkeys/DB.pk8                | Bin 134 -> 0 bytes
 ecss_signtools/testkeys/DB.x509.pem           |  44 -
 ecss_signtools/testkeys/KEK.pk8               | Bin 125 -> 0 bytes
 ecss_signtools/testkeys/KEK.x509.pem          |  25 -
 ecss_signtools/testkeys/README                |  10 -
 .../testkeys/ecss_testkeys_lockdown.txt       |  37 -
 ecss_signtools/testkeys/generate              |  83 --
 ecss_signtools/testkeys/media.pk8             | Bin 122 -> 0 bytes
 ecss_signtools/testkeys/media.x509.pem        |  44 -
 ecss_signtools/testkeys/oem.pk8               | Bin 120 -> 0 bytes
 ecss_signtools/testkeys/oem.x509.pem          |  24 -
 ecss_signtools/testkeys/platform.pk8          | Bin 125 -> 0 bytes
 ecss_signtools/testkeys/platform.x509.pem     |  44 -
 ecss_signtools/testkeys/releasekey.pk8        | Bin 124 -> 0 bytes
 ecss_signtools/testkeys/releasekey.x509.pem   |  44 -
 ecss_signtools/testkeys/shared.pk8            | Bin 123 -> 0 bytes
 ecss_signtools/testkeys/shared.x509.pem       |  44 -
 ecss_signtools/testkeys/verity.pk8            | Bin 123 -> 0 bytes
 ecss_signtools/testkeys/verity.x509.pem       |  44 -
 ecss_signtools/testkeys/verity_key            | Bin 524 -> 0 bytes
 ecss_signtools/verity/Android.mk              |  79 --
 ecss_signtools/verity/BootSignature.java      | 316 ------
 ecss_signtools/verity/BootSignature.mf        |   1 -
 ecss_signtools/verity/KeystoreSigner.java     | 216 ----
 ecss_signtools/verity/Utils.java              | 315 ------
 ecss_signtools/verity/VeritySigner.java       |  78 --
 ecss_signtools/verity/VeritySigner.mf         |   1 -
 ecss_signtools/verity/boot_signer             |   8 -
 ecss_signtools/verity/keystore_signer         |   8 -
 ecss_signtools/verity/verity_signer           |   8 -
 tasks/publish.mk                              |   4 +-
 63 files changed, 2 insertions(+), 3554 deletions(-)
 delete mode 100644 ecss_signtools/Android.mk
 delete mode 100644 ecss_signtools/makepk8/MakePk8.java
 delete mode 100644 ecss_signtools/makepk8/MakePk8.mf
 delete mode 100644 ecss_signtools/prereleasekeys/DB.pk8
 delete mode 100644 ecss_signtools/prereleasekeys/DB.x509.pem
 delete mode 100755 ecss_signtools/prereleasekeys/generate
 delete mode 100644 ecss_signtools/prereleasekeys/media.pk8
 delete mode 100644 ecss_signtools/prereleasekeys/media.x509.pem
 delete mode 100644 ecss_signtools/prereleasekeys/oem.pk8
 delete mode 100644 ecss_signtools/prereleasekeys/oem.x509.pem
 delete mode 100644 ecss_signtools/prereleasekeys/platform.pk8
 delete mode 100644 ecss_signtools/prereleasekeys/platform.x509.pem
 delete mode 100644 ecss_signtools/prereleasekeys/prerelease_lockdown.txt
 delete mode 100644 ecss_signtools/prereleasekeys/releasekey.pk8
 delete mode 100644 ecss_signtools/prereleasekeys/releasekey.x509.pem
 delete mode 100644 ecss_signtools/prereleasekeys/shared.pk8
 delete mode 100644 ecss_signtools/prereleasekeys/shared.x509.pem
 delete mode 100644 ecss_signtools/prereleasekeys/telemetry_consent.pk8
 delete mode 100644 ecss_signtools/prereleasekeys/telemetry_consent.x509.pem
 delete mode 100644 ecss_signtools/prereleasekeys/verity.pk8
 delete mode 100644 ecss_signtools/prereleasekeys/verity.x509.pem
 delete mode 100644 ecss_signtools/prereleasekeys/verity_key
 delete mode 100644 ecss_signtools/provider/src/com/intel/ecss/jce/provider/ECSSRSAPrivateKey.java
 delete mode 100644 ecss_signtools/provider/src/com/intel/ecss/jce/provider/ECSSRSAService.java
 delete mode 100644 ecss_signtools/provider/src/com/intel/ecss/jce/provider/IntelECSSProvider.java
 delete mode 100644 ecss_signtools/provider/src/com/intel/ecss/jce/provider/IntelECSSProviderParams.java
 delete mode 100644 ecss_signtools/provider/src/com/intel/ecss/jce/provider/RSA.java
 delete mode 100644 ecss_signtools/provider/src/com/intel/ecss/jce/provider/RSAKeyFactory.java
 delete mode 100644 ecss_signtools/provider/src/com/intel/ecss/jce/provider/SHA1withRSA.java
 delete mode 100644 ecss_signtools/provider/src/com/intel/ecss/jce/provider/SHA256withRSA.java
 delete mode 100644 ecss_signtools/signapk/SignApk.java
 delete mode 100644 ecss_signtools/signapk/SignApk.mf
 delete mode 100644 ecss_signtools/testkeys/DB.pk8
 delete mode 100644 ecss_signtools/testkeys/DB.x509.pem
 delete mode 100644 ecss_signtools/testkeys/KEK.pk8
 delete mode 100644 ecss_signtools/testkeys/KEK.x509.pem
 delete mode 100644 ecss_signtools/testkeys/README
 delete mode 100644 ecss_signtools/testkeys/ecss_testkeys_lockdown.txt
 delete mode 100755 ecss_signtools/testkeys/generate
 delete mode 100644 ecss_signtools/testkeys/media.pk8
 delete mode 100644 ecss_signtools/testkeys/media.x509.pem
 delete mode 100644 ecss_signtools/testkeys/oem.pk8
 delete mode 100644 ecss_signtools/testkeys/oem.x509.pem
 delete mode 100644 ecss_signtools/testkeys/platform.pk8
 delete mode 100644 ecss_signtools/testkeys/platform.x509.pem
 delete mode 100644 ecss_signtools/testkeys/releasekey.pk8
 delete mode 100644 ecss_signtools/testkeys/releasekey.x509.pem
 delete mode 100644 ecss_signtools/testkeys/shared.pk8
 delete mode 100644 ecss_signtools/testkeys/shared.x509.pem
 delete mode 100644 ecss_signtools/testkeys/verity.pk8
 delete mode 100644 ecss_signtools/testkeys/verity.x509.pem
 delete mode 100644 ecss_signtools/testkeys/verity_key
 delete mode 100644 ecss_signtools/verity/Android.mk
 delete mode 100644 ecss_signtools/verity/BootSignature.java
 delete mode 100644 ecss_signtools/verity/BootSignature.mf
 delete mode 100644 ecss_signtools/verity/KeystoreSigner.java
 delete mode 100644 ecss_signtools/verity/Utils.java
 delete mode 100644 ecss_signtools/verity/VeritySigner.java
 delete mode 100644 ecss_signtools/verity/VeritySigner.mf
 delete mode 100755 ecss_signtools/verity/boot_signer
 delete mode 100755 ecss_signtools/verity/keystore_signer
 delete mode 100755 ecss_signtools/verity/verity_signer

diff --git a/ecss_signtools/Android.mk b/ecss_signtools/Android.mk
deleted file mode 100644
index d634f7a..0000000
--- a/ecss_signtools/Android.mk
+++ /dev/null
@@ -1,129 +0,0 @@
-LOCAL_PATH := $(call my-dir)
-
-HOST_ECSS_OUT := $(HOST_OUT)/ecss
-HOST_ECSS_OUT_EXECUTABLES := $(HOST_ECSS_OUT)/bin
-HOST_ECSS_OUT_JAVA_LIBRARIES := $(HOST_ECSS_OUT)/framework
-
-host-ecss-tools: \
-		$(HOST_ECSS_OUT_EXECUTABLES)/verity_signer \
-		$(HOST_ECSS_OUT_EXECUTABLES)/boot_signer \
-		$(HOST_ECSS_OUT_EXECUTABLES)/keystore_signer \
-		$(HOST_ECSS_OUT_JAVA_LIBRARIES)/makepk8_ecss.jar \
-		$(HOST_ECSS_OUT_JAVA_LIBRARIES)/dumpkey.jar
-
-# JCE provider that redirects to the Intel Enterprise Code Signing System
-# (ECSS) instead of local software crypto.
-include $(CLEAR_VARS)
-LOCAL_MODULE := intel-ecss-jce-provider
-LOCAL_MODULE_TAGS := optional
-LOCAL_SRC_FILES := $(call all-java-files-under,provider/src)
-LOCAL_JAVACFLAGS := -encoding UTF-8 -Xlint:deprecation
-LOCAL_JAVA_LIBRARIES := bouncycastle-host bouncycastle-bcpkix-host bouncycastle-host
-LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-# Utility to create a PKCS #8 blob that contains references to the Intel
-# Enterprise Code Signing System (ECSS) instead of the actual key material
-# itself.
-include $(CLEAR_VARS)
-LOCAL_MODULE := makepk8_ecss
-LOCAL_SRC_FILES := makepk8/MakePk8.java
-LOCAL_JAR_MANIFEST := makepk8/MakePk8.mf
-LOCAL_MODULE_PATH := $(HOST_ECSS_OUT_JAVA_LIBRARIES)
-LOCAL_STATIC_JAVA_LIBRARIES := bouncycastle-host bouncycastle-bcpkix-host
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-# Special build of the standard signapk tool that includes the
-# intel-ecss-jce-provider libraries so we can redirect it to Intel production
-# signing servers by passing
-#   -providerClass com.intel.ecss.provider.IntelECSSProvider
-# to signapk. This is necessary because the JVM ignores $CLASSPATH, -cp, and
-# -classpath inputs if the -jar option is used to run a Java app.
-#
-# Minor change to signapk to remove code to force use of the BouncyCastle
-# crypto provider regardless of the key type.
-include $(CLEAR_VARS)
-LOCAL_MODULE := signapk_ecss
-LOCAL_SRC_FILES := $(call all-java-files-under, signapk)
-LOCAL_JAR_MANIFEST := signapk/SignApk.mf
-LOCAL_MODULE_PATH := $(HOST_ECSS_OUT_JAVA_LIBRARIES)
-LOCAL_STATIC_JAVA_LIBRARIES := bouncycastle-host bouncycastle-bcpkix-host intel-ecss-jce-provider
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-ifeq ($(TARGET_BUILD_APPS),)
-# The post-build signing tools need signapk.jar, but we don't
-# need this if we're just doing unbundled apps.
-$(call dist-for-goals,droidcore,$(LOCAL_INSTALLED_MODULE))
-endif
-#$(call dist-for-goals,dist_files,$(LOCAL_INSTALLED_MODULE))
-
-# Special build of signing tools from system/extras/verity that:
-# - Include intel-ecss-jce-provider libraries to enable redirecting signatures
-#   to Intel production signing servers
-# - Add support for -providerClass parameters (signapk equivalent) to add
-#   out custom crypto provider at runtime.
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := verity/VeritySigner.java verity/Utils.java
-LOCAL_MODULE := VeritySigner_ecss
-LOCAL_JAR_MANIFEST := verity/VeritySigner.mf
-LOCAL_MODULE_TAGS := optional
-LOCAL_MODULE_PATH := $(HOST_ECSS_OUT_JAVA_LIBRARIES)
-LOCAL_STATIC_JAVA_LIBRARIES := bouncycastle-host bouncycastle-bcpkix-host intel-ecss-jce-provider
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := verity/BootSignature.java verity/VeritySigner.java verity/Utils.java
-LOCAL_MODULE := BootSignature_ecss
-LOCAL_JAR_MANIFEST := verity/BootSignature.mf
-LOCAL_MODULE_TAGS := optional
-LOCAL_MODULE_PATH := $(HOST_ECSS_OUT_JAVA_LIBRARIES)
-LOCAL_STATIC_JAVA_LIBRARIES := bouncycastle-host bouncycastle-bcpkix-host intel-ecss-jce-provider
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := verity/BootSignature.java verity/KeystoreSigner.java verity/Utils.java
-LOCAL_MODULE := BootKeystoreSigner_ecss
-LOCAL_JAR_MANIFEST := verity/KeystoreSigner.mf
-LOCAL_MODULE_TAGS := optional
-LOCAL_MODULE_PATH := $(HOST_ECSS_OUT_JAVA_LIBRARIES)
-LOCAL_STATIC_JAVA_LIBRARIES := bouncycastle-host bouncycastle-bcpkix-host intel-ecss-jce-provider
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := verity/verity_signer
-LOCAL_MODULE := verity_signer
-LOCAL_MODULE_CLASS := ECSS_EXECUTABLES
-LOCAL_IS_HOST_MODULE := true
-LOCAL_MODULE_TAGS := optional
-LOCAL_MODULE_PATH := $(HOST_ECSS_OUT_EXECUTABLES)
-LOCAL_REQUIRED_MODULES := VeritySigner_ecss
-include $(BUILD_PREBUILT)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := verity/boot_signer
-LOCAL_MODULE := boot_signer
-LOCAL_MODULE_CLASS := ECSS_EXECUTABLES
-LOCAL_IS_HOST_MODULE := true
-LOCAL_MODULE_TAGS := optional
-LOCAL_MODULE_PATH := $(HOST_ECSS_OUT_EXECUTABLES)
-LOCAL_REQUIRED_MODULES := BootSignature_ecss
-include $(BUILD_PREBUILT)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := verity/keystore_signer
-LOCAL_MODULE := keystore_signer
-LOCAL_MODULE_CLASS := ECSS_EXECUTABLES
-LOCAL_IS_HOST_MODULE := true
-LOCAL_MODULE_TAGS := optional
-LOCAL_MODULE_PATH := $(HOST_ECSS_OUT_EXECUTABLES)
-LOCAL_REQUIRED_MODULES := BootKeystoreSigner_ecss
-include $(BUILD_PREBUILT)
-
-# copy dumpkey from the standard framework to the ecss/framework because
-# sign_target_files_apks will prepend a search path including the bin
-# directory, but not the framework directory containing jars.
-#
-$(HOST_ECSS_OUT_JAVA_LIBRARIES)/dumpkey.jar: $(HOST_OUT_JAVA_LIBRARIES)/dumpkey.jar
-	mkdir -p $(HOST_ECSS_OUT_JAVA_LIBRARIES)
-	cp $< $@
diff --git a/ecss_signtools/makepk8/MakePk8.java b/ecss_signtools/makepk8/MakePk8.java
deleted file mode 100644
index a89e114..0000000
--- a/ecss_signtools/makepk8/MakePk8.java
+++ /dev/null
@@ -1,103 +0,0 @@
-package com.intel.ecss.apps;
-
-import org.bouncycastle.asn1.DEROutputStream;
-import org.bouncycastle.asn1.DEROctetString;
-import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
-import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
-import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
-import org.bouncycastle.operator.DefaultSignatureAlgorithmIdentifierFinder;
-import java.nio.charset.Charset;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.PrintWriter;
-import java.io.IOException;
-import org.bouncycastle.util.encoders.Base64;
-
-class MakePk8 {
-    public static final String DER_FILE_EXTENSION = ".pk8";
-    public static final String PEM_FILE_EXTENSION = ".pem";
-
-    public static void usage() {
-        System.err.println("Usage: makepk8 " +
-                           "[-pem] " +
-                           "<keyfile-base> " +
-                           "<algorithm> " +
-                           "<SignFile-params>");
-        System.exit(2);
-    }
-
-    public static void main(String[] args) {
-        boolean savePem = false;
-        String keyfileBasePath;
-        String algorithm;
-        String signfileParams;
-
-        int argstart = 0;
-        while (argstart < args.length && args[argstart].startsWith("-")) {
-            if ("-pem".equals(args[argstart])) {
-                savePem = true;
-                ++argstart;
-            } else {
-                usage();
-            }
-        }
-        if ((args.length - argstart) != 3) {
-            usage();
-        }
-        keyfileBasePath = args[argstart];
-        algorithm = args[argstart + 1];
-        signfileParams = args[argstart + 2];
-
-        AlgorithmIdentifier algId = null;
-        if (algorithm.equals("RSA")) {
-            algId =
-                new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption);
-        }
-        else {
-            System.err.printf("Error: Unknown algorithm '%s'\n", algorithm);
-            System.exit(1);
-        }
-
-        try {
-            String privateKeyContent = "ECSS! " + signfileParams;
-            PrivateKeyInfo priv = new PrivateKeyInfo(
-                                    algId,
-                                    new DEROctetString(
-                                        privateKeyContent.getBytes(
-                                            Charset.forName("UTF-8"))));
-            File derFile = new File(keyfileBasePath + DER_FILE_EXTENSION);
-            File pemFile = new File(keyfileBasePath + PEM_FILE_EXTENSION);
-
-            ByteArrayOutputStream derMemoryStream = new ByteArrayOutputStream();
-            DEROutputStream derEncoder = new DEROutputStream(derMemoryStream);
-            derEncoder.writeObject(priv);
-            derEncoder.flush();
-            derEncoder.close();
-
-            if (savePem) {
-                FileOutputStream stream = new FileOutputStream(pemFile);
-                PrintWriter writer = new PrintWriter(stream, true);
-
-                writer.println("-----BEGIN PRIVATE KEY-----");
-                byte[] encoded = Base64.encode(derMemoryStream.toByteArray());
-                String encodedString = new String(encoded, "UTF-8");
-                String[] lines = encodedString.split("(?<=\\G.{64})");
-                for (int i = 0; i < lines.length; i++ ) {
-                    writer.println(lines[i]);
-                }
-                writer.println("-----END PRIVATE KEY-----");
-                writer.close();
-            }
-
-            FileOutputStream fileStream = new FileOutputStream(derFile);
-            fileStream.write(derMemoryStream.toByteArray());
-            fileStream.flush();
-            fileStream.close();
-        }
-        catch (IOException e) {
-            System.err.printf("Error: IOException: %s\n", e.getMessage());
-            System.exit(1);
-        }
-    }
-}
diff --git a/ecss_signtools/makepk8/MakePk8.mf b/ecss_signtools/makepk8/MakePk8.mf
deleted file mode 100644
index e9480f9..0000000
--- a/ecss_signtools/makepk8/MakePk8.mf
+++ /dev/null
@@ -1 +0,0 @@
-Main-Class: com.intel.ecss.apps.MakePk8
diff --git a/ecss_signtools/prereleasekeys/DB.pk8 b/ecss_signtools/prereleasekeys/DB.pk8
deleted file mode 100644
index 7c2ead28fd68871f3be419816ebccff6f9825127..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 135
zcmWN_!3x447y#gm5k&M3b`8`;w~h^~9Tt)6EMk8pY&!I3bq!*#+_k>rm%l$_GRkL@
z>2f#>-#H;9i&-ZNr52P~y06NkK1Db~115p4rK<Hs?n=E40kv{>50SEGq7TF_ZG^Dl
k3hCc0^_Dx2&~O`CQ9wj@bJidzh`qD0UWv*$&rNDyKghx?WB>pF

diff --git a/ecss_signtools/prereleasekeys/DB.x509.pem b/ecss_signtools/prereleasekeys/DB.x509.pem
deleted file mode 100644
index 98c0687..0000000
--- a/ecss_signtools/prereleasekeys/DB.x509.pem
+++ /dev/null
@@ -1,27 +0,0 @@
-subject=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST UEFI Boot Signer
-issuer=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST UEFI Boot Signer
------BEGIN CERTIFICATE-----
-MIIEDTCCAvWgAwIBAgIQZgAXQmMKj4lAvSppSZUoYTANBgkqhkiG9w0BAQsFADCB
-hjEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENs
-YXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxODA2BgNVBAMTL0ludGVsKFIp
-IEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBVRUZJIEJvb3QgU2lnbmVyMB4XDTE1MDEy
-NzIxNTMyM1oXDTQ1MDEyNzIxNTMyM1owgYYxGjAYBgNVBAoTEUludGVsIENvcnBv
-cmF0aW9uMRQwEgYDVQQHEwtTYW50YSBDbGFyYTELMAkGA1UECBMCQ0ExCzAJBgNV
-BAYTAlVTMTgwNgYDVQQDEy9JbnRlbChSKSBHTUlOIFByZS1SZWxlYXNlIFRFU1Qg
-VUVGSSBCb290IFNpZ25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
-AMHvXBajh3hVSEiDKWrIMw5gIXvqfrWN8O5aePEuv6hYqEcnE0jNWxaKTGpBULv6
-YLyr/3yvWLkl1nSZT01b5IgAsLO3oPYZCQ8kQRT5gWq12WFgh5Ya5ulDDF6jmRQi
-iGuybv+3bp8CNO1kDCRqKVrNixIe0vNhyx9+BUJj5wFMcTqa5y+do6f+03YA5isp
-yhDrSO1Y/HimyM9LRvylU76Be2rmD2KYHk/KV1R31AXC7sjfTi0iWKCKqlw3UVvf
-DHbLYwKr2iIRtaX3sR9pc5NCO4dziqQoKXzcmkRu3SAj3x47MZazUbYBKKsWHyoh
-MBWaqPfPbMsHqEOtLgjc8McCAwEAAaN1MHMwCwYDVR0PBAQDAgGGMBMGA1UdJQQM
-MAoGCCsGAQUFBwMDMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFFF5v4xllG4r
-oSL4A0/dDqJoDbOXMB8GA1UdIwQYMBaAFFF5v4xllG4roSL4A0/dDqJoDbOXMA0G
-CSqGSIb3DQEBCwUAA4IBAQAcHY5r1OcCs5WJn9ORNOwA4aDDe2g38StE0y7yBp7Z
-LeyJfMTUhoAmSU8xGiJPHavwb7YwAHJocMfoFDAwo3fFlcWoBVo3RA+q+MxzQzje
-RKOUOFz1DtAv7mdr1CH1vhwzR/9WVd35gSLoib80avCLgTzMAA+pXXdPJ00CjjeO
-1jEYT1MmMhHNkOSTwe3U7fhPTYwi7u07aWBROfEv13Lj2iO0ZbFa/1HwbUIhNxOw
-NxQNeBoHP8L5Vaxq05dPAaCU/oXC9FQRrNvlm4L1hqO0xQNG/bWp/Aa1I3EtS3ZJ
-CaATGexn1qt3/yCzgHMze2h6k7XsVhver4KffOXaoVSl
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/prereleasekeys/generate b/ecss_signtools/prereleasekeys/generate
deleted file mode 100755
index aa3e751..0000000
--- a/ecss_signtools/prereleasekeys/generate
+++ /dev/null
@@ -1,95 +0,0 @@
-#! /bin/sh
-
-# Generates the key and certificate materials needed to sign an Android build
-# for a key set in the IT Enterprise Code Signing System (ECSS). It can be
-# used to generate new materials if the tool requirements change.
-#
-# This script can be used to generate key material for other ECSS key sets.
-# 1. Copy this script to the key set directory where new materials should be
-#    created
-# 2. Change the key names in the calls to make_stuff() to match your keys
-# 3. Update the AUTH_FILE definition, if necessary
-# 4. Run the script from inside the key set directory
-
-MAKEPK8_JAR="${ANDROID_BUILD_TOP}/out/host/linux-x86/ecss/framework/makepk8_ecss.jar"
-MAKEPK8="java -jar ${MAKEPK8_JAR}"
-SIGNFILE=~/ecss/SignFile
-GENERATE_VERITY="${ANDROID_BUILD_TOP}/out/host/linux-x86/bin/generate_verity_key"
-CONVERTCERT="${GENERATE_VERITY} -convert"
-AUTH_FILE=~/ecss/dpd-signing-ssl-combined.pem
-OUTPUT_DIR=`dirname "$0"`
-if [ "${OUTPUT_DIR}" = "." ]; then
-	OUTPUT_DIR=`pwd`
-fi
-SERVER_URL="https://codesign-svc.intel.com/CertificateService31/Main.asmx"
-MAKELOCKDOWN="${ANDROID_BUILD_TOP}/device/intel/build/generate_bios_oemvars"
-LOCKDOWN_TEST_KEYS="${ANDROID_BUILD_TOP}/device/intel/build/testkeys"
-
-
-# Creates a PKCS #8 wrapper around the ECSS parameters that indicate server
-# and key name. The results are compatible with the ECSS JCE provider in
-# ../provider.
-#
-# Performs a test signature with each key to obtain the corresponding cert
-# to the ECSS public key. This is the only method for obtaining the cert
-# provided by the ECSS.
-make_stuff () {
-	local basefilename=$1
-	local keyname=$2
-	local makepem=$3
-
-	${MAKEPK8} ${makepem} ${OUTPUT_DIR}/${basefilename} "RSA" "-c ${keyname} -ws ${SERVER_URL}"
-
-	local tmp_input=`mktemp --suffix=.cert_extraction`
-	local tmp_output=`mktemp --suffix=.pk7 --dry-run`
-	echo "Dummy file to extract certificate" > ${tmp_input}
-	set -x
-	${SIGNFILE} -ac ${AUTH_FILE} -ts -ws ${SERVER_URL} -c ${keyname} -s cl -cf ${tmp_output} ${tmp_input}
-	openssl pkcs7 -print_certs -inform der -in ${tmp_output} > ${OUTPUT_DIR}/${basefilename}.x509.pem
-	set +x
-
-	rm ${tmp_input}
-	rm ${tmp_output}
-}
-
-if [ ! -n "${ANDROID_BUILD_TOP}" ]; then
-	echo "I'm hungry. Please lunch!"
-	exit 1
-fi
-if [ ! -e ${SIGNFILE} ]; then
-	echo "Please make sure SIGNFILE is set correctly. It doesn't seem to exist"
-	exit 1
-fi
-if [ ! -e ${AUTH_FILE} ]; then
-	echo "Please make sure AUTH_FILE is set correctly. It doesn't seem to exist"
-	exit 1
-fi
-if [ ! -e ${MAKEPK8_JAR} ]; then
-	echo "Must make ${MAKEPK8_JAR}"
-	exit 1
-fi
-if [ ! -e ${GENERATE_VERITY} ]; then
-	echo "Must make ${GENERATE_VERITY}"
-	exit 1
-fi
-
-# Create the PKCS #8 blobs and extract certs for signing keys
-# make_stuff <key-file-base> <ecss-key-name> [-pem]
-make_stuff releasekey GMIN_PreRelease_TEST_Release
-make_stuff platform GMIN_PreRelease_TEST_Platform
-make_stuff shared GMIN_PreRelease_TEST_Shared
-make_stuff media GMIN_PreRelease_TEST_Media
-make_stuff verity GMIN_PreRelease_TEST_Verity
-make_stuff DB GMIN_PreRelease_TEST_UEFI_Boot_Signer
-make_stuff oem GMIN_PreRelease_TEST_OEM
-make_stuff telemetry_consent GMIN_PreRelease_TEST_Telemetry_Consent
-
-# Rename files and convert formats for dm-verity tool compatibility
-${CONVERTCERT} ${OUTPUT_DIR}/verity.x509.pem ${OUTPUT_DIR}/verity_key
-mv ${OUTPUT_DIR}/verity_key.pub ${OUTPUT_DIR}/verity_key
-
-# Create EFI lockdown file. PK and KEK are identical to test keys.
-cachedir=`pwd`
-cd ${ANDROID_BUILD_TOP}
-${MAKELOCKDOWN} --db-pair ${OUTPUT_DIR}/DB --kek-pair ${LOCKDOWN_TEST_KEYS}/KEK --pk-pair ${LOCKDOWN_TEST_KEYS}/PK -T 1 ${OUTPUT_DIR}/prerelease_lockdown.txt
-cd ${cachedir}
diff --git a/ecss_signtools/prereleasekeys/media.pk8 b/ecss_signtools/prereleasekeys/media.pk8
deleted file mode 100644
index ad8e74ed170cde80533e91e1908ec23e9ed443fd..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 123
zcmXr0WMX76;AZ30YV&CO&dbQi$db;I>gpUEtf-)ytl;kJ=@%bRlp2(plbTqZ8Xw{s
z91`!Fnv$8Qpj%$7kWo@nP;8~IpPZkPTAZ1lr(0Z>te2TrlA5EJoS&=joLW?pnU<NH
aSdto?T2z*qoN8>S@0*yJr<YiqTLA#7z9+u`

diff --git a/ecss_signtools/prereleasekeys/media.x509.pem b/ecss_signtools/prereleasekeys/media.x509.pem
deleted file mode 100644
index 32ecca4..0000000
--- a/ecss_signtools/prereleasekeys/media.x509.pem
+++ /dev/null
@@ -1,27 +0,0 @@
-subject=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Media Signer
-issuer=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Media Signer
------BEGIN CERTIFICATE-----
-MIIEBTCCAu2gAwIBAgIQPbPluK5hz5dJIKkrVCLbGzANBgkqhkiG9w0BAQsFADCB
-gjEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENs
-YXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxNDAyBgNVBAMTK0ludGVsKFIp
-IEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBNZWRpYSBTaWduZXIwHhcNMTUwMTI3MjE1
-MzIzWhcNNDUwMTI3MjE1MzIzWjCBgjEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRp
-b24xFDASBgNVBAcTC1NhbnRhIENsYXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMC
-VVMxNDAyBgNVBAMTK0ludGVsKFIpIEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBNZWRp
-YSBTaWduZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDNLewFI9pM
-zQpeg36MR7mK43WPV8esMrIP3m4uyMUSdg3md1cRQI/rr6PSLNmC6KhaQ9Op6JCL
-U32JNTVfQxZR1pSxYqwhgrRNyyL9lcqb+x+kXFh5sH9oOcQWB4vfa/MwQ1H7Wm9H
-Sul8SfAGpiQjlBe1ELYDXAd0dXA1tGrxq+9lJZiChpCsphJAVjvgg9+tfbPcz7C7
-rvx9mpw9bw7XHnn1s7oBVk5G4Dg8W8aqc/A56Mvt98lp+OrXH9hiGrLRvxOVGDez
-wX1v7kGxtGQVyQdRtJmHI96q65uNEmkguAF5MkWnY7pRMzik8tX2JbZn3MewXsYk
-/Uy7KfbBkAGLAgMBAAGjdTBzMAsGA1UdDwQEAwIBhjATBgNVHSUEDDAKBggrBgEF
-BQcDAzAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTpDfDXdRhDZ0u6XLC/vmgm
-O6j2RTAfBgNVHSMEGDAWgBTpDfDXdRhDZ0u6XLC/vmgmO6j2RTANBgkqhkiG9w0B
-AQsFAAOCAQEAJKx5IgacZYFQ9JV1A0lNslzDtuhsxdvBAderBJDDj/CAGqjKEX6u
-+71Cv7CIZODcy3MRZX/wwDYR7gsSS1wPwrB0YKc9LQRSaga0tpQd1E9k9soMhr2+
-6LUKv4+F308E4Uhx18AlwDmz7C2+9HIL9WtnsbCX0KUkWHi0p0tXCxeq4osWu+nv
-XBeiWpl2bTSv/K1xSaKWHTRo41GTeHu63zmeZwnN4KqG0fyNYREqxhHp78NAbG64
-gsa0n1iO0ECjWeA+9ivrVj5ynJbHVAJpwaBlnM+uHHZIb3rR7ZHHPw1yT8F79Pi6
-dYYbVyA6ZgPyH8vITloryfJZOuUBpho3Cw==
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/prereleasekeys/oem.pk8 b/ecss_signtools/prereleasekeys/oem.pk8
deleted file mode 100644
index 2061fce285fce93f8dbfb7b0861f866d0e050b47..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 121
zcmXpgXJTY9;AZ30YV&CO&dbQi$dbyE?CKmGtf-)ytl;kJ=@%bRlp2(plbTqZ8Xw{s
z91`#E>Z_nzUaXK&Qc_TCrLUiypORXfnVzRxT$ZetnOBmUqnDhYtM8mzRFavNnVeXX
Y8k|~GmYJMtY^d*>n3<=SSe#n{07nicx&QzG

diff --git a/ecss_signtools/prereleasekeys/oem.x509.pem b/ecss_signtools/prereleasekeys/oem.x509.pem
deleted file mode 100644
index efac21c..0000000
--- a/ecss_signtools/prereleasekeys/oem.x509.pem
+++ /dev/null
@@ -1,27 +0,0 @@
-subject=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST OEM Signer
-issuer=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST OEM Signer
------BEGIN CERTIFICATE-----
-MIIEATCCAumgAwIBAgIQZSaGoV4JNLBLzJ091RrDeDANBgkqhkiG9w0BAQsFADCB
-gDEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENs
-YXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxMjAwBgNVBAMTKUludGVsKFIp
-IEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBPRU0gU2lnbmVyMB4XDTE1MDEyNzIyMDYz
-OFoXDTQ1MDEyNzIyMDYzOFowgYAxGjAYBgNVBAoTEUludGVsIENvcnBvcmF0aW9u
-MRQwEgYDVQQHEwtTYW50YSBDbGFyYTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVT
-MTIwMAYDVQQDEylJbnRlbChSKSBHTUlOIFByZS1SZWxlYXNlIFRFU1QgT0VNIFNp
-Z25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMfdTFOJ1mubYfgp
-qOSYEyCPUGHSbUmhs8hbPMjRrisUV/aaeWAravt7laImbb9cvu7Srk84csc+Korl
-9K+mRYbSCqXfYO8dQlHF94MR9hCraef+MDg0g9O8AtyrdrJtDgEAfvtGRtKhvlEk
-wNXrhYFDYjhISjaNGC6tRGyLDpG6qiFzR91hEasnsWKGxWd46vb7fzjOkx2u90EQ
-a3hnTuEk5uQuF1V8s1e3FqxxbQ6Xsf24hhVWBRuyL7s1ZuEj6m7ptsaLAKNrV/pt
-R8XpwgPaXdP/+BgVYfHOJIc+4oBQtM267JWGa+vYOksZqtw4/ebnmH7DWDjqDz4u
-Jy1T+0sCAwEAAaN1MHMwCwYDVR0PBAQDAgGGMBMGA1UdJQQMMAoGCCsGAQUFBwMD
-MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFO7yW9WgBxyyeKDjahdHhvJOefG4
-MB8GA1UdIwQYMBaAFO7yW9WgBxyyeKDjahdHhvJOefG4MA0GCSqGSIb3DQEBCwUA
-A4IBAQA5J8UVhqKIuU8jSyYiSrZWxldaCSuIfUed/0qR+S4mbKgv+OnLm+IPIDqp
-4kaH9C3J8AJsQqYC0soMGwJPEYyZlk9bMkg+K1t/ELFBeeEr41kXNKRDYQ1akl9p
-gdUM4JI790x82D0XMNVmrOOqRBE3C453atihoP18y9I3HPJ+PiScbtMw+sL7X/1y
-Hy07UCEyZmIQE1wGdP3GmopHEtxEYrvoII82wqRCkxTVyJyg9gV+M7VwoZOeKzDt
-gxARZR9Zv3xG9swEM9WGEsiNk5yhpOPYgqqv2yQHnoUPbRHV7Iw4YWBldcHtpds7
-COiF/nfAZGu7sezEIe5PjuQx43kO
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/prereleasekeys/platform.pk8 b/ecss_signtools/prereleasekeys/platform.pk8
deleted file mode 100644
index a918f0baee04e2fda070d60de23fe9c8977e8c56..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 126
zcmXr0VPa%3;AZ30YV&CO&dbQi$dbj9;p!Y5tf-)ytl;kJ=@%bRlp2(plbTqZ8Xw{s
z91<UplUS0LUzDq$TVAY?QBqP+Y^ATCoS%|foSB}dTU?f`mzh_RnxmJTpR4bjT2zvm
dmYJMbk{X;^RF;{XYHX<Qo0yrWmsp%z0RTNGDJ=j1

diff --git a/ecss_signtools/prereleasekeys/platform.x509.pem b/ecss_signtools/prereleasekeys/platform.x509.pem
deleted file mode 100644
index 7d5f1eb..0000000
--- a/ecss_signtools/prereleasekeys/platform.x509.pem
+++ /dev/null
@@ -1,27 +0,0 @@
-subject=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Platform Signer
-issuer=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Platform Signer
------BEGIN CERTIFICATE-----
-MIIECzCCAvOgAwIBAgIQc87T6qQBTZJCzI64V+YixTANBgkqhkiG9w0BAQsFADCB
-hTEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENs
-YXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxNzA1BgNVBAMTLkludGVsKFIp
-IEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBQbGF0Zm9ybSBTaWduZXIwHhcNMTUwMTI3
-MjE0NjM1WhcNNDUwMTI3MjE0NjM1WjCBhTEaMBgGA1UEChMRSW50ZWwgQ29ycG9y
-YXRpb24xFDASBgNVBAcTC1NhbnRhIENsYXJhMQswCQYDVQQIEwJDQTELMAkGA1UE
-BhMCVVMxNzA1BgNVBAMTLkludGVsKFIpIEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBQ
-bGF0Zm9ybSBTaWduZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDd
-lm2ruBd1FCXxRoykXo8cgPYEX/mDzK6dgz8wY9X2VdVml6DRA/CC0PWojWmoB6JO
-Fpt06JNsbWoMcTcEZGiKwPCwMOcQKRgi2Cz8mz3RRh9kfmy8BY3NdtYMnZLayXwA
-MhzC8L1STpqhgkZFBBo2FRMpQ3MgFTmP2BU0tTJhf8qOVT6Xk7ARBhmPutYmXsH+
-+JPKa/1D4esOzIsXUzeTQTyr3CgWAVFU6zg4Qw331wjxJbtY1cWnYkslciv/xZVm
-7debO6y4vShxRm7LOD6t3jA53FPpwxuP7l8gfBtf+90EguCXbQ6QZOS0qH8hAeHm
-2By99LQGJd7TXGwAKZm9AgMBAAGjdTBzMAsGA1UdDwQEAwIBhjATBgNVHSUEDDAK
-BggrBgEFBQcDAzAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQugp3irLdJbHYF
-owKIxKcXaUC1XDAfBgNVHSMEGDAWgBQugp3irLdJbHYFowKIxKcXaUC1XDANBgkq
-hkiG9w0BAQsFAAOCAQEAY+vUMNfILNy3RTJWBP2BNL8viey9cCjAZhZ5LCajQh0n
-oOuk0OYS97v7Rvn3K/mPDCGNLFbYZJ46KEoKQKcBCBIEqqb/it4aemVm7CSJO+X9
-5cPQwhbbHteRrjStgGcnRLxGBsRzLIBo4YAy1XhfqkIMA67tudA7ykHcjvzrByug
-DgfkoW2c01A+hIEFHfLLSVD6LOdohbPBH9QWQq8OSZlMY3t0ZvXGaJgmGKFWR1S9
-wu7FgK4GcvDZ7L+uU+NSnDp38N873dZmJaxBRP9+VCQF6BPgceoyEhIKLtfh3vhk
-ezkLwGvvxQZCIfjFqlrQoTWb+3SQC9mG9g2dvwOsbA==
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/prereleasekeys/prerelease_lockdown.txt b/ecss_signtools/prereleasekeys/prerelease_lockdown.txt
deleted file mode 100644
index 4c2093c..0000000
--- a/ecss_signtools/prereleasekeys/prerelease_lockdown.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-# This file generated by generate_bios_oemvar to enroll UEFI Secure Boot keys
-GUID = d719b2cb-3d3a-4596-a3bc-dad00e67656f
-
-[ad] db %b2%07%0b%1f%10%00%01%00%00%00%00%00%00%00%00%00%78%05%00%00%00%02%f1%0e%9d%d2%af%4a%df%68%ee%49%8a%a9%34%7d%37%56%65%a7%30%82%05%5c%06%09%2a%86%48%86%f7%0d%01%07%02%a0%82%05%4d%30%82%05%49%02%01%01%31%0f%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%30%0b%06%09%2a%86%48%86%f7%0d%01%07%01%a0%82%02%f3%30%82%02%ef%30%82%01%d7%a0%03%02%01%02%02%09%00%88%ae%69%ee%3e%fa%5c%ae%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0e%31%0c%30%0a%06%03%55%04%03%0c%03%4b%45%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%32%31%5a%17%0d%34%31%30%32%32%34%31%37%33%35%32%31%5a%30%0e%31%0c%30%0a%06%03%55%04%03%0c%03%4b%45%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%ae%75%90%12%2a%c4%28%89%99%6c%64%4f%96%6d%d7%a2%aa%49%77%50%77%fe%21%1a%b0%77%09%5c%6c%72%7a%49%f5%0b%e5%99%70%8e%f9%61%5f%94%68%b7%29%74%4b%55%e9%f4%1a%4b%d4%a9%98%df%90%3f%c6%f7%ff%21%ff%1a%81%52%49%1e%bd%0a%34%30%3e%32%69%32%e7%89%5d%48%d8%03%19%fa%c6%bc%a7%22%08%f2%e7%61%88%71%65%b2%02%1b%af%b0%6f%21%2d%4f%1b%b3%2d%bf%ff%0f%62%72%62%a2%41%c2%0e%d5%20%91%c7%fb%da%cd%ba%16%dc%75%c0%d6%2a%f2%d8%40%59%1c%b8%cf%d7%b9%11%29%ba%9c%73%95%32%65%22%9e%8a%4b%3d%6d%78%77%3b%e4%ef%cf%6a%e5%f8%ad%ae%4e%18%e8%c8%a0%a4%bb%60%a0%a5%21%3d%01%3e%66%48%61%f5%17%7b%e5%b6%a5%50%e2%15%91%00%50%36%d1%21%3f%97%61%5b%8d%a4%6a%7a%e9%1b%3c%0e%e5%19%2e%5e%2a%0d%95%39%3d%40%6b%0f%a4%75%1d%bb%e5%68%ff%8b%9b%f9%a6%02%f6%97%f6%66%29%6b%9e%ca%28%dc%5d%aa%df%b4%1a%80%78%80%6c%25%65%d7%09%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%de%23%9f%c5%99%4c%7f%20%a1%77%6d%74%68%ee%f4%7d%94%e3%9b%37%30%1f%06%03%55%1d%23%04%18%30%16%80%14%de%23%9f%c5%99%4c%7f%20%a1%77%6d%74%68%ee%f4%7d%94%e3%9b%37%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%98%47%30%41%7b%37%8a%b9%ef%b9%2b%90%2f%68%09%cd%9c%91%b2%bf%ce%e8%29%4e%cc%f1%43%1f%2d%99%d0%45%03%89%3b%71%42%85%2b%84%07%99%82%40%75%36%f7%f4%c2%93%7d%67%29%ed%b5%a6%71%f4%3d%6a%56%f5%eb%1d%ce%9c%75%b4%14%98%77%8b%38%9c%ce%94%13%c9%96%a2%35%98%45%ac%fa%af%d7%85%56%ca%ac%b1%c3%49%d7%f4%a4%5b%ac%fc%32%54%73%bf%75%59%7a%57%e7%7f%ee%14%0d%0e%08%cd%48%b9%fc%b1%ce%0a%b3%26%8f%cb%b5%89%cc%a6%5d%0e%75%e8%48%fa%c5%61%b8%31%f3%47%dd%9d%86%c4%71%e8%ce%a3%4d%96%d8%5c%fb%d4%ea%49%19%40%61%f4%96%0c%f2%0e%aa%f4%5f%3b%4a%9c%fc%eb%67%6c%8e%19%b9%1e%46%64%59%b8%4e%55%45%36%f5%fe%30%24%92%04%bd%96%4f%7f%06%91%a9%3a%9e%59%e7%fc%fa%7a%fd%37%d0%88%eb%24%72%74%ba%f8%58%b2%91%ae%0a%45%7e%de%34%73%12%ab%85%f7%36%de%2b%4a%6c%16%26%df%1b%68%2c%38%aa%6b%db%4a%25%68%6d%67%b3%69%42%c4%31%82%02%2d%30%82%02%29%02%01%01%30%1b%30%0e%31%0c%30%0a%06%03%55%04%03%0c%03%4b%45%4b%02%09%00%88%ae%69%ee%3e%fa%5c%ae%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%a0%81%e4%30%18%06%09%2a%86%48%86%f7%0d%01%09%03%31%0b%06%09%2a%86%48%86%f7%0d%01%07%01%30%1c%06%09%2a%86%48%86%f7%0d%01%09%05%31%0f%17%0d%31%35%30%31%32%38%31%39%30%35%33%36%5a%30%2f%06%09%2a%86%48%86%f7%0d%01%09%04%31%22%04%20%ed%ce%a9%40%e5%a0%ae%58%3d%9e%2d%f5%68%8d%e7%0f%da%39%53%48%5c%50%cb%1a%44%6f%18%26%f0%f7%31%eb%30%79%06%09%2a%86%48%86%f7%0d%01%09%0f%31%6c%30%6a%30%0b%06%09%60%86%48%01%65%03%04%01%2a%30%0b%06%09%60%86%48%01%65%03%04%01%16%30%0b%06%09%60%86%48%01%65%03%04%01%02%30%0a%06%08%2a%86%48%86%f7%0d%03%07%30%0e%06%08%2a%86%48%86%f7%0d%03%02%02%02%00%80%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%40%30%07%06%05%2b%0e%03%02%07%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%28%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%04%82%01%00%0f%72%40%d3%46%d2%00%9d%ae%d4%67%07%c2%d7%00%5c%05%1a%94%6b%0c%21%fa%81%bb%46%bf%2a%bb%41%62%d6%95%40%e5%85%6a%f3%ed%fd%88%36%7f%a6%fd%b3%fc%c0%4b%bb%b2%cb%f4%26%bd%f4%4c%74%6f%58%d1%7a%33%98%c4%ea%18%5d%b3%dd%68%14%c8%d7%30%51%68%8b%de%e9%a1%2b%25%1a%19%80%5c%52%a4%7a%a9%b6%96%07%98%0d%1f%4a%ca%a8%f3%62%61%05%aa%50%54%47%4c%16%14%59%87%5f%d2%cd%39%a7%f5%a9%f8%4f%f4%49%f7%1b%86%f4%96%33%d9%41%1e%3e%39%a7%13%f7%3f%96%91%72%3a%03%b7%d6%74%11%aa%23%7f%55%f3%54%de%b5%18%71%61%5b%b2%1d%03%c9%80%64%e3%55%88%bf%85%ca%0b%5c%7d%b6%46%65%8f%6e%1e%77%c9%91%e7%e7%b8%a1%97%f5%ac%9d%4d%7a%50%6f%d0%69%99%73%ff%2c%9a%bd%cf%a9%4a%d4%07%12%b3%ef%64%fe%ff%94%ca%d8%9b%fe%1e%f5%b5%55%37%e6%5b%59%48%62%86%84%1f%df%0d%34%f0%88%01%c8%56%3e%2f%8a%70%ab%7e%b7%74%5b%fc%01%27%60%0f%0c%a1%59%c0%a5%e4%94%a7%4a%87%b5%ab%15%5c%2b%f0%72%3d%04%00%00%00%00%00%00%21%04%00%00%11%11%11%11%22%22%33%33%44%44%12%34%56%78%9a%bc%30%82%04%0d%30%82%02%f5%a0%03%02%01%02%02%10%66%00%17%42%63%0a%8f%89%40%bd%2a%69%49%95%28%61%30%0d%06%09%2a%86%48%86%f7%0d%01%01%0b%05%00%30%81%86%31%1a%30%18%06%03%55%04%0a%13%11%49%6e%74%65%6c%20%43%6f%72%70%6f%72%61%74%69%6f%6e%31%14%30%12%06%03%55%04%07%13%0b%53%61%6e%74%61%20%43%6c%61%72%61%31%0b%30%09%06%03%55%04%08%13%02%43%41%31%0b%30%09%06%03%55%04%06%13%02%55%53%31%38%30%36%06%03%55%04%03%13%2f%49%6e%74%65%6c%28%52%29%20%47%4d%49%4e%20%50%72%65%2d%52%65%6c%65%61%73%65%20%54%45%53%54%20%55%45%46%49%20%42%6f%6f%74%20%53%69%67%6e%65%72%30%1e%17%0d%31%35%30%31%32%37%32%31%35%33%32%33%5a%17%0d%34%35%30%31%32%37%32%31%35%33%32%33%5a%30%81%86%31%1a%30%18%06%03%55%04%0a%13%11%49%6e%74%65%6c%20%43%6f%72%70%6f%72%61%74%69%6f%6e%31%14%30%12%06%03%55%04%07%13%0b%53%61%6e%74%61%20%43%6c%61%72%61%31%0b%30%09%06%03%55%04%08%13%02%43%41%31%0b%30%09%06%03%55%04%06%13%02%55%53%31%38%30%36%06%03%55%04%03%13%2f%49%6e%74%65%6c%28%52%29%20%47%4d%49%4e%20%50%72%65%2d%52%65%6c%65%61%73%65%20%54%45%53%54%20%55%45%46%49%20%42%6f%6f%74%20%53%69%67%6e%65%72%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%c1%ef%5c%16%a3%87%78%55%48%48%83%29%6a%c8%33%0e%60%21%7b%ea%7e%b5%8d%f0%ee%5a%78%f1%2e%bf%a8%58%a8%47%27%13%48%cd%5b%16%8a%4c%6a%41%50%bb%fa%60%bc%ab%ff%7c%af%58%b9%25%d6%74%99%4f%4d%5b%e4%88%00%b0%b3%b7%a0%f6%19%09%0f%24%41%14%f9%81%6a%b5%d9%61%60%87%96%1a%e6%e9%43%0c%5e%a3%99%14%22%88%6b%b2%6e%ff%b7%6e%9f%02%34%ed%64%0c%24%6a%29%5a%cd%8b%12%1e%d2%f3%61%cb%1f%7e%05%42%63%e7%01%4c%71%3a%9a%e7%2f%9d%a3%a7%fe%d3%76%00%e6%2b%29%ca%10%eb%48%ed%58%fc%78%a6%c8%cf%4b%46%fc%a5%53%be%81%7b%6a%e6%0f%62%98%1e%4f%ca%57%54%77%d4%05%c2%ee%c8%df%4e%2d%22%58%a0%8a%aa%5c%37%51%5b%df%0c%76%cb%63%02%ab%da%22%11%b5%a5%f7%b1%1f%69%73%93%42%3b%87%73%8a%a4%28%29%7c%dc%9a%44%6e%dd%20%23%df%1e%3b%31%96%b3%51%b6%01%28%ab%16%1f%2a%21%30%15%9a%a8%f7%cf%6c%cb%07%a8%43%ad%2e%08%dc%f0%c7%02%03%01%00%01%a3%75%30%73%30%0b%06%03%55%1d%0f%04%04%03%02%01%86%30%13%06%03%55%1d%25%04%0c%30%0a%06%08%2b%06%01%05%05%07%03%03%30%0f%06%03%55%1d%13%01%01%ff%04%05%30%03%01%01%ff%30%1d%06%03%55%1d%0e%04%16%04%14%51%79%bf%8c%65%94%6e%2b%a1%22%f8%03%4f%dd%0e%a2%68%0d%b3%97%30%1f%06%03%55%1d%23%04%18%30%16%80%14%51%79%bf%8c%65%94%6e%2b%a1%22%f8%03%4f%dd%0e%a2%68%0d%b3%97%30%0d%06%09%2a%86%48%86%f7%0d%01%01%0b%05%00%03%82%01%01%00%1c%1d%8e%6b%d4%e7%02%b3%95%89%9f%d3%91%34%ec%00%e1%a0%c3%7b%68%37%f1%2b%44%d3%2e%f2%06%9e%d9%2d%ec%89%7c%c4%d4%86%80%26%49%4f%31%1a%22%4f%1d%ab%f0%6f%b6%30%00%72%68%70%c7%e8%14%30%30%a3%77%c5%95%c5%a8%05%5a%37%44%0f%aa%f8%cc%73%43%38%de%44%a3%94%38%5c%f5%0e%d0%2f%ee%67%6b%d4%21%f5%be%1c%33%47%ff%56%55%dd%f9%81%22%e8%89%bf%34%6a%f0%8b%81%3c%cc%00%0f%a9%5d%77%4f%27%4d%02%8e%37%8e%d6%31%18%4f%53%26%32%11%cd%90%e4%93%c1%ed%d4%ed%f8%4f%4d%8c%22%ee%ed%3b%69%60%51%39%f1%2f%d7%72%e3%da%23%b4%65%b1%5a%ff%51%f0%6d%42%21%37%13%b0%37%14%0d%78%1a%07%3f%c2%f9%55%ac%6a%d3%97%4f%01%a0%94%fe%85%c2%f4%54%11%ac%db%e5%9b%82%f5%86%a3%b4%c5%03%46%fd%b5%a9%fc%06%b5%23%71%2d%4b%76%49%09%a0%13%19%ec%67%d6%ab%77%ff%20%b3%80%73%33%7b%68%7a%93%b5%ec%56%1b%de%af%82%9f%7c%e5%da%a1%54%a5
-
-GUID = 8be4df61-93ca-11d2-aa0d-00e098032b8c
-
-[ad] KEK %b2%07%0b%1f%10%00%01%00%00%00%00%00%00%00%00%00%75%05%00%00%00%02%f1%0e%9d%d2%af%4a%df%68%ee%49%8a%a9%34%7d%37%56%65%a7%30%82%05%59%06%09%2a%86%48%86%f7%0d%01%07%02%a0%82%05%4a%30%82%05%46%02%01%01%31%0f%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%30%0b%06%09%2a%86%48%86%f7%0d%01%07%01%a0%82%02%f1%30%82%02%ed%30%82%01%d5%a0%03%02%01%02%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%33%33%5a%17%0d%34%31%30%32%32%34%31%37%33%35%33%33%5a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%b8%05%3e%db%dd%14%b4%b9%99%0b%94%3a%82%33%c7%ec%5e%d3%e9%2b%9f%20%10%1a%ff%d4%87%d7%a9%65%cb%5b%9f%f1%aa%0f%1f%c9%d4%da%a6%a3%cf%0e%5d%c3%02%64%3d%ad%27%9f%20%45%7d%58%9e%a4%c8%b3%ad%9f%df%95%9e%5d%ec%21%0e%80%99%2b%54%af%d9%ee%ab%fd%6d%a1%bd%a0%43%b7%5c%65%54%cb%fa%59%59%66%c2%57%12%b5%3c%e4%5a%b9%d9%c4%f8%3b%46%2c%42%12%6c%d0%4a%d4%ee%e8%0a%2d%1c%d0%eb%16%83%08%19%da%61%d5%9b%6f%70%37%f4%be%44%fa%ff%74%5c%c6%76%45%75%35%bc%0a%67%9d%05%ab%3b%51%28%0d%8d%25%45%95%f8%b9%0c%a4%28%15%65%97%87%6d%c0%e8%c0%ab%52%93%7e%4f%ea%07%6d%58%a5%2d%80%f6%bf%d6%e3%81%d8%53%ee%d0%1c%a7%7f%77%0c%97%37%18%51%2e%b1%2f%c9%19%e3%1b%be%b3%78%22%d4%17%e5%f1%7a%f2%ae%19%5a%3e%6b%f0%6c%01%fb%2f%b6%00%f6%82%ff%99%4f%49%a3%26%2c%58%32%e5%d2%c6%74%6c%3a%63%c0%76%79%bd%6e%c5%80%9a%4b%ad%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%1f%06%03%55%1d%23%04%18%30%16%80%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%71%5f%c5%e7%d0%3b%87%d7%29%57%09%f4%5a%96%4a%10%69%3b%f5%cf%78%52%f1%5c%3d%b7%06%94%84%27%de%69%92%5c%b7%42%36%c6%0e%bb%41%4a%36%01%b3%97%89%78%8d%b5%8f%4b%a4%ad%b0%53%21%9b%80%ea%7d%35%d2%4a%c3%e6%7d%93%a4%58%1e%31%17%ed%fb%5c%33%67%f9%bb%d7%b2%08%be%68%be%98%95%cb%e6%ff%30%21%af%d1%5e%f2%a3%74%fc%dc%b5%7b%9a%c5%44%9e%b7%77%ea%71%a7%ab%6c%f7%43%09%c2%cd%38%73%54%ab%bd%79%05%fc%f0%a1%ed%2c%c3%6f%07%57%15%74%2b%34%13%88%c3%4d%8c%0e%22%36%7f%64%31%25%c5%51%90%74%2b%85%37%dd%7b%51%92%8b%6f%c5%43%2f%da%ba%3c%f6%42%13%98%be%af%b1%c5%12%e3%36%f3%74%a9%d2%8b%87%1d%c1%f1%9e%bf%12%73%22%7b%00%02%c5%af%25%9b%a4%80%5c%2f%39%45%0c%7e%bd%1b%32%68%b6%f4%12%ae%8f%ce%48%a0%cf%53%be%7c%65%03%3b%65%02%e4%bd%12%7e%a5%fe%da%44%3b%8b%54%57%7f%79%42%3c%ad%68%fe%5f%9d%bb%84%b2%05%31%82%02%2c%30%82%02%28%02%01%01%30%1a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%a0%81%e4%30%18%06%09%2a%86%48%86%f7%0d%01%09%03%31%0b%06%09%2a%86%48%86%f7%0d%01%07%01%30%1c%06%09%2a%86%48%86%f7%0d%01%09%05%31%0f%17%0d%31%35%30%31%32%38%31%39%30%35%33%36%5a%30%2f%06%09%2a%86%48%86%f7%0d%01%09%04%31%22%04%20%4a%7f%39%10%ab%0c%ed%7b%df%0b%bb%bd%df%2a%95%e8%43%d2%d2%60%6d%5b%8b%07%c5%17%d2%d4%a4%bf%0e%7c%30%79%06%09%2a%86%48%86%f7%0d%01%09%0f%31%6c%30%6a%30%0b%06%09%60%86%48%01%65%03%04%01%2a%30%0b%06%09%60%86%48%01%65%03%04%01%16%30%0b%06%09%60%86%48%01%65%03%04%01%02%30%0a%06%08%2a%86%48%86%f7%0d%03%07%30%0e%06%08%2a%86%48%86%f7%0d%03%02%02%02%00%80%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%40%30%07%06%05%2b%0e%03%02%07%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%28%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%04%82%01%00%ad%df%22%c0%da%39%3a%16%ab%2a%1c%ab%a2%3e%a0%4c%7c%71%d4%1b%67%ba%9e%9a%20%1d%16%4c%87%94%85%72%b8%3b%e5%d4%b9%f4%2f%61%ed%d2%4b%7e%fc%6c%9e%11%c2%d7%91%85%f8%58%7d%d3%46%22%df%15%ac%af%c9%a8%a0%fb%53%fc%21%9b%2a%7d%60%b8%17%be%85%30%77%8b%b5%4f%1a%6e%68%60%ea%0f%cc%38%8b%21%b4%6a%b3%6a%c6%1f%26%35%41%e2%ee%35%37%83%32%90%5d%8a%16%77%58%ee%63%bc%f0%02%56%f6%6e%7f%94%7c%c9%d8%36%30%13%a6%e9%31%63%af%b9%14%3c%89%f6%f1%56%56%93%ea%2d%0b%9a%56%a4%95%ae%72%3c%79%bc%2a%19%ef%31%e7%17%68%06%a5%df%69%61%5e%35%84%be%02%a5%d5%f1%fb%32%1a%b9%8d%a5%ed%8e%c5%6e%64%f4%9e%eb%0e%b1%6b%a8%0b%62%97%3f%d4%43%47%18%4f%f8%e9%47%7f%2e%87%79%e3%47%08%d9%fb%fb%ee%39%e3%e4%de%a0%ed%5f%8f%32%87%31%39%a2%38%6c%3d%42%0b%43%3c%09%03%05%a5%01%b2%80%15%77%59%4c%e5%15%6e%17%ce%e1%be%9a%df%a1%59%c0%a5%e4%94%a7%4a%87%b5%ab%15%5c%2b%f0%72%1f%03%00%00%00%00%00%00%03%03%00%00%11%11%11%11%22%22%33%33%44%44%12%34%56%78%9a%bc%30%82%02%ef%30%82%01%d7%a0%03%02%01%02%02%09%00%88%ae%69%ee%3e%fa%5c%ae%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0e%31%0c%30%0a%06%03%55%04%03%0c%03%4b%45%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%32%31%5a%17%0d%34%31%30%32%32%34%31%37%33%35%32%31%5a%30%0e%31%0c%30%0a%06%03%55%04%03%0c%03%4b%45%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%ae%75%90%12%2a%c4%28%89%99%6c%64%4f%96%6d%d7%a2%aa%49%77%50%77%fe%21%1a%b0%77%09%5c%6c%72%7a%49%f5%0b%e5%99%70%8e%f9%61%5f%94%68%b7%29%74%4b%55%e9%f4%1a%4b%d4%a9%98%df%90%3f%c6%f7%ff%21%ff%1a%81%52%49%1e%bd%0a%34%30%3e%32%69%32%e7%89%5d%48%d8%03%19%fa%c6%bc%a7%22%08%f2%e7%61%88%71%65%b2%02%1b%af%b0%6f%21%2d%4f%1b%b3%2d%bf%ff%0f%62%72%62%a2%41%c2%0e%d5%20%91%c7%fb%da%cd%ba%16%dc%75%c0%d6%2a%f2%d8%40%59%1c%b8%cf%d7%b9%11%29%ba%9c%73%95%32%65%22%9e%8a%4b%3d%6d%78%77%3b%e4%ef%cf%6a%e5%f8%ad%ae%4e%18%e8%c8%a0%a4%bb%60%a0%a5%21%3d%01%3e%66%48%61%f5%17%7b%e5%b6%a5%50%e2%15%91%00%50%36%d1%21%3f%97%61%5b%8d%a4%6a%7a%e9%1b%3c%0e%e5%19%2e%5e%2a%0d%95%39%3d%40%6b%0f%a4%75%1d%bb%e5%68%ff%8b%9b%f9%a6%02%f6%97%f6%66%29%6b%9e%ca%28%dc%5d%aa%df%b4%1a%80%78%80%6c%25%65%d7%09%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%de%23%9f%c5%99%4c%7f%20%a1%77%6d%74%68%ee%f4%7d%94%e3%9b%37%30%1f%06%03%55%1d%23%04%18%30%16%80%14%de%23%9f%c5%99%4c%7f%20%a1%77%6d%74%68%ee%f4%7d%94%e3%9b%37%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%98%47%30%41%7b%37%8a%b9%ef%b9%2b%90%2f%68%09%cd%9c%91%b2%bf%ce%e8%29%4e%cc%f1%43%1f%2d%99%d0%45%03%89%3b%71%42%85%2b%84%07%99%82%40%75%36%f7%f4%c2%93%7d%67%29%ed%b5%a6%71%f4%3d%6a%56%f5%eb%1d%ce%9c%75%b4%14%98%77%8b%38%9c%ce%94%13%c9%96%a2%35%98%45%ac%fa%af%d7%85%56%ca%ac%b1%c3%49%d7%f4%a4%5b%ac%fc%32%54%73%bf%75%59%7a%57%e7%7f%ee%14%0d%0e%08%cd%48%b9%fc%b1%ce%0a%b3%26%8f%cb%b5%89%cc%a6%5d%0e%75%e8%48%fa%c5%61%b8%31%f3%47%dd%9d%86%c4%71%e8%ce%a3%4d%96%d8%5c%fb%d4%ea%49%19%40%61%f4%96%0c%f2%0e%aa%f4%5f%3b%4a%9c%fc%eb%67%6c%8e%19%b9%1e%46%64%59%b8%4e%55%45%36%f5%fe%30%24%92%04%bd%96%4f%7f%06%91%a9%3a%9e%59%e7%fc%fa%7a%fd%37%d0%88%eb%24%72%74%ba%f8%58%b2%91%ae%0a%45%7e%de%34%73%12%ab%85%f7%36%de%2b%4a%6c%16%26%df%1b%68%2c%38%aa%6b%db%4a%25%68%6d%67%b3%69%42%c4
-
-[ad] PK %b2%07%0b%1f%10%00%01%00%00%00%00%00%00%00%00%00%75%05%00%00%00%02%f1%0e%9d%d2%af%4a%df%68%ee%49%8a%a9%34%7d%37%56%65%a7%30%82%05%59%06%09%2a%86%48%86%f7%0d%01%07%02%a0%82%05%4a%30%82%05%46%02%01%01%31%0f%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%30%0b%06%09%2a%86%48%86%f7%0d%01%07%01%a0%82%02%f1%30%82%02%ed%30%82%01%d5%a0%03%02%01%02%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%33%33%5a%17%0d%34%31%30%32%32%34%31%37%33%35%33%33%5a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%b8%05%3e%db%dd%14%b4%b9%99%0b%94%3a%82%33%c7%ec%5e%d3%e9%2b%9f%20%10%1a%ff%d4%87%d7%a9%65%cb%5b%9f%f1%aa%0f%1f%c9%d4%da%a6%a3%cf%0e%5d%c3%02%64%3d%ad%27%9f%20%45%7d%58%9e%a4%c8%b3%ad%9f%df%95%9e%5d%ec%21%0e%80%99%2b%54%af%d9%ee%ab%fd%6d%a1%bd%a0%43%b7%5c%65%54%cb%fa%59%59%66%c2%57%12%b5%3c%e4%5a%b9%d9%c4%f8%3b%46%2c%42%12%6c%d0%4a%d4%ee%e8%0a%2d%1c%d0%eb%16%83%08%19%da%61%d5%9b%6f%70%37%f4%be%44%fa%ff%74%5c%c6%76%45%75%35%bc%0a%67%9d%05%ab%3b%51%28%0d%8d%25%45%95%f8%b9%0c%a4%28%15%65%97%87%6d%c0%e8%c0%ab%52%93%7e%4f%ea%07%6d%58%a5%2d%80%f6%bf%d6%e3%81%d8%53%ee%d0%1c%a7%7f%77%0c%97%37%18%51%2e%b1%2f%c9%19%e3%1b%be%b3%78%22%d4%17%e5%f1%7a%f2%ae%19%5a%3e%6b%f0%6c%01%fb%2f%b6%00%f6%82%ff%99%4f%49%a3%26%2c%58%32%e5%d2%c6%74%6c%3a%63%c0%76%79%bd%6e%c5%80%9a%4b%ad%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%1f%06%03%55%1d%23%04%18%30%16%80%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%71%5f%c5%e7%d0%3b%87%d7%29%57%09%f4%5a%96%4a%10%69%3b%f5%cf%78%52%f1%5c%3d%b7%06%94%84%27%de%69%92%5c%b7%42%36%c6%0e%bb%41%4a%36%01%b3%97%89%78%8d%b5%8f%4b%a4%ad%b0%53%21%9b%80%ea%7d%35%d2%4a%c3%e6%7d%93%a4%58%1e%31%17%ed%fb%5c%33%67%f9%bb%d7%b2%08%be%68%be%98%95%cb%e6%ff%30%21%af%d1%5e%f2%a3%74%fc%dc%b5%7b%9a%c5%44%9e%b7%77%ea%71%a7%ab%6c%f7%43%09%c2%cd%38%73%54%ab%bd%79%05%fc%f0%a1%ed%2c%c3%6f%07%57%15%74%2b%34%13%88%c3%4d%8c%0e%22%36%7f%64%31%25%c5%51%90%74%2b%85%37%dd%7b%51%92%8b%6f%c5%43%2f%da%ba%3c%f6%42%13%98%be%af%b1%c5%12%e3%36%f3%74%a9%d2%8b%87%1d%c1%f1%9e%bf%12%73%22%7b%00%02%c5%af%25%9b%a4%80%5c%2f%39%45%0c%7e%bd%1b%32%68%b6%f4%12%ae%8f%ce%48%a0%cf%53%be%7c%65%03%3b%65%02%e4%bd%12%7e%a5%fe%da%44%3b%8b%54%57%7f%79%42%3c%ad%68%fe%5f%9d%bb%84%b2%05%31%82%02%2c%30%82%02%28%02%01%01%30%1a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%a0%81%e4%30%18%06%09%2a%86%48%86%f7%0d%01%09%03%31%0b%06%09%2a%86%48%86%f7%0d%01%07%01%30%1c%06%09%2a%86%48%86%f7%0d%01%09%05%31%0f%17%0d%31%35%30%31%32%38%31%39%30%35%33%36%5a%30%2f%06%09%2a%86%48%86%f7%0d%01%09%04%31%22%04%20%a2%ae%56%06%77%2d%c9%e8%e0%6d%70%fa%4b%bf%b3%47%66%75%79%18%59%dd%83%b7%dc%ec%bc%4a%8d%73%fb%12%30%79%06%09%2a%86%48%86%f7%0d%01%09%0f%31%6c%30%6a%30%0b%06%09%60%86%48%01%65%03%04%01%2a%30%0b%06%09%60%86%48%01%65%03%04%01%16%30%0b%06%09%60%86%48%01%65%03%04%01%02%30%0a%06%08%2a%86%48%86%f7%0d%03%07%30%0e%06%08%2a%86%48%86%f7%0d%03%02%02%02%00%80%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%40%30%07%06%05%2b%0e%03%02%07%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%28%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%04%82%01%00%74%59%c2%7a%d2%e8%e7%14%b7%e2%85%98%6f%91%b2%c3%c5%aa%99%f2%0b%d2%d3%84%63%57%ee%a7%2e%0a%7a%6f%6c%b0%6f%ab%ea%ed%80%ee%7d%4a%27%8b%71%fd%d8%40%cf%dc%a5%bf%0a%14%f0%cd%1a%ce%78%7d%6d%74%46%0b%40%ec%23%03%07%1b%f9%f0%51%12%e3%a2%5f%98%e2%81%16%74%ed%24%7f%d1%72%92%c2%e5%f3%76%5c%ca%c4%f4%eb%0b%54%40%0d%6f%c4%92%40%e2%ca%0a%bc%47%4e%54%4b%db%28%56%2c%bf%63%08%d9%48%43%29%a1%29%76%9d%8a%f1%ca%d7%76%c5%89%77%68%03%22%b2%a2%46%a6%d4%94%40%cb%80%d2%d1%95%b6%0f%80%3d%98%21%c8%89%d0%fa%3e%e2%40%cd%f6%95%02%1b%c9%55%75%b3%c7%64%2a%fa%a3%bb%69%7c%b7%73%71%bc%ed%aa%08%93%42%53%fd%ec%07%55%06%83%4a%07%c7%3c%d1%cc%a6%9c%22%49%c9%32%e8%34%0d%5c%06%3b%d2%d9%58%d4%29%37%60%b9%f3%dd%50%a0%bf%6b%21%1c%02%bb%2c%f2%da%08%9c%24%5e%ce%8d%1b%7a%09%cf%6b%b9%80%cd%38%2b%44%2f%20%47%a1%59%c0%a5%e4%94%a7%4a%87%b5%ab%15%5c%2b%f0%72%1d%03%00%00%00%00%00%00%01%03%00%00%11%11%11%11%22%22%33%33%44%44%12%34%56%78%9a%bc%30%82%02%ed%30%82%01%d5%a0%03%02%01%02%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%33%33%5a%17%0d%34%31%30%32%32%34%31%37%33%35%33%33%5a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%b8%05%3e%db%dd%14%b4%b9%99%0b%94%3a%82%33%c7%ec%5e%d3%e9%2b%9f%20%10%1a%ff%d4%87%d7%a9%65%cb%5b%9f%f1%aa%0f%1f%c9%d4%da%a6%a3%cf%0e%5d%c3%02%64%3d%ad%27%9f%20%45%7d%58%9e%a4%c8%b3%ad%9f%df%95%9e%5d%ec%21%0e%80%99%2b%54%af%d9%ee%ab%fd%6d%a1%bd%a0%43%b7%5c%65%54%cb%fa%59%59%66%c2%57%12%b5%3c%e4%5a%b9%d9%c4%f8%3b%46%2c%42%12%6c%d0%4a%d4%ee%e8%0a%2d%1c%d0%eb%16%83%08%19%da%61%d5%9b%6f%70%37%f4%be%44%fa%ff%74%5c%c6%76%45%75%35%bc%0a%67%9d%05%ab%3b%51%28%0d%8d%25%45%95%f8%b9%0c%a4%28%15%65%97%87%6d%c0%e8%c0%ab%52%93%7e%4f%ea%07%6d%58%a5%2d%80%f6%bf%d6%e3%81%d8%53%ee%d0%1c%a7%7f%77%0c%97%37%18%51%2e%b1%2f%c9%19%e3%1b%be%b3%78%22%d4%17%e5%f1%7a%f2%ae%19%5a%3e%6b%f0%6c%01%fb%2f%b6%00%f6%82%ff%99%4f%49%a3%26%2c%58%32%e5%d2%c6%74%6c%3a%63%c0%76%79%bd%6e%c5%80%9a%4b%ad%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%1f%06%03%55%1d%23%04%18%30%16%80%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%71%5f%c5%e7%d0%3b%87%d7%29%57%09%f4%5a%96%4a%10%69%3b%f5%cf%78%52%f1%5c%3d%b7%06%94%84%27%de%69%92%5c%b7%42%36%c6%0e%bb%41%4a%36%01%b3%97%89%78%8d%b5%8f%4b%a4%ad%b0%53%21%9b%80%ea%7d%35%d2%4a%c3%e6%7d%93%a4%58%1e%31%17%ed%fb%5c%33%67%f9%bb%d7%b2%08%be%68%be%98%95%cb%e6%ff%30%21%af%d1%5e%f2%a3%74%fc%dc%b5%7b%9a%c5%44%9e%b7%77%ea%71%a7%ab%6c%f7%43%09%c2%cd%38%73%54%ab%bd%79%05%fc%f0%a1%ed%2c%c3%6f%07%57%15%74%2b%34%13%88%c3%4d%8c%0e%22%36%7f%64%31%25%c5%51%90%74%2b%85%37%dd%7b%51%92%8b%6f%c5%43%2f%da%ba%3c%f6%42%13%98%be%af%b1%c5%12%e3%36%f3%74%a9%d2%8b%87%1d%c1%f1%9e%bf%12%73%22%7b%00%02%c5%af%25%9b%a4%80%5c%2f%39%45%0c%7e%bd%1b%32%68%b6%f4%12%ae%8f%ce%48%a0%cf%53%be%7c%65%03%3b%65%02%e4%bd%12%7e%a5%fe%da%44%3b%8b%54%57%7f%79%42%3c%ad%68%fe%5f%9d%bb%84%b2%05
-
diff --git a/ecss_signtools/prereleasekeys/releasekey.pk8 b/ecss_signtools/prereleasekeys/releasekey.pk8
deleted file mode 100644
index 9db082d1f7a73a829c0f8a36e47a6d2069844520..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 125
zcmXr0W@2P8;AZ30YV&CO&dbQi$dbvD?&=&Itf-)ytl;kJ=@%bRlp2(plbTqZ8Xw{s
z91;)ZDCm|KD`b?E6ck(O>nG=@q!wqU=jj%gCF^D8m89nACFkerJEs<vWTs^%CzhlJ
XrxulECZ`%3>iZ^U=IJFC=T-m!2yZB+

diff --git a/ecss_signtools/prereleasekeys/releasekey.x509.pem b/ecss_signtools/prereleasekeys/releasekey.x509.pem
deleted file mode 100644
index 72be3a9..0000000
--- a/ecss_signtools/prereleasekeys/releasekey.x509.pem
+++ /dev/null
@@ -1,27 +0,0 @@
-subject=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Release Signer
-issuer=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Release Signer
------BEGIN CERTIFICATE-----
-MIIECTCCAvGgAwIBAgIQEjH0GMRA34tB1wbfaiig6zANBgkqhkiG9w0BAQsFADCB
-hDEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENs
-YXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxNjA0BgNVBAMTLUludGVsKFIp
-IEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBSZWxlYXNlIFNpZ25lcjAeFw0xNTAxMjcy
-MTM4NTBaFw00NTAxMjcyMTM4NTBaMIGEMRowGAYDVQQKExFJbnRlbCBDb3Jwb3Jh
-dGlvbjEUMBIGA1UEBxMLU2FudGEgQ2xhcmExCzAJBgNVBAgTAkNBMQswCQYDVQQG
-EwJVUzE2MDQGA1UEAxMtSW50ZWwoUikgR01JTiBQcmUtUmVsZWFzZSBURVNUIFJl
-bGVhc2UgU2lnbmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ExA
-pzRqN0JlGtyj32NFnp2trK9bH/DsseqTHCHNQs2Q1pbAvdbMzYPcK/mUCT7EMt4d
-G4xkoCXd+Kx0i3YBgGlsKdr8GV/pZGx9/Qf9BIvz1cK74NYJLHRh1WgP5Ys8MDB6
-P/0KGaXeH+K4ZRHdh6jzRfFzNmKUOTxMYut7d35agnO1htnWUc55MkVzhfaEtUxp
-hjqlLEw+OmwFkOOG+AyMjhLoHxVcS6UfQkQPX0FiR4b/YJRx5KoyfJe31OmGUMWx
-K15ZJ+l90JQiPWajZFx53z0Wb79y9nPOCxGmRnCRzPGxYTGtHAhoIwdKEBpid1f1
-MWwFqcsc3t/TG5/wCQIDAQABo3UwczALBgNVHQ8EBAMCAYYwEwYDVR0lBAwwCgYI
-KwYBBQUHAwMwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU+lxSjZV7YMmkBn56
-7b2nauj7i4QwHwYDVR0jBBgwFoAU+lxSjZV7YMmkBn567b2nauj7i4QwDQYJKoZI
-hvcNAQELBQADggEBADqf9ar/Ci+yrgCaGB3mIJGuKpiHr49jRCuG/wiBFvucDaMf
-7MuyGTvSVj+2962zftQ4kKhNEMKqgQj7BFKmUN+sh2BZ4I5b1kfu/degfaEgasmn
-FYRoRrefbHG1llsG/ivqxgfD6KosJITstPt+UajgE7lln4zqlZrOxnhfD85lNe+k
-ulSC3KMqTGsYRRMP0PNnkbQj2YDbX1KnGisoWPGHZqln1U+ninGYkDeEkqFQ47sO
-Ls3eHPTWNRoopVmXoIw1EkKrFZyN23kdCLW3SbNN+VpSDFJN76mlbYua0wQuL9YK
-PGeTr8Jivz8t52+tgwYKpryBYmUiN8+Z2T7/ZMs=
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/prereleasekeys/shared.pk8 b/ecss_signtools/prereleasekeys/shared.pk8
deleted file mode 100644
index 11ac147e5382aa12b1d9a3855b246120825cc04c..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 124
zcmXr0Vq#=4;AZ30YV&CO&dbQi$dbX5=IR_Atf-)ytl;kJ=@%bRlp2(plbTqZ8Xw{s
z91<U#kyw<PqM%z|tdLPsQc!HAub-Tsl3JXZo~K(}maLbVSCX2emz<xg@0?mxl9`s7
boLG_?oLW?tnVf2DsPCJYnWvXnoLd0^+axGC

diff --git a/ecss_signtools/prereleasekeys/shared.x509.pem b/ecss_signtools/prereleasekeys/shared.x509.pem
deleted file mode 100644
index d960dee..0000000
--- a/ecss_signtools/prereleasekeys/shared.x509.pem
+++ /dev/null
@@ -1,27 +0,0 @@
-subject=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Shared Signer
-issuer=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Shared Signer
------BEGIN CERTIFICATE-----
-MIIEBzCCAu+gAwIBAgIQdPkPbsL4L6NCmstwoNKo/DANBgkqhkiG9w0BAQsFADCB
-gzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENs
-YXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxNTAzBgNVBAMTLEludGVsKFIp
-IEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBTaGFyZWQgU2lnbmVyMB4XDTE1MDEyNzIx
-NDg1OFoXDTQ1MDEyNzIxNDg1OFowgYMxGjAYBgNVBAoTEUludGVsIENvcnBvcmF0
-aW9uMRQwEgYDVQQHEwtTYW50YSBDbGFyYTELMAkGA1UECBMCQ0ExCzAJBgNVBAYT
-AlVTMTUwMwYDVQQDEyxJbnRlbChSKSBHTUlOIFByZS1SZWxlYXNlIFRFU1QgU2hh
-cmVkIFNpZ25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMPRzLoa
-rNzh1MXxzRQrK+TfRkwLIXC2DJeJut7HvWUIqpCorLKwDYzXiGWwC3/Rf4p8DpWr
-04qhD8sC/4fcd8JHPI5n+i79eVehXHTTtZc/FaLdsXJwlW7lcedUwAp8Iy451irL
-adCpJbk+e9wC9OmWhdZzPnucTPJjue1BAcVHToaTHCCNlZLT8tLgN+J/cY4INVTd
-j42B9Ge1XKCjkNREyFO4BmbzBTgMNqiwDRzEkt+uE6mc/Gjp6T1jKcQJFPvuf8S1
-MW1ValJqbhaFDmq23MkGyLGFBaMPuFuTZru0fBWiO+9auOgHtcPZWXw26EKHYm8Z
-VWtiMacUtAW6dhkCAwEAAaN1MHMwCwYDVR0PBAQDAgGGMBMGA1UdJQQMMAoGCCsG
-AQUFBwMDMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFFnl742ah8bl+YgsU6rw
-apxF8uzXMB8GA1UdIwQYMBaAFFnl742ah8bl+YgsU6rwapxF8uzXMA0GCSqGSIb3
-DQEBCwUAA4IBAQBf8ODWAL4773o7eLczfmDOUFjnJJmhUPuibU3IdZGNQRTy/bcU
-ZNezsKWqmNqLai76fk5B75JdVF/VWzh94pK9SlQL5l654qD8ISA7PpOpzPN8nX+0
-obzQcgiFrU5IJYS70sjzHwf05e6VSzraN3gbAnnSVrcTf9HcfNgoopj0ZxFgHSrT
-QCT1Zauhm7+gAyWaPojovcnl3o96BClZXrE5INMJPrqsQuXWc7IKCdhl3QYbQZZk
-S7c05hqZv4tE4wXLeyE4wq2XDNyGa/k4K045dSfTN0YULsbWRispaWf3X1m/Fcpt
-zDSEak5ouJcWhGzKephcAiQqNOQVoHFU4Rc9
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/prereleasekeys/telemetry_consent.pk8 b/ecss_signtools/prereleasekeys/telemetry_consent.pk8
deleted file mode 100644
index b4a5f944f7eb415a672f91d7834a282c437d1568..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 136
zcmWN^u?oU45CBjkMG)~H;wmJmxVe_14iz!oLr6~zw29`9s-uJbWmkRM%io_d8|Aaf
zbUEyX@0>A~VRkPItruK4zOD8Lb4+l87A%6POI@4#pAIO!Oc4V@ATA!ruS7T8DCJ@U
k=r2KF@1zd|t#q+d1tjuk?<|3a)O!c(m8z@{(qi}g0WIe(cmMzZ

diff --git a/ecss_signtools/prereleasekeys/telemetry_consent.x509.pem b/ecss_signtools/prereleasekeys/telemetry_consent.x509.pem
deleted file mode 100644
index e7d474d..0000000
--- a/ecss_signtools/prereleasekeys/telemetry_consent.x509.pem
+++ /dev/null
@@ -1,28 +0,0 @@
-subject=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Telemetry Consent Signer
-issuer=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Telemetry Consent Signer
------BEGIN CERTIFICATE-----
-MIIEHTCCAwWgAwIBAgIQIobA892RHKZG4yEMmS2mjTANBgkqhkiG9w0BAQsFADCB
-jjEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENs
-YXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxQDA+BgNVBAMTN0ludGVsKFIp
-IEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBUZWxlbWV0cnkgQ29uc2VudCBTaWduZXIw
-HhcNMTUwMzEwMjI1MzIxWhcNNDUwMzEwMjI1MzIxWjCBjjEaMBgGA1UEChMRSW50
-ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENsYXJhMQswCQYDVQQIEwJD
-QTELMAkGA1UEBhMCVVMxQDA+BgNVBAMTN0ludGVsKFIpIEdNSU4gUHJlLVJlbGVh
-c2UgVEVTVCBUZWxlbWV0cnkgQ29uc2VudCBTaWduZXIwggEiMA0GCSqGSIb3DQEB
-AQUAA4IBDwAwggEKAoIBAQDksnqDVy6K4gKe0AtdBJE+dWq2PvF6wUJdVsqiQerm
-UtuxqW2BCLzof68FpfY1ymK542bQpWS3PJN42FDDzj5dlIqE7ZhXwl2mus/yrp9S
-u53j6ElZN3gdAcBtsCPyzzO9MixGYEHY8P8/dufx5U3esyKNLPwt2Ej9zyrqUMWc
-MsGkEDfbf8p1B/wMK5+sIZyQNrCYPXErKoW7Z9+S+/zf99HdddlIB9ksv/zUTSbM
-I3xBeqoSpHeZHmELOAHnu3vREYwvKBxH6RoSNUrVegVoEdRZRwgFpYLqlky9GHlU
-FyjvzpZJjcepXko4/VXLROxxdKz71ANOqdYszxHWCQe1AgMBAAGjdTBzMAsGA1Ud
-DwQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDAzAPBgNVHRMBAf8EBTADAQH/MB0G
-A1UdDgQWBBQ0puL5ALIONUL+uF3hcGRL9PLOtDAfBgNVHSMEGDAWgBQ0puL5ALIO
-NUL+uF3hcGRL9PLOtDANBgkqhkiG9w0BAQsFAAOCAQEAHIuz71Du9eTFbCvv6xvw
-CMxZyiHQ9jv/SloyUdlwjFH9BJcFX8BGk3pyO7e3kx9nDC5nTw48Qri7d8v7rw6Q
-v++ZgdjGKhPQWOSI4RiEurRbFNRCVPgYkWQPDopvlVIoIz4AqMeXfQvSyM+pYWFM
-u8i+oOa/dE9cyvP3ZivpEMZb2rMVHVgdGDGaB8VVm5S7Wj2HdlQG1qiQzrVMltH8
-oU8FTNFkMY4LFnJ1lI49lRElsPV4kXOmlhHNFLqLjhwKUwVM9jOEg6h+nlN7obvp
-0rW+3NxBnk51Jp9FjloL6yXu1FNX4Mqm+GxMY746A9gBid9mBv05xBBQad3CMWiz
-WA==
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/prereleasekeys/verity.pk8 b/ecss_signtools/prereleasekeys/verity.pk8
deleted file mode 100644
index e259902c1a3c6200e4e18d2e2c33a6cb46d25a93..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 124
zcmXr0Vq#=4;AZ30YV&CO&dbQi$dbX5=IR_Atf-)ytl;kJ=@%bRlp2(plbTqZ8Xw{s
z91<UvT9jE*si0e4tdLPsQc!HAub-Tsl3JXZo~K(}maLbVSCX2emz<xg@0?mxl9`s7
boLG_?oLW?tnVf2DsPCJYnWvXnoLd0^=G!P`

diff --git a/ecss_signtools/prereleasekeys/verity.x509.pem b/ecss_signtools/prereleasekeys/verity.x509.pem
deleted file mode 100644
index ddcc07e..0000000
--- a/ecss_signtools/prereleasekeys/verity.x509.pem
+++ /dev/null
@@ -1,27 +0,0 @@
-subject=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Verity Signer
-issuer=/O=Intel Corporation/L=Santa Clara/ST=CA/C=US/CN=Intel(R) GMIN Pre-Release TEST Verity Signer
------BEGIN CERTIFICATE-----
-MIIEBzCCAu+gAwIBAgIQRvOuYhNWNKJLGE2cKGg6ljANBgkqhkiG9w0BAQsFADCB
-gzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1NhbnRhIENs
-YXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxNTAzBgNVBAMTLEludGVsKFIp
-IEdNSU4gUHJlLVJlbGVhc2UgVEVTVCBWZXJpdHkgU2lnbmVyMB4XDTE1MDEyNzIx
-NTgwNVoXDTQ1MDEyNzIxNTgwNVowgYMxGjAYBgNVBAoTEUludGVsIENvcnBvcmF0
-aW9uMRQwEgYDVQQHEwtTYW50YSBDbGFyYTELMAkGA1UECBMCQ0ExCzAJBgNVBAYT
-AlVTMTUwMwYDVQQDEyxJbnRlbChSKSBHTUlOIFByZS1SZWxlYXNlIFRFU1QgVmVy
-aXR5IFNpZ25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQHhouX
-MF8HY691iFoSyEZZtAsOLtpo20CdERaiA9S3HfmR/KOUBlAapFWzzEk8OP2vsgWM
-679ATNdoe9DuHajcOT0mg+Smq77pkaRnh4UroPaFUMXo3g/rf10nYBUfBR8i/vfa
-25qvUyDazADvk7TbPRn6PrUTKWJ7/zgVmOQ3OTNdzAMRNpT7qxAs1NH43Rt45Yl7
-MW1koA76e/lRLBTc9G6CVWclSDHbAfoy/eRGZd1yAJavBwB6Bi6DX7MCp4zT40es
-cHOhkWTO9ozE24JfJYL51cLQHk9paK8kac63z8xfuWNpFAA7JQG4rfFNe+OIl/XT
-hUnsx9LvUdbPt20CAwEAAaN1MHMwCwYDVR0PBAQDAgGGMBMGA1UdJQQMMAoGCCsG
-AQUFBwMDMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFLuIULg5sDEwlSD4LglP
-nmGItgiEMB8GA1UdIwQYMBaAFLuIULg5sDEwlSD4LglPnmGItgiEMA0GCSqGSIb3
-DQEBCwUAA4IBAQCDh0umEbvBx7rmYgdhFvQ4/MXmq3JcU+jLNbK5I1xysI4qvYm6
-kXYdsahtcxM683YSYB9L6ZVGjwaDVSUV5QZ3YzF4LGhUwf9ViCWO077Srn/8Nlki
-uiqPoy0F2tn7E/oyUrSOevzjBISDyAGE3hAHFqqOBxxQx14CdjR6gN7xbi+oCAwF
-Kk38A6jRAlAW0gbsLmnmoscxiglvJEDwxiUmpn66f/SJah+gt1zQFEgkJaus77eL
-wSL6T48H0Ur4SStjB2ELNNbmwB7GeuBlFMwLC2jZH3/9QS9TdHByOw4QtZOVqeFN
-ID6bbiNr/obhFwd5oTUUu+Ow09sESShO/Sl6
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/prereleasekeys/verity_key b/ecss_signtools/prereleasekeys/verity_key
deleted file mode 100644
index ae0c9b3f562333ef834aaaa869f8334659f145ad..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 524
zcmV+n0`vVq0001+74Wcax6js5@6yNYNrlt(mx$wgP4TU`0VO*C6lr6*U(C<9&S@mC
zXlYL#(8AUEf+b&q+r*6a&Sa6Hb8xIj<I{|%0<&L(E(Ur42d|a@a@}P{<oz=G0oyT1
zC1+KFZuHy~EK&J;`VOFEZ83X^<#-$2_|eoX5Ucx?HW35NT{Ag1<d_vW|9fI76SY42
z89m#ylkWh`+8|S}n%mm<{vsa*9~EFHU4QEj-sr_ph4!E;g@<RPk?FpxrsRVrJvrQ{
z9q!P3XxB_Yzw3+zvakI(JW0&6RiqkF29%@xk@+3B)B~ax5uHHWXxc6g3$$5A$P!wJ
zb+2OwUoe-8h6kjW+6Bm&Z)!A3k;p!JvbgP2idNC0qQzru68_4xgQu@srok7c^F@Q%
zl;Mk}N3p+6oTecD(snZ;tT5Ix!cl1`W$U;c+$DbFH7nLf*eAkTkS`HA`OpFKibJRd
z1YnhY^_<NrL=Ccxh8PvaVcv7aYOL!?&S~m-A5Gaylc>Z_pgQ6gBvuVib>d?;pR}Fr
ztX-uTCXR^T{eb{AN}aS6CDV$o#~+T3Jw5z|-@FfwdSO<oreuSE<f3Etg~Pe#ySfo!
z>iGsNK-av<5N=8;Cq{(wZ#<F0&R0Frc?tglujCjU(P0&#U+lBL0#H*N<|hH-o#k(|
OxK3k*yM>qm0096LwgsL5

diff --git a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/ECSSRSAPrivateKey.java b/ecss_signtools/provider/src/com/intel/ecss/jce/provider/ECSSRSAPrivateKey.java
deleted file mode 100644
index aefbcab..0000000
--- a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/ECSSRSAPrivateKey.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/**
- *
- */
-package com.intel.ecss.jce.provider;
-
-import java.util.List;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.math.BigInteger;
-import java.security.PrivateKey;
-import java.security.spec.InvalidKeySpecException;
-
-/**
- * @author mdwood
- *
- */
-public final class ECSSRSAPrivateKey implements PrivateKey {
-	private List<String> params = null;
-
-	public List<String> getKeyParams() {
-		return params;
-	}
-
-	/**
-	 *
-	 */
-	public ECSSRSAPrivateKey(String paramsString)
-			throws InvalidKeySpecException {
-		if (!paramsString.startsWith("ECSS! ")) {
-			throw new InvalidKeySpecException("Key parameters are not an ECSS key reference");
-		}
-
-		params = new ArrayList<String>(Arrays.asList(paramsString.split("\\s+", 0)));
-		params.remove(0);
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.Key#getAlgorithm()
-	 */
-	@Override
-	public String getAlgorithm() {
-		//System.err.println(getClass().getName() + " getAlgorithm");
-		return "RSA";
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.Key#getEncoded()
-	 */
-	@Override
-	public byte[] getEncoded() {
-		System.err.println(getClass().getName() + " getEncoded");
-		return null;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.Key#getFormat()
-	 */
-	@Override
-	public String getFormat() {
-		System.err.println(getClass().getName() + " getFormat");
-		return null;
-	}
-
-}
diff --git a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/ECSSRSAService.java b/ecss_signtools/provider/src/com/intel/ecss/jce/provider/ECSSRSAService.java
deleted file mode 100644
index def20f7..0000000
--- a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/ECSSRSAService.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- *
- */
-package com.intel.ecss.jce.provider;
-
-import java.security.Provider;
-import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
-
-/**
- * @author mdwood
- *
- */
-class ECSSRSAService extends Provider.Service {
-
-	/**
-	 */
-	public ECSSRSAService(Provider provider, String type, String algorithm, String className) {
-		super(provider, type, algorithm, className, null, null);
-	}
-
-	@Override
-	public boolean supportsParameter(Object obj) {
-		//System.err.println(getClass().getName() + " supportsParameter");
-		if (obj instanceof ECSSRSAPrivateKey) {
-			return true;
-		}
-
-		return false;
-	}
-
-}
diff --git a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/IntelECSSProvider.java b/ecss_signtools/provider/src/com/intel/ecss/jce/provider/IntelECSSProvider.java
deleted file mode 100644
index 9acf94a..0000000
--- a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/IntelECSSProvider.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
- *
- */
-package com.intel.ecss.jce.provider;
-
-import java.security.Provider;
-import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
-
-/**
- * @author mdwood
- *
- */
-public final class IntelECSSProvider extends Provider {
-
-	/**
-	 */
-	public IntelECSSProvider() {
-		super("IntelECSS", 1.0, "Abstraction of Intel(R) IT Enterprise Code Signing System");
-
-		putService(new ECSSRSAService(this, "Signature", "SHA1withRSA", "com.intel.ecss.jce.provider.SHA1withRSA"));
-		putService(new ECSSRSAService(this, "Signature", "SHA256withRSA", "com.intel.ecss.jce.provider.SHA256withRSA"));
-		putService(new Service(this, "KeyFactory", "RSA", "com.intel.ecss.jce.provider.RSAKeyFactory", null, null));
-		putService(new Service(this, "KeyFactory", PKCSObjectIdentifiers.rsaEncryption.getId(), "com.intel.ecss.jce.provider.RSAKeyFactory", null, null));
-	}
-
-}
diff --git a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/IntelECSSProviderParams.java b/ecss_signtools/provider/src/com/intel/ecss/jce/provider/IntelECSSProviderParams.java
deleted file mode 100644
index 1663929..0000000
--- a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/IntelECSSProviderParams.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.intel.ecss.jce.provider;
-
-import java.io.File;
-import java.security.ProviderException;
-
-class IntelECSSProviderParams {
-	static final String SIGNFILE_PATH_ENV = "SIGNFILE_PATH";
-	static final String SIGNFILE_BIN = "SignFile";
-	static final int MAX_SIGNATURE_SIZE = 4096;
-
-
-	static void checkEnvironmentConfiguration() {
-		String signfilePathEnv = System.getenv(IntelECSSProviderParams.SIGNFILE_PATH_ENV);
-		if (signfilePathEnv == null) {
-			throw new ProviderException("Must set SIGNFILE_PATH environment variable");
-		}
-		File signfilePath = new File(signfilePathEnv);
-		File signfileExe = new File(signfilePath, IntelECSSProviderParams.SIGNFILE_BIN);
-		if (!signfileExe.exists() || !signfileExe.canExecute()) {
-			throw new ProviderException("File " + signfileExe.getAbsolutePath() + " does not exist or is not executable");
-		}
-	}
-}
diff --git a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/RSA.java b/ecss_signtools/provider/src/com/intel/ecss/jce/provider/RSA.java
deleted file mode 100644
index f36c0db..0000000
--- a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/RSA.java
+++ /dev/null
@@ -1,278 +0,0 @@
-/**
- *
- */
-package com.intel.ecss.jce.provider;
-
-import java.io.BufferedOutputStream;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.UnsupportedEncodingException;
-import java.io.FileNotFoundException;
-import java.security.InvalidKeyException;
-import java.security.InvalidParameterException;
-import java.security.NoSuchAlgorithmException;
-import java.security.ProviderException;
-import java.security.PrivateKey;
-import java.security.PublicKey;
-import java.security.SignatureException;
-import java.security.SignatureSpi;
-import java.security.MessageDigest;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Arrays;
-
-/**
- * @author mdwood
- *
- */
-class RSA extends SignatureSpi {
-	private ECSSRSAPrivateKey key;
-	private String ecssHashType;
-	private String ecssPadType;
-	private String jcaHashType;
-	private boolean signOp;
-	private MessageDigest contentDigest;
-
-	/**
-	 *
-	 */
-	protected RSA(String alg) {
-		super();
-
-		if (alg == "SHA1withRSA") {
-			ecssHashType = "SHA1";
-			jcaHashType = "SHA-1";
-			ecssPadType = "PKCS1";
-		}
-		else if (alg == "SHA256withRSA") {
-			ecssHashType = "SHA256";
-			jcaHashType = "SHA-256";
-			ecssPadType = "PKCS1";
-		}
-		else {
-			System.err.println("!!!!!!!!!! Subclass trying to use an algorithm I don't know! !!!!!!!!!!");
-		}
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.SignatureSpi#engineGetParameter(java.lang.String)
-	 * @deprecated
-	 * This method must be overridden because java.security.SignatureSpi is
-	 * abstract, but @Deprecated annotation required to prevent compiler
-	 * warnings about overriding deprecated methods.
-	 */
-	@Override
-	@Deprecated
-	protected Object engineGetParameter(String arg0)
-			throws InvalidParameterException {
-		System.err.println(getClass().getName() + " engineGetParameter");
-		return null;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.SignatureSpi#engineSetParameter(java.lang.String, java.lang.Object)
-	 * @deprecated
-	 * This method must be overridden because java.security.SignatureSpi is
-	 * abstract, but @Deprecated annotation required to prevent compiler
-	 * warnings about overriding deprecated methods.
-	 */
-	@Override
-	@Deprecated
-	protected void engineSetParameter(String arg0, Object arg1)
-			throws InvalidParameterException {
-		System.err.println(getClass().getName() + " engineSetParameter");
-
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.SignatureSpi#engineInitSign(java.security.PrivateKey)
-	 */
-	@Override
-	protected void engineInitSign(PrivateKey signer) throws InvalidKeyException {
-		//System.err.println(getClass().getName() + " engineInitSign");
-		if (!(signer instanceof ECSSRSAPrivateKey)) {
-			throw new InvalidKeyException("The key must be an ECSS RSA PrivateKey");
-		}
-
-		// Create temp file for content
-		try {
-			contentDigest = MessageDigest.getInstance(jcaHashType);
-		}
-		catch (NoSuchAlgorithmException e) {
-			contentDigest = null;
-			throw new ProviderException("Cannot create message digest instance");
-		}
-
-		key = (ECSSRSAPrivateKey)signer;
-		signOp = true;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.SignatureSpi#engineSign()
-	 */
-	@Override
-	protected byte[] engineSign() throws SignatureException {
-		byte[] sig = null;
-
-		if (contentDigest != null && signOp) {
-			byte [] sigDigest = contentDigest.digest();
-
-			sig = signFile(sigDigest);
-		}
-		else {
-			throw new SignatureException("Signature not initialized or initialized for verify");
-		}
-
-		// Clear state
-		key = null;
-		contentDigest = null;
-
-		return sig;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.SignatureSpi#engineInitVerify(java.security.PublicKey)
-	 */
-	@Override
-	protected void engineInitVerify(PublicKey arg0) throws InvalidKeyException {
-		System.err.println(getClass().getName() + " engineInitVerify");
-
-		throw new InvalidKeyException("engineInitVerify not implemented");
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.SignatureSpi#engineVerify(byte[])
-	 */
-	@Override
-	protected boolean engineVerify(byte[] arg0) throws SignatureException {
-		System.err.println(getClass().getName() + " engineVerify");
-		return false;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.SignatureSpi#engineUpdate(byte)
-	 */
-	@Override
-	protected void engineUpdate(byte arg0) throws SignatureException {
-		if (contentDigest != null) {
-			contentDigest.update(arg0);
-		}
-		else {
-			throw new SignatureException("Signature not initialized");
-		}
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.SignatureSpi#engineUpdate(byte[], int, int)
-	 */
-	@Override
-	protected void engineUpdate(byte[] arg0, int arg1, int arg2)
-			throws SignatureException {
-		if (contentDigest != null) {
-			contentDigest.update(arg0, arg1, arg2);
-		}
-		else {
-			throw new SignatureException("Signature not initialized");
-		}
-
-	}
-
-	private byte[] signFile(
-			byte[] sigDigest) throws SignatureException {
-
-		IntelECSSProviderParams.checkEnvironmentConfiguration();
-
-		File signFileDir = new File(System.getenv(IntelECSSProviderParams.SIGNFILE_PATH_ENV));
-		File signFile = new File(signFileDir, IntelECSSProviderParams.SIGNFILE_BIN);
-		File sigDigestTemp;
-		File sigTemp;
-
-		try {
-			sigDigestTemp = File.createTempFile("content", "");
-			sigDigestTemp.deleteOnExit();
-			sigTemp = File.createTempFile("sig", "");
-			sigTemp.deleteOnExit();
-
-			try (FileOutputStream sigDigestStream = new FileOutputStream(sigDigestTemp.getAbsolutePath())) {
-				sigDigestStream.write(sigDigest);
-				sigDigestStream.close();
-			}
-		} catch (FileNotFoundException e) {
-			throw new SignatureException("File error creating temp files");
-		} catch (IOException e) {
-			throw new SignatureException("Error managing temp files");
-		}
-
-		List<String> commandLine = new LinkedList<String>();
-		commandLine.add(signFile.getAbsolutePath());
-		commandLine.add(sigDigestTemp.getAbsolutePath());
-		commandLine.add("-vv");
-		commandLine.add("-s"); commandLine.add("h");	// input is a computed hash
-		commandLine.add("-ha"); commandLine.add(ecssHashType);	// hash type to use
-		commandLine.add("-rsa_padding"); commandLine.add(ecssPadType); // RSA padding type
-		commandLine.addAll(key.getKeyParams());	// ECSS certificate name and server params
-		commandLine.add("-out"); commandLine.add(sigTemp.getAbsolutePath());
-
-		StringBuilder redirectMsg = new StringBuilder("    redirecting: ");
-		for (Iterator<String> iterator = commandLine.iterator();
-			 iterator.hasNext();
-			 redirectMsg.append(iterator.next()), redirectMsg.append(" "));
-		System.err.println(redirectMsg);
-
-		ProcessBuilder pb = new ProcessBuilder(commandLine);
-		pb.redirectErrorStream(true);
-		pb.directory(signFileDir);
-		try {
-			Process process = pb.start();
-			int status = process.waitFor();
-			try (BufferedReader stdout = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
-				while (stdout.ready()) {
-					System.err.println(stdout.readLine());
-				}
-				if (status != 0) {
-					throw new SignatureException("SignFile failed: " + status);
-				}
-			}
-		} catch (IOException e) {
-			throw new SignatureException("Something went wrong in starting process or "
-					+ "reading from it");
-		} catch (java.lang.InterruptedException e) {
-			Thread.currentThread().interrupt();
-			throw new SignatureException("Something went wrong in starting process");
-		}
-
-		// Read signature
-		/* The signature block has the following format:
-		 * public key modulus : key length bytes (little-endian)
-		 * public exponent : 4 bytes (little-endian)
-		 * signature : key length bytes (little-endian)
-		 */
-		try {
-			try (InputStream sigStream = new FileInputStream(sigTemp.getAbsolutePath())) {
-				byte[] sigBytes = new byte[(IntelECSSProviderParams.MAX_SIGNATURE_SIZE / 8) * 2 + 4];
-				int sigBytesLen = sigStream.read(sigBytes);
-				if (((sigBytesLen - 4) % 128) != 0) {
-					throw new SignatureException("Invalid signature result length. Must be a multiple of 1024 bits");
-				}
-				int sigLen = (sigBytesLen - 4) / 2;
-				byte[] returnVal = new byte[sigLen];
-				for (int i = 0; i < returnVal.length; i++) {
-					returnVal[i] = sigBytes[sigBytesLen - 1 - i];
-				}
-				return returnVal;
-			}
-		} catch (FileNotFoundException e) {
-			throw new SignatureException("Signature block not written by SignFile");
-		} catch (IOException e) {
-			throw new SignatureException("Problem reading ECSS signature block");
-		}
-	}
-}
diff --git a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/RSAKeyFactory.java b/ecss_signtools/provider/src/com/intel/ecss/jce/provider/RSAKeyFactory.java
deleted file mode 100644
index 5adc7e8..0000000
--- a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/RSAKeyFactory.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/**
- *
- */
-package com.intel.ecss.jce.provider;
-
-import java.lang.Thread;
-
-import java.io.UnsupportedEncodingException;
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-
-import java.security.InvalidKeyException;
-import java.security.Key;
-import java.security.KeyFactory;
-import java.security.KeyFactorySpi;
-import java.security.PrivateKey;
-import java.security.PublicKey;
-import java.security.spec.InvalidKeySpecException;
-import java.security.spec.KeySpec;
-import java.security.spec.PKCS8EncodedKeySpec;
-import java.security.NoSuchAlgorithmException;
-
-import org.bouncycastle.asn1.ASN1InputStream;
-import org.bouncycastle.asn1.ASN1Encodable;
-import org.bouncycastle.asn1.DEROctetString;
-import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
-import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
-
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
-
-/**
- * @author mdwood
- *
- */
-public final class RSAKeyFactory extends KeyFactorySpi {
-
-	/**
-	 *
-	 */
-	public RSAKeyFactory() {
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.KeyFactorySpi#engineGeneratePrivate(java.security.spec.KeySpec)
-	 */
-	@Override
-	protected PrivateKey engineGeneratePrivate(KeySpec spec)
-			throws InvalidKeySpecException {
-		//System.err.println(getClass().getName() + " engineGeneratePrivate");
-		if (!(spec instanceof PKCS8EncodedKeySpec)) {
-			throw new InvalidKeySpecException();
-		}
-		PKCS8EncodedKeySpec pkcs8Spec = (PKCS8EncodedKeySpec)spec;
-		String keyName;
-		try {
-			ASN1InputStream asn1is = new ASN1InputStream(new ByteArrayInputStream(pkcs8Spec.getEncoded()));
-			PrivateKeyInfo pki = PrivateKeyInfo.getInstance(asn1is.readObject());
-			if (!pki.getPrivateKeyAlgorithm().getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption)) {
-				throw new InvalidKeySpecException("Algorithm not supported");
-			}
-
-			DEROctetString privKey = (DEROctetString)pki.parsePrivateKey();
-			keyName = new String(privKey.getOctets(), "UTF-8");
-			if (!keyName.startsWith("ECSS! ")) {
-				throw new InvalidKeySpecException("PKCS #8 content not an ECSS reference");
-			}
-		}
-		catch (UnsupportedEncodingException e) {
-			throw new InvalidKeySpecException("Key name is not a UTF-8 string");
-		}
-		catch (IOException e) {
-			throw new InvalidKeySpecException("Data too short");
-		}
-
-		return new ECSSRSAPrivateKey(keyName);
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.KeyFactorySpi#engineGeneratePublic(java.security.spec.KeySpec)
-	 */
-	@Override
-	protected PublicKey engineGeneratePublic(KeySpec spec)
-			throws InvalidKeySpecException {
-		// No public key implementation in this provider, so proxy to BouncyCastle.
-		KeyFactory bckf;
-		try {
-			bckf = KeyFactory.getInstance("RSA", new BouncyCastleProvider());
-		}
-		catch (NoSuchAlgorithmException e) {
-			throw new InvalidKeySpecException(e.getMessage());
-		}
-		return bckf.generatePublic(spec);
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.KeyFactorySpi#engineGetKeySpec(java.security.Key, java.lang.Class)
-	 */
-	@Override
-	protected <T extends KeySpec> T engineGetKeySpec(Key arg0, Class<T> arg1)
-			throws InvalidKeySpecException {
-		System.err.println(getClass().getName() + " engineGetKeySpec");
-		return null;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.security.KeyFactorySpi#engineTranslateKey(java.security.Key)
-	 */
-	@Override
-	protected Key engineTranslateKey(Key arg0) throws InvalidKeyException {
-		System.err.println(getClass().getName() + " engineTranslateKey");
-		return null;
-	}
-
-}
diff --git a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/SHA1withRSA.java b/ecss_signtools/provider/src/com/intel/ecss/jce/provider/SHA1withRSA.java
deleted file mode 100644
index 477cc8d..0000000
--- a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/SHA1withRSA.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.intel.ecss.jce.provider;
-
-public final class SHA1withRSA extends com.intel.ecss.jce.provider.RSA {
-	public SHA1withRSA() {
-		super("SHA1withRSA");
-	}
-}
diff --git a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/SHA256withRSA.java b/ecss_signtools/provider/src/com/intel/ecss/jce/provider/SHA256withRSA.java
deleted file mode 100644
index 5ffc0d6..0000000
--- a/ecss_signtools/provider/src/com/intel/ecss/jce/provider/SHA256withRSA.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.intel.ecss.jce.provider;
-
-public final class SHA256withRSA extends com.intel.ecss.jce.provider.RSA {
-	public SHA256withRSA() {
-		super("SHA256withRSA");
-	}
-}
diff --git a/ecss_signtools/signapk/SignApk.java b/ecss_signtools/signapk/SignApk.java
deleted file mode 100644
index c0e0775..0000000
--- a/ecss_signtools/signapk/SignApk.java
+++ /dev/null
@@ -1,972 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.signapk;
-
-import org.bouncycastle.asn1.ASN1InputStream;
-import org.bouncycastle.asn1.ASN1ObjectIdentifier;
-import org.bouncycastle.asn1.DEROutputStream;
-import org.bouncycastle.asn1.cms.CMSObjectIdentifiers;
-import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
-import org.bouncycastle.cert.jcajce.JcaCertStore;
-import org.bouncycastle.cms.CMSException;
-import org.bouncycastle.cms.CMSProcessableByteArray;
-import org.bouncycastle.cms.CMSSignedData;
-import org.bouncycastle.cms.CMSSignedDataGenerator;
-import org.bouncycastle.cms.CMSTypedData;
-import org.bouncycastle.cms.jcajce.JcaSignerInfoGeneratorBuilder;
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
-import org.bouncycastle.operator.ContentSigner;
-import org.bouncycastle.operator.OperatorCreationException;
-import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
-import org.bouncycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder;
-import org.bouncycastle.util.encoders.Base64;
-
-import java.io.Console;
-import java.io.BufferedReader;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.FilterOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.PrintStream;
-import java.lang.reflect.Constructor;
-import java.security.DigestOutputStream;
-import java.security.GeneralSecurityException;
-import java.security.Key;
-import java.security.KeyFactory;
-import java.security.MessageDigest;
-import java.security.PrivateKey;
-import java.security.Provider;
-import java.security.Security;
-import java.security.cert.CertificateEncodingException;
-import java.security.cert.CertificateFactory;
-import java.security.cert.X509Certificate;
-import java.security.spec.InvalidKeySpecException;
-import java.security.spec.PKCS8EncodedKeySpec;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.Locale;
-import java.util.Map;
-import java.util.TreeMap;
-import java.util.jar.Attributes;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
-import java.util.jar.JarOutputStream;
-import java.util.jar.Manifest;
-import java.util.regex.Pattern;
-import javax.crypto.Cipher;
-import javax.crypto.EncryptedPrivateKeyInfo;
-import javax.crypto.SecretKeyFactory;
-import javax.crypto.spec.PBEKeySpec;
-
-/**
- * HISTORICAL NOTE:
- *
- * Prior to the keylimepie release, SignApk ignored the signature
- * algorithm specified in the certificate and always used SHA1withRSA.
- *
- * Starting with JB-MR2, the platform supports SHA256withRSA, so we use
- * the signature algorithm in the certificate to select which to use
- * (SHA256withRSA or SHA1withRSA). Also in JB-MR2, EC keys are supported.
- *
- * Because there are old keys still in use whose certificate actually
- * says "MD5withRSA", we treat these as though they say "SHA1withRSA"
- * for compatibility with older releases.  This can be changed by
- * altering the getAlgorithm() function below.
- */
-
-
-/**
- * Command line tool to sign JAR files (including APKs and OTA updates) in a way
- * compatible with the mincrypt verifier, using EC or RSA keys and SHA1 or
- * SHA-256 (see historical note).
- */
-class SignApk {
-    private static final String CERT_SF_NAME = "META-INF/CERT.SF";
-    private static final String CERT_SIG_NAME = "META-INF/CERT.%s";
-    private static final String CERT_SF_MULTI_NAME = "META-INF/CERT%d.SF";
-    private static final String CERT_SIG_MULTI_NAME = "META-INF/CERT%d.%s";
-
-    private static final String OTACERT_NAME = "META-INF/com/android/otacert";
-
-    private static Provider sBouncyCastleProvider;
-
-    // bitmasks for which hash algorithms we need the manifest to include.
-    private static final int USE_SHA1 = 1;
-    private static final int USE_SHA256 = 2;
-
-    /**
-     * Return one of USE_SHA1 or USE_SHA256 according to the signature
-     * algorithm specified in the cert.
-     */
-    private static int getDigestAlgorithm(X509Certificate cert) {
-        String sigAlg = cert.getSigAlgName().toUpperCase(Locale.US);
-        if ("SHA1WITHRSA".equals(sigAlg) ||
-            "MD5WITHRSA".equals(sigAlg)) {     // see "HISTORICAL NOTE" above.
-            return USE_SHA1;
-        } else if (sigAlg.startsWith("SHA256WITH")) {
-            return USE_SHA256;
-        } else {
-            throw new IllegalArgumentException("unsupported signature algorithm \"" + sigAlg +
-                                               "\" in cert [" + cert.getSubjectDN());
-        }
-    }
-
-    /** Returns the expected signature algorithm for this key type. */
-    private static String getSignatureAlgorithm(X509Certificate cert) {
-        String sigAlg = cert.getSigAlgName().toUpperCase(Locale.US);
-        String keyType = cert.getPublicKey().getAlgorithm().toUpperCase(Locale.US);
-        if ("RSA".equalsIgnoreCase(keyType)) {
-            if (getDigestAlgorithm(cert) == USE_SHA256) {
-                return "SHA256withRSA";
-            } else {
-                return "SHA1withRSA";
-            }
-        } else if ("EC".equalsIgnoreCase(keyType)) {
-            return "SHA256withECDSA";
-        } else {
-            throw new IllegalArgumentException("unsupported key type: " + keyType);
-        }
-    }
-
-    // Files matching this pattern are not copied to the output.
-    private static Pattern stripPattern =
-        Pattern.compile("^(META-INF/((.*)[.](SF|RSA|DSA|EC)|com/android/otacert))|(" +
-                        Pattern.quote(JarFile.MANIFEST_NAME) + ")$");
-
-    private static X509Certificate readPublicKey(File file)
-        throws IOException, GeneralSecurityException {
-        FileInputStream input = new FileInputStream(file);
-        try {
-            CertificateFactory cf = CertificateFactory.getInstance("X.509");
-            return (X509Certificate) cf.generateCertificate(input);
-        } finally {
-            input.close();
-        }
-    }
-
-    /**
-     * Reads the password from stdin and returns it as a string.
-     *
-     * @param keyFile The file containing the private key.  Used to prompt the user.
-     */
-    private static String readPassword(File keyFile) {
-        Console console;
-        if ((console = System.console()) != null) {
-            char[] pwd;
-            if ((pwd = console.readPassword("[%s]", "Enter password for " + keyFile)) != null) {
-                return String.valueOf(pwd);
-            } else {
-                return null;
-            }
-        } else {
-            System.out.print("Enter password for " + keyFile + " (password will not be hidden): ");
-            System.out.flush();
-            BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
-            try {
-                return stdin.readLine();
-            } catch (IOException ex) {
-                return null;
-            }
-        }
-    }
-
-    /**
-     * Decrypt an encrypted PKCS#8 format private key.
-     *
-     * Based on ghstark's post on Aug 6, 2006 at
-     * http://forums.sun.com/thread.jspa?threadID=758133&messageID=4330949
-     *
-     * @param encryptedPrivateKey The raw data of the private key
-     * @param keyFile The file containing the private key
-     */
-    private static PKCS8EncodedKeySpec decryptPrivateKey(byte[] encryptedPrivateKey, File keyFile)
-        throws GeneralSecurityException {
-        EncryptedPrivateKeyInfo epkInfo;
-        try {
-            epkInfo = new EncryptedPrivateKeyInfo(encryptedPrivateKey);
-        } catch (IOException ex) {
-            // Probably not an encrypted key.
-            return null;
-        }
-        String strPassword=readPassword(keyFile);
-        if(strPassword == null) {
-            System.err.println("No passord in keyFile.");
-            return null;
-        }
-
-        char[] password = strPassword.toCharArray();
-
-        SecretKeyFactory skFactory = SecretKeyFactory.getInstance(epkInfo.getAlgName());
-        Key key = skFactory.generateSecret(new PBEKeySpec(password));
-
-        Cipher cipher = Cipher.getInstance(epkInfo.getAlgName());
-        cipher.init(Cipher.DECRYPT_MODE, key, epkInfo.getAlgParameters());
-
-        try {
-            return epkInfo.getKeySpec(cipher);
-        } catch (InvalidKeySpecException ex) {
-            System.err.println("signapk: Password for " + keyFile + " may be bad.");
-            throw ex;
-        }
-    }
-
-    /** Read a PKCS#8 format private key. */
-    private static PrivateKey readPrivateKey(File file)
-        throws IOException, GeneralSecurityException {
-        DataInputStream input = new DataInputStream(new FileInputStream(file));
-        try {
-            byte[] bytes = new byte[(int) file.length()];
-            input.read(bytes);
-
-            /* Check to see if this is in an EncryptedPrivateKeyInfo structure. */
-            PKCS8EncodedKeySpec spec = decryptPrivateKey(bytes, file);
-            if (spec == null) {
-                spec = new PKCS8EncodedKeySpec(bytes);
-            }
-
-            /*
-             * Now it's in a PKCS#8 PrivateKeyInfo structure. Read its Algorithm
-             * OID and use that to construct a KeyFactory.
-             */
-            ASN1InputStream bIn = new ASN1InputStream(new ByteArrayInputStream(spec.getEncoded()));
-            PrivateKeyInfo pki = PrivateKeyInfo.getInstance(bIn.readObject());
-            String algOid = pki.getPrivateKeyAlgorithm().getAlgorithm().getId();
-
-            return KeyFactory.getInstance(algOid).generatePrivate(spec);
-        } finally {
-            input.close();
-        }
-    }
-
-    /**
-     * Add the hash(es) of every file to the manifest, creating it if
-     * necessary.
-     */
-    private static Manifest addDigestsToManifest(JarFile jar, int hashes)
-        throws IOException, GeneralSecurityException {
-        Manifest input = jar.getManifest();
-        Manifest output = new Manifest();
-        Attributes main = output.getMainAttributes();
-        if (input != null) {
-            main.putAll(input.getMainAttributes());
-        } else {
-            main.putValue("Manifest-Version", "1.0");
-            main.putValue("Created-By", "1.0 (Android SignApk)");
-        }
-
-        MessageDigest md_sha1 = null;
-        MessageDigest md_sha256 = null;
-        if ((hashes & USE_SHA1) != 0) {
-            md_sha1 = MessageDigest.getInstance("SHA1");
-        }
-        if ((hashes & USE_SHA256) != 0) {
-            md_sha256 = MessageDigest.getInstance("SHA256");
-        }
-
-        byte[] buffer = new byte[4096];
-        int num;
-
-        // We sort the input entries by name, and add them to the
-        // output manifest in sorted order.  We expect that the output
-        // map will be deterministic.
-
-        TreeMap<String, JarEntry> byName = new TreeMap<String, JarEntry>();
-
-        for (Enumeration<JarEntry> e = jar.entries(); e.hasMoreElements(); ) {
-            JarEntry entry = e.nextElement();
-            byName.put(entry.getName(), entry);
-        }
-
-        for (JarEntry entry: byName.values()) {
-            String name = entry.getName();
-            if (!entry.isDirectory() &&
-                (stripPattern == null || !stripPattern.matcher(name).matches())) {
-                InputStream data = jar.getInputStream(entry);
-                while ((num = data.read(buffer)) > 0) {
-                    if (md_sha1 != null) md_sha1.update(buffer, 0, num);
-                    if (md_sha256 != null) md_sha256.update(buffer, 0, num);
-                }
-
-                Attributes attr = null;
-                if (input != null) attr = input.getAttributes(name);
-                attr = attr != null ? new Attributes(attr) : new Attributes();
-                if (md_sha1 != null) {
-                    attr.putValue("SHA1-Digest",
-                                  new String(Base64.encode(md_sha1.digest()), "ASCII"));
-                }
-                if (md_sha256 != null) {
-                    attr.putValue("SHA-256-Digest",
-                                  new String(Base64.encode(md_sha256.digest()), "ASCII"));
-                }
-                output.getEntries().put(name, attr);
-            }
-        }
-
-        return output;
-    }
-
-    /**
-     * Add a copy of the public key to the archive; this should
-     * exactly match one of the files in
-     * /system/etc/security/otacerts.zip on the device.  (The same
-     * cert can be extracted from the CERT.RSA file but this is much
-     * easier to get at.)
-     */
-    private static void addOtacert(JarOutputStream outputJar,
-                                   File publicKeyFile,
-                                   long timestamp,
-                                   Manifest manifest,
-                                   int hash)
-        throws IOException, GeneralSecurityException {
-        MessageDigest md = MessageDigest.getInstance(hash == USE_SHA1 ? "SHA1" : "SHA256");
-
-        JarEntry je = new JarEntry(OTACERT_NAME);
-        je.setTime(timestamp);
-        outputJar.putNextEntry(je);
-        FileInputStream input =null;
-        try{
-            input = new FileInputStream(publicKeyFile);
-            byte[] b = new byte[4096];
-            int read;
-            while ((read = input.read(b)) != -1) {
-                outputJar.write(b, 0, read);
-                md.update(b, 0, read);
-            }
-        }finally{
-            if(input !=null)
-                input.close();
-        }
-
-        Attributes attr = new Attributes();
-        attr.putValue(hash == USE_SHA1 ? "SHA1-Digest" : "SHA-256-Digest",
-                      new String(Base64.encode(md.digest()), "ASCII"));
-        manifest.getEntries().put(OTACERT_NAME, attr);
-    }
-
-
-    /** Write to another stream and track how many bytes have been
-     *  written.
-     */
-    private static class CountOutputStream extends FilterOutputStream {
-        private int mCount;
-
-        public CountOutputStream(OutputStream out) {
-            super(out);
-            mCount = 0;
-        }
-
-        @Override
-        public void write(int b) throws IOException {
-            super.write(b);
-            mCount++;
-        }
-
-        @Override
-        public void write(byte[] b, int off, int len) throws IOException {
-            super.write(b, off, len);
-            mCount += len;
-        }
-
-        public int size() {
-            return mCount;
-        }
-    }
-
-    /** Write a .SF file with a digest of the specified manifest. */
-    private static void writeSignatureFile(Manifest manifest, OutputStream out,
-                                           int hash)
-        throws IOException, GeneralSecurityException {
-        Manifest sf = new Manifest();
-        Attributes main = sf.getMainAttributes();
-        main.putValue("Signature-Version", "1.0");
-        main.putValue("Created-By", "1.0 (Android SignApk)");
-
-        MessageDigest md = MessageDigest.getInstance(
-            hash == USE_SHA256 ? "SHA256" : "SHA1");
-        PrintStream print = new PrintStream(
-            new DigestOutputStream(new ByteArrayOutputStream(), md),
-            true, "UTF-8");
-
-        // Digest of the entire manifest
-        manifest.write(print);
-        print.flush();
-        main.putValue(hash == USE_SHA256 ? "SHA-256-Digest-Manifest" : "SHA1-Digest-Manifest",
-                      new String(Base64.encode(md.digest()), "ASCII"));
-
-        Map<String, Attributes> entries = manifest.getEntries();
-        for (Map.Entry<String, Attributes> entry : entries.entrySet()) {
-            // Digest of the manifest stanza for this entry.
-            print.print("Name: " + entry.getKey() + "\r\n");
-            for (Map.Entry<Object, Object> att : entry.getValue().entrySet()) {
-                print.print(att.getKey() + ": " + att.getValue() + "\r\n");
-            }
-            print.print("\r\n");
-            print.flush();
-
-            Attributes sfAttr = new Attributes();
-            sfAttr.putValue(hash == USE_SHA256 ? "SHA-256-Digest" : "SHA1-Digest-Manifest",
-                            new String(Base64.encode(md.digest()), "ASCII"));
-            sf.getEntries().put(entry.getKey(), sfAttr);
-        }
-
-        CountOutputStream cout = new CountOutputStream(out);
-        sf.write(cout);
-
-        // A bug in the java.util.jar implementation of Android platforms
-        // up to version 1.6 will cause a spurious IOException to be thrown
-        // if the length of the signature file is a multiple of 1024 bytes.
-        // As a workaround, add an extra CRLF in this case.
-        if ((cout.size() % 1024) == 0) {
-            cout.write('\r');
-            cout.write('\n');
-        }
-    }
-
-    /** Sign data and write the digital signature to 'out'. */
-    private static void writeSignatureBlock(
-        CMSTypedData data, X509Certificate publicKey, PrivateKey privateKey,
-        OutputStream out)
-        throws IOException,
-               CertificateEncodingException,
-               OperatorCreationException,
-               CMSException {
-        ArrayList<X509Certificate> certList = new ArrayList<X509Certificate>(1);
-        certList.add(publicKey);
-        JcaCertStore certs = new JcaCertStore(certList);
-
-        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
-        ContentSigner signer = new JcaContentSignerBuilder(getSignatureAlgorithm(publicKey))
-            .build(privateKey);
-        gen.addSignerInfoGenerator(
-            new JcaSignerInfoGeneratorBuilder(
-                new JcaDigestCalculatorProviderBuilder()
-                .build())
-            .setDirectSignature(true)
-            .build(signer, publicKey));
-        gen.addCertificates(certs);
-        CMSSignedData sigData = gen.generate(data, false);
-
-        ASN1InputStream asn1 = new ASN1InputStream(sigData.getEncoded());
-        DEROutputStream dos = new DEROutputStream(out);
-        dos.writeObject(asn1.readObject());
-    }
-
-    /**
-     * Copy all the files in a manifest from input to output.  We set
-     * the modification times in the output to a fixed time, so as to
-     * reduce variation in the output file and make incremental OTAs
-     * more efficient.
-     */
-    private static void copyFiles(Manifest manifest, JarFile in, JarOutputStream out,
-                                  long timestamp, int alignment) throws IOException {
-        byte[] buffer = new byte[4096];
-        int num;
-
-        Map<String, Attributes> entries = manifest.getEntries();
-        ArrayList<String> names = new ArrayList<String>(entries.keySet());
-        Collections.sort(names);
-
-        boolean firstEntry = true;
-        long offset = 0L;
-
-        // We do the copy in two passes -- first copying all the
-        // entries that are STORED, then copying all the entries that
-        // have any other compression flag (which in practice means
-        // DEFLATED).  This groups all the stored entries together at
-        // the start of the file and makes it easier to do alignment
-        // on them (since only stored entries are aligned).
-
-        for (String name : names) {
-            JarEntry inEntry = in.getJarEntry(name);
-            JarEntry outEntry = null;
-            if (inEntry.getMethod() != JarEntry.STORED) continue;
-            // Preserve the STORED method of the input entry.
-            outEntry = new JarEntry(inEntry);
-            outEntry.setTime(timestamp);
-
-            // 'offset' is the offset into the file at which we expect
-            // the file data to begin.  This is the value we need to
-            // make a multiple of 'alignement'.
-            offset += JarFile.LOCHDR + outEntry.getName().length();
-            if (firstEntry) {
-                // The first entry in a jar file has an extra field of
-                // four bytes that you can't get rid of; any extra
-                // data you specify in the JarEntry is appended to
-                // these forced four bytes.  This is JAR_MAGIC in
-                // JarOutputStream; the bytes are 0xfeca0000.
-                offset += 4;
-                firstEntry = false;
-            }
-            if (alignment > 0 && (offset % alignment != 0)) {
-                // Set the "extra data" of the entry to between 1 and
-                // alignment-1 bytes, to make the file data begin at
-                // an aligned offset.
-                int needed = alignment - (int)(offset % alignment);
-                outEntry.setExtra(new byte[needed]);
-                offset += needed;
-            }
-
-            out.putNextEntry(outEntry);
-
-            InputStream data = in.getInputStream(inEntry);
-            while ((num = data.read(buffer)) > 0) {
-                out.write(buffer, 0, num);
-                offset += num;
-            }
-            out.flush();
-        }
-
-        // Copy all the non-STORED entries.  We don't attempt to
-        // maintain the 'offset' variable past this point; we don't do
-        // alignment on these entries.
-
-        for (String name : names) {
-            JarEntry inEntry = in.getJarEntry(name);
-            JarEntry outEntry = null;
-            if (inEntry.getMethod() == JarEntry.STORED) continue;
-            // Create a new entry so that the compressed len is recomputed.
-            outEntry = new JarEntry(name);
-            outEntry.setTime(timestamp);
-            out.putNextEntry(outEntry);
-
-            InputStream data = in.getInputStream(inEntry);
-            while ((num = data.read(buffer)) > 0) {
-                out.write(buffer, 0, num);
-            }
-            out.flush();
-        }
-    }
-
-    private static class WholeFileSignerOutputStream extends FilterOutputStream {
-        private boolean closing = false;
-        private ByteArrayOutputStream footer = new ByteArrayOutputStream();
-        private OutputStream tee;
-
-        public WholeFileSignerOutputStream(OutputStream out, OutputStream tee) {
-            super(out);
-            this.tee = tee;
-        }
-
-        public void notifyClosing() {
-            closing = true;
-        }
-
-        public void finish() throws IOException {
-            closing = false;
-
-            byte[] data = footer.toByteArray();
-            if (data.length < 2)
-                throw new IOException("Less than two bytes written to footer");
-            write(data, 0, data.length - 2);
-        }
-
-        public byte[] getTail() {
-            return footer.toByteArray();
-        }
-
-        @Override
-        public void write(byte[] b) throws IOException {
-            write(b, 0, b.length);
-        }
-
-        @Override
-        public void write(byte[] b, int off, int len) throws IOException {
-            if (closing) {
-                // if the jar is about to close, save the footer that will be written
-                footer.write(b, off, len);
-            }
-            else {
-                // write to both output streams. out is the CMSTypedData signer and tee is the file.
-                out.write(b, off, len);
-                tee.write(b, off, len);
-            }
-        }
-
-        @Override
-        public void write(int b) throws IOException {
-            if (closing) {
-                // if the jar is about to close, save the footer that will be written
-                footer.write(b);
-            }
-            else {
-                // write to both output streams. out is the CMSTypedData signer and tee is the file.
-                out.write(b);
-                tee.write(b);
-            }
-        }
-    }
-
-    private static class CMSSigner implements CMSTypedData {
-        private JarFile inputJar;
-        private File publicKeyFile;
-        private X509Certificate publicKey;
-        private PrivateKey privateKey;
-        private String outputFile;
-        private OutputStream outputStream;
-        private final ASN1ObjectIdentifier type;
-        private WholeFileSignerOutputStream signer;
-
-        public CMSSigner(JarFile inputJar, File publicKeyFile,
-                         X509Certificate publicKey, PrivateKey privateKey,
-                         OutputStream outputStream) {
-            this.inputJar = inputJar;
-            this.publicKeyFile = publicKeyFile;
-            this.publicKey = publicKey;
-            this.privateKey = privateKey;
-            this.outputStream = outputStream;
-            this.type = new ASN1ObjectIdentifier(CMSObjectIdentifiers.data.getId());
-        }
-
-        /**
-         * This should actually return byte[] or something similar, but nothing
-         * actually checks it currently.
-         */
-        public Object getContent() {
-            return this;
-        }
-
-        public ASN1ObjectIdentifier getContentType() {
-            return type;
-        }
-
-        public void write(OutputStream out) throws IOException {
-            try {
-                signer = new WholeFileSignerOutputStream(out, outputStream);
-                JarOutputStream outputJar = new JarOutputStream(signer);
-
-                int hash = getDigestAlgorithm(publicKey);
-
-                // Assume the certificate is valid for at least an hour.
-                long timestamp = publicKey.getNotBefore().getTime() + 3600L * 1000;
-
-                Manifest manifest = addDigestsToManifest(inputJar, hash);
-                copyFiles(manifest, inputJar, outputJar, timestamp, 0);
-                addOtacert(outputJar, publicKeyFile, timestamp, manifest, hash);
-
-                signFile(manifest, inputJar,
-                         new X509Certificate[]{ publicKey },
-                         new PrivateKey[]{ privateKey },
-                         outputJar);
-
-                signer.notifyClosing();
-                outputJar.close();
-                signer.finish();
-            }
-            catch (Exception e) {
-                throw new IOException(e);
-            }
-        }
-
-        public void writeSignatureBlock(ByteArrayOutputStream temp)
-            throws IOException,
-                   CertificateEncodingException,
-                   OperatorCreationException,
-                   CMSException {
-            SignApk.writeSignatureBlock(this, publicKey, privateKey, temp);
-        }
-
-        public WholeFileSignerOutputStream getSigner() {
-            return signer;
-        }
-    }
-
-    private static void signWholeFile(JarFile inputJar, File publicKeyFile,
-                                      X509Certificate publicKey, PrivateKey privateKey,
-                                      OutputStream outputStream) throws Exception {
-        CMSSigner cmsOut = new CMSSigner(inputJar, publicKeyFile,
-                                         publicKey, privateKey, outputStream);
-
-        ByteArrayOutputStream temp = new ByteArrayOutputStream();
-
-        // put a readable message and a null char at the start of the
-        // archive comment, so that tools that display the comment
-        // (hopefully) show something sensible.
-        // TODO: anything more useful we can put in this message?
-        byte[] message = "signed by SignApk".getBytes("UTF-8");
-        temp.write(message);
-        temp.write(0);
-
-        cmsOut.writeSignatureBlock(temp);
-        if(cmsOut.getSigner()==null)
-            throw new IllegalArgumentException("CMSSigner gets null signer!");
-
-        byte[] zipData = cmsOut.getSigner().getTail();
-
-        // For a zip with no archive comment, the
-        // end-of-central-directory record will be 22 bytes long, so
-        // we expect to find the EOCD marker 22 bytes from the end.
-        if (zipData[zipData.length-22] != 0x50 ||
-            zipData[zipData.length-21] != 0x4b ||
-            zipData[zipData.length-20] != 0x05 ||
-            zipData[zipData.length-19] != 0x06) {
-            throw new IllegalArgumentException("zip data already has an archive comment");
-        }
-
-        int total_size = temp.size() + 6;
-        if (total_size > 0xffff) {
-            throw new IllegalArgumentException("signature is too big for ZIP file comment");
-        }
-        // signature starts this many bytes from the end of the file
-        int signature_start = total_size - message.length - 1;
-        temp.write(signature_start & 0xff);
-        temp.write((signature_start >> 8) & 0xff);
-        // Why the 0xff bytes?  In a zip file with no archive comment,
-        // bytes [-6:-2] of the file are the little-endian offset from
-        // the start of the file to the central directory.  So for the
-        // two high bytes to be 0xff 0xff, the archive would have to
-        // be nearly 4GB in size.  So it's unlikely that a real
-        // commentless archive would have 0xffs here, and lets us tell
-        // an old signed archive from a new one.
-        temp.write(0xff);
-        temp.write(0xff);
-        temp.write(total_size & 0xff);
-        temp.write((total_size >> 8) & 0xff);
-        temp.flush();
-
-        // Signature verification checks that the EOCD header is the
-        // last such sequence in the file (to avoid minzip finding a
-        // fake EOCD appended after the signature in its scan).  The
-        // odds of producing this sequence by chance are very low, but
-        // let's catch it here if it does.
-        byte[] b = temp.toByteArray();
-        for (int i = 0; i < b.length-3; ++i) {
-            if (b[i] == 0x50 && b[i+1] == 0x4b && b[i+2] == 0x05 && b[i+3] == 0x06) {
-                throw new IllegalArgumentException("found spurious EOCD header at " + i);
-            }
-        }
-
-        outputStream.write(total_size & 0xff);
-        outputStream.write((total_size >> 8) & 0xff);
-        temp.writeTo(outputStream);
-    }
-
-    private static void signFile(Manifest manifest, JarFile inputJar,
-                                 X509Certificate[] publicKey, PrivateKey[] privateKey,
-                                 JarOutputStream outputJar)
-        throws Exception {
-        // Assume the certificate is valid for at least an hour.
-        long timestamp = publicKey[0].getNotBefore().getTime() + 3600L * 1000;
-
-        // MANIFEST.MF
-        JarEntry je = new JarEntry(JarFile.MANIFEST_NAME);
-        je.setTime(timestamp);
-        outputJar.putNextEntry(je);
-        manifest.write(outputJar);
-
-        int numKeys = publicKey.length;
-        for (int k = 0; k < numKeys; ++k) {
-            // CERT.SF / CERT#.SF
-            je = new JarEntry(numKeys == 1 ? CERT_SF_NAME :
-                              (String.format(CERT_SF_MULTI_NAME, k)));
-            je.setTime(timestamp);
-            outputJar.putNextEntry(je);
-            ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            writeSignatureFile(manifest, baos, getDigestAlgorithm(publicKey[k]));
-            byte[] signedData = baos.toByteArray();
-            outputJar.write(signedData);
-
-            // CERT.{EC,RSA} / CERT#.{EC,RSA}
-            final String keyType = publicKey[k].getPublicKey().getAlgorithm();
-            je = new JarEntry(numKeys == 1 ?
-                              (String.format(CERT_SIG_NAME, keyType)) :
-                              (String.format(CERT_SIG_MULTI_NAME, k, keyType)));
-            je.setTime(timestamp);
-            outputJar.putNextEntry(je);
-            writeSignatureBlock(new CMSProcessableByteArray(signedData),
-                                publicKey[k], privateKey[k], outputJar);
-        }
-    }
-
-    /**
-     * Tries to load a JSE Provider by class name. This is for custom PrivateKey
-     * types that might be stored in PKCS#11-like storage.
-     */
-    private static void loadProviderIfNecessary(String providerClassName) {
-        if (providerClassName == null) {
-            return;
-        }
-
-        final Class<?> klass;
-        try {
-            final ClassLoader sysLoader = ClassLoader.getSystemClassLoader();
-            if (sysLoader != null) {
-                klass = sysLoader.loadClass(providerClassName);
-            } else {
-                klass = Class.forName(providerClassName);
-            }
-        } catch (ClassNotFoundException e) {
-            e.printStackTrace();
-            System.exit(1);
-            return;
-        }
-
-        Constructor<?> constructor = null;
-        for (Constructor<?> c : klass.getConstructors()) {
-            if (c.getParameterTypes().length == 0) {
-                constructor = c;
-                break;
-            }
-        }
-        if (constructor == null) {
-            System.err.println("No zero-arg constructor found for " + providerClassName);
-            System.exit(1);
-            return;
-        }
-
-        final Object o;
-        try {
-            o = constructor.newInstance();
-        } catch (Exception e) {
-            e.printStackTrace();
-            System.exit(1);
-            return;
-        }
-        if (!(o instanceof Provider)) {
-            System.err.println("Not a Provider class: " + providerClassName);
-            System.exit(1);
-        }
-
-        Security.insertProviderAt((Provider) o, 1);
-    }
-
-    private static void usage() {
-        System.err.println("Usage: signapk [-w] " +
-                           "[-a <alignment>] " +
-                           "[-providerClass <className>] " +
-                           "publickey.x509[.pem] privatekey.pk8 " +
-                           "[publickey2.x509[.pem] privatekey2.pk8 ...] " +
-                           "input.jar output.jar");
-        System.exit(2);
-    }
-
-    public static void main(String[] args) {
-        if (args.length < 4) usage();
-
-        sBouncyCastleProvider = new BouncyCastleProvider();
-        Security.addProvider(sBouncyCastleProvider);
-
-        boolean signWholeFile = false;
-        String providerClass = null;
-        String providerArg = null;
-        int alignment = 4;
-
-        int argstart = 0;
-        while (argstart < args.length && args[argstart].startsWith("-")) {
-            if ("-w".equals(args[argstart])) {
-                signWholeFile = true;
-                ++argstart;
-            } else if ("-providerClass".equals(args[argstart])) {
-                if (argstart + 1 >= args.length) {
-                    usage();
-                }
-                providerClass = args[++argstart];
-                ++argstart;
-            } else if ("-a".equals(args[argstart])) {
-                alignment = Integer.parseInt(args[++argstart]);
-                ++argstart;
-            } else {
-                usage();
-            }
-        }
-
-        if ((args.length - argstart) % 2 == 1) usage();
-        int numKeys = ((args.length - argstart) / 2) - 1;
-        if (signWholeFile && numKeys > 1) {
-            System.err.println("Only one key may be used with -w.");
-            System.exit(2);
-        }
-
-        loadProviderIfNecessary(providerClass);
-
-        String inputFilename = args[args.length-2];
-        String outputFilename = args[args.length-1];
-
-        JarFile inputJar = null;
-        FileOutputStream outputFile = null;
-        int hashes = 0;
-
-        try {
-            File firstPublicKeyFile = new File(args[argstart+0]);
-
-            X509Certificate[] publicKey = new X509Certificate[numKeys];
-            try {
-                for (int i = 0; i < numKeys; ++i) {
-                    int argNum = argstart + i*2;
-                    publicKey[i] = readPublicKey(new File(args[argNum]));
-                    hashes |= getDigestAlgorithm(publicKey[i]);
-                }
-            } catch (IllegalArgumentException e) {
-                System.err.println(e);
-                System.exit(1);
-            }
-
-            // Set the ZIP file timestamp to the starting valid time
-            // of the 0th certificate plus one hour (to match what
-            // we've historically done).
-            long timestamp = publicKey[0].getNotBefore().getTime() + 3600L * 1000;
-
-            PrivateKey[] privateKey = new PrivateKey[numKeys];
-            for (int i = 0; i < numKeys; ++i) {
-                int argNum = argstart + i*2 + 1;
-                privateKey[i] = readPrivateKey(new File(args[argNum]));
-            }
-            inputJar = new JarFile(new File(inputFilename), false);  // Don't verify.
-
-            outputFile = new FileOutputStream(outputFilename);
-
-
-            if (signWholeFile) {
-                SignApk.signWholeFile(inputJar, firstPublicKeyFile,
-                                      publicKey[0], privateKey[0], outputFile);
-            } else {
-                JarOutputStream outputJar = new JarOutputStream(outputFile);
-
-                // For signing .apks, use the maximum compression to make
-                // them as small as possible (since they live forever on
-                // the system partition).  For OTA packages, use the
-                // default compression level, which is much much faster
-                // and produces output that is only a tiny bit larger
-                // (~0.1% on full OTA packages I tested).
-                outputJar.setLevel(9);
-
-                Manifest manifest = addDigestsToManifest(inputJar, hashes);
-                copyFiles(manifest, inputJar, outputJar, timestamp, alignment);
-                signFile(manifest, inputJar, publicKey, privateKey, outputJar);
-                outputJar.close();
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-            System.exit(1);
-        } finally {
-            try {
-                if (inputJar != null) inputJar.close();
-                if (outputFile != null) outputFile.close();
-            } catch (IOException e) {
-                e.printStackTrace();
-                System.exit(1);
-            }
-        }
-    }
-}
diff --git a/ecss_signtools/signapk/SignApk.mf b/ecss_signtools/signapk/SignApk.mf
deleted file mode 100644
index 2c72e59..0000000
--- a/ecss_signtools/signapk/SignApk.mf
+++ /dev/null
@@ -1 +0,0 @@
-Main-Class: com.android.signapk.SignApk
diff --git a/ecss_signtools/testkeys/DB.pk8 b/ecss_signtools/testkeys/DB.pk8
deleted file mode 100644
index 91f360b348d9a3d5931428b1c9d753d15723d03c..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 134
zcmXqLY-VC)FyLn6)N1o+`_9YA$jDO2lJDvq9IU9Io2=j;;vDaomr|6UnG)|G93SEu
z91<Vu>gE~ml%HP`ADo$<ms+HtTVAY?QBqP+Y^ATCoS%|f3>4NaE=$(S%qvOF(M!(H
k)pt%UD#=XCOinCG4Nfg8%S=u+Hq`e`%*@kEEY7U}0GDVh_5c6?

diff --git a/ecss_signtools/testkeys/DB.x509.pem b/ecss_signtools/testkeys/DB.x509.pem
deleted file mode 100644
index 8ec137c..0000000
--- a/ecss_signtools/testkeys/DB.x509.pem
+++ /dev/null
@@ -1,44 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIHuTCCBqGgAwIBAgIKHd9+DQACAAKITjANBgkqhkiG9w0BAQUFADBWMQswCQYD
-VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xKzApBgNVBAMTIklu
-dGVsIEludHJhbmV0IEJhc2ljIElzc3VpbmcgQ0EgMkIwHhcNMTQwODE4MjM0ODQ3
-WhcNMTUwODE4MjM0ODQ3WjCBgTELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRQw
-EgYDVQQHEwtTYW50YSBDbGFyYTEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24x
-MzAxBgNVBAMTKkludGVsKFIpIE9UQyBBbmRyb2lkIFRFU1QgVUVGSSBCb290IFNp
-Z25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN37IyasF2mjhvDt
-4sz+8Gwjt+LvEvVoG3S3lL/eF6dWuiC+VNa6JvbO/w3zBuEQIEmPVFn6yRCEKby5
-cdWrBTVjnBS7lYdydTPklTVQFs/tASZU5VsRKXLsMncWXlQDT0eq6iv96Abs9M+K
-rgN5rx/z6FjEVyjKB5lNBvnp1t7tsUJ+VhjPLiQHgMo3dZbyjN22PRUUIKr4aq3Q
-UzcPxz3L4AEuSHgEK2OEslkYmAdvVx+HXwrfZh6Lv80sHoe5t+jrgQdfAdAn9ka3
-/OH5EnJgcaEktO5XRcWcABdXiqK0K5lFEq8uFMJOz6SaS7x/0/urr+2BED+c1/NN
-jlpMqnkCAwEAAaOCBFswggRXMAsGA1UdDwQEAwIHgDATBgNVHSUEDDAKBggrBgEF
-BQcDAzAdBgNVHQ4EFgQUZGxzuSBKABOO3CeBHqGWnwaA8CowHwYDVR0jBBgwFoAU
-OGN2+rYFOqlZT0qHjaCDt36ROgswggG5BgNVHR8EggGwMIIBrDCCAaigggGkoIIB
-oIaB4mxkYXA6Ly8vQ049SW50ZWwlMjBJbnRyYW5ldCUyMEJhc2ljJTIwSXNzdWlu
-ZyUyMENBJTIwMkIoMiksQ049QVpTTUNTSUJFQ0EwMixDTj1DRFAsQ049UHVibGlj
-JTIwS2V5JTIwU2VydmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixE
-Qz1jb3JwLERDPWludGVsLERDPWNvbT9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0
-P2Jhc2U/b2JqZWN0Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnSGV2h0dHA6Ly93
-d3cuaW50ZWwuY29tL3JlcG9zaXRvcnkvQ1JML0ludGVsJTIwSW50cmFuZXQlMjBC
-YXNpYyUyMElzc3VpbmclMjBDQSUyMDJCKDIpLmNybIZgaHR0cDovL2NlcnRpZmlj
-YXRlcy5pbnRlbC5jb20vcmVwb3NpdG9yeS9DUkwvSW50ZWwlMjBJbnRyYW5ldCUy
-MEJhc2ljJTIwSXNzdWluZyUyMENBJTIwMkIoMikuY3JsMIIBywYIKwYBBQUHAQEE
-ggG9MIIBuTCB0QYIKwYBBQUHMAKGgcRsZGFwOi8vL0NOPUludGVsJTIwSW50cmFu
-ZXQlMjBCYXNpYyUyMElzc3VpbmclMjBDQSUyMDJCLENOPUFJQSxDTj1QdWJsaWMl
-MjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERD
-PWNvcnAsREM9aW50ZWwsREM9Y29tP2NBQ2VydGlmaWNhdGU/YmFzZT9vYmplY3RD
-bGFzcz1jZXJ0aWZpY2F0aW9uQXV0aG9yaXR5MGwGCCsGAQUFBzAChmBodHRwOi8v
-d3d3LmludGVsLmNvbS9yZXBvc2l0b3J5L2NlcnRpZmljYXRlcy9JbnRlbCUyMElu
-dHJhbmV0JTIwQmFzaWMlMjBJc3N1aW5nJTIwQ0ElMjAyQigyKS5jcnQwdQYIKwYB
-BQUHMAKGaWh0dHA6Ly9jZXJ0aWZpY2F0ZXMuaW50ZWwuY29tL3JlcG9zaXRvcnkv
-Y2VydGlmaWNhdGVzL0ludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUyMElzc3Vpbmcl
-MjBDQSUyMDJCKDIpLmNydDAMBgNVHRMBAf8EAjAAMDwGCSsGAQQBgjcVBwQvMC0G
-JSsGAQQBgjcVCIbDjHWEmeVRg/2BKIWOn1OCkcAJZ9zNWIHKlw8CAWQCAQgwGwYJ
-KwYBBAGCNxUKBA4wDDAKBggrBgEFBQcDAzANBgkqhkiG9w0BAQUFAAOCAQEAqQyf
-e/kpf/srsd/Ga6vp6JhDxxlETCfWCGx6KUiHUbTC6ngAdol635kuPC059vgO0qh0
-6yDD33c1OIxdEFj6/Ik1xelcyi4fVtG3lCy5zbbGJT3kKxZdJpiatejVjwZPnOT/
-ax4sMZEt4hX9uXkpWIuDa39PoXwhMMdjb7LfHfJGQD9Hx3BNNqzXpVgGbcqT7Ad8
-DAU3GoYLzUxXo0b1Phsyk/bpkyHmH6ZBvjIGpr0l1omBEW9bjycOQyHPSnVyHQ3X
-s8TNwhHVyiN5G5FY+xQPqNZkM0ExpucJhbdWQVv/sZvHmoGk8nPGiAqQz965GRAJ
-bHttLfCp9X3w0FBVRQ==
------END CERTIFICATE-----
diff --git a/ecss_signtools/testkeys/KEK.pk8 b/ecss_signtools/testkeys/KEK.pk8
deleted file mode 100644
index 698ae15db3d81ff2f534d45920e55a5d551efa3e..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 125
zcmXr0W@2P8;AZ30YV&CO&dbQi$dbvD?&=&Itf-)ytl%Hw9PgNyQk0*W67L@zAL1Gu
z5+Ca7<{9tp>aCz#UaXK&Qc_TCrLUiypORXfnVzRxT$ZetnOBmUqnDhYtM8mzRFavN
cnVeXX8k|~GmYJMtY^d*>n3<=SSe#n{0MZ>N-2eap

diff --git a/ecss_signtools/testkeys/KEK.x509.pem b/ecss_signtools/testkeys/KEK.x509.pem
deleted file mode 100644
index a76b35b..0000000
--- a/ecss_signtools/testkeys/KEK.x509.pem
+++ /dev/null
@@ -1,25 +0,0 @@
------BEGIN CERTIFICATE-----
-MIID8TCCAtmgAwIBAgIQeilTWddi8IpJESYhWxxN/jANBgkqhkiG9w0BAQsFADB5
-MRowGAYDVQQKExFJbnRlbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBxMLU2FudGEgQ2xh
-cmExCzAJBgNVBAgTAkNBMQswCQYDVQQGEwJVUzErMCkGA1UEAxMiSW50ZWwoUikg
-T1RDIEFuZHJvaWQgVEVTVCBVRUZJIEtFSzAeFw0xNDEwMjMwMDAxNTJaFw00NDEw
-MjMwMDAxNTJaMHkxGjAYBgNVBAoTEUludGVsIENvcnBvcmF0aW9uMRQwEgYDVQQH
-EwtTYW50YSBDbGFyYTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMSswKQYDVQQD
-EyJJbnRlbChSKSBPVEMgQW5kcm9pZCBURVNUIFVFRkkgS0VLMIIBIjANBgkqhkiG
-9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6mZohEE2cDyHaBeLqsjctWBbv30ePdjLFyGe
-+tptZ+s0epsS/VGPRUTyDYHMK6jWjzHPA5HyuOsJNgFtlU7MnnirToeWIvTu0GOh
-ejuIcJEbgA234gELsJUWp1iVxbymccbp2cmWK8RSKamjbEMJGdTBum0pwj+Ui7vH
-yMYbfDdVf7/1FEuYXiWi7VcL/RUBtD01/McVfJGEfJ41cIqfivyCCGlLmZXxW8Yi
-nI2N+yGDHylY2twccrDfrVpd1kmfsgT15FtC2uzQGuDmjch05edUIK/wf0DcFRzP
-xw+TIrVSoP/5vOdlrMVOcIhkWGE2oW12p3KzFmNXwnadIuzqmQIDAQABo3UwczAL
-BgNVHQ8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUHAwMwDwYDVR0TAQH/BAUwAwEB
-/zAdBgNVHQ4EFgQUXwlz8v8O6rJDfVLihWb/ZlPU0rMwHwYDVR0jBBgwFoAUXwlz
-8v8O6rJDfVLihWb/ZlPU0rMwDQYJKoZIhvcNAQELBQADggEBAGqrXqkS44hlnyPG
-hRVKpM3mBSFDqo/xyJ+S4zlVd52RxFlEESxR3NTjw7jY7FG36z7hckEqyOorzkHQ
-GRbCFnnfMkTW7lXOI6dn/iUbeHJHJqjD+CrgCjE0tA9URPa79MRbT8gdXhDqQqef
-AsIYLtTmrX6r2EqKXn1Rw551GRo22RvigbUdaWhMnOOefE/g3l6mkSbKSpnkrmCR
-exxf9E8r3FqplHcSx/dmVy2gVnYi96e1s9MbZv96wHyHTdFZtFEoOWBImLYf99tC
-HN01MNALCz0IMUPxr/HJyH6G171s9C7s9YHfdqr7ear+r/+q/1mQ7pF/ka3jhlPB
-x58MrGM=
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/testkeys/README b/ecss_signtools/testkeys/README
deleted file mode 100644
index 09aa529..0000000
--- a/ecss_signtools/testkeys/README
+++ /dev/null
@@ -1,10 +0,0 @@
-Test key set for use with the IT enterprise code signing system
-(ECSS) to enable devops testing of release signed builds against that
-infrastructure. The private key files do not contain valid PKCS #8
-blobs. They are wrappers around information needed to call the ECSS.
-
-All key and certificate files are generated using the ./generate
-script. If new values are required, ./generate should be updated
-and re-run.
-
-
diff --git a/ecss_signtools/testkeys/ecss_testkeys_lockdown.txt b/ecss_signtools/testkeys/ecss_testkeys_lockdown.txt
deleted file mode 100644
index b02b124..0000000
--- a/ecss_signtools/testkeys/ecss_testkeys_lockdown.txt
+++ /dev/null
@@ -1,37 +0,0 @@
-# UEFI secure boot lockdown settings that configure a device to boot with
-# builds signed by keys found in device/intel/build/ecss_signtools/testkeys.
-#
-# Values in the file are generated by building external/efitools with the
-# test keys as inputs and running device/intel/build/bin_to_oemvars with the
-# *.auth files as inputs.
-#
-#   bin_to_oemvars --image-security --var db DB.auth > testkeys_lockdown.txt
-#   bin_to_oemvars --global --var KEK KEK.auth \
-#                           --var PK PK.auth >> testkeys_lockdown.txt
-#
-# The PK used with these settings is the test PK in
-# device/intel/build/testkeys, because Intel does not maintain PK keys for
-# devices. Use device/intel/build/testkeys/unlock.txt to unlock the UEFI
-# secure boot settings for a device locked with this file.
-#
-# Settings are configured in the device using command:
-#
-#       fastboot flash oemvars ecss_testkeys_lockdown.txt
-#
-# Settings are cleared in the device using command:
-#
-#       fastboot flash oemvars unlock.txt
-#
-# The device must be in UEFI setup mode prior to these parameters can be
-# successfully updated.
-
-GUID = d719b2cb-3d3a-4596-a3bc-dad00e67656f
-
-[ad] db %df%07%09%17%00%22%21%00%00%00%00%00%00%00%00%00%75%05%00%00%00%02%f1%0e%9d%d2%af%4a%df%68%ee%49%8a%a9%34%7d%37%56%65%a7%30%82%05%59%06%09%2a%86%48%86%f7%0d%01%07%02%a0%82%05%4a%30%82%05%46%02%01%01%31%0f%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%30%0b%06%09%2a%86%48%86%f7%0d%01%07%01%a0%82%02%f1%30%82%02%ed%30%82%01%d5%a0%03%02%01%02%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%33%33%5a%17%0d%34%31%30%32%32%34%31%37%33%35%33%33%5a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%b8%05%3e%db%dd%14%b4%b9%99%0b%94%3a%82%33%c7%ec%5e%d3%e9%2b%9f%20%10%1a%ff%d4%87%d7%a9%65%cb%5b%9f%f1%aa%0f%1f%c9%d4%da%a6%a3%cf%0e%5d%c3%02%64%3d%ad%27%9f%20%45%7d%58%9e%a4%c8%b3%ad%9f%df%95%9e%5d%ec%21%0e%80%99%2b%54%af%d9%ee%ab%fd%6d%a1%bd%a0%43%b7%5c%65%54%cb%fa%59%59%66%c2%57%12%b5%3c%e4%5a%b9%d9%c4%f8%3b%46%2c%42%12%6c%d0%4a%d4%ee%e8%0a%2d%1c%d0%eb%16%83%08%19%da%61%d5%9b%6f%70%37%f4%be%44%fa%ff%74%5c%c6%76%45%75%35%bc%0a%67%9d%05%ab%3b%51%28%0d%8d%25%45%95%f8%b9%0c%a4%28%15%65%97%87%6d%c0%e8%c0%ab%52%93%7e%4f%ea%07%6d%58%a5%2d%80%f6%bf%d6%e3%81%d8%53%ee%d0%1c%a7%7f%77%0c%97%37%18%51%2e%b1%2f%c9%19%e3%1b%be%b3%78%22%d4%17%e5%f1%7a%f2%ae%19%5a%3e%6b%f0%6c%01%fb%2f%b6%00%f6%82%ff%99%4f%49%a3%26%2c%58%32%e5%d2%c6%74%6c%3a%63%c0%76%79%bd%6e%c5%80%9a%4b%ad%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%1f%06%03%55%1d%23%04%18%30%16%80%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%71%5f%c5%e7%d0%3b%87%d7%29%57%09%f4%5a%96%4a%10%69%3b%f5%cf%78%52%f1%5c%3d%b7%06%94%84%27%de%69%92%5c%b7%42%36%c6%0e%bb%41%4a%36%01%b3%97%89%78%8d%b5%8f%4b%a4%ad%b0%53%21%9b%80%ea%7d%35%d2%4a%c3%e6%7d%93%a4%58%1e%31%17%ed%fb%5c%33%67%f9%bb%d7%b2%08%be%68%be%98%95%cb%e6%ff%30%21%af%d1%5e%f2%a3%74%fc%dc%b5%7b%9a%c5%44%9e%b7%77%ea%71%a7%ab%6c%f7%43%09%c2%cd%38%73%54%ab%bd%79%05%fc%f0%a1%ed%2c%c3%6f%07%57%15%74%2b%34%13%88%c3%4d%8c%0e%22%36%7f%64%31%25%c5%51%90%74%2b%85%37%dd%7b%51%92%8b%6f%c5%43%2f%da%ba%3c%f6%42%13%98%be%af%b1%c5%12%e3%36%f3%74%a9%d2%8b%87%1d%c1%f1%9e%bf%12%73%22%7b%00%02%c5%af%25%9b%a4%80%5c%2f%39%45%0c%7e%bd%1b%32%68%b6%f4%12%ae%8f%ce%48%a0%cf%53%be%7c%65%03%3b%65%02%e4%bd%12%7e%a5%fe%da%44%3b%8b%54%57%7f%79%42%3c%ad%68%fe%5f%9d%bb%84%b2%05%31%82%02%2c%30%82%02%28%02%01%01%30%1a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%a0%81%e4%30%18%06%09%2a%86%48%86%f7%0d%01%09%03%31%0b%06%09%2a%86%48%86%f7%0d%01%07%01%30%1c%06%09%2a%86%48%86%f7%0d%01%09%05%31%0f%17%0d%31%34%31%30%32%33%30%30%33%34%33%33%5a%30%2f%06%09%2a%86%48%86%f7%0d%01%09%04%31%22%04%20%4e%89%35%2a%25%7a%9d%4f%46%07%62%60%71%b3%4f%42%ce%b4%ad%fa%6f%fa%f9%12%85%8c%ac%ed%89%a5%9a%f7%30%79%06%09%2a%86%48%86%f7%0d%01%09%0f%31%6c%30%6a%30%0b%06%09%60%86%48%01%65%03%04%01%2a%30%0b%06%09%60%86%48%01%65%03%04%01%16%30%0b%06%09%60%86%48%01%65%03%04%01%02%30%0a%06%08%2a%86%48%86%f7%0d%03%07%30%0e%06%08%2a%86%48%86%f7%0d%03%02%02%02%00%80%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%40%30%07%06%05%2b%0e%03%02%07%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%28%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%04%82%01%00%22%b4%9c%4d%62%93%b4%d3%a9%97%4c%0e%3d%c3%5f%56%0a%01%85%b9%d6%c8%ed%ec%1d%c6%54%53%30%cf%23%a3%8c%78%83%e5%2d%b0%4e%1a%45%7e%42%ae%b9%d9%9a%8f%ad%e9%8b%3f%93%88%ac%8c%7f%6e%7f%5b%76%1d%e6%33%36%c6%0a%aa%7c%91%a4%75%33%aa%6b%ce%e7%f8%78%0f%47%ae%02%60%ff%a3%f0%8f%df%53%f2%41%f2%1f%f8%95%2c%ef%c6%28%b7%a1%a6%b0%81%3b%c8%58%f6%e9%eb%ff%2c%e2%37%42%bf%6f%29%86%87%d4%96%b4%ab%d5%e9%e7%45%17%89%e5%d8%e1%65%25%d2%20%fd%28%ea%3a%44%2e%ee%dc%ed%5f%c4%cf%75%0e%ea%d4%79%23%3d%cb%0e%bd%a2%ec%1e%46%96%51%04%31%bd%a5%85%d7%db%56%68%58%57%21%ef%5f%e1%b2%d5%89%4f%05%a7%61%c0%f3%91%78%30%81%89%1f%8a%fc%77%a3%f5%62%c4%0b%e2%24%bf%ab%31%bb%c0%a0%92%be%df%db%05%d2%56%19%e7%10%84%8d%d4%d3%af%6d%20%d3%5e%9b%1c%6b%f9%84%bb%19%9c%4d%c3%58%61%81%39%66%ec%5a%74%15%16%28%a2%be%11%c0%a1%59%c0%a5%e4%94%a7%4a%87%b5%ab%15%5c%2b%f0%72%e9%07%00%00%00%00%00%00%cd%07%00%00%11%11%11%11%22%22%33%33%44%44%12%34%56%78%9a%bc%30%82%07%b9%30%82%06%a1%a0%03%02%01%02%02%0a%1d%df%7e%0d%00%02%00%02%88%4e%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%56%31%0b%30%09%06%03%55%04%06%13%02%55%53%31%1a%30%18%06%03%55%04%0a%13%11%49%6e%74%65%6c%20%43%6f%72%70%6f%72%61%74%69%6f%6e%31%2b%30%29%06%03%55%04%03%13%22%49%6e%74%65%6c%20%49%6e%74%72%61%6e%65%74%20%42%61%73%69%63%20%49%73%73%75%69%6e%67%20%43%41%20%32%42%30%1e%17%0d%31%34%30%38%31%38%32%33%34%38%34%37%5a%17%0d%31%35%30%38%31%38%32%33%34%38%34%37%5a%30%81%81%31%0b%30%09%06%03%55%04%06%13%02%55%53%31%0b%30%09%06%03%55%04%08%13%02%43%41%31%14%30%12%06%03%55%04%07%13%0b%53%61%6e%74%61%20%43%6c%61%72%61%31%1a%30%18%06%03%55%04%0a%13%11%49%6e%74%65%6c%20%43%6f%72%70%6f%72%61%74%69%6f%6e%31%33%30%31%06%03%55%04%03%13%2a%49%6e%74%65%6c%28%52%29%20%4f%54%43%20%41%6e%64%72%6f%69%64%20%54%45%53%54%20%55%45%46%49%20%42%6f%6f%74%20%53%69%67%6e%65%72%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%dd%fb%23%26%ac%17%69%a3%86%f0%ed%e2%cc%fe%f0%6c%23%b7%e2%ef%12%f5%68%1b%74%b7%94%bf%de%17%a7%56%ba%20%be%54%d6%ba%26%f6%ce%ff%0d%f3%06%e1%10%20%49%8f%54%59%fa%c9%10%84%29%bc%b9%71%d5%ab%05%35%63%9c%14%bb%95%87%72%75%33%e4%95%35%50%16%cf%ed%01%26%54%e5%5b%11%29%72%ec%32%77%16%5e%54%03%4f%47%aa%ea%2b%fd%e8%06%ec%f4%cf%8a%ae%03%79%af%1f%f3%e8%58%c4%57%28%ca%07%99%4d%06%f9%e9%d6%de%ed%b1%42%7e%56%18%cf%2e%24%07%80%ca%37%75%96%f2%8c%dd%b6%3d%15%14%20%aa%f8%6a%ad%d0%53%37%0f%c7%3d%cb%e0%01%2e%48%78%04%2b%63%84%b2%59%18%98%07%6f%57%1f%87%5f%0a%df%66%1e%8b%bf%cd%2c%1e%87%b9%b7%e8%eb%81%07%5f%01%d0%27%f6%46%b7%fc%e1%f9%12%72%60%71%a1%24%b4%ee%57%45%c5%9c%00%17%57%8a%a2%b4%2b%99%45%12%af%2e%14%c2%4e%cf%a4%9a%4b%bc%7f%d3%fb%ab%af%ed%81%10%3f%9c%d7%f3%4d%8e%5a%4c%aa%79%02%03%01%00%01%a3%82%04%5b%30%82%04%57%30%0b%06%03%55%1d%0f%04%04%03%02%07%80%30%13%06%03%55%1d%25%04%0c%30%0a%06%08%2b%06%01%05%05%07%03%03%30%1d%06%03%55%1d%0e%04%16%04%14%64%6c%73%b9%20%4a%00%13%8e%dc%27%81%1e%a1%96%9f%06%80%f0%2a%30%1f%06%03%55%1d%23%04%18%30%16%80%14%38%63%76%fa%b6%05%3a%a9%59%4f%4a%87%8d%a0%83%b7%7e%91%3a%0b%30%82%01%b9%06%03%55%1d%1f%04%82%01%b0%30%82%01%ac%30%82%01%a8%a0%82%01%a4%a0%82%01%a0%86%81%e2%6c%64%61%70%3a%2f%2f%2f%43%4e%3d%49%6e%74%65%6c%25%32%30%49%6e%74%72%61%6e%65%74%25%32%30%42%61%73%69%63%25%32%30%49%73%73%75%69%6e%67%25%32%30%43%41%25%32%30%32%42%28%32%29%2c%43%4e%3d%41%5a%53%4d%43%53%49%42%45%43%41%30%32%2c%43%4e%3d%43%44%50%2c%43%4e%3d%50%75%62%6c%69%63%25%32%30%4b%65%79%25%32%30%53%65%72%76%69%63%65%73%2c%43%4e%3d%53%65%72%76%69%63%65%73%2c%43%4e%3d%43%6f%6e%66%69%67%75%72%61%74%69%6f%6e%2c%44%43%3d%63%6f%72%70%2c%44%43%3d%69%6e%74%65%6c%2c%44%43%3d%63%6f%6d%3f%63%65%72%74%69%66%69%63%61%74%65%52%65%76%6f%63%61%74%69%6f%6e%4c%69%73%74%3f%62%61%73%65%3f%6f%62%6a%65%63%74%43%6c%61%73%73%3d%63%52%4c%44%69%73%74%72%69%62%75%74%69%6f%6e%50%6f%69%6e%74%86%57%68%74%74%70%3a%2f%2f%77%77%77%2e%69%6e%74%65%6c%2e%63%6f%6d%2f%72%65%70%6f%73%69%74%6f%72%79%2f%43%52%4c%2f%49%6e%74%65%6c%25%32%30%49%6e%74%72%61%6e%65%74%25%32%30%42%61%73%69%63%25%32%30%49%73%73%75%69%6e%67%25%32%30%43%41%25%32%30%32%42%28%32%29%2e%63%72%6c%86%60%68%74%74%70%3a%2f%2f%63%65%72%74%69%66%69%63%61%74%65%73%2e%69%6e%74%65%6c%2e%63%6f%6d%2f%72%65%70%6f%73%69%74%6f%72%79%2f%43%52%4c%2f%49%6e%74%65%6c%25%32%30%49%6e%74%72%61%6e%65%74%25%32%30%42%61%73%69%63%25%32%30%49%73%73%75%69%6e%67%25%32%30%43%41%25%32%30%32%42%28%32%29%2e%63%72%6c%30%82%01%cb%06%08%2b%06%01%05%05%07%01%01%04%82%01%bd%30%82%01%b9%30%81%d1%06%08%2b%06%01%05%05%07%30%02%86%81%c4%6c%64%61%70%3a%2f%2f%2f%43%4e%3d%49%6e%74%65%6c%25%32%30%49%6e%74%72%61%6e%65%74%25%32%30%42%61%73%69%63%25%32%30%49%73%73%75%69%6e%67%25%32%30%43%41%25%32%30%32%42%2c%43%4e%3d%41%49%41%2c%43%4e%3d%50%75%62%6c%69%63%25%32%30%4b%65%79%25%32%30%53%65%72%76%69%63%65%73%2c%43%4e%3d%53%65%72%76%69%63%65%73%2c%43%4e%3d%43%6f%6e%66%69%67%75%72%61%74%69%6f%6e%2c%44%43%3d%63%6f%72%70%2c%44%43%3d%69%6e%74%65%6c%2c%44%43%3d%63%6f%6d%3f%63%41%43%65%72%74%69%66%69%63%61%74%65%3f%62%61%73%65%3f%6f%62%6a%65%63%74%43%6c%61%73%73%3d%63%65%72%74%69%66%69%63%61%74%69%6f%6e%41%75%74%68%6f%72%69%74%79%30%6c%06%08%2b%06%01%05%05%07%30%02%86%60%68%74%74%70%3a%2f%2f%77%77%77%2e%69%6e%74%65%6c%2e%63%6f%6d%2f%72%65%70%6f%73%69%74%6f%72%79%2f%63%65%72%74%69%66%69%63%61%74%65%73%2f%49%6e%74%65%6c%25%32%30%49%6e%74%72%61%6e%65%74%25%32%30%42%61%73%69%63%25%32%30%49%73%73%75%69%6e%67%25%32%30%43%41%25%32%30%32%42%28%32%29%2e%63%72%74%30%75%06%08%2b%06%01%05%05%07%30%02%86%69%68%74%74%70%3a%2f%2f%63%65%72%74%69%66%69%63%61%74%65%73%2e%69%6e%74%65%6c%2e%63%6f%6d%2f%72%65%70%6f%73%69%74%6f%72%79%2f%63%65%72%74%69%66%69%63%61%74%65%73%2f%49%6e%74%65%6c%25%32%30%49%6e%74%72%61%6e%65%74%25%32%30%42%61%73%69%63%25%32%30%49%73%73%75%69%6e%67%25%32%30%43%41%25%32%30%32%42%28%32%29%2e%63%72%74%30%0c%06%03%55%1d%13%01%01%ff%04%02%30%00%30%3c%06%09%2b%06%01%04%01%82%37%15%07%04%2f%30%2d%06%25%2b%06%01%04%01%82%37%15%08%86%c3%8c%75%84%99%e5%51%83%fd%81%28%85%8e%9f%53%82%91%c0%09%67%dc%cd%58%81%ca%97%0f%02%01%64%02%01%08%30%1b%06%09%2b%06%01%04%01%82%37%15%0a%04%0e%30%0c%30%0a%06%08%2b%06%01%05%05%07%03%03%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%a9%0c%9f%7b%f9%29%7f%fb%2b%b1%df%c6%6b%ab%e9%e8%98%43%c7%19%44%4c%27%d6%08%6c%7a%29%48%87%51%b4%c2%ea%78%00%76%89%7a%df%99%2e%3c%2d%39%f6%f8%0e%d2%a8%74%eb%20%c3%df%77%35%38%8c%5d%10%58%fa%fc%89%35%c5%e9%5c%ca%2e%1f%56%d1%b7%94%2c%b9%cd%b6%c6%25%3d%e4%2b%16%5d%26%98%9a%b5%e8%d5%8f%06%4f%9c%e4%ff%6b%1e%2c%31%91%2d%e2%15%fd%b9%79%29%58%8b%83%6b%7f%4f%a1%7c%21%30%c7%63%6f%b2%df%1d%f2%46%40%3f%47%c7%70%4d%36%ac%d7%a5%58%06%6d%ca%93%ec%07%7c%0c%05%37%1a%86%0b%cd%4c%57%a3%46%f5%3e%1b%32%93%f6%e9%93%21%e6%1f%a6%41%be%32%06%a6%bd%25%d6%89%81%11%6f%5b%8f%27%0e%43%21%cf%4a%75%72%1d%0d%d7%b3%c4%cd%c2%11%d5%ca%23%79%1b%91%58%fb%14%0f%a8%d6%64%33%41%31%a6%e7%09%85%b7%56%41%5b%ff%b1%9b%c7%9a%81%a4%f2%73%c6%88%0a%90%cf%de%b9%19%10%09%6c%7b%6d%2d%f0%a9%f5%7d%f0%d0%50%55%45
-
-GUID = 8be4df61-93ca-11d2-aa0d-00e098032b8c
-
-[ad] KEK %df%07%09%17%00%22%21%00%00%00%00%00%00%00%00%00%75%05%00%00%00%02%f1%0e%9d%d2%af%4a%df%68%ee%49%8a%a9%34%7d%37%56%65%a7%30%82%05%59%06%09%2a%86%48%86%f7%0d%01%07%02%a0%82%05%4a%30%82%05%46%02%01%01%31%0f%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%30%0b%06%09%2a%86%48%86%f7%0d%01%07%01%a0%82%02%f1%30%82%02%ed%30%82%01%d5%a0%03%02%01%02%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%33%33%5a%17%0d%34%31%30%32%32%34%31%37%33%35%33%33%5a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%b8%05%3e%db%dd%14%b4%b9%99%0b%94%3a%82%33%c7%ec%5e%d3%e9%2b%9f%20%10%1a%ff%d4%87%d7%a9%65%cb%5b%9f%f1%aa%0f%1f%c9%d4%da%a6%a3%cf%0e%5d%c3%02%64%3d%ad%27%9f%20%45%7d%58%9e%a4%c8%b3%ad%9f%df%95%9e%5d%ec%21%0e%80%99%2b%54%af%d9%ee%ab%fd%6d%a1%bd%a0%43%b7%5c%65%54%cb%fa%59%59%66%c2%57%12%b5%3c%e4%5a%b9%d9%c4%f8%3b%46%2c%42%12%6c%d0%4a%d4%ee%e8%0a%2d%1c%d0%eb%16%83%08%19%da%61%d5%9b%6f%70%37%f4%be%44%fa%ff%74%5c%c6%76%45%75%35%bc%0a%67%9d%05%ab%3b%51%28%0d%8d%25%45%95%f8%b9%0c%a4%28%15%65%97%87%6d%c0%e8%c0%ab%52%93%7e%4f%ea%07%6d%58%a5%2d%80%f6%bf%d6%e3%81%d8%53%ee%d0%1c%a7%7f%77%0c%97%37%18%51%2e%b1%2f%c9%19%e3%1b%be%b3%78%22%d4%17%e5%f1%7a%f2%ae%19%5a%3e%6b%f0%6c%01%fb%2f%b6%00%f6%82%ff%99%4f%49%a3%26%2c%58%32%e5%d2%c6%74%6c%3a%63%c0%76%79%bd%6e%c5%80%9a%4b%ad%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%1f%06%03%55%1d%23%04%18%30%16%80%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%71%5f%c5%e7%d0%3b%87%d7%29%57%09%f4%5a%96%4a%10%69%3b%f5%cf%78%52%f1%5c%3d%b7%06%94%84%27%de%69%92%5c%b7%42%36%c6%0e%bb%41%4a%36%01%b3%97%89%78%8d%b5%8f%4b%a4%ad%b0%53%21%9b%80%ea%7d%35%d2%4a%c3%e6%7d%93%a4%58%1e%31%17%ed%fb%5c%33%67%f9%bb%d7%b2%08%be%68%be%98%95%cb%e6%ff%30%21%af%d1%5e%f2%a3%74%fc%dc%b5%7b%9a%c5%44%9e%b7%77%ea%71%a7%ab%6c%f7%43%09%c2%cd%38%73%54%ab%bd%79%05%fc%f0%a1%ed%2c%c3%6f%07%57%15%74%2b%34%13%88%c3%4d%8c%0e%22%36%7f%64%31%25%c5%51%90%74%2b%85%37%dd%7b%51%92%8b%6f%c5%43%2f%da%ba%3c%f6%42%13%98%be%af%b1%c5%12%e3%36%f3%74%a9%d2%8b%87%1d%c1%f1%9e%bf%12%73%22%7b%00%02%c5%af%25%9b%a4%80%5c%2f%39%45%0c%7e%bd%1b%32%68%b6%f4%12%ae%8f%ce%48%a0%cf%53%be%7c%65%03%3b%65%02%e4%bd%12%7e%a5%fe%da%44%3b%8b%54%57%7f%79%42%3c%ad%68%fe%5f%9d%bb%84%b2%05%31%82%02%2c%30%82%02%28%02%01%01%30%1a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%a0%81%e4%30%18%06%09%2a%86%48%86%f7%0d%01%09%03%31%0b%06%09%2a%86%48%86%f7%0d%01%07%01%30%1c%06%09%2a%86%48%86%f7%0d%01%09%05%31%0f%17%0d%31%34%31%30%32%33%30%30%33%34%33%33%5a%30%2f%06%09%2a%86%48%86%f7%0d%01%09%04%31%22%04%20%6f%80%03%af%93%1c%1e%d9%ab%e1%29%0f%1c%0c%1a%61%32%fe%66%e5%c0%e1%f0%72%99%15%5a%8e%7c%ae%5a%70%30%79%06%09%2a%86%48%86%f7%0d%01%09%0f%31%6c%30%6a%30%0b%06%09%60%86%48%01%65%03%04%01%2a%30%0b%06%09%60%86%48%01%65%03%04%01%16%30%0b%06%09%60%86%48%01%65%03%04%01%02%30%0a%06%08%2a%86%48%86%f7%0d%03%07%30%0e%06%08%2a%86%48%86%f7%0d%03%02%02%02%00%80%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%40%30%07%06%05%2b%0e%03%02%07%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%28%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%04%82%01%00%27%63%01%c8%9b%80%0f%16%72%da%58%80%92%2d%ce%34%b1%0c%45%53%05%fe%c0%15%19%30%55%aa%c3%50%9a%ef%ef%ab%f7%cc%e0%f0%b2%6f%89%99%dd%c5%f7%b7%9a%48%fd%8d%95%97%9b%e9%33%2b%4a%38%c9%37%59%8f%6e%0b%6c%da%fe%38%6b%0c%0b%14%4d%ca%58%5c%69%0a%d2%e5%38%59%20%42%57%cd%99%11%58%b6%9f%ab%c3%bc%5a%65%d7%62%e1%57%68%dd%ec%e4%11%c8%58%78%35%a6%04%b2%3e%49%73%c8%f3%40%64%01%c4%6c%31%9c%5b%3e%c1%bf%3b%d1%db%d7%e0%ad%50%03%01%47%c0%06%22%ec%13%67%49%ef%8f%69%d7%97%0d%60%e6%a8%43%7e%fb%89%09%85%34%a8%c1%41%d1%42%da%dc%77%c5%58%dc%0a%ba%a5%e8%7b%d5%53%bf%b8%3c%93%05%d0%8a%29%25%79%79%3e%5b%f6%cb%78%69%2a%ad%f8%ab%f3%23%73%de%7d%bd%8b%0c%94%08%35%69%a8%56%d1%20%3c%0b%7e%13%7e%dd%06%99%25%13%46%7b%2f%75%5d%2c%e4%35%01%2a%60%dd%b1%94%41%85%8d%05%3c%e1%f4%4e%19%bd%a1%b0%d2%26%54%70%a1%59%c0%a5%e4%94%a7%4a%87%b5%ab%15%5c%2b%f0%72%21%04%00%00%00%00%00%00%05%04%00%00%11%11%11%11%22%22%33%33%44%44%12%34%56%78%9a%bc%30%82%03%f1%30%82%02%d9%a0%03%02%01%02%02%10%7a%29%53%59%d7%62%f0%8a%49%11%26%21%5b%1c%4d%fe%30%0d%06%09%2a%86%48%86%f7%0d%01%01%0b%05%00%30%79%31%1a%30%18%06%03%55%04%0a%13%11%49%6e%74%65%6c%20%43%6f%72%70%6f%72%61%74%69%6f%6e%31%14%30%12%06%03%55%04%07%13%0b%53%61%6e%74%61%20%43%6c%61%72%61%31%0b%30%09%06%03%55%04%08%13%02%43%41%31%0b%30%09%06%03%55%04%06%13%02%55%53%31%2b%30%29%06%03%55%04%03%13%22%49%6e%74%65%6c%28%52%29%20%4f%54%43%20%41%6e%64%72%6f%69%64%20%54%45%53%54%20%55%45%46%49%20%4b%45%4b%30%1e%17%0d%31%34%31%30%32%33%30%30%30%31%35%32%5a%17%0d%34%34%31%30%32%33%30%30%30%31%35%32%5a%30%79%31%1a%30%18%06%03%55%04%0a%13%11%49%6e%74%65%6c%20%43%6f%72%70%6f%72%61%74%69%6f%6e%31%14%30%12%06%03%55%04%07%13%0b%53%61%6e%74%61%20%43%6c%61%72%61%31%0b%30%09%06%03%55%04%08%13%02%43%41%31%0b%30%09%06%03%55%04%06%13%02%55%53%31%2b%30%29%06%03%55%04%03%13%22%49%6e%74%65%6c%28%52%29%20%4f%54%43%20%41%6e%64%72%6f%69%64%20%54%45%53%54%20%55%45%46%49%20%4b%45%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%ea%66%68%84%41%36%70%3c%87%68%17%8b%aa%c8%dc%b5%60%5b%bf%7d%1e%3d%d8%cb%17%21%9e%fa%da%6d%67%eb%34%7a%9b%12%fd%51%8f%45%44%f2%0d%81%cc%2b%a8%d6%8f%31%cf%03%91%f2%b8%eb%09%36%01%6d%95%4e%cc%9e%78%ab%4e%87%96%22%f4%ee%d0%63%a1%7a%3b%88%70%91%1b%80%0d%b7%e2%01%0b%b0%95%16%a7%58%95%c5%bc%a6%71%c6%e9%d9%c9%96%2b%c4%52%29%a9%a3%6c%43%09%19%d4%c1%ba%6d%29%c2%3f%94%8b%bb%c7%c8%c6%1b%7c%37%55%7f%bf%f5%14%4b%98%5e%25%a2%ed%57%0b%fd%15%01%b4%3d%35%fc%c7%15%7c%91%84%7c%9e%35%70%8a%9f%8a%fc%82%08%69%4b%99%95%f1%5b%c6%22%9c%8d%8d%fb%21%83%1f%29%58%da%dc%1c%72%b0%df%ad%5a%5d%d6%49%9f%b2%04%f5%e4%5b%42%da%ec%d0%1a%e0%e6%8d%c8%74%e5%e7%54%20%af%f0%7f%40%dc%15%1c%cf%c7%0f%93%22%b5%52%a0%ff%f9%bc%e7%65%ac%c5%4e%70%88%64%58%61%36%a1%6d%76%a7%72%b3%16%63%57%c2%76%9d%22%ec%ea%99%02%03%01%00%01%a3%75%30%73%30%0b%06%03%55%1d%0f%04%04%03%02%01%86%30%13%06%03%55%1d%25%04%0c%30%0a%06%08%2b%06%01%05%05%07%03%03%30%0f%06%03%55%1d%13%01%01%ff%04%05%30%03%01%01%ff%30%1d%06%03%55%1d%0e%04%16%04%14%5f%09%73%f2%ff%0e%ea%b2%43%7d%52%e2%85%66%ff%66%53%d4%d2%b3%30%1f%06%03%55%1d%23%04%18%30%16%80%14%5f%09%73%f2%ff%0e%ea%b2%43%7d%52%e2%85%66%ff%66%53%d4%d2%b3%30%0d%06%09%2a%86%48%86%f7%0d%01%01%0b%05%00%03%82%01%01%00%6a%ab%5e%a9%12%e3%88%65%9f%23%c6%85%15%4a%a4%cd%e6%05%21%43%aa%8f%f1%c8%9f%92%e3%39%55%77%9d%91%c4%59%44%11%2c%51%dc%d4%e3%c3%b8%d8%ec%51%b7%eb%3e%e1%72%41%2a%c8%ea%2b%ce%41%d0%19%16%c2%16%79%df%32%44%d6%ee%55%ce%23%a7%67%fe%25%1b%78%72%47%26%a8%c3%f8%2a%e0%0a%31%34%b4%0f%54%44%f6%bb%f4%c4%5b%4f%c8%1d%5e%10%ea%42%a7%9f%02%c2%18%2e%d4%e6%ad%7e%ab%d8%4a%8a%5e%7d%51%c3%9e%75%19%1a%36%d9%1b%e2%81%b5%1d%69%68%4c%9c%e3%9e%7c%4f%e0%de%5e%a6%91%26%ca%4a%99%e4%ae%60%91%7b%1c%5f%f4%4f%2b%dc%5a%a9%94%77%12%c7%f7%66%57%2d%a0%56%76%22%f7%a7%b5%b3%d3%1b%66%ff%7a%c0%7c%87%4d%d1%59%b4%51%28%39%60%48%98%b6%1f%f7%db%42%1c%dd%35%30%d0%0b%0b%3d%08%31%43%f1%af%f1%c9%c8%7e%86%d7%bd%6c%f4%2e%ec%f5%81%df%76%aa%fb%79%aa%fe%af%ff%aa%ff%59%90%ee%91%7f%91%ad%e3%86%53%c1%c7%9f%0c%ac%63
-
-[ad] PK %df%07%08%18%12%2f%0f%00%00%00%00%00%00%00%00%00%75%05%00%00%00%02%f1%0e%9d%d2%af%4a%df%68%ee%49%8a%a9%34%7d%37%56%65%a7%30%82%05%59%06%09%2a%86%48%86%f7%0d%01%07%02%a0%82%05%4a%30%82%05%46%02%01%01%31%0f%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%30%0b%06%09%2a%86%48%86%f7%0d%01%07%01%a0%82%02%f1%30%82%02%ed%30%82%01%d5%a0%03%02%01%02%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%33%33%5a%17%0d%34%31%30%32%32%34%31%37%33%35%33%33%5a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%b8%05%3e%db%dd%14%b4%b9%99%0b%94%3a%82%33%c7%ec%5e%d3%e9%2b%9f%20%10%1a%ff%d4%87%d7%a9%65%cb%5b%9f%f1%aa%0f%1f%c9%d4%da%a6%a3%cf%0e%5d%c3%02%64%3d%ad%27%9f%20%45%7d%58%9e%a4%c8%b3%ad%9f%df%95%9e%5d%ec%21%0e%80%99%2b%54%af%d9%ee%ab%fd%6d%a1%bd%a0%43%b7%5c%65%54%cb%fa%59%59%66%c2%57%12%b5%3c%e4%5a%b9%d9%c4%f8%3b%46%2c%42%12%6c%d0%4a%d4%ee%e8%0a%2d%1c%d0%eb%16%83%08%19%da%61%d5%9b%6f%70%37%f4%be%44%fa%ff%74%5c%c6%76%45%75%35%bc%0a%67%9d%05%ab%3b%51%28%0d%8d%25%45%95%f8%b9%0c%a4%28%15%65%97%87%6d%c0%e8%c0%ab%52%93%7e%4f%ea%07%6d%58%a5%2d%80%f6%bf%d6%e3%81%d8%53%ee%d0%1c%a7%7f%77%0c%97%37%18%51%2e%b1%2f%c9%19%e3%1b%be%b3%78%22%d4%17%e5%f1%7a%f2%ae%19%5a%3e%6b%f0%6c%01%fb%2f%b6%00%f6%82%ff%99%4f%49%a3%26%2c%58%32%e5%d2%c6%74%6c%3a%63%c0%76%79%bd%6e%c5%80%9a%4b%ad%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%1f%06%03%55%1d%23%04%18%30%16%80%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%71%5f%c5%e7%d0%3b%87%d7%29%57%09%f4%5a%96%4a%10%69%3b%f5%cf%78%52%f1%5c%3d%b7%06%94%84%27%de%69%92%5c%b7%42%36%c6%0e%bb%41%4a%36%01%b3%97%89%78%8d%b5%8f%4b%a4%ad%b0%53%21%9b%80%ea%7d%35%d2%4a%c3%e6%7d%93%a4%58%1e%31%17%ed%fb%5c%33%67%f9%bb%d7%b2%08%be%68%be%98%95%cb%e6%ff%30%21%af%d1%5e%f2%a3%74%fc%dc%b5%7b%9a%c5%44%9e%b7%77%ea%71%a7%ab%6c%f7%43%09%c2%cd%38%73%54%ab%bd%79%05%fc%f0%a1%ed%2c%c3%6f%07%57%15%74%2b%34%13%88%c3%4d%8c%0e%22%36%7f%64%31%25%c5%51%90%74%2b%85%37%dd%7b%51%92%8b%6f%c5%43%2f%da%ba%3c%f6%42%13%98%be%af%b1%c5%12%e3%36%f3%74%a9%d2%8b%87%1d%c1%f1%9e%bf%12%73%22%7b%00%02%c5%af%25%9b%a4%80%5c%2f%39%45%0c%7e%bd%1b%32%68%b6%f4%12%ae%8f%ce%48%a0%cf%53%be%7c%65%03%3b%65%02%e4%bd%12%7e%a5%fe%da%44%3b%8b%54%57%7f%79%42%3c%ad%68%fe%5f%9d%bb%84%b2%05%31%82%02%2c%30%82%02%28%02%01%01%30%1a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%60%86%48%01%65%03%04%02%01%05%00%a0%81%e4%30%18%06%09%2a%86%48%86%f7%0d%01%09%03%31%0b%06%09%2a%86%48%86%f7%0d%01%07%01%30%1c%06%09%2a%86%48%86%f7%0d%01%09%05%31%0f%17%0d%31%34%30%39%32%34%31%38%34%37%31%35%5a%30%2f%06%09%2a%86%48%86%f7%0d%01%09%04%31%22%04%20%d8%70%e8%3e%d2%78%35%37%fb%18%82%d2%20%6d%0d%ab%0e%24%e8%9a%78%ca%eb%40%03%57%8f%a2%c6%ff%80%73%30%79%06%09%2a%86%48%86%f7%0d%01%09%0f%31%6c%30%6a%30%0b%06%09%60%86%48%01%65%03%04%01%2a%30%0b%06%09%60%86%48%01%65%03%04%01%16%30%0b%06%09%60%86%48%01%65%03%04%01%02%30%0a%06%08%2a%86%48%86%f7%0d%03%07%30%0e%06%08%2a%86%48%86%f7%0d%03%02%02%02%00%80%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%40%30%07%06%05%2b%0e%03%02%07%30%0d%06%08%2a%86%48%86%f7%0d%03%02%02%01%28%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%04%82%01%00%5f%12%2e%d5%cf%fa%08%13%cd%be%58%a6%03%e9%81%62%9f%0f%9f%e4%70%0f%7b%7d%63%90%c7%2f%52%5f%d5%34%e3%f9%7c%8c%b8%2e%ae%e5%a7%3f%5a%58%5a%96%36%9f%3e%3f%e7%78%6d%27%e2%1d%67%da%57%b0%24%ed%45%95%a6%9a%d5%a2%49%9f%d3%42%cd%3a%7e%4e%45%33%18%fd%8a%7d%8f%3b%5a%0f%0d%c2%39%86%c7%95%0c%a8%88%6a%c6%4e%29%01%ac%9b%ac%a6%fc%6d%39%1b%39%4d%ca%24%de%97%df%21%6d%2d%74%8e%e1%22%52%4e%80%14%70%5a%22%d1%b4%e2%6b%43%f3%68%2b%f0%7f%eb%dd%34%43%15%50%1c%77%f2%5d%38%58%1c%77%a0%79%50%a3%44%f3%45%51%22%16%81%e6%53%dc%27%58%94%c4%46%a5%cc%64%ae%81%59%15%7f%4e%60%82%d7%77%85%ff%c0%de%32%43%c6%cf%47%e5%fd%91%bb%23%79%3f%49%9e%f5%b2%e7%3e%49%0d%a3%65%62%ad%28%82%59%e7%0f%b4%be%16%ee%1c%d5%70%85%bf%48%08%b0%d6%5c%e6%14%4a%17%39%73%fe%11%ea%fd%e1%15%ac%7a%04%ad%1c%85%58%25%d7%a1%71%c3%a1%59%c0%a5%e4%94%a7%4a%87%b5%ab%15%5c%2b%f0%72%1d%03%00%00%00%00%00%00%01%03%00%00%11%11%11%11%22%22%33%33%44%44%12%34%56%78%9a%bc%30%82%02%ed%30%82%01%d5%a0%03%02%01%02%02%09%00%d8%a5%05%cb%83%d3%38%b8%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%1e%17%0d%31%33%31%30%30%39%31%37%33%35%33%33%5a%17%0d%34%31%30%32%32%34%31%37%33%35%33%33%5a%30%0d%31%0b%30%09%06%03%55%04%03%0c%02%50%4b%30%82%01%22%30%0d%06%09%2a%86%48%86%f7%0d%01%01%01%05%00%03%82%01%0f%00%30%82%01%0a%02%82%01%01%00%b8%05%3e%db%dd%14%b4%b9%99%0b%94%3a%82%33%c7%ec%5e%d3%e9%2b%9f%20%10%1a%ff%d4%87%d7%a9%65%cb%5b%9f%f1%aa%0f%1f%c9%d4%da%a6%a3%cf%0e%5d%c3%02%64%3d%ad%27%9f%20%45%7d%58%9e%a4%c8%b3%ad%9f%df%95%9e%5d%ec%21%0e%80%99%2b%54%af%d9%ee%ab%fd%6d%a1%bd%a0%43%b7%5c%65%54%cb%fa%59%59%66%c2%57%12%b5%3c%e4%5a%b9%d9%c4%f8%3b%46%2c%42%12%6c%d0%4a%d4%ee%e8%0a%2d%1c%d0%eb%16%83%08%19%da%61%d5%9b%6f%70%37%f4%be%44%fa%ff%74%5c%c6%76%45%75%35%bc%0a%67%9d%05%ab%3b%51%28%0d%8d%25%45%95%f8%b9%0c%a4%28%15%65%97%87%6d%c0%e8%c0%ab%52%93%7e%4f%ea%07%6d%58%a5%2d%80%f6%bf%d6%e3%81%d8%53%ee%d0%1c%a7%7f%77%0c%97%37%18%51%2e%b1%2f%c9%19%e3%1b%be%b3%78%22%d4%17%e5%f1%7a%f2%ae%19%5a%3e%6b%f0%6c%01%fb%2f%b6%00%f6%82%ff%99%4f%49%a3%26%2c%58%32%e5%d2%c6%74%6c%3a%63%c0%76%79%bd%6e%c5%80%9a%4b%ad%02%03%01%00%01%a3%50%30%4e%30%1d%06%03%55%1d%0e%04%16%04%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%1f%06%03%55%1d%23%04%18%30%16%80%14%9b%39%6b%10%10%c7%02%17%94%a3%fc%9c%f3%8a%1c%39%d0%f7%4b%15%30%0c%06%03%55%1d%13%04%05%30%03%01%01%ff%30%0d%06%09%2a%86%48%86%f7%0d%01%01%05%05%00%03%82%01%01%00%71%5f%c5%e7%d0%3b%87%d7%29%57%09%f4%5a%96%4a%10%69%3b%f5%cf%78%52%f1%5c%3d%b7%06%94%84%27%de%69%92%5c%b7%42%36%c6%0e%bb%41%4a%36%01%b3%97%89%78%8d%b5%8f%4b%a4%ad%b0%53%21%9b%80%ea%7d%35%d2%4a%c3%e6%7d%93%a4%58%1e%31%17%ed%fb%5c%33%67%f9%bb%d7%b2%08%be%68%be%98%95%cb%e6%ff%30%21%af%d1%5e%f2%a3%74%fc%dc%b5%7b%9a%c5%44%9e%b7%77%ea%71%a7%ab%6c%f7%43%09%c2%cd%38%73%54%ab%bd%79%05%fc%f0%a1%ed%2c%c3%6f%07%57%15%74%2b%34%13%88%c3%4d%8c%0e%22%36%7f%64%31%25%c5%51%90%74%2b%85%37%dd%7b%51%92%8b%6f%c5%43%2f%da%ba%3c%f6%42%13%98%be%af%b1%c5%12%e3%36%f3%74%a9%d2%8b%87%1d%c1%f1%9e%bf%12%73%22%7b%00%02%c5%af%25%9b%a4%80%5c%2f%39%45%0c%7e%bd%1b%32%68%b6%f4%12%ae%8f%ce%48%a0%cf%53%be%7c%65%03%3b%65%02%e4%bd%12%7e%a5%fe%da%44%3b%8b%54%57%7f%79%42%3c%ad%68%fe%5f%9d%bb%84%b2%05
-
diff --git a/ecss_signtools/testkeys/generate b/ecss_signtools/testkeys/generate
deleted file mode 100755
index d6a02a7..0000000
--- a/ecss_signtools/testkeys/generate
+++ /dev/null
@@ -1,83 +0,0 @@
-#! /bin/sh
-
-# Generates the key and certificate materials needed to sign an Android build
-# for a key set in the IT Enterprise Code Signing System (ECSS). It can be
-# used to generate new materials if the tool requirements change.
-#
-# This script can be used to generate key material for other ECSS key sets.
-# 1. Copy this script to the key set directory where new materials should be
-#    created
-# 2. Change the key names in the calls to make_stuff() to match your keys
-# 3. Update the AUTH_FILE definition, if necessary
-# 4. Run the script from inside the key set directory
-
-MAKEPK8_JAR="${ANDROID_BUILD_TOP}/out/host/linux-x86/ecss/framework/makepk8_ecss.jar"
-MAKEPK8="java -jar ${MAKEPK8_JAR}"
-SIGNFILE=~/ecss/SignFile
-CONVERTCERT="${ANDROID_BUILD_TOP}/out/host/linux-x86/bin/generate_verity_key -convert"
-AUTH_FILE=~/ecss/dpd-signing-ssl-combined.pem
-OUTPUT_DIR=`dirname "$0"`
-SERVER_URL="https://codesign-svc.intel.com/CertificateService31/Main.asmx"
-
-# Creates a PKCS #8 wrapper around the ECSS parameters that indicate server
-# and key name. The results are compatible with the ECSS JCE provider in
-# ../provider.
-#
-# Performs a test signature with each key to obtain the corresponding cert
-# to the ECSS public key. This is the only method for obtaining the cert
-# provided by the ECSS.
-make_stuff () {
-	local basefilename=$1
-	local keyname=$2
-	local makepem=$3
-
-	${MAKEPK8} ${makepem} ${OUTPUT_DIR}/${basefilename} "RSA" "-c ${keyname} -ws ${SERVER_URL}"
-
-	local tmp_input=`mktemp --suffix=.cert_extraction`
-	local tmp_output=`mktemp --suffix=.pk7 --dry-run`
-	echo "Dummy file to extract certificate" > ${tmp_input}
-	set -x
-	${SIGNFILE} -ac ${AUTH_FILE} -ts -ws ${SERVER_URL} -c ${keyname} -s cl -cf ${tmp_output} ${tmp_input}
-	openssl pkcs7 -print_certs -inform der -in ${tmp_output} > ${OUTPUT_DIR}/${basefilename}.x509.pem
-	set +x
-
-	rm ${tmp_input}
-	rm ${tmp_output}
-}
-
-if [ ! -n "${ANDROID_BUILD_TOP}" ]; then
-	echo "I'm hungry. Please lunch!"
-	exit 1
-fi
-if [ ! -e ${SIGNFILE} ]; then
-	echo "Please make sure SIGNFILE is set correctly. It doesn't seem to exist"
-	exit 1
-fi
-if [ ! -e ${AUTH_FILE} ]; then
-	echo "Please make sure AUTH_FILE is set correctly. It doesn't seem to exist"
-	exit 1
-fi
-if [ ! -e ${MAKEPK8_JAR} ]; then
-	echo "Must make ${MAKEPK8_JAR}"
-	exit 1
-fi
-if [ ! -e ${CONVERTCERT} ]; then
-	echo "Must make ${CONVERTCERT}"
-	exit 1
-fi
-
-# Create the PKCS #8 blobs and extract certs for signing keys
-# make_stuff <key-file-base> <ecss-key-name> [-pem]
-make_stuff releasekey OTC_Android_OS_TEST_Release
-make_stuff platform OTC_Android_OS_TEST_Platform
-make_stuff shared OTC_Android_OS_TEST_Shared
-make_stuff media OTC_Android_OS_TEST_Media
-make_stuff verity OTC_Android_OS_TEST_Verity
-make_stuff DB OTC_Android_OS_TEST_UEFI_Boot_Signer
-make_stuff oem OTC_Android_OS_TEST_OEM
-make_stuff KEK OTC_Android_OS_TEST_UEFI_KEK
-
-# Rename files and convert formats for dm-verity tool compatibility
-${CONVERTCERT} ${OUTPUT_DIR}/verity.x509.pem ${OUTPUT_DIR}/verity_key
-
-
diff --git a/ecss_signtools/testkeys/media.pk8 b/ecss_signtools/testkeys/media.pk8
deleted file mode 100644
index b2c34426b6c0deb7b1a28b21874b5cda93077648..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 122
zcmV~$!3x447y#gm5k&M3b`8`;w{9VWE@KD1i~RnpADV{B+7s-RyY_wUvSpk0u-l*4
z$ND=m#+tDSoi^sg1@OUYcaI?_3T`mYcE-9M19>jKg}-Y3l$%nJ0v38kQD%@7E50S9
YNomZLMgm{aV4ex^dQrWnD1DihKYqX`Q2+n{

diff --git a/ecss_signtools/testkeys/media.x509.pem b/ecss_signtools/testkeys/media.x509.pem
deleted file mode 100644
index 9ab5357..0000000
--- a/ecss_signtools/testkeys/media.x509.pem
+++ /dev/null
@@ -1,44 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIHrTCCBpWgAwIBAgIKHcjX/gACAAKISzANBgkqhkiG9w0BAQUFADBWMQswCQYD
-VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xKzApBgNVBAMTIklu
-dGVsIEludHJhbmV0IEJhc2ljIElzc3VpbmcgQ0EgMkIwHhcNMTQwODE4MjMyNDAz
-WhcNMTUwODE4MjMyNDAzWjB2MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFDAS
-BgNVBAcTC1NhbnRhIENsYXJhMRowGAYDVQQKExFJbnRlbCBDb3Jwb3JhdGlvbjEo
-MCYGA1UEAxMfSW50ZWwoUikgT1RDIEFuZHJvaWQgVEVTVCBNZWRpYTCCASIwDQYJ
-KoZIhvcNAQEBBQADggEPADCCAQoCggEBALptojIsF++g7dimtQO1XSbaNowT3OVJ
-KYYJ/PVpROHlTtIwA0z84G1DHI/MyK7ngiJLudzKb67Mz6qiIbhUcw240r2FJMu2
-XO4uPMG9w9dVKtZ93epw/VhCj05fMh7yP7jI+xOfY5CDaMdiNUIoblJgUr3rt8iU
-fg6DETjRW+UfN5OjMH09vP5BAuHPC8FcM5RvNLcetKJbAbF+9HqwtZ7+a2r382RM
-M5g+1rqs6weA+Z3CXkvW6N9iaMpq159xC5sTHhdVrko5wY17ZHISzMiibklepIKM
-xHVUsMPw33uDk2rtdu+LONC2dw9pT/q1d4rsNlG/wcnCtTv0nBTEM6UCAwEAAaOC
-BFswggRXMAsGA1UdDwQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4E
-FgQUFzHzsEcViuZ++ZLtJOWcua0rm8kwHwYDVR0jBBgwFoAUOGN2+rYFOqlZT0qH
-jaCDt36ROgswggG5BgNVHR8EggGwMIIBrDCCAaigggGkoIIBoIaB4mxkYXA6Ly8v
-Q049SW50ZWwlMjBJbnRyYW5ldCUyMEJhc2ljJTIwSXNzdWluZyUyMENBJTIwMkIo
-MiksQ049QVpTTUNTSUJFQ0EwMixDTj1DRFAsQ049UHVibGljJTIwS2V5JTIwU2Vy
-dmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1jb3JwLERDPWlu
-dGVsLERDPWNvbT9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0P2Jhc2U/b2JqZWN0
-Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnSGV2h0dHA6Ly93d3cuaW50ZWwuY29t
-L3JlcG9zaXRvcnkvQ1JML0ludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUyMElzc3Vp
-bmclMjBDQSUyMDJCKDIpLmNybIZgaHR0cDovL2NlcnRpZmljYXRlcy5pbnRlbC5j
-b20vcmVwb3NpdG9yeS9DUkwvSW50ZWwlMjBJbnRyYW5ldCUyMEJhc2ljJTIwSXNz
-dWluZyUyMENBJTIwMkIoMikuY3JsMIIBywYIKwYBBQUHAQEEggG9MIIBuTCB0QYI
-KwYBBQUHMAKGgcRsZGFwOi8vL0NOPUludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUy
-MElzc3VpbmclMjBDQSUyMDJCLENOPUFJQSxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2
-aWNlcyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPWNvcnAsREM9aW50
-ZWwsREM9Y29tP2NBQ2VydGlmaWNhdGU/YmFzZT9vYmplY3RDbGFzcz1jZXJ0aWZp
-Y2F0aW9uQXV0aG9yaXR5MGwGCCsGAQUFBzAChmBodHRwOi8vd3d3LmludGVsLmNv
-bS9yZXBvc2l0b3J5L2NlcnRpZmljYXRlcy9JbnRlbCUyMEludHJhbmV0JTIwQmFz
-aWMlMjBJc3N1aW5nJTIwQ0ElMjAyQigyKS5jcnQwdQYIKwYBBQUHMAKGaWh0dHA6
-Ly9jZXJ0aWZpY2F0ZXMuaW50ZWwuY29tL3JlcG9zaXRvcnkvY2VydGlmaWNhdGVz
-L0ludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUyMElzc3VpbmclMjBDQSUyMDJCKDIp
-LmNydDAMBgNVHRMBAf8EAjAAMDwGCSsGAQQBgjcVBwQvMC0GJSsGAQQBgjcVCIbD
-jHWEmeVRg/2BKIWOn1OCkcAJZ9zNWIHKlw8CAWQCAQgwGwYJKwYBBAGCNxUKBA4w
-DDAKBggrBgEFBQcDAzANBgkqhkiG9w0BAQUFAAOCAQEAofLE0RnI3CYTOAed2Iq8
-Wei8cI4s5WxdfOakciY1fuP8b9PpP+wiMjLGd2aF0ALQoNi7vCL1L/W7JUytGwTN
-IIhWpLq+fChVJ7m4C8KSPcubUJnR//s8GdcH8SUs94q7RhLOszL3/0c0ZS2MBphp
-ajW+qPCuRGBn3FXEKQ+YEdAo5BkLzyfhG44ab47X2SqnvFBLxG4NeOajKpnDt3Ab
-UXZnnBbaOI6sqM8pSVpcVdDGBYcUaiBGoFmG91ZKsZkcMKmvcnXLr1AHfFt1E886
-0lA2Yxfl3kExRgqyd7o0Vn4kAq7a8b5R+oOaoX58GDLc6adCozXENRtJgEFBgCO8
-vQ==
------END CERTIFICATE-----
diff --git a/ecss_signtools/testkeys/oem.pk8 b/ecss_signtools/testkeys/oem.pk8
deleted file mode 100644
index 96b615a07e4a59a07bcfa7fb30f098bdaa84a5bb..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 120
zcmXpgV`5}5;AZ30YV&CO&dbQi$dba6<mwz8tf-)ytl%Hw9PgNyQk0*W67L@zAL1Gu
z67TQotDsw6tdLPsQc!HAub-Tsl3JXZo~K(}maLbVSCX2emz<xg@0?mxl9`s7oLG_?
XoLW?tnVf2DsPCJYnWvXnoLd0^8}cSh

diff --git a/ecss_signtools/testkeys/oem.x509.pem b/ecss_signtools/testkeys/oem.x509.pem
deleted file mode 100644
index 3777339..0000000
--- a/ecss_signtools/testkeys/oem.x509.pem
+++ /dev/null
@@ -1,24 +0,0 @@
------BEGIN CERTIFICATE-----
-MIID6TCCAtGgAwIBAgIQP6QtYIW2rJhCwn27D2XglzANBgkqhkiG9w0BAQsFADB1
-MRowGAYDVQQKExFJbnRlbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBxMLU2FudGEgQ2xh
-cmExCzAJBgNVBAgTAkNBMQswCQYDVQQGEwJVUzEnMCUGA1UEAxMeSW50ZWwoUikg
-T1RDIEFuZHJvaWQgVEVTVCBPRU0yMB4XDTE0MTAyMTE3MTc1M1oXDTQ0MTAyMTE3
-MTc1M1owdTEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcTC1Nh
-bnRhIENsYXJhMQswCQYDVQQIEwJDQTELMAkGA1UEBhMCVVMxJzAlBgNVBAMTHklu
-dGVsKFIpIE9UQyBBbmRyb2lkIFRFU1QgT0VNMjCCASIwDQYJKoZIhvcNAQEBBQAD
-ggEPADCCAQoCggEBAMPIEQBK3VslXGiImqafw7+w7K8jyIWhk8Dqov8903UIFkes
-0hdmvU15I5Z49JeXuj+m0q6e0nfhkB1CfGruD0xilQ70LkgPv2VbVQ1304iTyehQ
-RPW/54BIJuO9avrOvvj6bt6m/VSQBYNx6XQe2yIurjJRGAnV/pikCCbMdT6e3yKq
-yBYCnfXBbt/4O3G+FDGQfvtvcwjuh2Uhz/KU6bnHO3WiTdiSIYZ5eg/JZocOh5jQ
-YaTdAdanFB76Qq3KEbpwvKTd9t/N8V05mf+JVOPHssfIyjLKuQLK0G5DV+YmILfg
-cJaFO05Opuh5ndtpNaSx5/tVlS1sPsCdKgsZmb0CAwEAAaN1MHMwCwYDVR0PBAQD
-AgGGMBMGA1UdJQQMMAoGCCsGAQUFBwMDMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O
-BBYEFM5KsWUuFYob4wtYChYjZ1DzOJA6MB8GA1UdIwQYMBaAFM5KsWUuFYob4wtY
-ChYjZ1DzOJA6MA0GCSqGSIb3DQEBCwUAA4IBAQBos0dSwq3blWibFqjdF+R70o17
-K8RFy3JApi3v+KrV210xhI9Exbf5ST1gZnQSSJ6W4JVDei1hxl7Qa+aL+bSssc/j
-5E4rbIpWOktgD6UCsP71TqXmKnf3fu5dVGewZeNkieWA/3LeK9oe7PuBg/aK5zAC
-hX0PCEekCGVdAW8tuj5MYJ0JWl4WzbPyUwTe5Ws75x9gsSw3tZn3CecUOmrO0RJF
-5g1BPSpr3Rwt64nQeCLa1gzIOp9GVUvnPn7c/hveRhacRtb0HvzyaIahvY4xr2Qz
-V7jOYXn3Fu/zL95gLKTIR2U7+I7qgIayKEe8nRcpnP8fIONWvF/3RAalZdM2
------END CERTIFICATE-----
-
diff --git a/ecss_signtools/testkeys/platform.pk8 b/ecss_signtools/testkeys/platform.pk8
deleted file mode 100644
index 808ce92fee993c08f655f09077f1b51c7d83a343..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 125
zcmV~$!3x447y#gm5k&M3b`8`;w{9VWF0nxGBKmLrFf~+G(0#AmweM@cYqDy0o9%JA
zEx$b>q`_wFq*4dU9PPC<*XVOXZ+c~Pr?h!Ywhk!=%HD-OYkifA5H5KrI7U`x$1zrz
bxJyAu$Q1{4wt|8@ql5EF+$~0KOZfZ&57sEZ

diff --git a/ecss_signtools/testkeys/platform.x509.pem b/ecss_signtools/testkeys/platform.x509.pem
deleted file mode 100644
index b607580..0000000
--- a/ecss_signtools/testkeys/platform.x509.pem
+++ /dev/null
@@ -1,44 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIHsDCCBpigAwIBAgIKHcFqnAACAAKISjANBgkqhkiG9w0BAQUFADBWMQswCQYD
-VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xKzApBgNVBAMTIklu
-dGVsIEludHJhbmV0IEJhc2ljIElzc3VpbmcgQ0EgMkIwHhcNMTQwODE4MjMxNTU2
-WhcNMTUwODE4MjMxNTU2WjB5MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFDAS
-BgNVBAcTC1NhbnRhIENsYXJhMRowGAYDVQQKExFJbnRlbCBDb3Jwb3JhdGlvbjEr
-MCkGA1UEAxMiSW50ZWwoUikgT1RDIEFuZHJvaWQgVEVTVCBQbGF0Zm9ybTCCASIw
-DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOTZ4lmY7uZiTnysO8l3V0gp7T62
-iBF1sEQ9Cr3RkrIkAJWqs8D23VfpbYXFVzEFDUtYuKJ+K56DnwguFpsw5Y97JboA
-iu1K1/m1RVDcWYxrcLBbqlsZJ07piKKmplUK+V5J6NzsT+NpqaiWmpIGtZCabiqH
-GOhXndEYOvfvuNEji22E7Rem6aJNF+01yaVZ+J6UGBppuRML8fPfY16G5yC6p7sm
-Nh6yEP99TI4oBsXCxnaDalUK/FnoTQxeKqGrWde3pduBAVrNGIxJjFHvNovitsIr
-3tRJcengScQD7E0WmfvO1h0SCUH1yGXeAkHLfV8ZV+qw88DCpVeADn+qgUMCAwEA
-AaOCBFswggRXMAsGA1UdDwQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNV
-HQ4EFgQUHzG20C3cQfBjTLziZgEQor5Es/0wHwYDVR0jBBgwFoAUOGN2+rYFOqlZ
-T0qHjaCDt36ROgswggG5BgNVHR8EggGwMIIBrDCCAaigggGkoIIBoIaB4mxkYXA6
-Ly8vQ049SW50ZWwlMjBJbnRyYW5ldCUyMEJhc2ljJTIwSXNzdWluZyUyMENBJTIw
-MkIoMiksQ049QVpTTUNTSUJFQ0EwMixDTj1DRFAsQ049UHVibGljJTIwS2V5JTIw
-U2VydmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1jb3JwLERD
-PWludGVsLERDPWNvbT9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0P2Jhc2U/b2Jq
-ZWN0Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnSGV2h0dHA6Ly93d3cuaW50ZWwu
-Y29tL3JlcG9zaXRvcnkvQ1JML0ludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUyMElz
-c3VpbmclMjBDQSUyMDJCKDIpLmNybIZgaHR0cDovL2NlcnRpZmljYXRlcy5pbnRl
-bC5jb20vcmVwb3NpdG9yeS9DUkwvSW50ZWwlMjBJbnRyYW5ldCUyMEJhc2ljJTIw
-SXNzdWluZyUyMENBJTIwMkIoMikuY3JsMIIBywYIKwYBBQUHAQEEggG9MIIBuTCB
-0QYIKwYBBQUHMAKGgcRsZGFwOi8vL0NOPUludGVsJTIwSW50cmFuZXQlMjBCYXNp
-YyUyMElzc3VpbmclMjBDQSUyMDJCLENOPUFJQSxDTj1QdWJsaWMlMjBLZXklMjBT
-ZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPWNvcnAsREM9
-aW50ZWwsREM9Y29tP2NBQ2VydGlmaWNhdGU/YmFzZT9vYmplY3RDbGFzcz1jZXJ0
-aWZpY2F0aW9uQXV0aG9yaXR5MGwGCCsGAQUFBzAChmBodHRwOi8vd3d3LmludGVs
-LmNvbS9yZXBvc2l0b3J5L2NlcnRpZmljYXRlcy9JbnRlbCUyMEludHJhbmV0JTIw
-QmFzaWMlMjBJc3N1aW5nJTIwQ0ElMjAyQigyKS5jcnQwdQYIKwYBBQUHMAKGaWh0
-dHA6Ly9jZXJ0aWZpY2F0ZXMuaW50ZWwuY29tL3JlcG9zaXRvcnkvY2VydGlmaWNh
-dGVzL0ludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUyMElzc3VpbmclMjBDQSUyMDJC
-KDIpLmNydDAMBgNVHRMBAf8EAjAAMDwGCSsGAQQBgjcVBwQvMC0GJSsGAQQBgjcV
-CIbDjHWEmeVRg/2BKIWOn1OCkcAJZ9zNWIHKlw8CAWQCAQgwGwYJKwYBBAGCNxUK
-BA4wDDAKBggrBgEFBQcDAzANBgkqhkiG9w0BAQUFAAOCAQEAssyE+w9IAxUZ67K+
-7ns+OmsW+hgo12aRuMH/cxtnJasSOPU6L79m7KhDL9ZsiSjd1BQOaJkhoVZNGagr
-FbnCBc4LizuHsNGtcsKGGjO4SBaYrFli3RDrHhIiVoED7KWaHFROZ5uZkMt16MS2
-EzoK63itd4CdzduTz/b77hE3wEsdY6B98SWM7K84r8kz429DSBAMg43tkv9sGH9l
-Tyb6Mp0lc53GHxV9abZhG93hWJXsSsrlWfflq3oKj+UTIw6yE09tu8Smcz4y93ie
-+6IpsnvB3xGTggLFpbWRuu/A6qYmCtk7fZkCfMokcpEwJAEsQhufz/Yr+8+1bV64
-bpPYMg==
------END CERTIFICATE-----
diff --git a/ecss_signtools/testkeys/releasekey.pk8 b/ecss_signtools/testkeys/releasekey.pk8
deleted file mode 100644
index 3698032cf1c1f4875a3fa508cbbf4dccd74c8afa..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 124
zcmXr0Vq#=4;AZ30YV&CO&dbQi$dbX5=IR_Atf-)ytl%Hw9PgNyQk0*W67L@zAL1Gu
z5+9VBlbTqZs-Rn5tdLPsQc!HAub-Tsl3JXZo~K(}maLbVSCX2emz<xg@0?mxl9`s7
boLG_?oLW?tnVf2DsPCJYnWvXnoLd0^+khxI

diff --git a/ecss_signtools/testkeys/releasekey.x509.pem b/ecss_signtools/testkeys/releasekey.x509.pem
deleted file mode 100644
index b57ac47..0000000
--- a/ecss_signtools/testkeys/releasekey.x509.pem
+++ /dev/null
@@ -1,44 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIHrzCCBpegAwIBAgIKHaTQAgACAAKHpzANBgkqhkiG9w0BAQUFADBWMQswCQYD
-VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xKzApBgNVBAMTIklu
-dGVsIEludHJhbmV0IEJhc2ljIElzc3VpbmcgQ0EgMkIwHhcNMTQwNzI4MjI0NjQ0
-WhcNMTUwNzI4MjI0NjQ0WjB4MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFDAS
-BgNVBAcTC1NhbnRhIENsYXJhMRowGAYDVQQKExFJbnRlbCBDb3Jwb3JhdGlvbjEq
-MCgGA1UEAxMhSW50ZWwoUikgT1RDIEFuZHJvaWQgVEVTVCBSZWxlYXNlMIIBIjAN
-BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyxtL7uTvw5qt9qK4VMobpy6LCGOe
-+tJGoITxV6DQIaXRAiNwjPx/te/JjKqF9HlNwd4STJ0oc37ZeSEQS2Dsze2VvDOK
-LHVhVr+qXb8BTRXQXtzzO4/tZF30sqInyTsRDpfP3E7G7RnyBZ3wDRlIP68MqPbi
-rbEB6PL1WEWQ2tx4Y6WSpf5ONTrpscRmgmjriFXomQ8oDzf1c5i3uEkiR8IhUkMs
-ZhpsZfb3sgip0Phw5L9geAxGaodzq2MzZOmwsmscaoOP/CeIri+irtxiC3i+Aksa
-v1wXfovDmQ40KCIRxiIMPTJ6g4dXp1QuE8F6+UYOXCnU1G8gbZktqlx8PQIDAQAB
-o4IEWzCCBFcwCwYDVR0PBAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0GA1Ud
-DgQWBBTsIgrqGcF4XkgZPrM0Zia2+vE6zjAfBgNVHSMEGDAWgBQ4Y3b6tgU6qVlP
-SoeNoIO3fpE6CzCCAbkGA1UdHwSCAbAwggGsMIIBqKCCAaSgggGghoHibGRhcDov
-Ly9DTj1JbnRlbCUyMEludHJhbmV0JTIwQmFzaWMlMjBJc3N1aW5nJTIwQ0ElMjAy
-QigyKSxDTj1BWlNNQ1NJQkVDQTAyLENOPUNEUCxDTj1QdWJsaWMlMjBLZXklMjBT
-ZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPWNvcnAsREM9
-aW50ZWwsREM9Y29tP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3Q/YmFzZT9vYmpl
-Y3RDbGFzcz1jUkxEaXN0cmlidXRpb25Qb2ludIZXaHR0cDovL3d3dy5pbnRlbC5j
-b20vcmVwb3NpdG9yeS9DUkwvSW50ZWwlMjBJbnRyYW5ldCUyMEJhc2ljJTIwSXNz
-dWluZyUyMENBJTIwMkIoMikuY3JshmBodHRwOi8vY2VydGlmaWNhdGVzLmludGVs
-LmNvbS9yZXBvc2l0b3J5L0NSTC9JbnRlbCUyMEludHJhbmV0JTIwQmFzaWMlMjBJ
-c3N1aW5nJTIwQ0ElMjAyQigyKS5jcmwwggHLBggrBgEFBQcBAQSCAb0wggG5MIHR
-BggrBgEFBQcwAoaBxGxkYXA6Ly8vQ049SW50ZWwlMjBJbnRyYW5ldCUyMEJhc2lj
-JTIwSXNzdWluZyUyMENBJTIwMkIsQ049QUlBLENOPVB1YmxpYyUyMEtleSUyMFNl
-cnZpY2VzLENOPVNlcnZpY2VzLENOPUNvbmZpZ3VyYXRpb24sREM9Y29ycCxEQz1p
-bnRlbCxEQz1jb20/Y0FDZXJ0aWZpY2F0ZT9iYXNlP29iamVjdENsYXNzPWNlcnRp
-ZmljYXRpb25BdXRob3JpdHkwbAYIKwYBBQUHMAKGYGh0dHA6Ly93d3cuaW50ZWwu
-Y29tL3JlcG9zaXRvcnkvY2VydGlmaWNhdGVzL0ludGVsJTIwSW50cmFuZXQlMjBC
-YXNpYyUyMElzc3VpbmclMjBDQSUyMDJCKDIpLmNydDB1BggrBgEFBQcwAoZpaHR0
-cDovL2NlcnRpZmljYXRlcy5pbnRlbC5jb20vcmVwb3NpdG9yeS9jZXJ0aWZpY2F0
-ZXMvSW50ZWwlMjBJbnRyYW5ldCUyMEJhc2ljJTIwSXNzdWluZyUyMENBJTIwMkIo
-MikuY3J0MAwGA1UdEwEB/wQCMAAwPAYJKwYBBAGCNxUHBC8wLQYlKwYBBAGCNxUI
-hsOMdYSZ5VGD/YEohY6fU4KRwAln3M1YgcqXDwIBZAIBCDAbBgkrBgEEAYI3FQoE
-DjAMMAoGCCsGAQUFBwMDMA0GCSqGSIb3DQEBBQUAA4IBAQAGRB+LW8ZVygApKeze
-VKJITq8EVCJ/3d8PellCO7xv7lxVJVE0dTEWZSt6UGfzjJHl/lVjnyT/BYxwWi0j
-GgWt+7n7D3yh1Lgmncl/etkVQLV1ZEKRzHTO4Z4iO/c2s8lR/YigllmfuTjBMe20
-gxC8Mra3iZdqzaL1y/xm8KJKx0k194cmRTSChlvT5vEfq24782LrVaK7Z04f2Eqn
-zjXMid0MirHOCsnuFaJpI3JrjkW86mARuuCXLMHcDXWQyW7E5NpH/AcSOgghNL8d
-BoU5FoPNd3e42aKP4CHU92jX6lG462odGBswcYBtOF2AE4abszG/TtaDSE8+4Aok
-FKlR
------END CERTIFICATE-----
diff --git a/ecss_signtools/testkeys/shared.pk8 b/ecss_signtools/testkeys/shared.pk8
deleted file mode 100644
index b379faece34d29cd146512eb7fa4f3f70fdfd735..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 123
zcmV~$!3x447y#gm5k&M3b`8`;w{9VWF0sS!T}1!3ADV{Bsu$QRckTPy@0zXJ-DZ1S
zZp&}a7;A<GI}LE)!t>r}dyOF{3bqGpIxrSSmoaehE_|%@RW3^T6tK_`MVY;%Sn(-+
Znv}*|=|SFA1k5veJfGCvQIxJspFgg(C(8f;

diff --git a/ecss_signtools/testkeys/shared.x509.pem b/ecss_signtools/testkeys/shared.x509.pem
deleted file mode 100644
index 79e1b8b..0000000
--- a/ecss_signtools/testkeys/shared.x509.pem
+++ /dev/null
@@ -1,44 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIHrjCCBpagAwIBAgIKHcw9NgACAAKITDANBgkqhkiG9w0BAQUFADBWMQswCQYD
-VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xKzApBgNVBAMTIklu
-dGVsIEludHJhbmV0IEJhc2ljIElzc3VpbmcgQ0EgMkIwHhcNMTQwODE4MjMyNzQ1
-WhcNMTUwODE4MjMyNzQ1WjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFDAS
-BgNVBAcTC1NhbnRhIENsYXJhMRowGAYDVQQKExFJbnRlbCBDb3Jwb3JhdGlvbjEp
-MCcGA1UEAxMgSW50ZWwoUikgT1RDIEFuZHJvaWQgVEVTVCBTaGFyZWQwggEiMA0G
-CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDOBJDRmm0szq7puBcmaQwolJdHfrVm
-Xk+mjpv2kbRL6yujk5ZFQkMQ7/y+FCdKIx/EsLKQC46IdETi9MRSPSIgQeyEtj1e
-18mVoR0w7LiBoLzm78JaJYgnkEWwgI1H73iDE+qhTcKJqYI0/g6dClqqqkjkZboi
-D6QC5mydcz3Z8fPX7SuA2RK8ph5mIcogrH5t3G+gA25pLSQ8Cev4wsDsupMsN7ad
-VdbLsuWp/gzWvl5JRFGptY8wsfvvZH/ReZVwPXPaHtWaiPCZNuVRsQZFW5paCe1W
-lud3NyCqXEDcjmadlLpqCu86SJ5JXwFOP33hxi9ZkrUrDLQSLjeyCWVrAgMBAAGj
-ggRbMIIEVzALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwHQYDVR0O
-BBYEFJ/QnSOvVlIZwvqgi9F4ibECevl+MB8GA1UdIwQYMBaAFDhjdvq2BTqpWU9K
-h42gg7d+kToLMIIBuQYDVR0fBIIBsDCCAawwggGooIIBpKCCAaCGgeJsZGFwOi8v
-L0NOPUludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUyMElzc3VpbmclMjBDQSUyMDJC
-KDIpLENOPUFaU01DU0lCRUNBMDIsQ049Q0RQLENOPVB1YmxpYyUyMEtleSUyMFNl
-cnZpY2VzLENOPVNlcnZpY2VzLENOPUNvbmZpZ3VyYXRpb24sREM9Y29ycCxEQz1p
-bnRlbCxEQz1jb20/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdD9iYXNlP29iamVj
-dENsYXNzPWNSTERpc3RyaWJ1dGlvblBvaW50hldodHRwOi8vd3d3LmludGVsLmNv
-bS9yZXBvc2l0b3J5L0NSTC9JbnRlbCUyMEludHJhbmV0JTIwQmFzaWMlMjBJc3N1
-aW5nJTIwQ0ElMjAyQigyKS5jcmyGYGh0dHA6Ly9jZXJ0aWZpY2F0ZXMuaW50ZWwu
-Y29tL3JlcG9zaXRvcnkvQ1JML0ludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUyMElz
-c3VpbmclMjBDQSUyMDJCKDIpLmNybDCCAcsGCCsGAQUFBwEBBIIBvTCCAbkwgdEG
-CCsGAQUFBzAChoHEbGRhcDovLy9DTj1JbnRlbCUyMEludHJhbmV0JTIwQmFzaWMl
-MjBJc3N1aW5nJTIwQ0ElMjAyQixDTj1BSUEsQ049UHVibGljJTIwS2V5JTIwU2Vy
-dmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1jb3JwLERDPWlu
-dGVsLERDPWNvbT9jQUNlcnRpZmljYXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlm
-aWNhdGlvbkF1dGhvcml0eTBsBggrBgEFBQcwAoZgaHR0cDovL3d3dy5pbnRlbC5j
-b20vcmVwb3NpdG9yeS9jZXJ0aWZpY2F0ZXMvSW50ZWwlMjBJbnRyYW5ldCUyMEJh
-c2ljJTIwSXNzdWluZyUyMENBJTIwMkIoMikuY3J0MHUGCCsGAQUFBzAChmlodHRw
-Oi8vY2VydGlmaWNhdGVzLmludGVsLmNvbS9yZXBvc2l0b3J5L2NlcnRpZmljYXRl
-cy9JbnRlbCUyMEludHJhbmV0JTIwQmFzaWMlMjBJc3N1aW5nJTIwQ0ElMjAyQigy
-KS5jcnQwDAYDVR0TAQH/BAIwADA8BgkrBgEEAYI3FQcELzAtBiUrBgEEAYI3FQiG
-w4x1hJnlUYP9gSiFjp9TgpHACWfczViBypcPAgFkAgEIMBsGCSsGAQQBgjcVCgQO
-MAwwCgYIKwYBBQUHAwMwDQYJKoZIhvcNAQEFBQADggEBACaWtA4DMzurxCSE7uOr
-HusqQwBmA1lGWGh8XyuUTVcqWDYm59pETzylZp8b+uLKy+w1m7SJfZScsQB47Kky
-GLZo42WKObB1tZtKlFwCzmeR2J1HT9CsLWNQ3zZ3VG8XVnFilx1ULBRg+i9IjtIB
-IqiqJ4Y5nx8AbM2e/PO4nfSsD+zP9nVizJIZj0M4pMQ7Q1jyW/CkLS2y+B4MhVNF
-GT6ctwspHpvsVlGTOSUpBkDYq+RVbgtRiCr5LGpydz0LkSMWX6vtOKpDlrt1jBMf
-gtsXvKZmI9KOyKqe98VxD7zZABa9SxeLN3O7dI0Zz2IGhwXrcuXE9VxEA/CnOLaM
-LEU=
------END CERTIFICATE-----
diff --git a/ecss_signtools/testkeys/verity.pk8 b/ecss_signtools/testkeys/verity.pk8
deleted file mode 100644
index 0b7a6822bb4699b1c00effd81b75f3f4ff8162b6..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 123
zcmXr0WMX76;AZ30YV&CO&dbQi$db;I>gpUEtf-)ytl%Hw9PgNyQk0*W67L@zAL1Gu
z5+9aYlvz@#pj%$7kWo@nP;8~IpPZkPTAZ1lr(0Z>te2TrlA5EJoS&=joLW?pnU<NH
aSdto?T2z*qoN8>S@0*yJr<YiqTLA#NY$x{s

diff --git a/ecss_signtools/testkeys/verity.x509.pem b/ecss_signtools/testkeys/verity.x509.pem
deleted file mode 100644
index 1764bc6..0000000
--- a/ecss_signtools/testkeys/verity.x509.pem
+++ /dev/null
@@ -1,44 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIHsTCCBpmgAwIBAgIKHdCFjAACAAKITTANBgkqhkiG9w0BAQUFADBWMQswCQYD
-VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xKzApBgNVBAMTIklu
-dGVsIEludHJhbmV0IEJhc2ljIElzc3VpbmcgQ0EgMkIwHhcNMTQwODE4MjMzMjI2
-WhcNMTUwODE4MjMzMjI2WjB6MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFDAS
-BgNVBAcTC1NhbnRhIENsYXJhMRowGAYDVQQKExFJbnRlbCBDb3Jwb3JhdGlvbjEs
-MCoGA1UEAxMjSW50ZWwoUikgT1RDIEFuZHJvaWQgVEVTVCBETS1WZXJpdHkwggEi
-MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDSecUhwMXiNk2pOKt9xAp1SPHB
-Fqy0SpcquIxTlkmcZY3zOwcv2rIOhhayemCirQXMAi7c9GXKYtHSBBcb/zVffLR9
-PH60dRqLMwms3lyWcz4DstvhAw9WlHIc3wDhz5N/+iC1QtA7JFZRFVDZoUOrbQYC
-4oU8PMcMtxZcgGdIRNISDfWal4OztE/fiq9ctsLnSG5B80E1YbBh8ekDTc0DoT/f
-2wZw7LJrfgFwllsIxcaJQFc0aYLG6AAQOAbCrs2HroSlKzkGnM5ndWPol59MtXzd
-ZLlUp3D+wxYKxy86RTAhh+nb0iy8WQPfrBOwTt35CVn9oHzS0cEp2+MCp9K1AgMB
-AAGjggRbMIIEVzALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwHQYD
-VR0OBBYEFPGD0jpwBsHvE0PPetGkyerURhwIMB8GA1UdIwQYMBaAFDhjdvq2BTqp
-WU9Kh42gg7d+kToLMIIBuQYDVR0fBIIBsDCCAawwggGooIIBpKCCAaCGgeJsZGFw
-Oi8vL0NOPUludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUyMElzc3VpbmclMjBDQSUy
-MDJCKDIpLENOPUFaU01DU0lCRUNBMDIsQ049Q0RQLENOPVB1YmxpYyUyMEtleSUy
-MFNlcnZpY2VzLENOPVNlcnZpY2VzLENOPUNvbmZpZ3VyYXRpb24sREM9Y29ycCxE
-Qz1pbnRlbCxEQz1jb20/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdD9iYXNlP29i
-amVjdENsYXNzPWNSTERpc3RyaWJ1dGlvblBvaW50hldodHRwOi8vd3d3LmludGVs
-LmNvbS9yZXBvc2l0b3J5L0NSTC9JbnRlbCUyMEludHJhbmV0JTIwQmFzaWMlMjBJ
-c3N1aW5nJTIwQ0ElMjAyQigyKS5jcmyGYGh0dHA6Ly9jZXJ0aWZpY2F0ZXMuaW50
-ZWwuY29tL3JlcG9zaXRvcnkvQ1JML0ludGVsJTIwSW50cmFuZXQlMjBCYXNpYyUy
-MElzc3VpbmclMjBDQSUyMDJCKDIpLmNybDCCAcsGCCsGAQUFBwEBBIIBvTCCAbkw
-gdEGCCsGAQUFBzAChoHEbGRhcDovLy9DTj1JbnRlbCUyMEludHJhbmV0JTIwQmFz
-aWMlMjBJc3N1aW5nJTIwQ0ElMjAyQixDTj1BSUEsQ049UHVibGljJTIwS2V5JTIw
-U2VydmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1jb3JwLERD
-PWludGVsLERDPWNvbT9jQUNlcnRpZmljYXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2Vy
-dGlmaWNhdGlvbkF1dGhvcml0eTBsBggrBgEFBQcwAoZgaHR0cDovL3d3dy5pbnRl
-bC5jb20vcmVwb3NpdG9yeS9jZXJ0aWZpY2F0ZXMvSW50ZWwlMjBJbnRyYW5ldCUy
-MEJhc2ljJTIwSXNzdWluZyUyMENBJTIwMkIoMikuY3J0MHUGCCsGAQUFBzAChmlo
-dHRwOi8vY2VydGlmaWNhdGVzLmludGVsLmNvbS9yZXBvc2l0b3J5L2NlcnRpZmlj
-YXRlcy9JbnRlbCUyMEludHJhbmV0JTIwQmFzaWMlMjBJc3N1aW5nJTIwQ0ElMjAy
-QigyKS5jcnQwDAYDVR0TAQH/BAIwADA8BgkrBgEEAYI3FQcELzAtBiUrBgEEAYI3
-FQiGw4x1hJnlUYP9gSiFjp9TgpHACWfczViBypcPAgFkAgEIMBsGCSsGAQQBgjcV
-CgQOMAwwCgYIKwYBBQUHAwMwDQYJKoZIhvcNAQEFBQADggEBAAfac0nr5oJeTGBA
-pnDwnVewd+0GT2z2XztEKHpiyAT2lHgErNhTykr9ylN4gFZleG4FL1ORH7Er0v4g
-MsKfCCeD6+bqWreQhNCiq9LdfeGyRO6CZou1vrKxbvkqpUi9OjPtNOUSgxr71/YY
-j3h4itBfgxRsTMa8vUs8tUiFqtLbw2OPgZdWQntovtJz3rXeRKQG8SUg1Z3bhORx
-uVH7vUutsCAwlE4A+sWQCqPHETZaoMlc6p9EDUZmh9Uv30L+TXigXablfqIJOMkS
-Ig2bB9AiQhMyMw/FMG5D8Jkb1azNlQn9i6SJRYYiG1xNmZ7s8fLOmQJk9H3JWndY
-T3rrgxw=
------END CERTIFICATE-----
diff --git a/ecss_signtools/testkeys/verity_key b/ecss_signtools/testkeys/verity_key
deleted file mode 100644
index e87645b6eaccf49184cee3fc74a64adfef9b1d2a..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 524
zcmV+n0`vVq0001E^ih?y(x(FB+bO}((tM!(Sqb^wPOuZK-ve2^EYjQQhaoUUIxoix
z7Q_B<r&PIQ-F&r7pO@%kb!X0;201IGgsz9puEGX55CG`Lf@w5YK#9i12wRqL0e)+;
z>~IF#-#?)P%}oR8@nNuGH9_-1Zb;|Cwp_1@-%qr&gO{514HD8sNN0dt7Pkz?JUoTs
z0tRiXL!sGF6;W0sJJ3S4Ao_ok&*1>y9CDOa4+G)bvI9PImR#Pf2{Vftb+mpweYAXE
zHUAqI1k%xB%4PK2E&|L2t)gIhvKEF8vf3{PJM)cYoJp2bjJPV7O0=vN!SP6S3dDV@
zIH^rG;>Exr#d*^EQTBRvOtiHn(8U6)WLF?H@Cs|>S#tt~8S+zx`YOo{sNC94FD{oT
z;OFjReVjM4f27gf=RaDa)_`GHW};yU$yceUWSes3a%a>>R|oh!;zynPRjyVaH<2=)
zWdbW5uw;uc3RE4;<MQklgY4c_n!2dMFw5_vvw6nd1L3r)UQ&EP^+#AKs`vXSN`cd6
z?SN>Ll<P;*uwJ$2;#j4$s}Tf(`l}k3^O>~s!aY*QA=+T&LSd<pelv`H08oGyc`g%I
zP)X63vc_vBq;`M}MJApHLC4%46ma$;xY@Szk`IjG%<CamELLJxoMCac$@avyujcHV
O?WF2~Pbf110098$qy#Sj

diff --git a/ecss_signtools/verity/Android.mk b/ecss_signtools/verity/Android.mk
deleted file mode 100644
index 81b9b24..0000000
--- a/ecss_signtools/verity/Android.mk
+++ /dev/null
@@ -1,79 +0,0 @@
-LOCAL_PATH:= $(call my-dir)
-
-include $(CLEAR_VARS)
-LOCAL_MODULE := generate_verity_key
-LOCAL_SRC_FILES := generate_verity_key.c
-LOCAL_MODULE_CLASS := EXECUTABLES
-LOCAL_MODULE_TAGS := optional
-LOCAL_SHARED_LIBRARIES := libcrypto-host
-LOCAL_C_INCLUDES += external/openssl/include
-include $(BUILD_HOST_EXECUTABLE)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := VeritySigner.java Utils.java
-LOCAL_MODULE := VeritySigner
-LOCAL_JAR_MANIFEST := VeritySigner.mf
-LOCAL_MODULE_TAGS := optional
-LOCAL_STATIC_JAVA_LIBRARIES := bouncycastle-host
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := BootSignature.java VeritySigner.java Utils.java
-LOCAL_MODULE := BootSignature
-LOCAL_JAR_MANIFEST := BootSignature.mf
-LOCAL_MODULE_TAGS := optional
-LOCAL_STATIC_JAVA_LIBRARIES := bouncycastle-host
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := BootSignature.java KeystoreSigner.java Utils.java
-LOCAL_MODULE := BootKeystoreSigner
-LOCAL_JAR_MANIFEST := KeystoreSigner.mf
-LOCAL_MODULE_TAGS := optional
-LOCAL_STATIC_JAVA_LIBRARIES := bouncycastle-host
-include $(BUILD_HOST_JAVA_LIBRARY)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := verity_signer
-LOCAL_MODULE := verity_signer
-LOCAL_MODULE_CLASS := EXECUTABLES
-LOCAL_IS_HOST_MODULE := true
-LOCAL_MODULE_TAGS := optional
-LOCAL_REQUIRED_MODULES := VeritySigner
-include $(BUILD_PREBUILT)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := boot_signer
-LOCAL_MODULE := boot_signer
-LOCAL_MODULE_CLASS := EXECUTABLES
-LOCAL_IS_HOST_MODULE := true
-LOCAL_MODULE_TAGS := optional
-LOCAL_REQUIRED_MODULES := BootSignature
-include $(BUILD_PREBUILT)
-
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES := keystore_signer
-LOCAL_MODULE := keystore_signer
-LOCAL_MODULE_CLASS := EXECUTABLES
-LOCAL_IS_HOST_MODULE := true
-LOCAL_MODULE_TAGS := optional
-LOCAL_REQUIRED_MODULES := BootKeystoreSigner
-include $(BUILD_PREBUILT)
-
-include $(CLEAR_VARS)
-LOCAL_MODULE := build_verity_metadata.py
-LOCAL_MODULE_CLASS := EXECUTABLES
-LOCAL_SRC_FILES := build_verity_metadata.py
-LOCAL_IS_HOST_MODULE := true
-LOCAL_MODULE_TAGS := optional
-include $(BUILD_PREBUILT)
-
-include $(CLEAR_VARS)
-LOCAL_MODULE := build_verity_tree
-LOCAL_SRC_FILES := build_verity_tree.cpp
-LOCAL_MODULE_TAGS := optional
-LOCAL_STATIC_LIBRARIES := libsparse_host libz
-LOCAL_SHARED_LIBRARIES := libcrypto-host
-LOCAL_C_INCLUDES := external/openssl/include
-LOCAL_CFLAGS += -Wall -Werror
-include $(BUILD_HOST_EXECUTABLE)
diff --git a/ecss_signtools/verity/BootSignature.java b/ecss_signtools/verity/BootSignature.java
deleted file mode 100644
index c9de485..0000000
--- a/ecss_signtools/verity/BootSignature.java
+++ /dev/null
@@ -1,316 +0,0 @@
-/*
- * Copyright (C) 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.verity;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.security.PrivateKey;
-import java.security.PublicKey;
-import java.security.Security;
-import java.security.cert.X509Certificate;
-import java.security.cert.Certificate;
-import java.security.cert.CertificateFactory;
-import java.security.cert.CertificateEncodingException;
-import java.util.Arrays;
-import org.bouncycastle.asn1.ASN1Encodable;
-import org.bouncycastle.asn1.ASN1EncodableVector;
-import org.bouncycastle.asn1.ASN1Integer;
-import org.bouncycastle.asn1.ASN1Object;
-import org.bouncycastle.asn1.ASN1ObjectIdentifier;
-import org.bouncycastle.asn1.ASN1OctetString;
-import org.bouncycastle.asn1.ASN1Primitive;
-import org.bouncycastle.asn1.ASN1Sequence;
-import org.bouncycastle.asn1.ASN1InputStream;
-import org.bouncycastle.asn1.DEROctetString;
-import org.bouncycastle.asn1.DERPrintableString;
-import org.bouncycastle.asn1.DERSequence;
-import org.bouncycastle.asn1.util.ASN1Dump;
-import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
-
-/**
- *    AndroidVerifiedBootSignature DEFINITIONS ::=
- *    BEGIN
- *        formatVersion ::= INTEGER
- *        certificate ::= Certificate
- *        algorithmIdentifier ::= SEQUENCE {
- *            algorithm OBJECT IDENTIFIER,
- *            parameters ANY DEFINED BY algorithm OPTIONAL
- *        }
- *        authenticatedAttributes ::= SEQUENCE {
- *            target CHARACTER STRING,
- *            length INTEGER
- *        }
- *        signature ::= OCTET STRING
- *     END
- */
-
-public class BootSignature extends ASN1Object
-{
-    private ASN1Integer             formatVersion;
-    private ASN1Encodable           certificate;
-    private AlgorithmIdentifier     algorithmIdentifier;
-    private DERPrintableString      target;
-    private ASN1Integer             length;
-    private DEROctetString          signature;
-    private PublicKey               publicKey;
-
-    private static final int FORMAT_VERSION = 1;
-
-    /**
-     * Initializes the object for signing an image file
-     * @param target Target name, included in the signed data
-     * @param length Length of the image, included in the signed data
-     */
-    public BootSignature(String target, int length) {
-        this.formatVersion = new ASN1Integer(FORMAT_VERSION);
-        this.target = new DERPrintableString(target);
-        this.length = new ASN1Integer(length);
-    }
-
-    /**
-     * Initializes the object for verifying a signed image file
-     * @param signature Signature footer
-     */
-    public BootSignature(byte[] signature)
-            throws Exception {
-        ASN1InputStream stream = new ASN1InputStream(signature);
-        ASN1Sequence sequence = (ASN1Sequence) stream.readObject();
-
-        formatVersion = (ASN1Integer) sequence.getObjectAt(0);
-        if (formatVersion.getValue().intValue() != FORMAT_VERSION) {
-            throw new IllegalArgumentException("Unsupported format version");
-        }
-
-        certificate = sequence.getObjectAt(1);
-        byte[] encoded = ((ASN1Object) certificate).getEncoded();
-        ByteArrayInputStream bis = new ByteArrayInputStream(encoded);
-
-        CertificateFactory cf = CertificateFactory.getInstance("X.509");
-        X509Certificate c = (X509Certificate) cf.generateCertificate(bis);
-        publicKey = c.getPublicKey();
-
-        ASN1Sequence algId = (ASN1Sequence) sequence.getObjectAt(2);
-        algorithmIdentifier = new AlgorithmIdentifier(
-            (ASN1ObjectIdentifier) algId.getObjectAt(0));
-
-        ASN1Sequence attrs = (ASN1Sequence) sequence.getObjectAt(3);
-        target = (DERPrintableString) attrs.getObjectAt(0);
-        length = (ASN1Integer) attrs.getObjectAt(1);
-
-        this.signature = (DEROctetString) sequence.getObjectAt(4);
-    }
-
-    public ASN1Object getAuthenticatedAttributes() {
-        ASN1EncodableVector attrs = new ASN1EncodableVector();
-        attrs.add(target);
-        attrs.add(length);
-        return new DERSequence(attrs);
-    }
-
-    public byte[] getEncodedAuthenticatedAttributes() throws IOException {
-        return getAuthenticatedAttributes().getEncoded();
-    }
-
-    public AlgorithmIdentifier getAlgorithmIdentifier() {
-        return algorithmIdentifier;
-    }
-
-    public PublicKey getPublicKey() {
-        return publicKey;
-    }
-
-    public byte[] getSignature() {
-        return signature.getOctets();
-    }
-
-    public void setSignature(byte[] sig, AlgorithmIdentifier algId) {
-        algorithmIdentifier = algId;
-        signature = new DEROctetString(sig);
-    }
-
-    public void setCertificate(X509Certificate cert)
-            throws Exception, IOException, CertificateEncodingException {
-        ASN1InputStream s = new ASN1InputStream(cert.getEncoded());
-        certificate = s.readObject();
-    }
-
-    public byte[] generateSignableImage(byte[] image) throws IOException {
-        byte[] attrs = getEncodedAuthenticatedAttributes();
-        byte[] signable = Arrays.copyOf(image, image.length + attrs.length);
-        for (int i=0; i < attrs.length; i++) {
-            signable[i+image.length] = attrs[i];
-        }
-        return signable;
-    }
-
-    public byte[] sign(byte[] image, PrivateKey key) throws Exception {
-        byte[] signable = generateSignableImage(image);
-        return Utils.sign(key, signable);
-    }
-
-    public boolean verify(byte[] image) throws Exception {
-        if (length.getValue().intValue() != image.length) {
-            throw new IllegalArgumentException("Invalid image length");
-        }
-
-        byte[] signable = generateSignableImage(image);
-        return Utils.verify(publicKey, signable, signature.getOctets(),
-                    algorithmIdentifier);
-    }
-
-    public ASN1Primitive toASN1Primitive() {
-        ASN1EncodableVector v = new ASN1EncodableVector();
-        v.add(formatVersion);
-        v.add(certificate);
-        v.add(algorithmIdentifier);
-        v.add(getAuthenticatedAttributes());
-        v.add(signature);
-        return new DERSequence(v);
-    }
-
-    public static int getSignableImageSize(byte[] data) throws Exception {
-        if (!Arrays.equals(Arrays.copyOfRange(data, 0, 8),
-                "ANDROID!".getBytes("US-ASCII"))) {
-            throw new IllegalArgumentException("Invalid image header: missing magic");
-        }
-
-        ByteBuffer image = ByteBuffer.wrap(data);
-        image.order(ByteOrder.LITTLE_ENDIAN);
-
-        image.getLong(); // magic
-        int kernelSize = image.getInt();
-        image.getInt(); // kernel_addr
-        int ramdskSize = image.getInt();
-        image.getInt(); // ramdisk_addr
-        int secondSize = image.getInt();
-        image.getLong(); // second_addr + tags_addr
-        int pageSize = image.getInt();
-
-        int length = pageSize // include the page aligned image header
-                + ((kernelSize + pageSize - 1) / pageSize) * pageSize
-                + ((ramdskSize + pageSize - 1) / pageSize) * pageSize
-                + ((secondSize + pageSize - 1) / pageSize) * pageSize;
-
-        length = ((length + pageSize - 1) / pageSize) * pageSize;
-
-        if (length <= 0) {
-            throw new IllegalArgumentException("Invalid image header: invalid length");
-        }
-
-        return length;
-    }
-
-    public static void doSignature( String target,
-                                    String imagePath,
-                                    String keyPath,
-                                    String certPath,
-                                    String outPath) throws Exception {
-
-        byte[] image = Utils.read(imagePath);
-        int signableSize = getSignableImageSize(image);
-
-        if (signableSize < image.length) {
-            System.err.println("NOTE: truncating file " + imagePath +
-                    " from " + image.length + " to " + signableSize + " bytes");
-            image = Arrays.copyOf(image, signableSize);
-        } else if (signableSize > image.length) {
-            throw new IllegalArgumentException("Invalid image: too short, expected " +
-                    signableSize + " bytes");
-        }
-
-        BootSignature bootsig = new BootSignature(target, image.length);
-
-        X509Certificate cert = Utils.loadPEMCertificate(certPath);
-        bootsig.setCertificate(cert);
-
-        PrivateKey key = Utils.loadDERPrivateKeyFromFile(keyPath);
-        bootsig.setSignature(bootsig.sign(image, key),
-            Utils.getSignatureAlgorithmIdentifier(key));
-
-        byte[] encoded_bootsig = bootsig.getEncoded();
-        byte[] image_with_metadata = Arrays.copyOf(image, image.length + encoded_bootsig.length);
-
-        System.arraycopy(encoded_bootsig, 0, image_with_metadata,
-                image.length, encoded_bootsig.length);
-
-        Utils.write(image_with_metadata, outPath);
-    }
-
-    public static void verifySignature(String imagePath) throws Exception {
-        byte[] image = Utils.read(imagePath);
-        int signableSize = getSignableImageSize(image);
-
-        if (signableSize >= image.length) {
-            throw new IllegalArgumentException("Invalid image: not signed");
-        }
-
-        byte[] signature = Arrays.copyOfRange(image, signableSize, image.length);
-        BootSignature bootsig = new BootSignature(signature);
-
-        try {
-            if (bootsig.verify(Arrays.copyOf(image, signableSize))) {
-                System.err.println("Signature is VALID");
-                System.exit(0);
-            } else {
-                System.err.println("Signature is INVALID");
-            }
-        } catch (Exception e) {
-            e.printStackTrace(System.err);
-        }
-        System.exit(1);
-    }
-
-    /* Example usage for signing a boot image using dev keys:
-        java -cp \
-            ../../../out/host/common/obj/JAVA_LIBRARIES/BootSignature_intermediates/ \
-                classes/com.android.verity.BootSignature \
-            /boot \
-            ../../../out/target/product/$PRODUCT/boot.img \
-            ../../../build/target/product/security/verity.pk8 \
-            ../../../build/target/product/security/verity.x509.pem \
-            /tmp/boot.img.signed
-    */
-    public static void main(String[] args) throws Exception {
-        Security.addProvider(new BouncyCastleProvider());
-
-        if ("-verify".equals(args[0])) {
-            /* args[1] is the path to a signed boot image */
-            verifySignature(args[1]);
-        } else {
-		    // Start Intel addition to enable specifying a provider class using
-		    // the same parameter form as signapk. The style is copied directly
-		    // from original version at system/extras/verity/BootSignature.java.
-		    int argStart = 0;
-		    if (args[0].equals("-providerClass")) {
-		        Utils.loadProviderIfNecessary(args[1]);
-		        argStart += 2;
-		    }
-
-            /* args[0] is the target name, typically /boot
-               args[1] is the path to a boot image to sign
-               args[2] is the path to a private key
-               args[3] is the path to the matching public key certificate
-               args[4] is the path where to output the signed boot image
-            */
-		    doSignature(args[argStart+0], args[argStart+1], args[argStart+2], args[argStart+3], args[argStart+4]);
-		    // End of Intel changes
-        }
-    }
-}
diff --git a/ecss_signtools/verity/BootSignature.mf b/ecss_signtools/verity/BootSignature.mf
deleted file mode 100644
index c1868b6..0000000
--- a/ecss_signtools/verity/BootSignature.mf
+++ /dev/null
@@ -1 +0,0 @@
-Main-Class: com.android.verity.BootSignature
diff --git a/ecss_signtools/verity/KeystoreSigner.java b/ecss_signtools/verity/KeystoreSigner.java
deleted file mode 100644
index edad544..0000000
--- a/ecss_signtools/verity/KeystoreSigner.java
+++ /dev/null
@@ -1,216 +0,0 @@
-/*
- * Copyright (C) 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.verity;
-
-import java.io.IOException;
-import java.security.PrivateKey;
-import java.security.PublicKey;
-import java.security.Security;
-import java.security.Signature;
-import java.security.cert.X509Certificate;
-import java.util.Enumeration;
-import org.bouncycastle.asn1.ASN1Encodable;
-import org.bouncycastle.asn1.ASN1EncodableVector;
-import org.bouncycastle.asn1.ASN1InputStream;
-import org.bouncycastle.asn1.ASN1Integer;
-import org.bouncycastle.asn1.ASN1Object;
-import org.bouncycastle.asn1.ASN1Primitive;
-import org.bouncycastle.asn1.ASN1Sequence;
-import org.bouncycastle.asn1.DEROctetString;
-import org.bouncycastle.asn1.DERPrintableString;
-import org.bouncycastle.asn1.DERSequence;
-import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
-import org.bouncycastle.asn1.pkcs.RSAPublicKey;
-import org.bouncycastle.asn1.util.ASN1Dump;
-import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
-
-/**
- * AndroidVerifiedBootKeystore DEFINITIONS ::=
- * BEGIN
- *     FormatVersion ::= INTEGER
- *     KeyBag ::= SEQUENCE {
- *         Key  ::= SEQUENCE {
- *             AlgorithmIdentifier  ::=  SEQUENCE {
- *                 algorithm OBJECT IDENTIFIER,
- *                 parameters ANY DEFINED BY algorithm OPTIONAL
- *             }
- *             KeyMaterial ::= RSAPublicKey
- *         }
- *     }
- *     Signature ::= AndroidVerifiedBootSignature
- * END
- */
-
-class BootKey extends ASN1Object
-{
-    private AlgorithmIdentifier algorithmIdentifier;
-    private RSAPublicKey keyMaterial;
-
-    public BootKey(PublicKey key) throws Exception {
-        java.security.interfaces.RSAPublicKey k =
-                (java.security.interfaces.RSAPublicKey) key;
-        this.keyMaterial = new RSAPublicKey(
-                k.getModulus(),
-                k.getPublicExponent());
-        this.algorithmIdentifier = Utils.getSignatureAlgorithmIdentifier(key);
-    }
-
-    public ASN1Primitive toASN1Primitive() {
-        ASN1EncodableVector v = new ASN1EncodableVector();
-        v.add(algorithmIdentifier);
-        v.add(keyMaterial);
-        return new DERSequence(v);
-    }
-
-    public void dump() throws Exception {
-        System.out.println(ASN1Dump.dumpAsString(toASN1Primitive()));
-    }
-}
-
-class BootKeystore extends ASN1Object
-{
-    private ASN1Integer             formatVersion;
-    private ASN1EncodableVector     keyBag;
-    private BootSignature           signature;
-    private X509Certificate         certificate;
-
-    private static final int FORMAT_VERSION = 0;
-
-    public BootKeystore() {
-        this.formatVersion = new ASN1Integer(FORMAT_VERSION);
-        this.keyBag = new ASN1EncodableVector();
-    }
-
-    public void addPublicKey(byte[] der) throws Exception {
-        PublicKey pubkey = Utils.loadDERPublicKey(der);
-        BootKey k = new BootKey(pubkey);
-        keyBag.add(k);
-    }
-
-    public void setCertificate(X509Certificate cert) {
-        certificate = cert;
-    }
-
-    public byte[] getInnerKeystore() throws Exception {
-        ASN1EncodableVector v = new ASN1EncodableVector();
-        v.add(formatVersion);
-        v.add(new DERSequence(keyBag));
-        return new DERSequence(v).getEncoded();
-    }
-
-    public ASN1Primitive toASN1Primitive() {
-        ASN1EncodableVector v = new ASN1EncodableVector();
-        v.add(formatVersion);
-        v.add(new DERSequence(keyBag));
-        v.add(signature);
-        return new DERSequence(v);
-    }
-
-    public void parse(byte[] input) throws Exception {
-        ASN1InputStream stream = new ASN1InputStream(input);
-        ASN1Sequence sequence = (ASN1Sequence) stream.readObject();
-
-        formatVersion = (ASN1Integer) sequence.getObjectAt(0);
-        if (formatVersion.getValue().intValue() != FORMAT_VERSION) {
-            throw new IllegalArgumentException("Unsupported format version");
-        }
-
-        ASN1Sequence keys = (ASN1Sequence) sequence.getObjectAt(1);
-        Enumeration e = keys.getObjects();
-        while (e.hasMoreElements()) {
-            keyBag.add((ASN1Encodable) e.nextElement());
-        }
-
-        ASN1Object sig = sequence.getObjectAt(2).toASN1Primitive();
-        signature = new BootSignature(sig.getEncoded());
-    }
-
-    public boolean verify() throws Exception {
-        byte[] innerKeystore = getInnerKeystore();
-        return Utils.verify(signature.getPublicKey(), innerKeystore,
-                signature.getSignature(), signature.getAlgorithmIdentifier());
-    }
-
-    public void sign(PrivateKey privateKey) throws Exception {
-        byte[] innerKeystore = getInnerKeystore();
-        byte[] rawSignature = Utils.sign(privateKey, innerKeystore);
-        signature = new BootSignature("keystore", innerKeystore.length);
-        signature.setCertificate(certificate);
-        signature.setSignature(rawSignature,
-                Utils.getSignatureAlgorithmIdentifier(privateKey));
-    }
-
-    public void dump() throws Exception {
-        System.out.println(ASN1Dump.dumpAsString(toASN1Primitive()));
-    }
-
-    private static void usage() {
-        System.err.println("usage: KeystoreSigner <privatekey.pk8> " +
-                "<certificate.x509.pem> <outfile> <publickey0.der> " +
-                "... <publickeyN-1.der> | -verify <keystore>");
-        System.exit(1);
-    }
-
-    public static void main(String[] args) throws Exception {
-        if (args.length < 2) {
-            usage();
-            return;
-        }
-
-        Security.addProvider(new BouncyCastleProvider());
-        BootKeystore ks = new BootKeystore();
-
-        if ("-verify".equals(args[0])) {
-            ks.parse(Utils.read(args[1]));
-
-            try {
-                if (ks.verify()) {
-                    System.err.println("Signature is VALID");
-                    System.exit(0);
-                } else {
-                    System.err.println("Signature is INVALID");
-                }
-            } catch (Exception e) {
-                e.printStackTrace(System.err);
-            }
-            System.exit(1);
-        } else {
-            // Start Intel addition to enable specifying a provider class using
-            // the same parameter form as signapk. The style is copied directly
-            // from original version at system/extras/verity/BootSignature.java.
-            int argStart = 0;
-            if (args[0].equals("-providerClass")) {
-                Utils.loadProviderIfNecessary(args[1]);
-                argStart += 2;
-            }
-            String privkeyFname = args[argStart + 0];
-            String certFname = args[argStart + 1];
-            String outfileFname = args[argStart + 2];
-
-            ks.setCertificate(Utils.loadPEMCertificate(certFname));
-
-            for (int i = argStart + 3; i < args.length; i++) {
-                ks.addPublicKey(Utils.read(args[i]));
-            }
-            // End of Intel changes
-
-            ks.sign(Utils.loadDERPrivateKeyFromFile(privkeyFname));
-            Utils.write(ks.getEncoded(), outfileFname);
-        }
-    }
-}
diff --git a/ecss_signtools/verity/Utils.java b/ecss_signtools/verity/Utils.java
deleted file mode 100644
index b8d7e38..0000000
--- a/ecss_signtools/verity/Utils.java
+++ /dev/null
@@ -1,315 +0,0 @@
-/*
- * Copyright (C) 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.verity;
-
-import java.lang.reflect.Constructor;
-import java.io.File;
-import java.io.ByteArrayInputStream;
-import java.io.Console;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.InputStreamReader;
-import java.io.IOException;
-import java.security.GeneralSecurityException;
-import java.security.Key;
-import java.security.PrivateKey;
-import java.security.PublicKey;
-import java.security.KeyFactory;
-import java.security.Provider;
-import java.security.Security;
-import java.security.Signature;
-import java.security.cert.Certificate;
-import java.security.cert.CertificateFactory;
-import java.security.cert.X509Certificate;
-import java.security.spec.ECPublicKeySpec;
-import java.security.spec.ECPrivateKeySpec;
-import java.security.spec.X509EncodedKeySpec;
-import java.security.spec.PKCS8EncodedKeySpec;
-import java.security.spec.InvalidKeySpecException;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.crypto.Cipher;
-import javax.crypto.EncryptedPrivateKeyInfo;
-import javax.crypto.SecretKeyFactory;
-import javax.crypto.spec.PBEKeySpec;
-
-import org.bouncycastle.asn1.ASN1InputStream;
-import org.bouncycastle.asn1.ASN1ObjectIdentifier;
-import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
-import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
-import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
-import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;
-import org.bouncycastle.util.encoders.Base64;
-
-public class Utils {
-
-    private static final Map<String, String> ID_TO_ALG;
-    private static final Map<String, String> ALG_TO_ID;
-
-    static {
-        ID_TO_ALG = new HashMap<String, String>();
-        ALG_TO_ID = new HashMap<String, String>();
-
-        ID_TO_ALG.put(X9ObjectIdentifiers.ecdsa_with_SHA256.getId(), "SHA256withECDSA");
-        ID_TO_ALG.put(X9ObjectIdentifiers.ecdsa_with_SHA384.getId(), "SHA384withECDSA");
-        ID_TO_ALG.put(X9ObjectIdentifiers.ecdsa_with_SHA512.getId(), "SHA512withECDSA");
-        ID_TO_ALG.put(PKCSObjectIdentifiers.sha1WithRSAEncryption.getId(), "SHA1withRSA");
-        ID_TO_ALG.put(PKCSObjectIdentifiers.sha256WithRSAEncryption.getId(), "SHA256withRSA");
-        ID_TO_ALG.put(PKCSObjectIdentifiers.sha512WithRSAEncryption.getId(), "SHA512withRSA");
-
-        ALG_TO_ID.put("SHA256withECDSA", X9ObjectIdentifiers.ecdsa_with_SHA256.getId());
-        ALG_TO_ID.put("SHA384withECDSA", X9ObjectIdentifiers.ecdsa_with_SHA384.getId());
-        ALG_TO_ID.put("SHA512withECDSA", X9ObjectIdentifiers.ecdsa_with_SHA512.getId());
-        ALG_TO_ID.put("SHA1withRSA", PKCSObjectIdentifiers.sha1WithRSAEncryption.getId());
-        ALG_TO_ID.put("SHA256withRSA", PKCSObjectIdentifiers.sha256WithRSAEncryption.getId());
-        ALG_TO_ID.put("SHA512withRSA", PKCSObjectIdentifiers.sha512WithRSAEncryption.getId());
-    }
-
-    static void loadProviderIfNecessary(String providerClassName) {
-        if (providerClassName == null) {
-            return;
-        }
-
-        final Class<?> klass;
-        try {
-            final ClassLoader sysLoader = ClassLoader.getSystemClassLoader();
-            if (sysLoader != null) {
-                klass = sysLoader.loadClass(providerClassName);
-            } else {
-                klass = Class.forName(providerClassName);
-            }
-        } catch (ClassNotFoundException e) {
-            e.printStackTrace();
-            System.exit(1);
-            return;
-        }
-
-        Constructor<?> constructor = null;
-        for (Constructor<?> c : klass.getConstructors()) {
-            if (c.getParameterTypes().length == 0) {
-                constructor = c;
-                break;
-            }
-        }
-        if (constructor == null) {
-            System.err.println("No zero-arg constructor found for " + providerClassName);
-            System.exit(1);
-            return;
-        }
-
-        final Object o;
-        try {
-            o = constructor.newInstance();
-        } catch (Exception e) {
-            e.printStackTrace();
-            System.exit(1);
-            return;
-        }
-        if (!(o instanceof Provider)) {
-            System.err.println("Not a Provider class: " + providerClassName);
-            System.exit(1);
-        }
-
-        Security.insertProviderAt((Provider) o, 1);
-    }
-
-    static byte[] pemToDer(String pem) throws Exception {
-        pem = pem.replaceAll("^-.*", "");
-        String base64_der = pem.replaceAll("-.*$", "");
-        return Base64.decode(base64_der);
-    }
-
-    private static PKCS8EncodedKeySpec decryptPrivateKey(byte[] encryptedPrivateKey)
-        throws GeneralSecurityException {
-        EncryptedPrivateKeyInfo epkInfo;
-        try {
-            epkInfo = new EncryptedPrivateKeyInfo(encryptedPrivateKey);
-        } catch (IOException ex) {
-            // Probably not an encrypted key.
-            return null;
-        }
-
-        Console console = System.console();
-        if (console == null) {
-            return null;
-        }
-
-        char[] password = console.readPassword("Password for the private key file: ");
-
-        SecretKeyFactory skFactory = SecretKeyFactory.getInstance(epkInfo.getAlgName());
-        Key key = skFactory.generateSecret(new PBEKeySpec(password));
-        Arrays.fill(password, '\0');
-
-        Cipher cipher = Cipher.getInstance(epkInfo.getAlgName());
-        cipher.init(Cipher.DECRYPT_MODE, key, epkInfo.getAlgParameters());
-
-        try {
-            return epkInfo.getKeySpec(cipher);
-        } catch (InvalidKeySpecException ex) {
-            System.err.println("Password may be bad.");
-            throw ex;
-        }
-    }
-
-    static PrivateKey loadDERPrivateKey(byte[] der) throws Exception {
-        PKCS8EncodedKeySpec spec = decryptPrivateKey(der);
-
-        if (spec == null) {
-            spec = new PKCS8EncodedKeySpec(der);
-        }
-
-        ASN1InputStream bIn = new ASN1InputStream(new ByteArrayInputStream(spec.getEncoded()));
-        PrivateKeyInfo pki = PrivateKeyInfo.getInstance(bIn.readObject());
-        String algOid = pki.getPrivateKeyAlgorithm().getAlgorithm().getId();
-
-        return KeyFactory.getInstance(algOid).generatePrivate(spec);
-    }
-
-    static PrivateKey loadPEMPrivateKey(byte[] pem) throws Exception {
-        byte[] der = pemToDer(new String(pem));
-        return loadDERPrivateKey(der);
-    }
-
-    static PrivateKey loadPEMPrivateKeyFromFile(String keyFname) throws Exception {
-        return loadPEMPrivateKey(read(keyFname));
-    }
-
-    static PrivateKey loadDERPrivateKeyFromFile(String keyFname) throws Exception {
-        return loadDERPrivateKey(read(keyFname));
-    }
-
-    static PublicKey loadDERPublicKey(byte[] der) throws Exception {
-        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(der);
-        KeyFactory factory = KeyFactory.getInstance("RSA");
-        return factory.generatePublic(publicKeySpec);
-    }
-
-    static PublicKey loadPEMPublicKey(byte[] pem) throws Exception {
-        byte[] der = pemToDer(new String(pem));
-        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(der);
-        KeyFactory factory = KeyFactory.getInstance("RSA");
-        return factory.generatePublic(publicKeySpec);
-    }
-
-    static PublicKey loadPEMPublicKeyFromFile(String keyFname) throws Exception {
-        return loadPEMPublicKey(read(keyFname));
-    }
-
-    static PublicKey loadDERPublicKeyFromFile(String keyFname) throws Exception {
-        return loadDERPublicKey(read(keyFname));
-    }
-
-    static X509Certificate loadPEMCertificate(String fname) throws Exception {
-        try (FileInputStream fis = new FileInputStream(fname)) {
-            CertificateFactory cf = CertificateFactory.getInstance("X.509");
-            return (X509Certificate) cf.generateCertificate(fis);
-        }
-    }
-
-    private static String getSignatureAlgorithm(Key key) throws Exception {
-        if ("EC".equals(key.getAlgorithm())) {
-            int curveSize;
-            KeyFactory factory = KeyFactory.getInstance("EC");
-
-            if (key instanceof PublicKey) {
-                ECPublicKeySpec spec = factory.getKeySpec(key, ECPublicKeySpec.class);
-                curveSize = spec.getParams().getCurve().getField().getFieldSize();
-            } else if (key instanceof PrivateKey) {
-                ECPrivateKeySpec spec = factory.getKeySpec(key, ECPrivateKeySpec.class);
-                curveSize = spec.getParams().getCurve().getField().getFieldSize();
-            } else {
-                throw new InvalidKeySpecException();
-            }
-
-            if (curveSize <= 256) {
-                return "SHA256withECDSA";
-            } else if (curveSize <= 384) {
-                return "SHA384withECDSA";
-            } else {
-                return "SHA512withECDSA";
-            }
-        } else if ("RSA".equals(key.getAlgorithm())) {
-            return "SHA256withRSA";
-        } else {
-            throw new IllegalArgumentException("Unsupported key type " + key.getAlgorithm());
-        }
-    }
-
-    static AlgorithmIdentifier getSignatureAlgorithmIdentifier(Key key) throws Exception {
-        String id = ALG_TO_ID.get(getSignatureAlgorithm(key));
-
-        if (id == null) {
-            throw new IllegalArgumentException("Unsupported key type " + key.getAlgorithm());
-        }
-
-        return new AlgorithmIdentifier(new ASN1ObjectIdentifier(id));
-    }
-
-    static boolean verify(PublicKey key, byte[] input, byte[] signature,
-            AlgorithmIdentifier algId) throws Exception {
-        String algName = ID_TO_ALG.get(algId.getAlgorithm().getId());
-
-        if (algName == null) {
-            throw new IllegalArgumentException("Unsupported algorithm " + algId.getAlgorithm());
-        }
-
-        Signature verifier = Signature.getInstance(algName);
-        verifier.initVerify(key);
-        verifier.update(input);
-
-        return verifier.verify(signature);
-    }
-
-    static byte[] sign(PrivateKey privateKey, byte[] input) throws Exception {
-        Signature signer = Signature.getInstance(getSignatureAlgorithm(privateKey));
-        signer.initSign(privateKey);
-        signer.update(input);
-        return signer.sign();
-    }
-
-    static byte[] read(String fname) throws Exception {
-        FileInputStream fis=null;
-        byte[] image = null;
-        try{
-           long offset = 0;
-           File f = new File(fname);
-           long length = f.length();
-           image = new byte[(int)length];
-           fis = new FileInputStream(f);
-           while (offset < length) {
-               offset += fis.read(image, (int)offset, (int)(length - offset));
-           }
-        }finally{
-            if(fis != null)
-                fis.close();
-        }
-        return image;
-    }
-
-    static void write(byte[] data, String fname) throws Exception{
-        FileOutputStream out =null;
-        try{
-            out = new FileOutputStream(fname);
-            out.write(data);
-        }finally{
-            if(out != null)
-               out.close();
-        }
-    }
-}
diff --git a/ecss_signtools/verity/VeritySigner.java b/ecss_signtools/verity/VeritySigner.java
deleted file mode 100644
index e433058..0000000
--- a/ecss_signtools/verity/VeritySigner.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (C) 2013 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.verity;
-
-import java.security.PublicKey;
-import java.security.PrivateKey;
-import java.security.Security;
-import java.security.cert.X509Certificate;
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
-
-public class VeritySigner {
-
-    private static void usage() {
-        System.err.println("usage: VeritySigner <contentfile> <key.pk8> " +
-                "<sigfile> | <contentfile> <certificate.x509.pem> <sigfile> " +
-                "-verify");
-        System.exit(1);
-    }
-
-    public static void main(String[] args) throws Exception {
-        if (args.length < 3) {
-            usage();
-            return;
-        }
-
-        Security.addProvider(new BouncyCastleProvider());
-
-        // Start Intel addition to enable specifying a provider class using
-        // the same parameter form as signapk. The style is copied directly
-        // from original version at system/extras/verity/BootSignature.java.
-        int argStart = 0;
-        if (args[0].equals("-providerClass")) {
-            Utils.loadProviderIfNecessary(args[1]);
-            argStart += 2;
-        }
-
-        byte[] content = Utils.read(args[argStart + 0]);
-
-        if ((args.length - argStart) > 3 && "-verify".equals(args[argStart + 3])) {
-            X509Certificate cert = Utils.loadPEMCertificate(args[argStart + 1]);
-            PublicKey publicKey = cert.getPublicKey();
-
-            byte[] signature = Utils.read(args[argStart + 2]);
-
-            try {
-                if (Utils.verify(publicKey, content, signature,
-                            Utils.getSignatureAlgorithmIdentifier(publicKey))) {
-                    System.err.println("Signature is VALID");
-                    System.exit(0);
-                } else {
-                    System.err.println("Signature is INVALID");
-                }
-            } catch (Exception e) {
-                e.printStackTrace(System.err);
-            }
-
-            System.exit(1);
-        } else {
-            PrivateKey privateKey = Utils.loadDERPrivateKey(Utils.read(args[argStart + 1]));
-            byte[] signature = Utils.sign(privateKey, content);
-            Utils.write(signature, args[argStart + 2]);
-        }
-    }
-}
diff --git a/ecss_signtools/verity/VeritySigner.mf b/ecss_signtools/verity/VeritySigner.mf
deleted file mode 100644
index b36c198..0000000
--- a/ecss_signtools/verity/VeritySigner.mf
+++ /dev/null
@@ -1 +0,0 @@
-Main-Class: com.android.verity.VeritySigner
diff --git a/ecss_signtools/verity/boot_signer b/ecss_signtools/verity/boot_signer
deleted file mode 100755
index ee7f091..0000000
--- a/ecss_signtools/verity/boot_signer
+++ /dev/null
@@ -1,8 +0,0 @@
-#! /bin/sh
-
-# Start-up script for BootSigner
-
-BOOTSIGNER_HOME=`dirname "$0"`
-BOOTSIGNER_HOME=`dirname "$BOOTSIGNER_HOME"`
-
-java -Xmx512M -jar "$BOOTSIGNER_HOME"/framework/BootSignature_ecss.jar -providerClass com.intel.ecss.jce.provider.IntelECSSProvider "$@"
diff --git a/ecss_signtools/verity/keystore_signer b/ecss_signtools/verity/keystore_signer
deleted file mode 100755
index 7f0008e..0000000
--- a/ecss_signtools/verity/keystore_signer
+++ /dev/null
@@ -1,8 +0,0 @@
-#! /bin/sh
-
-# Start-up script for KeystoreSigner
-
-KEYSTORESIGNER_HOME=`dirname "$0"`
-KEYSTORESIGNER_HOME=`dirname "$KEYSTORESIGNER_HOME"`
-
-java -Xmx512M -jar "$KEYSTORESIGNER_HOME"/framework/BootKeystoreSigner_ecss.jar -providerClass com.intel.ecss.jce.provider.IntelECSSProvider "$@"
diff --git a/ecss_signtools/verity/verity_signer b/ecss_signtools/verity/verity_signer
deleted file mode 100755
index cc08046..0000000
--- a/ecss_signtools/verity/verity_signer
+++ /dev/null
@@ -1,8 +0,0 @@
-#! /bin/sh
-
-# Start-up script for VeritySigner
-
-VERITYSIGNER_HOME=`dirname "$0"`
-VERITYSIGNER_HOME=`dirname "$VERITYSIGNER_HOME"`
-
-java -Xmx512M -jar "$VERITYSIGNER_HOME"/framework/VeritySigner_ecss.jar -providerClass com.intel.ecss.jce.provider.IntelECSSProvider "$@"
diff --git a/tasks/publish.mk b/tasks/publish.mk
index c29a0ba..77e71b9 100644
--- a/tasks/publish.mk
+++ b/tasks/publish.mk
@@ -190,7 +190,7 @@ publish_ota_flashfile:
 	@echo "Do not publish ota_flashfile"
 endif # PUBLISH_CONF
 
-PUBLISH_CI_FILES := $(DIST_DIR)/fastboot $(DIST_DIR)/adb
+PUBLISH_CI_FILES := out/dist/fastboot out/dist/adb
 .PHONY: publish_ci
 ifeq ($(KERNELFLINGER_SUPPORT_NON_EFI_BOOT), false)
 publish_ci: publish_liveimage publish_ota_flashfile publish_gptimage publish_ifwi publish_firmware_symbols $(PUB_OSAGNOSTIC_TAG) $(PUB_CMCC_ZIP) $(PLATFORM_RMA_TOOLS_ZIP)
@@ -249,6 +249,6 @@ publish_cic: aic
 
 .PHONY: publish
 publish: publish_mkdir_dest $(PUBLISH_GOALS) publish_ifwi publish_gptimage publish_firmware_symbols $(PUB_OSAGNOSTIC_TAG) publish_kf4abl_symbols $(PUB_CMCC_ZIP) publish_androidia_image
-	@$(ACP) $(DIST_DIR)/* $(publish_dest)
+	@$(ACP) out/dist/* $(publish_dest)
 	$(hide) cp -f $(PRODUCT_OUT)/$(TARGET_AIC_FILE_NAME) $(publish_dest)
 	$(hide) cp $(PRODUCT_OUT)/cic.deb $(publish_dest)
-- 
2.30.0

