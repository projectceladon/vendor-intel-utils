From f49cecde055bae889b265d30f264fd1409607de0 Mon Sep 17 00:00:00 2001
From: Bin Yang <bin.y.yang@intel.com>
Date: Sun, 2 Jun 2019 19:16:23 +0800
Subject: [PATCH] [Disable SELINUX] Tmp patch to disable selinux, it should be
 reverted

Change-Id: I0e14bd4f640966e552552357b2542178dcf95e84
Tracked-On:
Signed-off-by: Bin Yang <bin.y.yang@intel.com>
---
 cmds/installd/InstalldNativeService.cpp | 23 +++++++++++++++++++++-
 cmds/servicemanager/service_manager.c   | 26 ++++++++++++++++++++++++-
 2 files changed, 47 insertions(+), 2 deletions(-)
 mode change 100644 => 100755 cmds/installd/InstalldNativeService.cpp
 mode change 100644 => 100755 cmds/servicemanager/service_manager.c

diff --git a/cmds/installd/InstalldNativeService.cpp b/cmds/installd/InstalldNativeService.cpp
old mode 100644
new mode 100755
index 860a68b27..a50e05e76
--- a/cmds/installd/InstalldNativeService.cpp
+++ b/cmds/installd/InstalldNativeService.cpp
@@ -296,6 +296,12 @@ status_t InstalldNativeService::dump(int fd, const Vector<String16> & /* args */
 static int restorecon_app_data_lazy(const std::string& path, const std::string& seInfo, uid_t uid,
         bool existing) {
     int res = 0;
+#ifdef _DISALBE_SELINUX_
+   (void) path;
+   (void) seInfo;
+   (void) uid;
+   (void) existing;
+#else
     char* before = nullptr;
     char* after = nullptr;
 
@@ -335,6 +341,7 @@ fail:
 done:
     free(before);
     free(after);
+#endif
     return res;
 }
 
@@ -845,11 +852,12 @@ binder::Status InstalldNativeService::moveCompleteApp(const std::unique_ptr<std:
             res = error(rc, "Failed copying " + from + " to " + to);
             goto fail;
         }
-
+#ifndef _DISALBE_SELINUX_
         if (selinux_android_restorecon(to.c_str(), SELINUX_ANDROID_RESTORECON_RECURSE) != 0) {
             res = error("Failed to restorecon " + to);
             goto fail;
         }
+#endif
     }
 
     // Copy private data for all known users
@@ -2289,24 +2297,35 @@ binder::Status InstalldNativeService::restoreconAppData(const std::unique_ptr<st
 
     binder::Status res = ok();
 
+#ifdef _DISALBE_SELINUX_
+    (void) appId;
+    (void) seInfo;
     // SELINUX_ANDROID_RESTORECON_DATADATA flag is set by libselinux. Not needed here.
+#else
     unsigned int seflags = SELINUX_ANDROID_RESTORECON_RECURSE;
+#endif
     const char* uuid_ = uuid ? uuid->c_str() : nullptr;
     const char* pkgName = packageName.c_str();
+#ifndef _DISALBE_SELINUX_
     const char* seinfo = seInfo.c_str();
 
     uid_t uid = multiuser_get_uid(userId, appId);
+#endif
     if (flags & FLAG_STORAGE_CE) {
         auto path = create_data_user_ce_package_path(uuid_, userId, pkgName);
+#ifndef _DISALBE_SELINUX_
         if (selinux_android_restorecon_pkgdir(path.c_str(), seinfo, uid, seflags) < 0) {
             res = error("restorecon failed for " + path);
         }
+#endif
     }
     if (flags & FLAG_STORAGE_DE) {
         auto path = create_data_user_de_package_path(uuid_, userId, pkgName);
+#ifndef _DISALBE_SELINUX_
         if (selinux_android_restorecon_pkgdir(path.c_str(), seinfo, uid, seflags) < 0) {
             res = error("restorecon failed for " + path);
         }
+#endif
     }
     return res;
 }
@@ -2327,9 +2346,11 @@ binder::Status InstalldNativeService::createOatDir(const std::string& oatDir,
     if (fs_prepare_dir(oat_dir, S_IRWXU | S_IRWXG | S_IXOTH, AID_SYSTEM, AID_INSTALL)) {
         return error("Failed to prepare " + oatDir);
     }
+#ifndef _DISALBE_SELINUX_
     if (selinux_android_restorecon(oat_dir, 0)) {
         return error("Failed to restorecon " + oatDir);
     }
+#endif
     snprintf(oat_instr_dir, PKG_PATH_MAX, "%s/%s", oat_dir, instruction_set);
     if (fs_prepare_dir(oat_instr_dir, S_IRWXU | S_IRWXG | S_IXOTH, AID_SYSTEM, AID_INSTALL)) {
         return error(StringPrintf("Failed to prepare %s", oat_instr_dir));
diff --git a/cmds/servicemanager/service_manager.c b/cmds/servicemanager/service_manager.c
old mode 100644
new mode 100755
index 6b340a8d3..1e5c346b9
--- a/cmds/servicemanager/service_manager.c
+++ b/cmds/servicemanager/service_manager.c
@@ -57,10 +57,13 @@ int str16eq(const uint16_t *a, const char *b)
         return 0;
     return 1;
 }
+#ifndef _DISALBE_SELINUX_
 
 static char *service_manager_context;
+#endif
 static struct selabel_handle* sehandle;
 
+#ifndef _DISALBE_SELINUX_
 static bool check_mac_perms(pid_t spid, uid_t uid, const char *tctx, const char *perm, const char *name)
 {
     char *sctx = NULL;
@@ -83,15 +86,24 @@ static bool check_mac_perms(pid_t spid, uid_t uid, const char *tctx, const char
     freecon(sctx);
     return allowed;
 }
+#endif
 
 static bool check_mac_perms_from_getcon(pid_t spid, uid_t uid, const char *perm)
 {
+#ifndef _DISALBE_SELINUX_
     return check_mac_perms(spid, uid, service_manager_context, perm, NULL);
+#else
+	(void) spid;
+	(void) uid;
+	(void)perm;
+    return true;
+#endif
 }
 
 static bool check_mac_perms_from_lookup(pid_t spid, uid_t uid, const char *perm, const char *name)
 {
     bool allowed;
+#ifndef _DISALBE_SELINUX_
     char *tctx = NULL;
 
     if (!sehandle) {
@@ -106,6 +118,13 @@ static bool check_mac_perms_from_lookup(pid_t spid, uid_t uid, const char *perm,
 
     allowed = check_mac_perms(spid, uid, tctx, perm, name);
     freecon(tctx);
+#else
+	(void) spid;
+	(void) uid;
+	(void)perm;
+	(void)name;
+    allowed = true;
+#endif
     return allowed;
 }
 
@@ -357,6 +376,7 @@ int svcmgr_handler(struct binder_state *bs,
     return 0;
 }
 
+#ifndef _DISALBE_SELINUX_
 
 static int audit_callback(void *data, __unused security_class_t cls, char *buf, size_t len)
 {
@@ -370,11 +390,14 @@ static int audit_callback(void *data, __unused security_class_t cls, char *buf,
     snprintf(buf, len, "service=%s pid=%d uid=%d", ad->name, ad->pid, ad->uid);
     return 0;
 }
+#endif
 
 int main(int argc, char** argv)
 {
     struct binder_state *bs;
+#ifndef _DISALBE_SELINUX_
     union selinux_callback cb;
+#endif
     char *driver;
 
     if (argc > 1) {
@@ -401,6 +424,7 @@ int main(int argc, char** argv)
         return -1;
     }
 
+#ifndef _DISALBE_SELINUX_
     cb.func_audit = audit_callback;
     selinux_set_callback(SELINUX_CB_AUDIT, cb);
     cb.func_log = selinux_log_callback;
@@ -422,7 +446,7 @@ int main(int argc, char** argv)
         ALOGE("SELinux: Failed to acquire service_manager context. Aborting.\n");
         abort();
     }
-
+#endif
 
     binder_loop(bs, svcmgr_handler);
 
-- 
2.21.0

