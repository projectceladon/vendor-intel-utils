From 7bb7a25ddc199bc7e5c96166bae6984d29f8685d Mon Sep 17 00:00:00 2001
From: Marc Mao <marc.mao@intel.com>
Date: Thu, 5 Sep 2019 15:43:05 +0800
Subject: [PATCH 1/2] Add layer task info support

Change-Id: I2b0e97e2387ec512e5a19c1a1ae542ff2b8811d9
Tracked-On:
Signed-off-by: Marc Mao <marc.mao@intel.com>
---
 current.txt                                   |  2 +-
 graphics/composer/2.1/IComposerClient.hal     |  2 ++
 .../2.1/ComposerCommandBuffer.h               | 10 ++++++++++
 .../composer-hal/2.1/ComposerCommandEngine.h  | 20 +++++++++++++++++++
 .../include/composer-hal/2.1/ComposerHal.h    |  4 ++++
 .../include/composer-passthrough/2.1/HwcHal.h | 15 ++++++++++++++
 6 files changed, 52 insertions(+), 1 deletion(-)

diff --git a/current.txt b/current.txt
index cc15322b8..881423f85 100644
--- a/current.txt
+++ b/current.txt
@@ -258,7 +258,7 @@ fb92e2b40f8e9d494e8fd3b4ac18499a3216342e7cff160714c3bbf3660b6e79 android.hardwar
 251594ea9b27447bfa005ebd806e58fb0ae4aad84a69938129c9800ec0c64eda android.hardware.gnss@1.0::IGnssMeasurementCallback
 4e7169919d24fbe5573e5bcd683d0bd7abf553a4e6c34c41f9dfc1e12050db07 android.hardware.gnss@1.0::IGnssNavigationMessageCallback
 190ea4898809de6cf379afe318f5fa9564686157b24d9a2d7f5698b0c977d8b2 android.hardware.graphics.bufferqueue@1.0::IGraphicBufferProducer
-25892789b50eb673506b6c5a2cdab5d9aa428d41608aab10280cc898538b524a android.hardware.graphics.composer@2.1::IComposerClient
+0cfc2cb53ce14588b383adc91fabd56c5fd972ca93aa933c545ff631fc920764 android.hardware.graphics.composer@2.1::IComposerClient
 e205dd30f5ff99445b706a901de8ebc46c379e9d7c1921d6a327ed2082cfa83d android.hardware.graphics.composer@2.1::types
 a46251718abfada458dc64c41ce94915757bf6c87cfa2d9e99cfb01fa8e32331 android.hardware.graphics.mapper@2.0::IMapper
 bd33ac23c57b4a07632691d2191bc2c93930f57e62f4ccf459748fdaa5c0f480 android.hardware.graphics.mapper@2.0::types
diff --git a/graphics/composer/2.1/IComposerClient.hal b/graphics/composer/2.1/IComposerClient.hal
index 5ad46f011..4bc151288 100644
--- a/graphics/composer/2.1/IComposerClient.hal
+++ b/graphics/composer/2.1/IComposerClient.hal
@@ -1139,6 +1139,8 @@ interface IComposerClient {
         SET_PRESENT_OR_VALIDATE_DISPLAY_RESULT = 0x40b << OPCODE_SHIFT,
 
         /* 0x800 - 0xfff are reserved for vendor extensions */
+        SET_LAYER_TASK_INFO                = 0x800 << OPCODE_SHIFT,
+
         /* 0x1000 - 0xffff are reserved */
     };
 };
diff --git a/graphics/composer/2.1/utils/command-buffer/include/composer-command-buffer/2.1/ComposerCommandBuffer.h b/graphics/composer/2.1/utils/command-buffer/include/composer-command-buffer/2.1/ComposerCommandBuffer.h
index 274220713..bdd5b4277 100644
--- a/graphics/composer/2.1/utils/command-buffer/include/composer-command-buffer/2.1/ComposerCommandBuffer.h
+++ b/graphics/composer/2.1/utils/command-buffer/include/composer-command-buffer/2.1/ComposerCommandBuffer.h
@@ -402,6 +402,16 @@ class CommandWriterBase {
         endCommand();
     }
 
+    static constexpr uint16_t kSetLayerTaskInfoLength = 4;
+    void setLayerTaskInfo(uint32_t stackId, uint32_t taskId, uint32_t userId, uint32_t index) {
+        beginCommand(IComposerClient::Command::SET_LAYER_TASK_INFO, kSetLayerTaskInfoLength);
+        write(stackId);
+        write(taskId);
+        write(userId);
+        write(index);
+        endCommand();
+    }
+
    protected:
     void setClientTargetInternal(uint32_t slot, const native_handle_t* target, int acquireFence,
                                  int32_t dataspace,
diff --git a/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerCommandEngine.h b/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerCommandEngine.h
index 36aa64ef0..71accd32c 100644
--- a/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerCommandEngine.h
+++ b/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerCommandEngine.h
@@ -135,6 +135,10 @@ class ComposerCommandEngine : protected CommandReaderBase {
                 return executeSetLayerVisibleRegion(length);
             case IComposerClient::Command::SET_LAYER_Z_ORDER:
                 return executeSetLayerZOrder(length);
+#ifdef SUPPORT_LAYER_TASK_INFO
+            case IComposerClient::Command::SET_LAYER_TASK_INFO:
+                return executeSetLayerTaskInfo(length);
+#endif
             default:
                 return false;
         }
@@ -552,6 +556,22 @@ class ComposerCommandEngine : protected CommandReaderBase {
         return true;
     }
 
+#ifdef SUPPORT_LAYER_TASK_INFO
+    bool executeSetLayerTaskInfo(uint16_t length) {
+        if (length != CommandWriterBase::kSetLayerTaskInfoLength) {
+            return false;
+        }
+
+        auto err = mHal->setLayerTaskInfo(mCurrentDisplay, mCurrentLayer,
+                                          read(), read(), read(), read());
+        if (err != Error::NONE) {
+            mWriter.setError(getCommandLoc(), err);
+        }
+
+        return true;
+    }
+#endif
+
     hwc_rect_t readRect() {
         return hwc_rect_t{
             readSigned(), readSigned(), readSigned(), readSigned(),
diff --git a/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerHal.h b/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerHal.h
index c9793fd91..425e7eb64 100644
--- a/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerHal.h
+++ b/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerHal.h
@@ -127,6 +127,10 @@ class ComposerHal {
     virtual Error setLayerVisibleRegion(Display display, Layer layer,
                                         const std::vector<hwc_rect_t>& visible) = 0;
     virtual Error setLayerZOrder(Display display, Layer layer, uint32_t z) = 0;
+#ifdef SUPPORT_LAYER_TASK_INFO
+    virtual Error setLayerTaskInfo(Display display, Layer layer, uint32_t stackId,
+                                   uint32_t taskId, uint32_t userId, uint32_t index) = 0;
+#endif
 };
 
 }  // namespace hal
diff --git a/graphics/composer/2.1/utils/passthrough/include/composer-passthrough/2.1/HwcHal.h b/graphics/composer/2.1/utils/passthrough/include/composer-passthrough/2.1/HwcHal.h
index 964e75bdc..977063451 100644
--- a/graphics/composer/2.1/utils/passthrough/include/composer-passthrough/2.1/HwcHal.h
+++ b/graphics/composer/2.1/utils/passthrough/include/composer-passthrough/2.1/HwcHal.h
@@ -491,6 +491,15 @@ class HwcHalImpl : public Hal {
         return static_cast<Error>(err);
     }
 
+#ifdef SUPPORT_LAYER_TASK_INFO
+    Error setLayerTaskInfo(Display display, Layer layer, uint32_t stackId,
+                           uint32_t taskId, uint32_t userId, uint32_t index) override {
+        int32_t err = mDispatch.setLayerTaskInfo(mDevice, display, layer, stackId,
+                                                 taskId, userId, index);
+        return static_cast<Error>(err);
+    }
+#endif
+
    protected:
     virtual void initCapabilities() {
         uint32_t count = 0;
@@ -574,6 +583,9 @@ class HwcHalImpl : public Hal {
             !initDispatch(HWC2_FUNCTION_SET_LAYER_VISIBLE_REGION,
                           &mDispatch.setLayerVisibleRegion) ||
             !initDispatch(HWC2_FUNCTION_SET_LAYER_Z_ORDER, &mDispatch.setLayerZOrder) ||
+#ifdef SUPPORT_LAYER_TASK_INFO
+            !initDispatch(HWC2_FUNCTION_SET_LAYER_TASK_INFO, &mDispatch.setLayerTaskInfo) ||
+#endif
             !initDispatch(HWC2_FUNCTION_SET_OUTPUT_BUFFER, &mDispatch.setOutputBuffer) ||
             !initDispatch(HWC2_FUNCTION_SET_POWER_MODE, &mDispatch.setPowerMode) ||
             !initDispatch(HWC2_FUNCTION_SET_VSYNC_ENABLED, &mDispatch.setVsyncEnabled) ||
@@ -647,6 +659,9 @@ class HwcHalImpl : public Hal {
         HWC2_PFN_SET_LAYER_TRANSFORM setLayerTransform;
         HWC2_PFN_SET_LAYER_VISIBLE_REGION setLayerVisibleRegion;
         HWC2_PFN_SET_LAYER_Z_ORDER setLayerZOrder;
+#ifdef SUPPORT_LAYER_TASK_INFO
+        HWC2_PFN_SET_LAYER_TASK_INFO setLayerTaskInfo;
+#endif
         HWC2_PFN_SET_OUTPUT_BUFFER setOutputBuffer;
         HWC2_PFN_SET_POWER_MODE setPowerMode;
         HWC2_PFN_SET_VSYNC_ENABLED setVsyncEnabled;
-- 
2.17.1

