From d0ecb725bc3969afe52b60dc48151b52f415ac75 Mon Sep 17 00:00:00 2001
From: "xue.yifei" <yifei.xue@intel.com>
Date: Tue, 2 Jul 2019 13:44:54 +0800
Subject: [PATCH 2/7] minigbm-intel : fix minigbm can't work on kernel 4.4

Change-Id: I96cdc59097ff8efc755f46e55f3db70fea6dcb15
Signed-off-by: xue.yifei <yifei.xue@intel.com>
Reviewed-on: 674559
Reviewed-by: Shi, Zhongjie <zhongjie.shi@intel.com>
---
 Android.gralloc.mk                            |   2 +
 cros_gralloc/cros_gralloc_driver.cc           |   6 +-
 cros_gralloc/gralloc1/cros_gralloc1_module.cc | 131 +++++++++++++++++-
 drv.c                                         |  27 ++--
 4 files changed, 150 insertions(+), 16 deletions(-)
 mode change 100644 => 100755 Android.gralloc.mk

diff --git a/Android.gralloc.mk b/Android.gralloc.mk
old mode 100644
new mode 100755
index 318d6a5..2d16c6c
--- a/Android.gralloc.mk
+++ b/Android.gralloc.mk
@@ -13,6 +13,8 @@ LOCAL_SRC_FILES += \
 ifeq ($(strip $(BOARD_USES_GRALLOC1)), true)
 LOCAL_SRC_FILES += cros_gralloc/gralloc1/cros_gralloc1_module.cc
 LOCAL_CPPFLAGS += -DUSE_GRALLOC1
+LOCAL_CFLAGS += -DUSE_GRALLOC1  -DLOG_TAG=\"gralloc1\"
 else
 LOCAL_SRC_FILES += cros_gralloc/gralloc0/gralloc0.cc
+LOCAL_CFLAGS += -DLOG_TAG=\"gralloc\"
 endif
diff --git a/cros_gralloc/cros_gralloc_driver.cc b/cros_gralloc/cros_gralloc_driver.cc
index fecef3e..04143aa 100755
--- a/cros_gralloc/cros_gralloc_driver.cc
+++ b/cros_gralloc/cros_gralloc_driver.cc
@@ -15,7 +15,7 @@
 #include <unistd.h>
 #include <xf86drm.h>
 
-#include <log/log.h>
+#include <cutils/log.h>
 
 cros_gralloc_driver::cros_gralloc_driver() : drv_(nullptr)
 {
@@ -74,7 +74,7 @@ int32_t cros_gralloc_driver::init()
 				continue;
 			}
 
-            cros_gralloc_log("CROS_GRALLOC_INFO", __FILE__, __LINE__, "drm version->name =%s", version->name);
+            ALOGI("drm version->name =%s", version->name);
 
 			if (undesired[i] && !strcmp(version->name, undesired[i])) {
 				drmFreeVersion(version);
@@ -371,8 +371,6 @@ int cros_gralloc_driver::init_kms()
 int cros_gralloc_driver::get_kms_info(kms_info_t* info) 
 {
     int ret = 0;
-
-    ALOGI("%s:%d", __func__, __LINE__);
     
     ret = drv_get_kms_info(drv_, info);
     if(ret) {
diff --git a/cros_gralloc/gralloc1/cros_gralloc1_module.cc b/cros_gralloc/gralloc1/cros_gralloc1_module.cc
index 8aa0499..4aa1cca 100755
--- a/cros_gralloc/gralloc1/cros_gralloc1_module.cc
+++ b/cros_gralloc/gralloc1/cros_gralloc1_module.cc
@@ -14,9 +14,6 @@
  * limitations under the License.
  */
 
-#undef LOG_TAG
-#define LOG_TAG "CrosGralloc1 "
-//#define LOG_NDEBUG 0
 
 #include <errno.h>
 #include "cros_gralloc1_module.h"
@@ -389,6 +386,10 @@ bool CrosGralloc1::Init()
 
 void CrosGralloc1::doGetCapabilities(uint32_t *outCount, int32_t *outCapabilities)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d ", __func__, __LINE__);
+#endif
+
 	if (outCapabilities == nullptr) {
 		*outCount = 0;
 	}
@@ -396,6 +397,10 @@ void CrosGralloc1::doGetCapabilities(uint32_t *outCount, int32_t *outCapabilitie
 
 gralloc1_function_pointer_t CrosGralloc1::doGetFunction(int32_t intDescriptor)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : intDescriptor = %llu ", __func__, __LINE__, intDescriptor);
+#endif
+
 	constexpr auto lastDescriptor = static_cast<int32_t>(GRALLOC1_LAST_FUNCTION);
 	if (intDescriptor < 0 || ((intDescriptor > lastDescriptor) && ((intDescriptor < 100) || (intDescriptor > GRALLOC1_LAST_CUSTOM)))) {
 		ALOGE("Invalid function descriptor %d", intDescriptor);
@@ -475,6 +480,11 @@ void CrosGralloc1::dump(uint32_t *outSize, char *outBuffer)
 
 int32_t CrosGralloc1::createDescriptor(gralloc1_buffer_descriptor_t *outDescriptor)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : outDescriptor= %p", __func__, __LINE__, outDescriptor);
+#endif
+
 	if (!outDescriptor)
 		return CROS_GRALLOC_ERROR_BAD_DESCRIPTOR;
 
@@ -485,6 +495,10 @@ int32_t CrosGralloc1::createDescriptor(gralloc1_buffer_descriptor_t *outDescript
 
 int32_t CrosGralloc1::destroyDescriptor(gralloc1_buffer_descriptor_t descriptor)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (descriptorId = %llu)", __func__, __LINE__, descriptor);
+#endif
+
 	auto hnd = (struct cros_gralloc_buffer_descriptor *)descriptor;
 	delete hnd;
 	return CROS_GRALLOC_ERROR_NONE;
@@ -492,6 +506,10 @@ int32_t CrosGralloc1::destroyDescriptor(gralloc1_buffer_descriptor_t descriptor)
 
 int32_t CrosGralloc1::setConsumerUsage(gralloc1_buffer_descriptor_t descriptorId, uint64_t intUsage)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (descriptorId = %llu, intUsage = 0x%x)", __func__, __LINE__, descriptorId, intUsage);
+#endif
+
 	auto hnd = (struct cros_gralloc_buffer_descriptor *)descriptorId;
 	hnd->consumer_usage = intUsage;
 	return CROS_GRALLOC_ERROR_NONE;
@@ -499,6 +517,10 @@ int32_t CrosGralloc1::setConsumerUsage(gralloc1_buffer_descriptor_t descriptorId
 
 int32_t CrosGralloc1::setProducerUsage(gralloc1_buffer_descriptor_t descriptorId, uint64_t intUsage)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (descriptorId = %llu, intUsage = 0x%x)", __func__, __LINE__, descriptorId, intUsage);
+#endif
+
 	auto hnd = (struct cros_gralloc_buffer_descriptor *)descriptorId;
 	hnd->producer_usage = intUsage;
 	return CROS_GRALLOC_ERROR_NONE;
@@ -507,6 +529,11 @@ int32_t CrosGralloc1::setProducerUsage(gralloc1_buffer_descriptor_t descriptorId
 int32_t CrosGralloc1::setDimensions(gralloc1_buffer_descriptor_t descriptorId, uint32_t width,
 				    uint32_t height)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (descriptorId = %llu, format = %d)", __func__, __LINE__, descriptorId, width);
+#endif
+
 	auto hnd = (struct cros_gralloc_buffer_descriptor *)descriptorId;
 	hnd->width = width;
 	hnd->height = height;
@@ -515,6 +542,11 @@ int32_t CrosGralloc1::setDimensions(gralloc1_buffer_descriptor_t descriptorId, u
 
 int32_t CrosGralloc1::setFormat(gralloc1_buffer_descriptor_t descriptorId, int32_t format)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (descriptorId = %llu, format = %x)", __func__, __LINE__, descriptorId, format);
+#endif
+
 	auto hnd = (struct cros_gralloc_buffer_descriptor *)descriptorId;
 	hnd->droid_format = format;
 	hnd->drm_format = cros_gralloc_convert_format(format);
@@ -543,6 +575,11 @@ int32_t CrosGralloc1::setProtectionInfo(buffer_handle_t buffer, uint32_t protect
 
 int32_t CrosGralloc1::setModifier(gralloc1_buffer_descriptor_t descriptorId, uint64_t modifier)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (descriptorId = %llu, modifier = %llu)", __func__, __LINE__, descriptorId, modifier);
+#endif
+
 	auto hnd = (struct cros_gralloc_buffer_descriptor *)descriptorId;
 	hnd->modifier = modifier;
 	return CROS_GRALLOC_ERROR_NONE;
@@ -551,6 +588,11 @@ int32_t CrosGralloc1::setModifier(gralloc1_buffer_descriptor_t descriptorId, uin
 int32_t CrosGralloc1::allocate(struct cros_gralloc_buffer_descriptor *descriptor,
 			       buffer_handle_t *outBufferHandle)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (descriptor = %p)", __func__, __LINE__, descriptor);
+#endif
+
 	// If this function is being called, it's because we handed out its function
 	// pointer, which only occurs when mDevice has been loaded successfully and
 	// we are permitted to allocate
@@ -570,8 +612,19 @@ int32_t CrosGralloc1::allocate(struct cros_gralloc_buffer_descriptor *descriptor
 				   static_cast<unsigned long long>(descriptor->use_flags));
 		return CROS_GRALLOC_ERROR_UNSUPPORTED;
 	}
-	if (driver->allocate(descriptor, outBufferHandle))
+	if (driver->allocate(descriptor, outBufferHandle)) {
+        if(outBufferHandle) {
+            ALOGI("%s: %d : allocate failed (descriptor = %p, *outBufferHandle = %p)", __func__, __LINE__, descriptor, *outBufferHandle);
+        }
+
 		return CROS_GRALLOC_ERROR_NO_RESOURCES;
+    }
+
+#if DEBUG_GRALLOC_API
+    if(outBufferHandle) {
+        ALOGI("%s: %d : (descriptor = %p, *outBufferHandle = %p)", __func__, __LINE__, descriptor, *outBufferHandle);
+    }
+#endif
 
 	return CROS_GRALLOC_ERROR_NONE;
 }
@@ -580,6 +633,10 @@ int32_t CrosGralloc1::allocateBuffers(gralloc1_device_t *device, uint32_t numDes
 				      const gralloc1_buffer_descriptor_t *descriptors,
 				      buffer_handle_t *outBuffers)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (descriptors = %p)", __func__, __LINE__, descriptors);
+#endif
+
 	auto adapter = getAdapter(device);
 	for (uint32_t i = 0; i < numDescriptors; i++) {
 		auto descriptor = (struct cros_gralloc_buffer_descriptor *)descriptors[i];
@@ -601,6 +658,11 @@ int32_t CrosGralloc1::allocateBuffers(gralloc1_device_t *device, uint32_t numDes
 
 int32_t CrosGralloc1::retain(buffer_handle_t bufferHandle)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, bufferHandle);
+#endif
+
 	if (driver->retain(bufferHandle))
 		return CROS_GRALLOC_ERROR_BAD_HANDLE;
 
@@ -609,6 +671,11 @@ int32_t CrosGralloc1::retain(buffer_handle_t bufferHandle)
 
 int32_t CrosGralloc1::release(buffer_handle_t bufferHandle)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, bufferHandle);
+#endif
+
 	if (driver->release(bufferHandle))
 		return CROS_GRALLOC_ERROR_BAD_HANDLE;
 
@@ -620,6 +687,10 @@ int32_t CrosGralloc1::lock(buffer_handle_t bufferHandle, gralloc1_producer_usage
 			   const gralloc1_rect_t &accessRegion, void **outData,
 			   int32_t acquireFence)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, bufferHandle);
+#endif
+
 	uint64_t map_flags;
 	uint8_t *addr[DRV_MAX_PLANES];
 
@@ -675,6 +746,11 @@ int32_t CrosGralloc1::lockFlex(buffer_handle_t bufferHandle,
 			       const gralloc1_rect_t &accessRegion,
 			       struct android_flex_layout *outData, int32_t acquireFence)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, bufferHandle);
+#endif
+
 	int32_t ret = -EINVAL;
 	struct android_ycbcr ycbcrData;
 
@@ -705,6 +781,11 @@ int32_t CrosGralloc1::lockYCbCr(buffer_handle_t bufferHandle,
 				const gralloc1_rect_t &accessRegion, struct android_ycbcr *ycbcr,
 				int32_t acquireFence)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, bufferHandle);
+#endif
+
 	uint64_t map_flags;
 	uint8_t *addr[DRV_MAX_PLANES] = { nullptr, nullptr, nullptr, nullptr };
 
@@ -759,6 +840,11 @@ int32_t CrosGralloc1::lockYCbCr(buffer_handle_t bufferHandle,
 
 int32_t CrosGralloc1::unlock(buffer_handle_t bufferHandle, int32_t *outReleaseFence)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, bufferHandle);
+#endif
+
 	if (driver->unlock(bufferHandle, outReleaseFence))
 		return CROS_GRALLOC_ERROR_BAD_HANDLE;
 
@@ -767,6 +853,11 @@ int32_t CrosGralloc1::unlock(buffer_handle_t bufferHandle, int32_t *outReleaseFe
 
 int32_t CrosGralloc1::getNumFlexPlanes(buffer_handle_t buffer, uint32_t *outNumPlanes)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, buffer);
+#endif
+
 	auto hnd = cros_gralloc_convert_handle(buffer);
 	if (!hnd) {
 		cros_gralloc_error("Invalid handle.");
@@ -779,6 +870,10 @@ int32_t CrosGralloc1::getNumFlexPlanes(buffer_handle_t buffer, uint32_t *outNumP
 
 int32_t CrosGralloc1::getBackingStore(buffer_handle_t buffer, gralloc1_backing_store_t *outStore)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, buffer);
+#endif
+
 	auto hnd = cros_gralloc_convert_handle(buffer);
 	if (!hnd) {
 		cros_gralloc_error("Invalid handle.");
@@ -794,6 +889,10 @@ int32_t CrosGralloc1::getBackingStore(buffer_handle_t buffer, gralloc1_backing_s
 int32_t CrosGralloc1::getConsumerUsage(buffer_handle_t buffer,
 				       uint64_t * /*gralloc1_consumer_usage_t*/ outUsage)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, buffer);
+#endif
+
 	auto hnd = cros_gralloc_convert_handle(buffer);
 	if (!hnd) {
 		return CROS_GRALLOC_ERROR_BAD_HANDLE;
@@ -805,6 +904,11 @@ int32_t CrosGralloc1::getConsumerUsage(buffer_handle_t buffer,
 
 int32_t CrosGralloc1::getDimensions(buffer_handle_t buffer, uint32_t *outWidth, uint32_t *outHeight)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, buffer);
+#endif
+
 	auto hnd = cros_gralloc_convert_handle(buffer);
 	if (!hnd) {
 		return CROS_GRALLOC_ERROR_BAD_HANDLE;
@@ -817,6 +921,10 @@ int32_t CrosGralloc1::getDimensions(buffer_handle_t buffer, uint32_t *outWidth,
 
 int32_t CrosGralloc1::getFormat(buffer_handle_t buffer, int32_t *outFormat)
 {
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, buffer);
+#endif
+
 	auto hnd = cros_gralloc_convert_handle(buffer);
 	if (!hnd) {
 		return CROS_GRALLOC_ERROR_BAD_HANDLE;
@@ -829,6 +937,11 @@ int32_t CrosGralloc1::getFormat(buffer_handle_t buffer, int32_t *outFormat)
 int32_t CrosGralloc1::getProducerUsage(buffer_handle_t buffer,
 				       uint64_t * /*gralloc1_producer_usage_t*/ outUsage)
 {
+
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, buffer);
+#endif
+
 	auto hnd = cros_gralloc_convert_handle(buffer);
 	if (!hnd) {
 		return CROS_GRALLOC_ERROR_BAD_HANDLE;
@@ -840,6 +953,11 @@ int32_t CrosGralloc1::getProducerUsage(buffer_handle_t buffer,
 
 int32_t CrosGralloc1::getStride(buffer_handle_t buffer, uint32_t *outStride)
 {
+#if DEBUG_GRALLOC_API
+        ALOGI("%s: %d : (buffer = %p)", __func__, __LINE__, buffer);
+#endif
+
+
 	auto hnd = cros_gralloc_convert_handle(buffer);
 	if (!hnd) {
 		return CROS_GRALLOC_ERROR_BAD_HANDLE;
@@ -885,6 +1003,11 @@ int CrosGralloc1::HookGrallocClose(hw_device_t * dev)
 {
     CrosGralloc1* pGralloc1 = CrosGralloc1::getAdapter((gralloc1_device_t*)dev);
 
+#if DEBUG_GRALLOC_API
+    ALOGI("%s: %d : (dev = %p)", __func__, __LINE__, dev);
+#endif
+
+
     if(pGralloc1) {
         delete pGralloc1;
     }    
diff --git a/drv.c b/drv.c
index 330a1fd..aa797ce 100755
--- a/drv.c
+++ b/drv.c
@@ -142,8 +142,6 @@ struct driver *drv_create(int fd)
 	if (!drv->buffer_table)
 		goto free_driver;
 
-    ALOGI("%s : %d", __func__, __LINE__);
-
 	drv->map_table = drmHashCreate();
 	if (!drv->map_table)
 		goto free_buffer_table;
@@ -526,10 +524,22 @@ union bo_handle drv_bo_get_plane_handle(struct bo *bo, size_t plane)
 int drv_bo_get_plane_fd(struct bo *bo, size_t plane)
 {
 
-	int ret, fd;
+	int ret = 0;
+    int fd = -1;
+    uint32_t flags = 0;
+
+
+    // Note  :  kernel 4.4 can't support DRM_RDWR flag
+    // flags = DRM_CLOEXEC | DRM_RDWR;
+    flags = DRM_CLOEXEC;
+
 	assert(plane < bo->num_planes);
 
-	ret = drmPrimeHandleToFD(bo->drv->fd, bo->handles[plane].u32, DRM_CLOEXEC | DRM_RDWR, &fd);
+	ret = drmPrimeHandleToFD(bo->drv->fd, bo->handles[plane].u32, flags, &fd);
+    if(ret) {
+        ALOGE("%s : %d : drmPrimeHandleToFD failed(fd = %d, handle = %d, flags = %x, prime_fd = %d) ret = %d",
+            __func__, __LINE__, bo->drv->fd, bo->handles[plane].u32, flags, fd, ret);
+    }
 
 	return (ret) ? ret : fd;
 }
@@ -1070,7 +1080,6 @@ static int kms_wait_vblank(kms_t *kms)
 int drv_init_kms(struct driver* drv)
 {
     drmModeConnectorPtr lvds, hdmi, edp;
-    uint32_t lxc_id = 1;
     uint32_t type_id = 1;
     int connected_count = 0;
     int i, ret;
@@ -1361,9 +1370,11 @@ int drv_present_bo(struct driver* drv, struct bo *bo)
             uint32_t flags = 0;
             ret = drmModePageFlip(kms->fd, kms->primary.crtc_id, bo->fb_id, flags, (void *)kms);        
             if (ret) {
-                ALOGE("%s : %d : page flip failed (crtc_id = %d, fb_id =%d, flags = %d), error = %s)",
-                      __func__, __LINE__, kms->primary.crtc_id, bo->fb_id, flags, strerror(errno));
-                kms->first_post = 1;
+                if(ret != -EBUSY) {
+                    ALOGE("%s : %d : page flip failed (crtc_id = %d, fb_id =%d, flags = %d), ret = %d, error = %s)",
+                          __func__, __LINE__, kms->primary.crtc_id, bo->fb_id, flags, ret, strerror(errno));
+                    kms->first_post = 1;
+                }
             }
             else {
                 kms->back_bo = bo;
-- 
2.21.0

