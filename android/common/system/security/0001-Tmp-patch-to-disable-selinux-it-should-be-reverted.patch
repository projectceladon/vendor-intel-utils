From a78b36139abf2a107257ea1edab056d01fdc1185 Mon Sep 17 00:00:00 2001
From: Xie Chao <chao.xie@intel.com>
Date: Fri, 19 Jul 2019 11:24:51 +0800
Subject: [PATCH] Tmp patch to disable selinux, it should be reverted

Change-Id: Iea1a92051a379c39ea8527c3213d77966eb7e718
Tracked-On:
Signed-off-by: Xie Chao <chao.xie@intel.com>
---
 keystore/keystore_main.cpp |  2 ++
 keystore/permissions.cpp   | 13 +++++++++++++
 2 files changed, 15 insertions(+)

diff --git a/keystore/keystore_main.cpp b/keystore/keystore_main.cpp
index f3eadd7..3d56387 100644
--- a/keystore/keystore_main.cpp
+++ b/keystore/keystore_main.cpp
@@ -141,7 +141,9 @@ int main(int argc, char* argv[]) {
     CHECK(kmDevices[SecurityLevel::TRUSTED_ENVIRONMENT])
         << "Error no viable keymaster device found";
 
+#ifndef _DISALBE_SELINUX_
     CHECK(configure_selinux() != -1) << "Failed to configure SELinux.";
+#endif
 
     auto halVersion = kmDevices[SecurityLevel::TRUSTED_ENVIRONMENT]->halVersion();
 
diff --git a/keystore/permissions.cpp b/keystore/permissions.cpp
index 05454cb..0e01e29 100644
--- a/keystore/permissions.cpp
+++ b/keystore/permissions.cpp
@@ -133,6 +133,7 @@ int configure_selinux() {
     return 0;
 }
 
+#ifndef _DISALBE_SELINUX_
 static bool keystore_selinux_check_access(uid_t uid, perm_t perm, pid_t spid, const char* ssid) {
     audit_data ad;
     char* sctx = nullptr;
@@ -159,6 +160,7 @@ static bool keystore_selinux_check_access(uid_t uid, perm_t perm, pid_t spid, co
     freecon(sctx);
     return allowed;
 }
+#endif
 
 /**
  * Returns the UID that the callingUid should act as. This is here for
@@ -177,6 +179,9 @@ uid_t get_keystore_euid(uid_t uid) {
 }
 
 bool has_permission(uid_t uid, perm_t perm, pid_t spid, const char* sid) {
+#ifdef _DISALBE_SELINUX_
+    (void) spid;
+#endif
     // All system users are equivalent for multi-user support.
     if (get_app_id(uid) == AID_SYSTEM) {
         uid = AID_SYSTEM;
@@ -189,11 +194,19 @@ bool has_permission(uid_t uid, perm_t perm, pid_t spid, const char* sid) {
     for (size_t i = 0; i < sizeof(user_perms) / sizeof(user_perms[0]); i++) {
         struct user_perm user = user_perms[i];
         if (user.uid == uid) {
+#ifndef _DISALBE_SELINUX_
             return (user.perms & perm) && keystore_selinux_check_access(uid, perm, spid, sid);
+#else
+            return (user.perms & perm); // && keystore_selinux_check_access(uid, perm, spid);
+#endif
         }
     }
 
+#ifndef _DISALBE_SELINUX_
     return (DEFAULT_PERMS & perm) && keystore_selinux_check_access(uid, perm, spid, sid);
+#else
+    return (DEFAULT_PERMS & perm); // && keystore_selinux_check_access(uid, perm, spid);
+#endif
 }
 
 /**
-- 
2.21.0

