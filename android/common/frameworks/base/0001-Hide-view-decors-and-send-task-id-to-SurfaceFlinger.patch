From a5efe20838b2f1c50e58979d8ea325d160c1bf77 Mon Sep 17 00:00:00 2001
From: Marc Mao <marc.mao@intel.com>
Date: Sat, 12 Oct 2019 14:23:18 +0800
Subject: [PATCH] Hide view decors and send task id to SurfaceFlinger

Change-Id: I5ec170ca1029a390df01a69d0bfc57451b1c896e
Tracked-On:
Signed-off-by: Marc Mao <marc.mao@intel.com>
---
 .../android/internal/policy/DecorView.java    | 14 ++++++++++----
 .../internal/widget/DecorCaptionView.java     |  6 ++++++
 .../server/wm/WindowStateAnimator.java        | 19 ++++++++++++++++---
 3 files changed, 32 insertions(+), 7 deletions(-)

diff --git a/core/java/com/android/internal/policy/DecorView.java b/core/java/com/android/internal/policy/DecorView.java
index 6ad1d72eaec..63efab221e0 100644
--- a/core/java/com/android/internal/policy/DecorView.java
+++ b/core/java/com/android/internal/policy/DecorView.java
@@ -83,6 +83,7 @@ import android.view.animation.AnimationUtils;
 import android.view.animation.Interpolator;
 import android.widget.FrameLayout;
 import android.widget.PopupWindow;
+import android.os.SystemProperties;
 
 import static android.app.WindowConfiguration.PINNED_WINDOWING_MODE_ELEVATION_IN_DIP;
 import static android.app.WindowConfiguration.WINDOWING_MODE_FREEFORM;
@@ -117,9 +118,9 @@ public class DecorView extends FrameLayout implements RootViewSurfaceTaker, Wind
     private static final boolean SWEEP_OPEN_MENU = false;
 
     // The height of a window which has focus in DIP.
-    private final static int DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP = 20;
+    private static int mDecorShadowFocusedHeightInDip = 20;
     // The height of a window which has not in DIP.
-    private final static int DECOR_SHADOW_UNFOCUSED_HEIGHT_IN_DIP = 5;
+    private static int mDecorShadowUnfocusedHeightInDip = 5;
 
     public static final ColorViewAttributes STATUS_BAR_COLOR_VIEW_ATTRIBUTES =
             new ColorViewAttributes(SYSTEM_UI_FLAG_FULLSCREEN, FLAG_TRANSLUCENT_STATUS,
@@ -255,6 +256,11 @@ public class DecorView extends FrameLayout implements RootViewSurfaceTaker, Wind
         super(context);
         mFeatureId = featureId;
 
+        if(SystemProperties.getBoolean("ro.sys.force.freeform", false)) {
+            mDecorShadowFocusedHeightInDip = 0;
+            mDecorShadowUnfocusedHeightInDip = 0;
+        }
+
         mShowInterpolator = AnimationUtils.loadInterpolator(context,
                 android.R.interpolator.linear_out_slow_in);
         mHideInterpolator = AnimationUtils.loadInterpolator(context,
@@ -2205,13 +2211,13 @@ public class DecorView extends FrameLayout implements RootViewSurfaceTaker, Wind
                 getResources().getConfiguration().windowConfiguration.getWindowingMode();
         if ((windowingMode == WINDOWING_MODE_FREEFORM) && !isResizing()) {
             elevation = hasWindowFocus() ?
-                    DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP : DECOR_SHADOW_UNFOCUSED_HEIGHT_IN_DIP;
+                    mDecorShadowFocusedHeightInDip : mDecorShadowUnfocusedHeightInDip;
             // Add a maximum shadow height value to the top level view.
             // Note that pinned stack doesn't have focus
             // so maximum shadow height adjustment isn't needed.
             // TODO(skuhne): Remove this if clause once b/22668382 got fixed.
             if (!mAllowUpdateElevation) {
-                elevation = DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP;
+                elevation = mDecorShadowFocusedHeightInDip;
             }
             // Convert the DP elevation into physical pixels.
             elevation = dipToPx(elevation);
diff --git a/core/java/com/android/internal/widget/DecorCaptionView.java b/core/java/com/android/internal/widget/DecorCaptionView.java
index b4191136035..d156dff69c8 100644
--- a/core/java/com/android/internal/widget/DecorCaptionView.java
+++ b/core/java/com/android/internal/widget/DecorCaptionView.java
@@ -20,6 +20,7 @@ import android.content.Context;
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.os.RemoteException;
+import android.os.SystemProperties;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.view.GestureDetector;
@@ -335,6 +336,11 @@ public class DecorCaptionView extends ViewGroup implements View.OnTouchListener,
     private void updateCaptionVisibility() {
         // Don't show the caption if the window has e.g. entered full screen.
         boolean invisible = isFillingScreen() || !mShow;
+
+        if(SystemProperties.getBoolean("ro.sys.force.freeform", false)) {
+            invisible = true;
+        }
+
         mCaption.setVisibility(invisible ? GONE : VISIBLE);
         mCaption.setOnTouchListener(this);
     }
diff --git a/services/core/java/com/android/server/wm/WindowStateAnimator.java b/services/core/java/com/android/server/wm/WindowStateAnimator.java
index 3eef12540e7..410e1587924 100644
--- a/services/core/java/com/android/server/wm/WindowStateAnimator.java
+++ b/services/core/java/com/android/server/wm/WindowStateAnimator.java
@@ -56,6 +56,7 @@ import android.graphics.RectF;
 import android.graphics.Region;
 import android.os.Debug;
 import android.os.Trace;
+import android.os.SystemProperties;
 import android.util.Slog;
 import android.util.proto.ProtoOutputStream;
 import android.view.DisplayInfo;
@@ -509,9 +510,21 @@ class WindowStateAnimator {
                 flags |= SurfaceControl.OPAQUE;
             }
 
-            mSurfaceController = new WindowSurfaceController(mSession.mSurfaceSession,
-                    attrs.getTitle().toString(), width, height, format, flags, this,
-                    windowType, ownerUid);
+            if(SystemProperties.getBoolean("ro.sys.force.freeform", false)) {
+                StringBuilder name = new StringBuilder(attrs.getTitle().toString());
+                Task task = mWin.getTask();
+                if (task != null) {
+                    name.append("-s" + task.mStack.mStackId + "-t" + task.mTaskId + "-u" + task.mUserId);
+                }
+
+                mSurfaceController = new WindowSurfaceController(mSession.mSurfaceSession,
+                        name.toString(), width, height, format, flags, this,
+                        windowType, ownerUid);
+            } else {
+                mSurfaceController = new WindowSurfaceController(mSession.mSurfaceSession,
+                        attrs.getTitle().toString(), width, height, format, flags, this,
+                        windowType, ownerUid);
+           }
 
             setOffsetPositionForStackResize(false);
             mSurfaceFormat = format;
-- 
2.21.0

