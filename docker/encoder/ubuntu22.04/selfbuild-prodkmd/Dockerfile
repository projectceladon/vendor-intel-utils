# Copyright (C) 2020-2022 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# This file is automatically generated from .m4 template.
# To update, modify the template and regenerate.

ARG IMAGE=ubuntu:22.04
FROM $IMAGE AS base

FROM base as build

RUN mkdir -p /opt/build && mkdir -p /opt/dist

ENV PKG_CONFIG_PATH=/opt/lib/pkgconfig

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    cmake && \
  rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    automake \
    ca-certificates \
    gcc \
    libdrm-dev \
    libtool \
    make \
    pkg-config \
    wget \
    libx11-dev \
    libxext-dev \
    libxfixes-dev \
     && \
  rm -rf /var/lib/apt/lists/*
# build libva2
ARG LIBVA2_REPO=https://github.com/intel/libva/archive/2.16.0.tar.gz
RUN cd /opt/build && \
  wget -O - ${LIBVA2_REPO} | tar xz
RUN cd /opt/build/libva-2.16.0 && \
  ./autogen.sh --prefix=/opt --libdir=/opt/lib && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    g++ \
    make \
    wget && \
  rm -rf /var/lib/apt/lists/*

# build gmmlib
ARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/intel-gmmlib-22.3.0.tar.gz
RUN cd /opt/build && \
  wget -O - ${GMMLIB_REPO} | tar xz
RUN cd /opt/build/gmmlib-intel-gmmlib-22.3.0 && mkdir build && cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/opt \
    -DCMAKE_INSTALL_LIBDIR=/opt/lib \
    .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    g++ \
    make \
    patch \
    pkg-config \
    wget && \
  rm -rf /var/lib/apt/lists/*
# build media driver
ARG MEDIA_DRIVER_REPO=https://github.com/intel/media-driver/archive/intel-media-22.6.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${MEDIA_DRIVER_REPO} | tar xz
RUN cd /opt/build/media-driver-intel-media-22.6.1 && mkdir build && cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/opt \
    -DCMAKE_INSTALL_LIBDIR=/opt/lib \
    -DENABLE_PRODUCTION_KMD=ON \
    .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    automake \
    ca-certificates \
    gcc \
    g++ \
    libdrm-dev \
    libtool \
    make \
    pkg-config \
    wget && \
  rm -rf /var/lib/apt/lists/*
# build libva2-utils
ARG LIBVA2_UTILS_REPO=https://github.com/intel/libva-utils/archive/2.16.0.tar.gz
RUN cd /opt/build && wget -O - ${LIBVA2_UTILS_REPO} | tar xz
RUN cd /opt/build/libva-utils-2.16.0 && \
  ./autogen.sh --prefix=/opt --libdir=/opt/lib && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    automake \
    ca-certificates \
    gcc \
    g++ \
    make \
    pkg-config \
    wget \
    cmake \
    dh-autoreconf && \
  rm -rf /var/lib/apt/lists/*
ARG ONEVPL_REPO=https://github.com/oneapi-src/oneVPL/archive/v2023.0.0.tar.gz
RUN cd /opt/build && \
  wget -O - ${ONEVPL_REPO} | tar xz
# build oneVPL
RUN cd /opt/build/oneVPL-2023.0.0 && \
    mkdir build && cd build && \
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/opt \
      -DCMAKE_INSTALL_LIBDIR=/opt/lib \
      .. && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    gcc \
    g++ \
    wget \
    pkg-config \
    cmake \
    make && \
  rm -rf /var/lib/apt/lists/*
ARG ONEVPLGPU_REPO=https://github.com/oneapi-src/oneVPL-intel-gpu/archive/intel-onevpl-22.6.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${ONEVPLGPU_REPO} | tar xz
# build oneVPL gpu
RUN cd /opt/build/oneVPL-intel-gpu-intel-onevpl-22.6.1 && \
    mkdir -p _build && cd _build && \
    cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/opt \
    -DCMAKE_INSTALL_LIBDIR=/opt/lib \
    -DMFX_ENABLE_AENC=OFF \
    .. && \
    make -j$(nproc) && \
    make install DESTDIR=/opt/dist && \
    make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    gcc \
    g++ \
    make \
    pkg-config \
    wget && \
  rm -rf /var/lib/apt/lists/*
# build media sdk
ARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/intel-mediasdk-22.6.1.tar.gz
RUN cd /opt/build && \
  wget -O - ${MSDK_REPO} | tar xz
RUN cd /opt/build/MediaSDK-intel-mediasdk-22.6.1 && \
  mkdir -p build && cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/opt \
    -DCMAKE_INSTALL_LIBDIR=/opt/lib \
    -DBUILD_SAMPLES=OFF \
    -DBUILD_TUTORIALS=OFF \
    .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    gcc \
    g++ \
    git \
    make \
    patch \
    pkg-config \
    xz-utils \
    yasm && \
  rm -rf /var/lib/apt/lists/*
ARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg.git
RUN git clone $FFMPEG_REPO /opt/build/ffmpeg && \
  cd /opt/build/ffmpeg && \
  git checkout d79c240

RUN cd /opt/build/ffmpeg && \
  ./configure \
  --prefix=/opt \
  --libdir=/opt/lib \
  --disable-static \
  --disable-doc \
  --enable-shared \
  --enable-libvpl \
  && make -j $(nproc --all) \
  && make install DESTDIR=/opt/dist \
  && make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    cmake \
    gcc \
    g++ \
    git \
    libyaml-cpp-dev \
    make \
    pkg-config \
    xz-utils && \
  rm -rf /var/lib/apt/lists/*
ARG LIBVHAL_CLIENT_REPO=https://github.com/projectceladon/libvhal-client.git
RUN git clone $LIBVHAL_CLIENT_REPO /opt/build/libvhal-client && \
  cd /opt/build/libvhal-client && \
  git checkout 1b275c4 && \
  mkdir -p build && cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=/opt \
        -DCMAKE_INSTALL_LIBDIR=/opt/lib \
        -DBUILD_EXAMPLES=OFF \
        -DBUILD_EMULATOR_APP=ON \
        .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    cmake \
    gcc \
    g++ \
    libdrm-dev \
    make \
    patch \
    pkg-config && \
  rm -rf /var/lib/apt/lists/*
COPY sources/encoder /opt/build/encoder

RUN cd /opt/build/encoder \
  && mkdir _build && cd _build \
  && cmake \
    -DCMAKE_C_FLAGS="-D_FORTIFY_SOURCE=2 -fstack-protector-strong" \
    -DCMAKE_CXX_FLAGS="-D_FORTIFY_SOURCE=2 -fstack-protector-strong" \
    -DHARDWARE_PLATFROM=sg2 \
    -DCMAKE_INSTALL_PREFIX=/opt \
    -DCMAKE_INSTALL_LIBDIR=/opt/lib \
    .. \
  && make VERBOSE=1 -j $(nproc --all) \
  && make install DESTDIR=/opt/dist \
  && make install


RUN echo "Start cleanup" && \
    rm -rf /opt/dist//opt/include && \
    rm -rf /opt/dist//opt/share/doc && \
    rm -rf /opt/dist//opt/share/gtk-doc && \
    rm -rf /opt/dist//opt/share/man && \
    ( find /opt/dist -name "*.a" -exec rm -f {} \; ) && \
    echo "Cleanup done"

# Ok, here goes the final image end-user will actually see
FROM base

LABEL vendor="Intel Corporation"

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libdrm2 \
    libx11-6 \
    libxext6 \
    libxfixes3 \
    libyaml-cpp0.7 \
    iproute2 \
    sudo \
    wget && \
  rm -rf /var/lib/apt/lists/*

COPY --from=build /opt/dist /
RUN echo "/opt/lib" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig

ENV ONEVPL_SEARCH_PATH=/opt/lib/
# Installing entrypoint helper scripts
COPY assets/demo-alive /usr/bin/
COPY assets/demo-bash /usr/bin/
COPY assets/hello-bash /usr/bin/
COPY assets/demo-setup /opt/bin/

RUN { \
  echo "export DEMO_NAME=ga"; \
  echo "export DEMO_PREFIX=/opt"; \
  echo "export MANPATH=\$DEMO_PREFIX/share/man:\$MANPATH"; \
  echo "export PATH=\$DEMO_PREFIX/bin:\$PATH"; \
  echo "export LIBVA_DRIVER_NAME=iHD"; \
  echo "export DEVICE=\${DEVICE:-/dev/dri/renderD128}"; \
} > /etc/demo.env

# Create default container user <user>
RUN groupadd -r user && useradd -lrm -s /bin/bash -g user user
RUN usermod -aG sudo user
RUN sed -i -e "s/%sudo.*/%sudo ALL=(ALL) NOPASSWD:ALL/g" /etc/sudoers


# Setting up environment common for all samples

# Check running container healthy status with:
#  docker inspect --format="{{json .State.Health}}" <container-id>
HEALTHCHECK CMD /usr/bin/demo-alive

# hello-bash is a default command which will be executed by demo-bash if
# user did not provide any arguments starting the container. Basically hello-bash
# will print welcome message and enter regular bash with correct environment.
CMD ["/usr/bin/hello-bash"]

# demo-bash will execute whatever command is provided by the user making
# sure that environment settings are correct.
ENTRYPOINT ["/usr/bin/demo-bash"]

USER user
WORKDIR /home/user

COPY entry/encoder-entry /
ENTRYPOINT ["/encoder-entry"]
