# Copyright (C) 2020-2022 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0


# This file is automatically generated from .m4 template.
# To update, modify the template and regenerate.

ARG IMAGE=ubuntu:22.04
FROM $IMAGE AS base

FROM base as build

RUN mkdir -p /opt/build && mkdir -p /opt/dist

ENV PKG_CONFIG_PATH=/opt/lib/pkgconfig

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    xz-utils && \
  rm -rf /var/lib/apt/lists/*
COPY prebuilt/owt /opt/build/owt
RUN cp -rd /opt/build/owt/* /opt/dist && \
    cp -rd /opt/build/owt/* /


RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    cmake \
    gcc \
    g++ \
    git \
    make \
    pkg-config \
    xz-utils && \
  rm -rf /var/lib/apt/lists/*
ARG LIBVHAL_CLIENT_REPO=https://github.com/projectceladon/libvhal-client.git
RUN git clone $LIBVHAL_CLIENT_REPO /opt/build/libvhal-client && \
  cd /opt/build/libvhal-client && \
  git checkout 1b275c4 && \
  mkdir -p build && cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=/opt \
        -DCMAKE_INSTALL_LIBDIR=/opt/lib \
        -DBUILD_EXAMPLES=OFF \
        -DBUILD_EMULATOR_APP=OFF \
        .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    cmake \
    gcc \
    g++ \
    git \
    libasio-dev \
    libssl-dev \
    libwebsocketpp-dev \
    make \
    pkg-config \
    rapidjson-dev && \
  rm -rf /var/lib/apt/lists/*
ARG SIOCLIENT_REPO=https://github.com/socketio/socket.io-client-cpp.git
RUN git clone $SIOCLIENT_REPO /opt/build/sioclient && \
  cd /opt/build/sioclient && \
  git checkout 2.0.0 && \
  mkdir build && cd build && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=/opt \
    -DCMAKE_INSTALL_LIBDIR=/opt/lib \
    -DBUILD_SHARED_LIBS=ON \
    .. && \
  make -j$(nproc) && \
  make install && \
  make install DESTDIR=/opt/dist

RUN { \
  echo "prefix=/opt"; \
  echo "libdir=/opt/lib"; \
  echo "includedir=/opt/include"; \
  echo ""; \
  echo "Name: sioclient"; \
  echo "Description: Socket.IO C++ Client"; \
  echo "Version: 2.0.0"; \
  echo ""; \
  echo "Libs: -L\${libdir} -lsioclient"; \
  echo "Cflags: -I\${includedir}"; \
  } > /opt/build/sioclient/sioclient.pc
RUN mkdir -p /opt/lib/pkgconfig && \
  cp /opt/build/sioclient/sioclient.pc /opt/lib/pkgconfig/ && \
  mkdir -p /opt/dist//opt/lib/pkgconfig && \
  cp /opt/build/sioclient/sioclient.pc /opt/dist//opt/lib/pkgconfig/

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libssl-dev \
    libgtest-dev \
    make \
    nlohmann-json3-dev \
    pkg-config \
    libprotobuf-dev \
    protobuf-compiler && \
  rm -rf /var/lib/apt/lists/*
COPY sources/streamer /opt/build/streamer

ENV GAPATH=/opt/build
RUN cd /opt/build/streamer && \
  mkdir build && cd build && \
  cmake  \
    -DCMAKE_C_FLAGS="-Wformat -Wformat-security -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong" \
    -DCMAKE_CXX_FLAGS="-Wformat -Wformat-security -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong" \
    -DCMAKE_INSTALL_PREFIX=/opt \
    -DCMAKE_INSTALL_LIBDIR=/opt/lib \
    -DCMAKE_VERBOSE_MAKEFILE=ON \
    .. && \
  make -j$(nproc) && \
  make install DESTDIR=/opt/dist && \
  make install


RUN echo "Start cleanup" && \
    rm -rf /opt/dist//opt/include && \
    rm -rf /opt/dist//opt/share/doc && \
    rm -rf /opt/dist//opt/share/gtk-doc && \
    rm -rf /opt/dist//opt/share/man && \
    ( find /opt/dist -name "*.a" -exec rm -f {} \; ) && \
    echo "Cleanup done"

# Ok, here goes the final image end-user will actually see
FROM base

LABEL vendor="Intel Corporation"

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    openssl \
    iproute2 \
    pulseaudio \
    libprotobuf23 \
    sudo \
    wget && \
  rm -rf /var/lib/apt/lists/*

COPY --from=build /opt/dist /
RUN echo "/opt/lib" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig

# Installing entrypoint helper scripts
COPY assets/demo-alive /usr/bin/
COPY assets/demo-bash /usr/bin/
COPY assets/hello-bash /usr/bin/
COPY assets/demo-setup /opt/bin/

RUN { \
  echo "export DEMO_NAME=ga"; \
  echo "export DEMO_PREFIX=/opt"; \
  echo "export MANPATH=\$DEMO_PREFIX/share/man:\$MANPATH"; \
  echo "export PATH=\$DEMO_PREFIX/bin:\$PATH"; \
  echo "export LIBVA_DRIVER_NAME=iHD"; \
  echo "export DEVICE=\${DEVICE:-/dev/dri/renderD128}"; \
} > /etc/demo.env

# Create default container user <user>
RUN groupadd -r user && useradd -lrm -s /bin/bash -g user user
RUN usermod -aG sudo user
RUN sed -i -e "s/%sudo.*/%sudo ALL=(ALL) NOPASSWD:ALL/g" /etc/sudoers

RUN echo "default-sample-rate = 48000" >> /etc/pulse/daemon.conf

# Setting up environment common for all samples

# Check running container healthy status with:
#  docker inspect --format="{{json .State.Health}}" <container-id>
HEALTHCHECK CMD /usr/bin/demo-alive

# hello-bash is a default command which will be executed by demo-bash if
# user did not provide any arguments starting the container. Basically hello-bash
# will print welcome message and enter regular bash with correct environment.
CMD ["/usr/bin/hello-bash"]

# demo-bash will execute whatever command is provided by the user making
# sure that environment settings are correct.
ENTRYPOINT ["/usr/bin/demo-bash"]

USER user
WORKDIR /home/user

COPY entry/streamer-entry /
ENTRYPOINT ["/streamer-entry"]
